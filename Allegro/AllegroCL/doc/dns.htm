<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>The Domain Naming System Utility</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dns.htm">8.1 version</a></td></tr></table><h1 id="2">The Domain Naming System Utility</h1><p id="3">This document contains the following sections:</p><a href="#dns-intro-1">1.0 The Allegro CL Domain Naming System Package</a><br><a href="#dns-nameserver-1">2.0 Nameserver</a><br><a href="#dns-api-1">3.0 The DNS API</a><br>&nbsp;&nbsp;&nbsp;<a href="#address-queries-2">3.1 Address queries</a><br>&nbsp;&nbsp;&nbsp;<a href="#inverse-queries-2">3.2 Inverse queries</a><br>&nbsp;&nbsp;&nbsp;<a href="#mx-queries-2">3.3 MX queries</a><br>&nbsp;&nbsp;&nbsp;<a href="#txt-queries-2">3.4 TXT queries</a><br>&nbsp;&nbsp;&nbsp;<a href="#undecoded-responses-2">3.5 Undecoded responses</a><br>&nbsp;&nbsp;&nbsp;<a href="#repeat-timeout-2">3.6 Repeat and timeout</a><br><hr><hr><h2 id="4"><a name="dns-intro-1">1.0 The Allegro CL Domain Naming System Package</a></h2>

<p id="5">
The DNS utility implements the client side of the <strong>dns</strong>
protocol defined in <a href="http://info.internet.isi.edu:80/in-notes/rfc/files/rfc1035.txt"><strong>rfc1035</strong></a>.
<strong>dns</strong> is a distributed database that records
information about computer names and IP addresses. The symbols naming
objects in this utility are in the <code>acl-socket</code>
package.  See <a href="socket.htm">socket.htm</a> for more information on
sockets in Allegro CL.
</p>

<p id="6">
There are three kinds of information this package can extract at this
time (in the future we may add other functionality):
</p>

<ol>
  <li id="7">Determine the IP address or IP addresses of a given hostname</li>
  <li id="8">Determine the hostname associated with a given IP address</li>
  <li id="9">Determine to which machine email addressed to a certain machine should be sent.</li>
</ol>


<p id="10">
Typically programs access <strong>dns</strong> information using a set
of C library functions. Unfortunately, these functions return
only a portion of the information needed and they work in a way that
can interact poorly with a multi-threaded Lisp
application. The <strong>acldns</strong> utility addresses
these shortcomings.
</p>

<p id="11">
The <strong>acldns</strong> module may not be loaded into your
image. Evaluate
</p>
<pre id="12">
(require :acldns)
</pre>
<p id="13">
to ensure the functionality is available.
</p>

<p id="14">
The variable <a href="variables/socket/s_dns-mode_s.htm"><code>*dns-mode*</code></a> selects whether the C library
functions or <strong>acldns</strong> functions are used by the Lisp
dns lookup functions 
<a href="operators/socket/lookup-hostname.htm"><b>lookup-hostname</b></a> and
<a href="operators/socket/ipaddr-to-hostname.htm"><b>ipaddr-to-hostname</b></a>.
</p>

<hr><hr><h2 id="15"><a name="dns-nameserver-1">2.0 Nameserver</a></h2>

<p id="16">
A nameserver is a program that implements the server side of the
<strong>dns</strong> protocol. A nameserver is also the
authority about the machines on a small section (or
<strong>zone</strong>) of the network. When given a
<strong>dns</strong> query, a nameserver will check to see if that's
information it knows directly, and if not a nameserver will use the
<strong>dns</strong> client protocol to find out which nameserver does
know the answer to the query and it will ask that
nameserver. Thus a nameserver gives the appearance of
knowing everything when in fact the information is distributed across
the internet.
</p>

<p id="17">
There is a small but important set of nameservers that will not seek
out answers to questions they can't answer directly. These
are the <strong>root</strong> nameservers, the ones that answer
queries for information in the top level domains (".com",
".edu", .etc). 
</p>

<p id="18">
In order to use this <strong>dns</strong> utility, you must specify
one or more nameservers, and these nameservers must be willing to seek
out answers to questions they don't know. You can't choose one of the
<strong>root</strong> nameservers for this purpose. The best
nameservers to select are the ones that your computer is setup to use
for other network programs. The <a href="operators/socket/configure-dns.htm"><b>configure-dns</b></a> function handles this
configuration task.
</p>

<hr><hr><h2 id="19"><a name="dns-api-1">3.0 The DNS API</a></h2>

<p id="20">
The functions in the DNS API are:
</p>

<ul>
<li id="21"><a href="operators/socket/dns-query.htm"><b>dns-query</b></a></li>
<li id="22"><a href="operators/socket/dns-lookup-hostname.htm"><b>dns-lookup-hostname</b></a></li>
<li id="23"><a href="operators/socket/dns-ipaddr-to-hostname.htm"><b>dns-ipaddr-to-hostname</b></a></li>
<li id="24"><a href="operators/socket/configure-dns.htm"><b>configure-dns</b></a></li>
</ul>

<p id="25">
The main function is <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a>. Two easier to use
functions are <a href="operators/socket/dns-lookup-hostname.htm"><b>socket:dns-lookup-hostname</b></a> and <a href="operators/socket/dns-ipaddr-to-hostname.htm"><b>socket:dns-ipaddr-to-hostname</b></a>
which are designed to replace <a href="operators/socket/lookup-hostname.htm"><b>socket:lookup-hostname</b></a> and <a href="operators/socket/ipaddr-to-hostname.htm"><b>socket:ipaddr-to-hostname</b></a>.
</p>

<p id="26">
<a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> supports
IPv6 (Internat Protocol version 6) addresses.
</p>


<p id="27">
The variables are:
</p>

<ul>
<li id="28"><a href="variables/socket/s_dns-mode_s.htm"><code>*dns-mode*</code></a></li>
<li id="29"><a href="variables/socket/s_nameservers_s.htm"><code>*nameservers*</code></a></li>
<li id="30"><a href="variables/socket/s_dns-domain_s.htm"><code>*dns-domain*</code></a></li>
<li id="31"><a href="variables/socket/s_domain-search-list_s.htm"><code>*domain-search-list*</code></a></li>
</ul>



<p id="32">
In the following subsections, there are examples of using <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> in a variety of ways. If
when running the examples you get an error about dns not being
configured, then see <a href="operators/socket/configure-dns.htm"><b>configure-dns</b></a>.
</p>


<hr><h2 id="33"><a name="address-queries-2">3.1 Address queries</a></h2>

<p id="34">
The default query is to determine the IP address associated with a
given name.  Here we chose the popular web site name <a href="http://www.cnn.com"><strong>www.cnn.com</strong></a>.
This name has a large number of associated IP addresses. We
arbitrarily pick one of the addresses to return as the first value,
and put the rest of the addresses in a list to return as the third
value. The second value, 300, is the number of seconds that this
response is valid.
</p>

<pre id="35">
user(5): (socket:dns-query "www.cnn.com")
3474540534
300
(3474540293 3474540294 3474540295 3474540296 3474540297 3474540300 3474540308
3474540310 3474540311 3474540312 ...)
user(6): 
</pre>



<p id="36">
We didn't specify a value for <i>queue</i> which means that
it defaulted to true. This means that the request was
first checked against our cache and if not found there the request was
sent out to the nameservers. Once the response was found it was
stored in the cache.
</p>

<p id="37">
To see the effect of the cache, let's run the query a second time:
</p>

<pre id="38">
user(6): (socket:dns-query "www.cnn.com")
3474540534
190
(3474540293 3474540294 3474540295 3474540296 3474540297 3474540300 3474540308
3474540310 3474540311 3474540312 ...)
user(7): 
</pre>


<p id="39">
Note that all that has changed is the second value. In this case
our query was found in our local cache and we have 190 seconds of
valid time remaining out of the original 300. Now what if
we wait about 200 seconds and ask again:
</p>

<pre id="40">
user(7): (socket:dns-query "www.cnn.com")
3474540534
-10
(3474540293 3474540294 3474540295 3474540296 3474540297 3474540300 3474540308
3474540310 3474540311 3474540312 ...)
user(8):
</pre>

<p id="41">
Now all of the sudden we have a negative valid time.  What has
happened is that the cache was consulted and the entry found, however
the valid time had expired. What <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> decided was that
while the entry was no longer valid, it wasn't that far from valid (in
fact it was less than
<code>socket::*stale-entry-remove-time*</code> seconds invalid
(initially 30 minutes)). As a result <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> decided that this entry was worth
returning. So it did two things: it returned the stale entry with a
negative valid time (to denote a stale entry) and it sent off a
<strong>dns</strong> request to update the entry. Thus the next time
this request is made it will likely already have fresher
information. Given the slow rate at which data can change in
<strong>dns</strong>, you should not be concerned about using data
returned by <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> if
it is denoted as stale by having a negative valid time.
</p>


<p id="42">
Suppose you ask for the IP address of a machine that doesn't
exist:
</p>

<pre id="43">
user(8): (socket:dns-query "blorp.cnn.com")
nil
10400
nil
user(9): 
</pre>

<p id="44">
The first value returned in <code>nil</code>, meaning
there is no such machine, and the second value is how long you can
believe that there is no machine named <strong>blorp.cnn.com</strong>.
</p>


<p id="45">
There is one more case:
</p>

<pre id="46">
user(10): (socket:dns-query "www.bogusmachine.com")
nil
user(11): 
</pre>

<p id="47">
The distinguishing feature is that the implicit second value returned
(the valid time) is <code>nil</code>. This means that we
cannot determine whether or not this machine exists. This is due to
the nameserver responsible for supplying that information not
responding to our queries. When faced with this response the best
thing to do is to try again later.
</p>




<hr><h2 id="48"><a name="inverse-queries-2">3.2 Inverse queries</a></h2>

<p id="49">
A second type of query is where you like to determine the name
associated with an IP address. This information is stored
in different tables than the ones mapping names to IP
addresses. Thus this query may say that there is no name
that can map to an IP address when in fact there is, or it may return
a name that can't in fact map to an IP address.
</p>

<pre id="50">
user(11): (socket:dns-query 3474540310 :type :ptr)
"www2.cnn.com"
86400
nil
user(12):
</pre>

<p id="51">
An inverse query is done by specifying the <i>type</i>
value of <code>:ptr</code>. The IP address can also be specified
symbolically as in
</p>

<pre id="52">
user(14): (socket:dns-query "207.25.71.22" :type :ptr)
"www2.cnn.com"
86248
nil
user(15): 
</pre>


<p id="53">
If an ipv6 address (in structure or dotted form) is supplied and
<i>type</i> is <code>:ptr</code>, then a reverse
DNS lookup in the ip6.arpa domain is used.
</p>

<h4 id="54">
An example IPv6 inverse query
</h4>
<pre id="55">
cl-user(5): (socket:dns-query "2001:5c0:0:2::24" :type :ptr)
"www.6bone.net"
259200
nil
(:recursion-requested :recursion-ok :response)
</pre>





<hr><h2 id="56"><a name="mx-queries-2">3.3 MX queries</a></h2>

<p id="57">
The third type of query is for the Mail eXchanger record (MX record).
Many machines designate other machines as their email servers. Thus if
you want to mail to <a href="http://www.cnn.com"><strong>www.cnn.com</strong></a> you can't
just connect to the SMTP port of one of the <strong><a href="http://www.cnn.com">www.cnn.com</a></strong> IP addresses we
determined above. You first have to check if there is any MX
record for the machine.
</p>
<p id="58">
When making an mx query there are three possibilities. 
One is that there is no mx record (which means that mail for this host
should be sent to this host, not some other host)
</p>
<pre id="59">
cl-user(3): (socket:dns-query "www.franz.com" :type :mx)
nil
120
nil
</pre>
<p id="60">
The second possibility
is that there is an mx record and the responding nameserver
is kind enough to supply the IP address as well as the name of
the mx host:
</p>
<pre id="61">
cl-user(4): (socket:dns-query "tiger.franz.com" :type :mx)
("tiger.franz.com" 322990064 201)
		   ^^^^^^^^^------------------ the ip address
120
nil
</pre>
<p id="62">
The third possibility is
that there is an mx record to a host but the IP address 
of that host isn't returned:
</p>
<pre id="63">
cl-user(4): (socket:dns-query "tiger.franz.com" :type :mx)
("tiger.franz.com" nil 201)
		   ^^^------------------ no ip address
120
nil
</pre>
<p id="64">
The example above is constructed since the IP address was returned, as
shown in the example above it (the IP address there is not real,
however). This third case should be rare in practice, but can happen.
Here is another example:
</p>

<pre id="65">
user(2): (socket:dns-query "www.cnn.com" :type :mx)
("atlmail1.turner.com" 3327256260 10)
10132
(("atlmail2.turner.com" 3327256261 20) ("nymail1.turner.com" 3474478538 30))
user(3):
</pre>

<p id="66">
In this case we find that there are three machines willing to be the
mail server. For each machine we have three pieces of information. The
first is the name of the machine. The second is the IP address of the
machine. The third is the priority of the machine. If possible mail
should be sent to the machine with the lowest priority value.  <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> will always sort the
hosts by priority value when returning the list.
</p>

<p id="67">
If a machine doesn't have an MX record, then you can send mail
directly to the machine.
</p>



<hr><h2 id="68"><a name="txt-queries-2">3.4 TXT queries</a></h2>

<p id="69">
A fourth type of query is a TXT query. It gets the TXT records (if
any). DNS TXT records are strings containing information about the
named service. 
</p>
<p id="70">
You obtain TXT information by specifying <code>:txt</code> as
the value of the <i>type</i> keyword argument to <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a>. The answer will
be a list of one or more strings (because TXT records can be composed
of multiple strings), or <code>nil</code> if there are no
TXT records. If there is more than one TXT record, then the third
return value of <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> will contain a list of the
remaining answers.
</p>
<p id="71">
Here is an example showing the form of the call and possible responses
(these may not still work if you try them as the sites listed may have
changed in this regard):
</p>
<pre id="72">

(socket:dns-query "nytimes.com" :type :txt)
;; returns:
("v=spf1 mx ptr ip4:199.239.138.0/24 include:attglobal.net ~all")
300
nil
(:recursion-requested :recursion-ok :authoritative :response)


(dns-query "franz.com" :type :txt)
;; should return:
nil
120
nil
(:recursion-requested :recursion-ok :authoritative :response)
</pre>




<hr><h2 id="73"><a name="undecoded-responses-2">3.5 Undecoded responses</a></h2>

<p id="74">
In the examples above we've let the <i>decode</i>
argument take on it's default value of true.
This causes the return values to be appropriate to the query. If
you're interested in seeing what the nameserver returned you can set
<i>decode</i> to nil. This will bypass the cache
and send the request to the nameserver.
</p>

<pre id="75">
user(5): (socket:dns-query "www.whitehouse.gov" :decode nil)
#S(dns-response :id 3
     :flags
       (:recursion-requested :recursion-ok :authoritative :response)
     :flags-value 34176
     :answer
       (#S(dns-rr :name "www.whitehouse.gov" :type :a :class 1
                  :time-to-live 900 :answer 3330928732)
        #S(dns-rr :name "www.whitehouse.gov" :type :a :class 1
                  :time-to-live 900 :answer 3330928731))
     :authority
       (#S(dns-rr :name "whitehouse.gov" :type :ns :class 1
                  :time-to-live 10800 :answer "sec1.dns.psi.net")
        #S(dns-rr :name "whitehouse.gov" :type :ns :class 1
                  :time-to-live 10800 :answer "sec2.dns.psi.net"))
                  :additional nil)
user(6): 
</pre>

<p id="76">
The response from a <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> is either nil (if no nameserver
responded) or is a <strong>dns-response</strong> object. Each response
is returned with 16 bits of flags, and we convert that to a list of
symbols accessible via the accessor
<strong>dns-response-flags</strong> See rfc1035 for a description of
the flags. (Links to rfc1035 are in
<a href="#dns-intro-1">Section 1.0 The Allegro CL Domain Naming System Package</a> above.)  The
<strong>dns-response-answer</strong> accessor returns a list of
<strong>dns-rr</strong> records. Here we see that there are two IP
addresses for <strong>www.whitehouse.gov</strong>.
The <strong>dns-response-authority</strong> field is a list of the
nameservers which hold the information on which the answer is
based. The <strong>dns-response-additional</strong> is a list of other
<strong>dns-rr</strong> objects that might prove useful. For example
when an MX query is done and mail exchanger machine names are
returned, the additional field usually contains the IP addresses
associated with those machine names, thus saving you the trouble of
sending another query to retrieve those IP addresses.
</p>




<hr><h2 id="77"><a name="repeat-timeout-2">3.6 Repeat and timeout</a></h2>

<p id="78">
In the examples above we've used the default value of
<i>repeat</i> and <i>timeout</i> (which
are 5 and 5). This means that each query is sent up to 5 times and we
wait 5 seconds for a response each time. Thus in the case of a
non-responsive nameserver the <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> function
could take 25 seconds to return. You can control this possible delay
by setting <i>repeat</i> and
<i>timeout.</i> Some interesting possibilities are:
</p>

<ul>
  <li id="79"><code>:repeat 0</code> -- in this case there will be no 
    delay and a value
    will be returned only if it is already cached.
    A <strong>dns</strong> query will not
    be sent to a nameserver unless there is a value 
    in the cache and it is slightly stale, in
    which case a query will be sent to refresh that entry.</li>
  <li id="80"><code>:timeout 0</code> -- if the value is in the cache 
    then return it. 
    If the value is not in the cache then send a request exactly 
    once to the nameserver
    (regardless of the value of <i>repeat</i>). 
    <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> 
    will not wait for the response.
    At this point <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> will most likely
    return nil meaning no response from the server, however if 
    the nameserver is quick at
    responding and the Lisp scheduler happens to immediately 
    run the Lisp process receiving
    nameserver responses, there is a chance that 
    <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> will return the
    answer to the query. In any event the nameserver will likely
    respond to the query within a few seconds and if 
    <a href="operators/socket/dns-query.htm"><b>socket:dns-query</b></a> were 
    to be called again with
    the same arguments, it would find the answer in the cache 
    and return it.</li>
</ul>




</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dns.htm">8.1 version</a></td></tr></table></html>