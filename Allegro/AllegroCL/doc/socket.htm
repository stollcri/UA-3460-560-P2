<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Allegro CL Socket Library</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/socket.htm">8.1 version</a></td></tr></table><h1 id="2">Allegro CL Socket Library</h1><p id="3">This document contains the following sections:</p><a href="#socket-intro-1">1.0 Introduction and background</a><br><a href="#socket-ipv6-1">2.0 Support for Internet Protocol version 6 (IPv6)</a><br><a href="#ip-address-1">3.0 IP addresses in Allegro CL</a><br><a href="#socket-characteristics-1">4.0 Characteristics</a><br><a href="#stream-sockets-1">5.0 Stream Sockets</a><br>&nbsp;&nbsp;&nbsp;<a href="#connections-2">5.1 Connections</a><br>&nbsp;&nbsp;&nbsp;<a href="#host-naming-2">5.2 Host Naming</a><br><a href="#socket-variables-1">6.0 Variables</a><br><a href="#socket-functions-1">7.0 Functions</a><br><a href="#socket-errors-1">8.0 Errors</a><br><a href="#socket-examples-1">9.0 Examples</a><br><a href="#ssl-1">10.0 Secure Socket Layer (SSL)</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-history-2">10.1 SSL History</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-secure-connection-2">10.2 Secure connections</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-client-server-2">10.3 Client/Server</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-authentication-2">10.4 Authentication</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-certificates-2">10.5 Certificates</a><br>&nbsp;&nbsp;&nbsp;<a href="#ssl-api-2">10.6 The Allegro CL SSL API</a><br><hr><hr><h2 id="4"><a name="socket-intro-1">1.0 Introduction and background</a></h2>

<p id="5">Sockets are a mechanism for interprocess communication designed at
U.C. Berkeley for use in their version of Unix. Sockets have been
added to many other versions of Unix and there is an implementation of
sockets for Windows called <em>Winsock</em>. This document describes
the Allegro interface to sockets. This interface works on Unix and on
Windows.  </p>

<p id="6">
Symbols naming objects in the socket utility are in the
<code>acl-socket</code> package. It has the nickname
<code>socket</code>.
</p>

<p id="7">The socket module is not included in all versions of Allegro CL. If
it is present, it is (by default) included in a development image (one
built with the <em>include-devel-env</em> argument to <a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a> specified true). To
load the socket module if it is not present in an image, evaluate</p>

<pre id="8">
(require :sock)
</pre>

<p id="9">
Note that runtime images cannot include the development environment
(so <em>include-devel-env</em> must be specified <code>nil</code> when a runtime image is being built). If the
socket module is needed, it must be loaded when the image is
built. See <a href="runtime.htm">runtime.htm</a>,
<a href="building-images.htm">building-images.htm</a> and
<a href="delivery.htm">delivery.htm</a> for more information.
</p>


<hr><hr><h2 id="10"><a name="socket-ipv6-1">2.0 Support for Internet Protocol version 6 (IPv6)</a></h2>


<p id="11">
Allegro CL supports Internet Protocol version 6 sockets (IPv6
sockets).  As part of this support, several new functions have been
added and several functions have been modified. The new functions are
<a href="operators/socket/ipv6.htm"><b>ipv6</b></a>, <a href="operators/socket/get-ip-interfaces.htm"><b>get-ip-interfaces</b></a>, <a href="operators/socket/ipaddrp.htm"><b>ipaddrp</b></a>, <a href="operators/socket/ipaddr-equalp.htm"><b>ipaddr-equalp</b></a>, <a href="operators/socket/ipv6-address-p.htm"><b>ipv6-address-p</b></a>, and (added in a June,
s006 update) <a href="operators/socket/dotted-address-p.htm"><b>dotted-address-p</b></a>. The modified functions are
<a href="operators/socket/dotted-to-ipaddr.htm"><b>dotted-to-ipaddr</b></a>,
<a href="operators/socket/dns-query.htm"><b>dns-query</b></a>, <a href="operators/socket/lookup-hostname.htm"><b>lookup-hostname</b></a>, <a href="operators/socket/make-socket.htm"><b>make-socket</b></a>, and <a href="operators/socket/send-to.htm"><b>send-to</b></a>. There is also a new
variable <a href="variables/socket/s_ipv6_s.htm"><code>*ipv6*</code></a>.
</p>

<p id="12">
The feature <code>:ipv6</code> is added
to the <a href="../ansicl/dictentr/features.htm"><code>*features*</code></a> list to indicate IPv6 support. 
</p>

<h4 id="13">
IPv6 support may be unusable on MacOS X 64-bit
</h4>
<p id="14">
Because of apparent bugs in Mac OS X 64-bit, certain IPv6
functionality may be restricted or unusable. In particular:
</p>
<ul>
<li id="15">
The <a href="operators/socket/get-ip-interfaces.htm"><b>get-ip-interfaces</b></a>
function will signal an error.
</li>
<li id="16">
Name-based scope ids will not work.
</li>
</ul>



<hr><hr><h2 id="17"><a name="ip-address-1">3.0 IP addresses in Allegro CL</a></h2>

<p id="18">
Throughout the socket documentation, we make use of the term <b>IP
address</b>. But what exactly is an <b>IP address</b>? Unless further
clarified in the context in which it is used, an <b>IP address</b> is
either an unsigned 32-bit integer or an ipv6 address structure.
</p>
<p id="19">
The function <a href="operators/socket/ipaddrp.htm"><b>socket:ipaddrp</b></a> returns true when passed
an IP adress. That function can be used to identify an object as an IP
address. (Unsigned 32 bit integers obviously have other uses that
representing IP addresses. The function simply determines whether the
type and form of its argument is suitable as an IP address.)
</p>


<hr><hr><h2 id="20"><a name="socket-characteristics-1">4.0 Characteristics</a></h2>

<p id="21">There are three independent characteristics of sockets:</p>

<table border="1" width="95%" cellspacing="1" cellpadding="6">
  <tr>
    <td valign="top"><em>type</em></td>
    <td><p id="22">Valid values: <code>:stream</code> or <code>:datagram</code>. </p>
      <p id="23">A <code>:stream</code> socket offers a reliable, two-way, stream connection between
      sockets. <i>Reliable</i> means that what you send is received at the other end in the
      exact order you sent it. <i>Stream</i> means that the receiver reads a stream of bytes and
      sees no record boundaries. It uses the internet protocol TCP.</p>
      <p id="24">A <code>:datagram</code> socket offers unreliable, one-way, connectionless packet
      communication. <i>Unreliable</i> means that the packet may or may not be delivered.
      Packets may be delivered in an order other than in the order they were sent. Record
      boundaries are maintained: if the sender sends two ten byte packets and if the packets get
      through, the receiver will receive two ten byte packets rather than one twenty byte
      packet. For each packet you send you must give the destination address. It uses the
      internet protocol UDP.</p>
    </td>
  </tr>
  <tr>
    <td valign="top"><em>address family</em></td>
    <td><p id="25">Valid values: <code>:internet</code> or <code>:file</code>. </p>
    <p id="26">In order to send to
    another socket the socket must have a name. </p>



<p id="27">
An <code>:internet</code> socket is named by a 32-bit host number and
a 16-bit port number or an IPv6 address. 
</p>
<p id="28">
On Unix, port numbers less than 1024 can only be allocated by a
process with the user id of <i>root</i>. A <code>:file</code> socket
is named by a file on a local disk. This is called the <i>Unix</i>
address family but we've chosen to call it the
<code>:file</code> address family since it really isn't Unix
specific. This address family can only permit processes on the same
machine to communicate.
</p>

<p id="29">
Note that the current version of the socket interface on Windows
(Winsock, version 1.1), does <strong>not</strong> support the
<code>:file</code> address family.
</p>
</td>
</tr>
  <tr>
    <td valign="top"><em>format</em></td>
    <td><p id="30">Valid values: <code>:text</code> or <code>:binary</code>, or, for <code>:stream</code> sockets only, <code>:bivalent</code> (see note below)</p>
    <p id="31">This isn't a property of the Unix
    socket implementation but is instead something we've added for the Common Lisp
    implementation since a Lisp stream is either binary (supports <code>read-byte</code>,
    etc.) or text (supports <code>read-char</code>, etc.).</p></td>
  </tr>
</table>

<p id="32"><strong>Note on bivalent format:</strong></p>

<p id="33">Starting in release 5.0.1, the bivalent format is accepted for
stream sockets. Bivalent means that the stream will accept text and
binary stream functions. That is, you can <a href="../ansicl/dictentr/write-by.htm"><b>write-byte</b></a> or <a href="../ansicl/dictentr/write-ch.htm"><b>write-char</b></a>, <a href="../ansicl/dictentr/read-byt.htm"><b>read-byte</b></a> or <a href="../ansicl/dictentr/read-cha.htm"><b>read-char</b></a>.  A bivalent stream is useful in the
http protocol (used between web browsers and web servers) since in
that protocol the header data is sent in text format and the body can
be in binary data (image files, for example).</p>

<p id="34">Internally a bivalent socket stream is configured like a binary
socket stream with 8 bit bytes. Character position is not
maintained. </p>

<p id="35">Bivalent socket streams have very efficient read-sequence and
write-sequence implementations (as long as the sequence is either a
vector of element-type <code>character</code>, <code>(unsigned-byte
8)</code> or <code>(signed-byte 8)</code>).</p>

<p id="36">Bivalent socket streams also support the chunking protocol found in
http/1.1.  This protocol allows the sender to signal end of file
without closing down the stream.</p>

<hr><hr><h2 id="37"><a name="stream-sockets-1">5.0 Stream Sockets</a></h2>

<hr><h2 id="38"><a name="connections-2">5.1 Connections</a></h2>

<p id="39">Stream sockets have a fourth characteristic called <i>connect</i>,
with a value <code>:active</code> or
<code>:passive</code>. In order to use stream sockets you have
to set up a link between two of them. That link is called a
<i>connection</i>.  You set up a connection in this way: </p>

<ol>
<li id="40">
Machine A: create a passive socket at port <i>port-b</i>:
<pre id="41">
(setq s-a (make-socket :connect :passive :local-port <i>port-b</i>))
</pre>
</li>
<li id="42">
Machine B: create an active socket telling it to connect to Machine A,
port <i>port-b</i>: 
<pre id="43">
(setq s-b (make-socket :remote-host "machine-a" 
                       :remote-port <i>port-b</i>))
</pre>
</li>
<li id="44">
Machine A: wait for a connect request from anyone and when it occurs
return a stream for I/O:
<pre id="45">
(setq str-a (accept-connection s-a))
</pre>
</li>
<li id="46">
When the <a href="operators/socket/accept-connection.htm"><b>accept-connection</b></a> returns, machine A can
use stream <i>str-a</i> to send messages to machine B and machine B
can use stream <code><i>s-b</i></code> to send messages to machine A.
</li>
</ol>

<p id="47">Note that steps 2 and 3 can occur in either order.</p>

<p id="48">Note the asymmetry: a passive socket is not a Lisp stream (you
can't do read and write to it). An active socket is a Lisp stream.</p>

<p id="49">When <strong><code>accept-connection</code></strong> is called on a
passive socket, it does not return until a connection is made to the
passive socket. The value
<strong><code>accept-connection</code></strong> returns is a
stream.</p>

<p id="50">As long as the passive socket is not closed, new connections can
still be made to the port of that socket.</p>

<p id="51">An active socket can be used for only one connection. Once that
connection has been made, the socket should be closed and a new active
socket created.</p>



<hr><h2 id="52"><a name="host-naming-2">5.2 Host Naming</a></h2>

<p id="53">Host naming conventions: this package supports three conventions
for naming a host:</p>

<table border="0" width="95%" cellspacing="1" cellpadding="6">
  <tr>
    <td valign="top" width="8%"><i>hostname</i></td>
    <td>A string using the domain naming convention, e.g. "ftp.franz.com". The
    domain naming system is case-insensitive.</td>
  </tr>



<tr>
<td valign="top" width="8%">
<i>dotted</i>
</td>
<td>
A string which is the printed representation of the numeric address:
e.g. <code>"192.132.95.84"</code>.  We also support the non
standard Berkeley extensions to this format for class A addresses:
<code>"23.3"</code> (which is the same as
<code>"23.0.0.3"</code>) and class B addresses
<code>"128.1.3"</code> (which is the same as
<code>"128.1.0.3"</code>). IPv6 colon hex format, e.g.,
"fe80::209:5bff:fe8e:61c1", is also supported. See <a href="operators/socket/dotted-to-ipaddr.htm"><b>dotted-to-ipaddr</b></a>.
</td>
</tr>
<tr>
<td valign="top" width="8%"><i>ipaddr</i></td>
<td>An unsigned 32-bit number, representing the 
IPv4 address in the native byte order for
    the host. Thus 192.132.95.84 is 192*2^24 + 132*2^16 + 95*2^8 + 84 = 3229900628.</td>
  </tr>
<tr>
<td valign="top" width="8%"><i>IPv6</i></td>
<td>
An IPv6 address structure.
</td>
</tr>

</table>



<hr><hr><h2 id="54"><a name="socket-variables-1">6.0 Variables</a></h2>

<p id="55">The variables defined by the interface are:</p>

<p id="56"><a href="variables/socket/s_socket-version_s.htm"><code>*socket-version*</code></a></p>

<blockquote>
  <p id="57">Please provide the value of this variable when asking for technical support with
  sockets as it tells us whether you have the latest version.</p>
</blockquote>

<p id="58">
<a href="variables/socket/s_print-hostname-in-stream_s.htm"><code>*print-hostname-in-stream*</code></a></p>

<blockquote>
<p id="59">
This variable controls whether the socket printing code converts the
ip address of a socket into a hostname. This is usually what you want,
however this can be a slow process (taking up to a minute to
accomplish). The default value for this variable is <code>t</code>. See the full description for a discussion of the
causes of the possible slowdown when the value is <code>t</code>.
</p>
</blockquote>


<p id="60">
<a href="variables/socket/s_ipv6_s.htm"><code>*ipv6*</code></a>
</p>

<blockquote>
<p id="61">
Specifies the default value of the <i>ipv6</i> keyword
argument to <a href="operators/socket/lookup-hostname.htm"><b>lookup-hostname</b></a> and <a href="operators/socket/make-socket.htm"><b>make-socket</b></a>.
</p>
</blockquote>

<hr><hr><h2 id="62"><a name="socket-functions-1">7.0 Functions</a></h2>

<p id="63">The first table shows general functions defined by the interface
and the second shows accessors.</p>

<div align="left">

<table border="1" width="89%" cellspacing="1" cellpadding="6">
  <tr>
    <td width="26%" style="padding-top: 12px" valign="top"><strong>Function</strong></td>
    <td width="34%" style="padding-top: 12px" valign="top"><strong>Arguments</strong></td>
    <td width="40%" style="padding-top: 12px" valign="top"><strong>Notes 
    </strong>(follow function link for full description)</td>
  </tr>
  <tr>
    <td width="26%" height="95" valign="top"><a href="operators/socket/accept-connection.htm"><b>accept-connection</b></a></td>
    <td width="34%" height="95" valign="top"><em><code>(sock passive-socket) &key wait</code></em></td>
    <td width="40%" height="95">Generic function. Establishes a connection. If wait is <code>nil</code> and no connection is pending, returns <code>nil</code> and does nothing further. If wait is true (the default),
    waits until a connection is established. When a connection is established, returns the
    stream that communicates with the socket.</td>
  </tr>
  <tr>
    <td width="26%" height="38" valign="top"><a href="operators/socket/dotted-to-ipaddr.htm"><b>dotted-to-ipaddr</b></a></td>
    <td width="34%" height="38" valign="top"><em><code>dotted &key errorp</code></em></td>
    <td width="40%" height="38">Function. Converts a string like "192.132.95.84" or
    similar format to an unsigned 32-bit IP address.

<p id="64">
IPv6 "colon hex" address notation, including the %scopeid extension is
also supported as is IPv4-mapped IPv6 address notation
(::ffff:w.x.y.z).
</p>

</td>
  </tr>

<tr>
<td width="26%" height="38" valign="top"><a href="operators/socket/dotted-address-p.htm"><b>dotted-address-p</b></a></td>
<td width="34%" height="38" valign="top"><em><code>object</code></em></td>
<td width="40%" height="38">Function. Returns true if its argument is
a string in dotted IP address form.
</td>
</tr>


<tr>
<td width="26%" height="95" valign="top">
<a href="operators/socket/get-ip-interfaces.htm"><b>get-ip-interfaces</b></a>
</td>
<td width="34%" height="95" valign="top"> </td>
<td width="40%" height="95">Function. Returns a list of conses of interface id's and names.</td>
</tr>

  <tr>
    <td width="26%" height="38" valign="top"><a href="operators/socket/ipaddr-to-dotted.htm"><b>ipaddr-to-dotted</b></a></td>
    <td width="34%" height="38" valign="top"><em><code>ipaddr &key values</code></em></td>
    <td width="40%" height="38">Function. Convert a 32-bit unsigned IP address, <code>ipaddr</code>,
    to a string in dotted form. 

This function works on IPv6 address structures as well.

</td>
</tr>

<tr>
<td width="26%" height="95" valign="top">
<a href="operators/socket/ipaddr-equalp.htm"><b>ipaddr-equalp</b></a>
</td>
<td width="34%" height="95" valign="top"><em><code>add1 add2
&key compare-scope-id</code></em></td>
<td width="40%" height="95">Function. Returns true if its two internet address arguments match.</td>
</tr>

<tr>
<td width="26%" height="38" valign="top">
<a href="operators/socket/ipaddr-to-hostname.htm"><b>ipaddr-to-hostname</b></a>
</td>
<td width="34%" height="38" valign="top">
<i>ipaddr</i>
</td>
<td width="40%" height="38">
Function. Returns, as a string, the hostname of the machine with
address <i>ipaddr</i>.


<i>ipaddr</i> should be a 32-bit IP address or an IPv6
address structure or IPv6 colon hex strings.

</td>
</tr>

<tr>
<td width="26%" height="95" valign="top">
<a href="operators/socket/ipaddrp.htm"><b>ipaddrp</b></a>
</td>
<td width="34%" height="95" valign="top"><em><code>object</code></em></td>
<td width="40%" height="95">Function. Returns true if its argument is an 
IP address.</td>
</tr>


<tr>
<td width="26%" height="95" valign="top"><a href="operators/socket/ipv6.htm"><b>ipv6</b></a>
</td>
<td width="34%" height="95" valign="top"><em><code>internet-socket</code></em></td>
<td width="40%" height="95">Generic function. Returns true if its argument is an IPv6 socket.</td>
</tr>


<tr>
<td width="26%" height="95" valign="top">
<a href="operators/socket/ipv6-address-p.htm"><b>ipv6-address-p</b></a>
</td>
<td width="34%" height="95" valign="top"><em><code>object</code></em></td>
<td width="40%" height="95">Function. Returns true if its argument is an 
IPv6 address structure.</td>
</tr>

<tr>
<td width="26%" height="59" valign="top"><a href="operators/socket/lookup-hostname.htm"><b>lookup-hostname</b></a></td> 
<td width="34%" height="38" valign="top"><i>hostname</i></td>
<td width="40%" height="59">


Given a string naming a host, a 
32-bit IP address, a string
in dotted form, or a IPv6 address structure or IPv6 colon hex strings,
return the 32-bit IP address for the host.

</td>
</tr>
<tr>
<td width="26%" height="19" valign="top"><a href="operators/socket/lookup-port.htm"><b>lookup-port</b></a></td>
<td width="34%" height="19" valign="top"><code><em>portname
protocol</em></code></td>
<td width="40%" height="19">Function. Finds the port number using the symbolic name and
the protocol.</td>
</tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/make-socket.htm"><b>make-socket</b></a></td>
    <td width="34%" height="19" valign="top"><em><code>&key type format address-family
    connect eol ipv6 scope-id 
    &allow-other-keys</code></em></td>
    <td width="40%" height="19">Function. See the full description for details.</td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/with-pending-connect.htm"><b>with-pending-connect</b></a></td>
    <td width="34%" height="19" valign="top"><em><code>&body body</code></em></td>
    <td width="40%" height="19">Macro. See the full description for details.</td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/receive-from.htm"><b>receive-from</b></a></td>
    <td width="34%" height="19" valign="top"><em><code>(sock datagram-socket) size &key
    buffer extract</code></em></td>
    <td width="40%" height="19">Generic function. This is used to read from a datagram socket.</td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/send-to.htm"><b>send-to</b></a></td>
<td width="34%" height="19" valign="top">
<em><code>sock &key 
remote-host remote-port ipv6 scope-id</code></em>
</td>
<td width="40%" height="19">
Generic function with methods for internet-datagram-sockets
and file-datagram-sockets
</td>
</tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/set-socket-options.htm"><b>set-socket-options</b></a></td> <td width="34%" height="19" valign="top"><em><code>sock &key</code></em></td>
    <td width="40%" height="19">Generic function for modifying
    existing sockets.</td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/shutdown.htm"><b>shutdown</b></a></td>
    <td width="34%" height="19" valign="top"><code><em>sock </em>&key<em> direction</em></code></td>
    <td width="40%" height="19">Generic function that closes 
    down the specified half of the
    bidirectional socket connection.</td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/socket-control.htm"><b>socket-control</b></a></td>
    <td width="34%" height="19" valign="top"><code><em>stream </em>&key<em>
    output-chunking output-chunking-eof input-chunking</em></code></td>
    <td width="40%" height="19">This function modifies the state of the socket stream,
    controlling input and output chunking. </td>
  </tr>
  <tr>
    <td width="26%" height="19" valign="top"><a href="operators/socket/socket-os-fd.htm"><b>socket-os-fd</b></a></td>
    <td width="34%" height="19" valign="top"><code><em>sock</em></code></td>
    <td width="40%" height="19">Generic function. Return the operating system file descriptor
    associated with this socket.</td>
  </tr>
</table>
</div>

<h4 id="65">Socket Accessors</h4>

<p id="66">These functions retrieve slot values from socket instances. The
values of these slots are set when the socket is created. </p>

<div align="left">

<table border="1" width="89%" cellspacing="1" cellpadding="6">
  <tr>
    <td width="26%" style="padding-top: 12px" valign="top" height="63"><strong>Function</strong></td>
    <td width="34%" style="padding-top: 12px" valign="top" height="63"><strong>Arguments</strong></td>
    <td width="40%" style="padding-top: 12px" valign="top" height="63"><strong>Notes
    
    </strong>(follow function link for full description)</td>
  </tr>
  <tr>
    <td width="26%" height="34"><a href="operators/socket/remote-host.htm"><b>remote-host</b></a></td>
    <td width="34%" height="34"><em><code>socket</code></em></td>
    <td width="40%" height="34">Generic function. Returns an IP address.</td>
  </tr>
  <tr>
    <td width="26%" height="34"><a href="operators/socket/local-host.htm"><b>local-host</b></a></td>
    <td width="34%" height="34"><em><code>socket</code></em></td>
    <td width="40%" height="34">Generic function. Returns an IP address.</td>
  </tr>
  <tr>
    <td width="26%" height="34"><a href="operators/socket/local-port.htm"><b>local-port</b></a></td>
    <td width="34%" height="34"><em><code>socket</code></em></td>
    <td width="40%" height="309" rowspan="8"><p id="67">All are generic functions. All return the values
    of the particular attribute for socket. </p>
    <p id="68"><strong>Note:</strong>
    Both internet stream and internet datagram sockets use 16-bit port numbers. </p>
    <p id="69">Note that stream (tcp) port N is totally distinct from datagram (udp) port N.  </p></td>
  </tr>
  <tr>
    <td width="26%" height="34"><a href="operators/socket/remote-filename.htm"><b>remote-filename</b></a></td>
    <td width="34%" height="34"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="34"><a href="operators/socket/local-filename.htm"><b>local-filename</b></a></td>
    <td width="34%" height="34"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="33"><a href="operators/socket/remote-port.htm"><b>remote-port</b></a></td>
    <td width="34%" height="33"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="33"><a href="operators/socket/socket-address-family.htm"><b>socket-address-family</b></a></td>
    <td width="34%" height="33"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="33"><a href="operators/socket/socket-connect.htm"><b>socket-connect</b></a></td>
    <td width="34%" height="33"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="33"><a href="operators/socket/socket-format.htm"><b>socket-format</b></a></td>
    <td width="34%" height="33"><em><code>socket</code></em></td>
  </tr>
  <tr>
    <td width="26%" height="33"><a href="operators/socket/socket-type.htm"><b>socket-type</b></a></td>
    <td width="34%" height="33"><em><code>socket</code></em></td>
  </tr>

<tr>
<td width="26%" height="33"><a href="operators/socket/ipv6.htm"><b>ipv6</b></a></td>
<td width="34%" height="33"><em><code>internet-socket</code></em></td>
</tr>

</table>
</div>

<hr><hr><h2 id="70"><a name="socket-errors-1">8.0 Errors</a></h2>

<p id="71">When errors are raised by the socket interface, Lisp conditions are
signaled. This section describes those conditions.</p>

<p id="72">A <code>condition</code> is a CLOS class and thus fits into
the hierarchy of CLOS classes. The condition <a href="classes/excl/socket-error.htm"><code>socket-error</code></a> is a subclass of the condition
<a href="../ansicl/dictentr/stream-e.htm"><code>stream-error</code></a>. </p>

<p id="73">
<a href="classes/excl/socket-error.htm"><code>socket-error</code></a> is the
superclass for all socket related errors. 
See <a href="errors.htm#stream-error-2">More on
cl:stream-error</a> in <a href="errors.htm">errors.htm</a>.
</p>


<p id="74">
<a href="classes/excl/socket-error.htm"><code>socket-error</code></a> denotes operating system
detected socket errors. It has the following slots:</p>

<table border="1" width="90%" cellspacing="1" cellpadding="6">
  <tr>
    <td width="25%"><strong>Name</strong></td>
    <td width="35%"><strong>Reader function</strong></td>
    <td width="40%"><strong>What</strong></td>
  </tr>
  <tr>
    <td width="25%"><code>excl::identifier</code></td>
    <td width="35%"><a href="operators/excl/stream-error-identifier.htm"><b>stream-error-identifier</b></a></td>
    <td width="40%">Symbol denoting this error (see table below)</td>
  </tr>
  <tr>
    <td width="25%"><code>excl::code</code></td>
    <td width="35%"><a href="operators/excl/stream-error-code.htm"><b>stream-error-code</b></a></td>
    <td width="40%">Operating system dependent error code (if any)</td>
  </tr>
  <tr>
    <td width="25%"><code>excl::action</code></td>
    <td width="35%"><a href="operators/excl/stream-error-action.htm"><b>stream-error-action</b></a></td>
    <td width="40%">String describing the operation in progress 
    when the error occurred</td>
  </tr>
</table>

<p id="75">Handling socket error is difficult because the error returned in
exceptional situations can depend on the operating system and the
address of the other side of the connection.  For example, attempting
to make a connection to a machine that is down may result in a
"Connection Timed Out" or a "Host Unreachable"
error, or maybe something else on certain systems. </p>

<p id="76">The error codes assigned to socket errors vary from operating
system to operating system. We translate a large set of the common
error codes from a machine dependent number to a symbol which we call
the <code><em>identifier</em></code> to make it easier for you to
write portable code. Condition handling code should check the
identifier field (using <a href="operators/excl/stream-error-identifier.htm"><b>stream-error-identifier</b></a>) If the
identifier value is <code>:unknown</code> then this is not a
common socket error and the operating system dependent code value of
the condition must be used. </p>

<p id="77">Possible <code>identifier</code> values and their meanings:</p>

<table border="1" width="60%" cellspacing="1" cellpadding="6">
  <tr>
    <td width="39%"><strong>Identifier</strong></td>
    <td width="61%"><strong>Meaning</strong></td>
  </tr>
  <tr>
    <td width="39%"><code>:address-in-use</code></td>
    <td width="61%">Local socket address already in use</td>
  </tr>
  <tr>
    <td width="39%"><code>:address-not-available</code></td>
    <td width="61%">Local socket address not available</td>
  </tr>
  <tr>
    <td width="39%"><code>:network-down</code></td>
    <td width="61%">Network is down</td>
  </tr>
  <tr>
    <td width="39%"><code>:network-reset</code></td>
    <td width="61%">Network has been reset</td>
  </tr>
  <tr>
    <td width="39%"><code>:connection-aborted</code></td>
    <td width="61%">Connection aborted</td>
  </tr>
  <tr>
    <td width="39%"><code>:connection-reset</code></td>
    <td width="61%">Connection reset by peer</td>
  </tr>
  <tr>
    <td width="39%"><code>:no-buffer-space</code></td>
    <td width="61%">No buffer space</td>
  </tr>
  <tr>
    <td width="39%"><code>:shutdown</code></td>
    <td width="61%">Connection shut down</td>
  </tr>
  <tr>
    <td width="39%"><code>:connection-timed-out</code></td>
    <td width="61%">Connection timed out</td>
  </tr>
  <tr>
    <td width="39%"><code>:connection-refused</code></td>
    <td width="61%">Connection refused</td>
  </tr>
  <tr>
    <td width="39%"><code>:host-down</code></td>
    <td width="61%">Host is down</td>
  </tr>
  <tr>
    <td width="39%"><code>:host-unreachable</code></td>
    <td width="61%">Host is unreachable</td>
  </tr>

  <tr>
    <td width="39%"><code>:protocol-not-available</code></td>
    <td width="61%">Protocol not available</td>
  </tr>

  <tr>
    <td width="39%"><code>:unknown</code></td>
    <td width="61%">Unknown error</td>
  </tr>
</table>

<hr><hr><h2 id="78"><a name="socket-examples-1">9.0 Examples</a></h2>

<table border="1" width="95%" cellspacing="1" cellpadding="6">
  <tr>
    <td>Create an active stream socket connection to a socket that just prints characters to
    whomever connects to it. After connecting, read the first five characters and print them
    out. <pre id="79">USER(1): <strong>(let ((s (make-socket :remote-host "vapor" :remote-port "chargen")))
           (dotimes (i 5) (print (read-char s))) (close s))</strong>
#\space
#\!
#\"
#\#
#\$</pre>
    </td>
  </tr>
</table>


<table border="1" width="95%" cellspacing="1" cellpadding="6">
  <tr>
    <td><p id="80">Sending a message from <strong>frisky</strong> to 
    <strong>vapor</strong>:</p>
    <p id="81">on <strong>vapor</strong>:</p>
    <pre id="82">USER(1): <strong>(print (read (accept-connection
                       (make-socket :connect :passive :local-port 9933))))</strong>
<i>.. this hangs ...</i></pre>
    <p id="83">on <strong>frisky</strong>:</p>
    <pre id="84">USER(1): <strong>(let ((s (make-socket :remote-host "vapor" :remote-port 9933)))
    (format s "Secret-message~%") (close s))</strong> </pre>
    <p id="85">Then you see on <strong>vapor</strong>:</p>
    <pre id="86">Secret-message
Secret-message
USER(2): </pre>
    <p id="87">A flaw in this example is that on vapor we've left the socket and the stream open and
    we lost track of the objects to close them. So, while concise, this is not a good
    programming style.</p>
    <p id="88">Another problem with this example is that when we created the port on vapor we used a
    specific port number (9933). This means our program will fail if port 9933 is already in
    use. If possible, it is best to let the system choose a port number (this is done by not
    specifying a :<code>local-port</code> argument) and then using the <code>local-port</code>
    function to find out which port was chosen.</p></td>
  </tr>
</table>


<table border="1" width="95%" cellspacing="1" cellpadding="6">
  <tr>
    <td><p id="89">If we just want to send a simple message then datagrams might be more appropriate
    (although the program must guarantee that the message made it because datagram
    communication is unreliable).</p>
    <p id="90">on <strong>vapor</strong>: </p>
    <pre id="91">user(2): <strong>(setq s (make-socket :type :datagram :local-port 9999))</strong>
#&lt;text datagram socket waiting for connection at */9999 @ #x20664e82&gt;
user(3):  </pre>
    <p id="92">on <strong>frisky</strong>:  </p>
    <pre id="93">user(10): <strong>(setq x (make-socket :type :datagram))</strong>
#&lt;text datagram socket waiting for connection at */45602 @ #x20717fb2&gt;
user(11): <strong>(send-to x "foo-the-bar" 11 :remote-host "vapor" :remote-port 9999)</strong>
11
user(12): </pre>
    <p id="94">on <strong>vapor</strong>:  </p>
    <pre id="95">user(3): <strong>(receive-from s 100 :extract t)</strong><br>
"foo-the-bar"<br>
11 ;; length of result<br>
3229900653 ;; frisky's IP address<br>
45602 ;; the port number chosen for the socket by frisky<br>
user(4): </pre>
    </td>
  </tr>
</table>



<hr><hr><h2 id="96"><a name="ssl-1">10.0 Secure Socket Layer (SSL)</a></h2>

<p id="97">
Allegro CL supports Secure Socket layers as described in this section.
See also <a href="aserve/aserve.html">aserve/aserve.html</a>,
which describes Webserver support in Allegro CL.
</p>
<p id="98">
Libraries for SSL are supplied with the distribution on all platforms
where SSL is supported. <code>:ssl-support</code> is included on
the <a href="../ansicl/dictentr/features.htm"><code>*features*</code></a> list on
all platforms that provide SSL support.  Except on Windows, no special
installation is required. See <a href="installation.htm#install-openssl-1">Installing OpenSSL libraries on
Windows</a> in <a href="installation.htm">installation.htm</a> for
information on Windows installation.
</p>
<p id="99">
As required under its license, the source code for OpenSSL libraries
is provided in the distribution in the <i>openssl/</i>
subdirectory. The sources are not needed to use the SSL facility.
</p>
<p id="100">
The SSL functionality is in the <i>ssl</i> module. To
ensure it is loaded, evaluate <code>(require
:ssl)</code>. Calling either of the two SSL functions, <a href="operators/socket/make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a> and
<a href="operators/socket/make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a>, automatically
loads that module. But note if you are including the SSL facility in an
application intended for delivery, be sure to include the module by
adding the keyword <code>:ssl</code> to the list which is the
value of the <i>input-file</i> to <a href="operators/excl/generate-application.htm"><b>generate-application</b></a>.
</p>

<hr><h2 id="101"><a name="ssl-history-2">10.1 SSL History</a></h2>

<p id="102">
In 1994 Netscape Corporation designed the Secure Socket Layer (SSL) protocol
to provide a means of safely and securely transporting private data
(such as credit card numbers) between a Web Browser and a Web Server.
Rather than tie SSL to the http protocol, Netscape wrote it as a
protocol for making any TCP/IP connection secure.
</p>
<p id="103">
At the end of 1994 version 2 of SSL was introduced and this was the
first version shipped with a commercial web browser (Netscape
Navigator (r)).  In 1995 version 3 of SSL was introduced. At that
point an international standards organization (IETF) took over work on
SSL and introduced Transport Layer Security (or TLS) protocol (which
is based on SSL but has a different handshake protocol). The IETF
introduced TLS version 1.0 in 1999.
</p>
<p id="104">
Allegro CL, starting in release 6.0, provides an interface that
supports SSL version 2, SSL version 3 and TLS version
1. When we use the name <i>SSL</i>, we mean  SSL or TLS.
</p>



<hr><h2 id="105"><a name="ssl-secure-connection-2">10.2 Secure connections</a></h2>

<p id="106">
A secure TCP connection exists between two processes when both 
agree on the following:
</p>

<ul>
<li id="107">
A cryptographic algorithm (called a cipher) to convert data (plaintext) to
encrypted data (ciphertext) and back to plaintext.
</li>
<li id="108">
A secret key to use in the cryptographic algorithm. A secret key is 
essential since the cryptographic algorithms themselves are well
known. There is a distinct key for each direction of data
transmission (client to server and server to client).
</li>
<li id="109">
An authentication method used in each packet to ensure that the
contents of the packets have not been altered in transit in some way.
</li>
</ul>

<p id="110">
These three items are determined via negotiation when the
connection is made and the first data is to be sent.
</p>



<hr><h2 id="111"><a name="ssl-client-server-2">10.3 Client/Server</a></h2>

<p id="112">
In an SSL connection, one side is the client and the other side is
the server.  In the http environment, the web browser is the client
and the web server is the server.
</p>
<p id="113">
When a secure connection is started, the client starts the 
negotation by telling the server all the possible ways
that it can communicate securely. The server then chooses
one of the possible ways and informs the client.
</p>
<p id="114">
Then the server sends its certificate and possibly other certificates
if they are needed to prove that its certificate can be trusted.
The important item in the certificate is the public key for
the server. The client will use this public key to encrypt
a random value which will be used by both the client and server
to create the keys needed for the cipher chosen for data transmission.
</p>
<p id="115">
In theory a certificate isn't necessary if both the client and
server side support a key exchange algorithm that can generate
a public key on the fly. The SSL libraries we use do
not have this capability, thus you must always supply a 
server certificate.
</p>
<p id="116">
Once both sides know the keys the other side will use to transmit,
the secure data transmission can occur.
</p>



<hr><h2 id="117"><a name="ssl-authentication-2">10.4 Authentication</a></h2>

<p id="118">
The SSL protocol also permits each side of the connection to 
declare who they are. This is done by the exchange of certificates.
The server must send a certificate describing itself to the client.  
The server can request that the client send a certificate to the
server (although in the use of SSL on the web this is never done).
</p>



<hr><h2 id="119"><a name="ssl-certificates-2">10.5 Certificates</a></h2>

<p id="120">
A certificate is a digital document that stores information about
an entity in such a way that it can be verified to be true.
The primary use of certificates is to store the public key
that can be used to send encrypted messages to the entity.
</p>
<p id="121">
In the SSL protocol certificates have two uses:
</p>
<ol>
<li id="122">
Encrpytion - by providing a public key they enable encrypted messages
to be sent.
</li>
<li id="123">
Authentication - the certificate proves that the
entity on the other end of the socket is who it claims to be.
</li>
</ol>
<p id="124">
Strictly speaking a certificate isn't required for SSL communication
if both sides support a certain key exchange protocol. 
The OpenSSL libraries we use do not support this protocol thus
whenever you create a server SSL stream you must supply a 
certificate (if you don't have your own we supply one in 
<i>&lt;Allegro directory&gt;/examples/ssl/server.pem</i>
that you can use).
</p>
<p id="125">
While certificates support authentication, the SSL protocol doesn't
require that you take advantage of this facility. 
</p>
<p id="126">
A certificate contains the following:
</p>

<ol>
<li id="127">
<b>A Subject Identifier</b>: a set of fields describing where the subject
is geographically and its role within an organization.
</li>
<li id="128">
<b>A Subject Public Key</b>: the key that can be used to encrypt messages
that only the Subject can decrypt since only the Subject
has the associated private key.
</li>
<li id="129">
<b>A Valid Time Interval</b>: the interval of time during which this
certificate is valid.
</li>
<li id="130">
<b>An Issuer Identifier</b>: just like the Subject Identifier but describing
the entity that certifies that the Subject is who it says it is
and that the public key is the correct one for the subject.
</li>
<li id="131">
<b>An Issuer signature</b>: a value which can be used by anyone to
verify that the Issuer and only the Issuer signed this document
testifying to it being correct.
</li>
<li id="132">
<b>Various other fields</b>: like serial numbers, version numbers, and
other minor things.
</li>
</ol>

<p id="133">
A certificate is a combination of text and binary data and in order to
make it easy to transport certificates they are usually encoded in a
form called PEM which turns them into a sequence of printable
characters.
</p>
<p id="134">
When a web browser connects to a site via SSL (which is caused
by the use of the 'https:' at the beginning of the url), 
it checks three things about the certificate:
</p>

<ol>
<li id="135">
Does it know the Issuer and did the Issuer sign the certificate?  A
web browser knows about a set of Issuers (called Certificate
Authorities) when it's installed on the machine (the Issuer
certificates are part of the files that make up the web browser).
</li>
<li id="136">
Is the certificate valid right now or has it expired?
</li>
<li id="137">
Is the certificate for the machine we've contacted?  If the url was
<code>https://www.foo.com/whatever</code> then the certificate
must be for <code>www.foo.com</code>. The convention used is to
store the name of the server machine in the CommonName slot of the
Subject Identifier field of the certificate.
</li>
</ol>

<p id="138">
If all three tests pass then the web browser silently accepts the
certificate and does a secure web page access. If any of the tests
fail then the web browser notifies the user and waits for a response.
Each browser displays the failure differently. For example, the
Microsoft Internet Explorer (r) shows which of the three tests passed
and which failed while the Netscape Navigator (r) just says that it
received an invalid certificate. In both cases the person using the
web browser is given the option of continuing with the web
access. Transmission will still be secure if it is elected to
continue. The only issue in doubt is the authenticity of the web
server.
</p>




<hr><h2 id="139"><a name="ssl-api-2">10.6 The Allegro CL SSL API</a></h2>







<p id="140">
The following operators and one class comprise the SSL API. <a href="operators/socket/make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a> and
<a href="operators/socket/make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a>
create the streams that are used for communication.
</p>

<ul>
<li id="141">

<a href="operators/socket/get-ssl-peer-certificate.htm"><b>get-ssl-peer-certificate</b></a> (generic
function)

</li>
<li id="142">

<a href="operators/socket/get-ssl-verify-result.htm"><b>get-ssl-verify-result</b></a>
(generic function)

</li>
<li id="143">

<a href="operators/socket/make-ssl-client-stream.htm"><b>make-ssl-client-stream</b></a> (function)

</li>
<li id="144">

<a href="operators/socket/make-ssl-server-stream.htm"><b>make-ssl-server-stream</b></a>
(function)


</li>
<li id="145">

<a href="operators/socket/ssl-do-handshake.htm"><b>ssl-do-handshake</b></a>
(generic function)


</li>
<li id="146">

<a href="classes/socket/x509-certificate.htm"><code>x509-certificate</code></a> (class)

</li>
<li id="147">

<a href="operators/socket/x509-certificate-issuer.htm"><b>x509-certificate-issuer</b></a> (generic
function)

</li>
<li id="148">

<a href="operators/socket/x509-certificate-not-after.htm"><b>x509-certificate-not-after</b></a> (generic
function)

</li>
<li id="149">

<a href="operators/socket/x509-certificate-not-before.htm"><b>x509-certificate-not-before</b></a> (generic
function)

</li>
<li id="150">

<a href="operators/socket/x509-certificate-serial-number.htm"><b>x509-certificate-serial-number</b></a> (generic
function)

</li>
<li id="151">

<a href="operators/socket/x509-certificate-issuer.htm"><b>x509-certificate-issuer</b></a> (generic
function)

</li>
<li id="152">

<a href="operators/socket/x509-certificate-subject.htm"><b>x509-certificate-subject</b></a> (generic
function)

</li>
<li id="153">

<a href="operators/socket/x509-certificate-subject-alt-name.htm"><b>x509-certificate-subject-alt-name</b></a> (generic
function)

</li>
<li id="154">

<a href="operators/socket/x509-certificate-version.htm"><b>x509-certificate-version</b></a> (generic
function)

</li>
</ul>


<p id="155">
The file <i>&lt;Allegro
directory&gt;/examples/ssl/server.pem</i> is a sample
certificate and private key file. You can use this file when starting
the server side of an SSL connection. The AllegroServe facility uses
SSL. It is described in <a href="aserve/aserve.html">aserve/aserve.html</a>. 
</p>






</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/socket.htm">8.1 version</a></td></tr></table></html>