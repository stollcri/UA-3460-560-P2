<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Allegro Composer</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/composer.htm">8.1 version</a></td></tr></table><h1 id="2">Allegro Composer</h1><p id="3">This document contains the following sections:</p><a href="#composer-intro-1">1.0 Introduction</a><br><a href="#customizing-executing-1">2.0 Customizing and executing Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#setting-up-2">2.1 Setting up your system for Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#composer-image-2">2.2 Building an image that contains Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#starting-stopping-2">2.3 Starting and stopping Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#starting-3">2.3.1 Starting Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#starting-in-clinit-3">2.3.2 Starting Allegro Composer from your .clinit.cl file</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#after-starting-3">2.3.3 After Allegro Composer starts up</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#stopping-3">2.3.4 Stopping Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#errors-while-running-2">2.4 Errors while running Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#composer-vars-2">2.5 Composer variables</a><br>&nbsp;&nbsp;&nbsp;<a href="#composer-definitions-2">2.6 Definitions of terms associated with Allegro Composer</a><br><a href="#functionality-overview">3.0 Overview of Composer functionality</a><br>&nbsp;&nbsp;&nbsp;<a href="#big-picture-2">3.1 The big picture</a><br>&nbsp;&nbsp;&nbsp;<a href="#composer-menu-2">3.2 The ACL/Composer menu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#inspect-item-3">3.2.1 The Inspect menu item</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#clos-submenu-3">3.2.2 The CLOS submenu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#xref-submenu-3">3.2.3 The Xref submenu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#profiler-submenu-3">3.2.4 The Profiler submenu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#options-item-3">3.2.5 The Options menu item</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#other-submenu-3">3.2.6 The Other submenu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#help-submenu-3">3.2.7 The Help submenu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#exit-item-3">3.2.8 The Exit Composer/Common Windows menu item</a><br>&nbsp;&nbsp;&nbsp;<a href="#gestures-2">3.3 Gestures and presentations</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#changing-gestures-3">3.3.1 Changing gesture bindings</a><br>&nbsp;&nbsp;&nbsp;<a href="#menus-2">3.4 Menus in Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#graphs-2">3.5 Graphs</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#scrolling-graphs-3">3.5.1 Scrolling graphs</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#overview-window-3">3.5.2 The graph overview window</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#graph-window-menu-3">3.5.3 The Window menu on a graph window menu bar</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#graph-history-menu-3">3.5.4 The History menu on a graph window menu bar</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#menu-gesture-over-nodes-3">3.5.5 The :menu gesture over a graph node</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#sec-menu-over-graph-nodes-3">3.5.6 The :secondary-menu gesture over a graph node</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#find-nodes-from-name-3">3.5.7 The Find Node(s) from Name menu choice</a><br><a href="#debugger-1">4.0 The debugger in Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#debugging-window-2">4.1 Displaying a stack backtrace in a window</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#debugger-window-menu-3">4.1.1 The Window menu on a Debugger window menu bar</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#debugger-debugger-menu-3">4.1.2 The Debugger menu on a Debugger window menu bar</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#dw-snd-menu-on-frame-3">4.1.3 Menus over frames 1: the :secondary-menu gesture menu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#dw-menu-on-frame-3">4.1.4 Menus over frames 2: the :menu gesture menu</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#dw-menu-on-object-3">4.1.5 Menus over objects</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#dw-menu-on-local-3">4.1.6 The :menu gesture over a local</a><br><a href="#window-inspector-1">5.0 The window-based inspector</a><br>&nbsp;&nbsp;&nbsp;<a href="#inspector-windows-2">5.1 Inspector windows and their menus</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#window-menu-on-iw-3">5.1.1 The Window menu on an Inspector window</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#inspect-as-menu-on-iw-3">5.1.2 The Inspect As menu on an Inspector window</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#history-menu-on-iw-3">5.1.3 The History menu on an Inspector window</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#menus-over-labels-and-values-3">5.1.4 Menus over labels and values in an Inspector window</a><br><a href="#browsers-1">6.0 Composer Browsers</a><br>&nbsp;&nbsp;&nbsp;<a href="#clos-browsers-2">6.1 CLOS class browsers</a><br>&nbsp;&nbsp;&nbsp;<a href="#xref-browsers-2">6.2 Cross reference browsers</a><br>&nbsp;&nbsp;&nbsp;<a href="#defsystem-browsers-2">6.3 The defsystem browser</a><br>&nbsp;&nbsp;&nbsp;<a href="#process-browser-2">6.4 The Process Browser</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#menu-over-process-3">6.4.1 The :menu gesture over a process</a><br><a href="#composer-profiling-1">7.0 The window interface to the runtime analyzer</a><br>&nbsp;&nbsp;&nbsp;<a href="#profiler-graphs-2">7.1 Runtime analyzer profile graphs</a><br><a href="#x-composer-a-1">Appendix A. Configuring X windows for Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#tool-names-ad-classes-a-2">Appendix A.1. Name and class of Composer tools</a><br>&nbsp;&nbsp;&nbsp;<a href="#tool-resources-a-2">Appendix A.2. Resources of tools</a><br>&nbsp;&nbsp;&nbsp;<a href="#specifying-resources-a-2">Appendix A.3. Specifying resource values in .Xdefaults</a><br>&nbsp;&nbsp;&nbsp;<a href="#reinitializing-resources-a-2">Appendix A.4. Reinitializing resources</a><br><a href="#startup-errors-a-1">Appendix B. Problems starting Allegro Composer</a><br>&nbsp;&nbsp;&nbsp;<a href="#no-connect-to-emacs-proc-a-2">Appendix B.1. Error: there is no process named Connect to Emacs daemon</a><br>&nbsp;&nbsp;&nbsp;<a href="#no-package-composer-a-2">Appendix B.2. Error: package Composer not found</a><br>&nbsp;&nbsp;&nbsp;<a href="#unknown-hostname-a-2">Appendix B.3. Error: Unknown hostname:</a><br><hr><hr><h2 id="4"><a name="composer-intro-1">1.0 Introduction</a></h2>

<p id="5">
Allegro Composer is an interactive, window-based development
environment to be used with Allegro CL on Unix platforms. It contains
a debugger, an inspector, a runtime analyzer, various browsers (for
processes, CLOS objects, etc.), a connection to the Cross Reference
facility, and more. You must run Allegro CL as a subprocess of Emacs.
The Composer windows are X windows.
</p>

<hr><hr><h2 id="6"><a name="customizing-executing-1">2.0 Customizing and executing Allegro Composer</a></h2>

<p id="7">
Subsections of this section describe how to set up your system for
Allegro Composer, how to start Allegro Composer, and how to customize
Allegro Composer.
</p>

<hr><h2 id="8"><a name="setting-up-2">2.1 Setting up your system for Allegro Composer</a></h2>

<p id="9">
You need to have the X window system running on the machine where you
intend to display Composer Windows. This machine is typically (but not
necessarily) the same machine that displays the Emacs window (it need
not be the machine where Emacs is running, of course).
</p>
<p id="10">
It is possible for a window manager to interfere with the mouse events
associated with Composer windows. However, the mouse actions
associated with gestures can be configured at run time (as described in
<a href="#changing-gestures-3">Section 3.3.1 Changing gesture bindings</a>) and the
Emacs menus use mouse buttons without associated keys. <b>Assuming
that the left and right mouse buttons are not used alone by your
window manager</b>, you should not have a problem with the interface
between Allegro Composer and your window manager. In general, that
means that your window manager should not be configured to use button1
(what we call the left mouse button) or button3 (what we call the
right mouse button) without also using keyboard keys.
</p>

<p id="11">
See <a href="#x-composer-a-1">Appendix A Configuring X windows for Allegro Composer</a> for more information
on setting up your system. We have the information in an appendix
because users generally do not have difficulty once things are set up
correctly.
</p>



<hr><h2 id="12"><a name="composer-image-2">2.2 Building an image that contains Allegro Composer</a></h2>
<p id="13">
There are no Allegro CL images that contain Allegro Composer. If you
want to build such an image, start Allegro CL and (as the first
action) load the file <i>buildcomposer.cl</i>. This will
create an image named <i>composer.dxl</i> or
<i>composer8.dxl</i> (as you are running a 16-bit
character or an 8-bit character image). It also copies the executable
(<i>mlisp</i> or <i>mlisp8</i> to
<i>composer</i> or <i>composer8</i>). You
can then use that image, and Allegro Composer will be loaded.
</p>





<hr><h2 id="14"><a name="starting-stopping-2">2.3 Starting and stopping Allegro Composer</a></h2>

<p id="15">
If Allegro Composer is not included in the running image (see
<a href="#composer-image-2">Section 2.2 Building an image that contains Allegro Composer</a>, you must load
<i>composer.fasl</i> (which in turn may load additional
files). Do this by evaluating:
</p>
<pre id="16">
(require :composer)
</pre>
<p id="17">
You may invoke Allegro Composer whenever you are running Allegro CL as
a subprocess of Emacs (using the emacs-lisp interface) and X is
available to you. For information on starting Allegro CL as a
subprocess of Emacs, see <a href="startup.htm#acl-as-emacs-subprocess-1">Running Lisp as a subprocess of
Emacs</a> in <a href="startup.htm">startup.htm</a>; see also
<a href="eli.htm">eli.htm</a>. (Note that Emacs, Lisp, and X may all be
running on different machines communicating over the network. Of
course, X must be displaying on the machine where you are sitting.)
</p>
<p id="18">
The functions used to start and stop Allegro Composer, along with other
composer-related functions and variables, are in the
<code>composer</code> package. The nickname of this package is
<code>wt</code>.
</p>
<p id="19">
You may wish to use this package (so that you do not have to
package-qualify exported symbols). Do so by evaluating
<code>(use-package :composer)</code>.
</p>

<hr><h2 id="20"><a name="starting-3">2.3.1 Starting Allegro Composer</a></h2>

<p id="21">
You can start Allegro Composer by choosing the Start Composer menu item
on the Emacs ACL/Composer menu.
</p>
<p id="22">
You can also start Allegro Composer with the function <a href="operators/composer/start-composer.htm"><b>start-composer</b></a>. Arguments to
this function allow you to specify the X host, display, and screen,
and allow you to load an init file. If the host, display, and screen
default to the value of the DISPLAY environment variable, it is
often not necessary to specify them. (See the description page for a
complete description.)
</p>
<p id="23">
If the <i>read-init-file</i> is true, the system tries
to read the Composer init file, whose name is the value of <a href="variables/composer/s_composer-init-filename_s.htm"><code>*composer-init-filename*</code></a>. The initial
value of that variable is "~/.comp2init.cl". The Start Composer menu
command on the Emacs ACL/Composer menu calls <a href="operators/composer/start-composer.htm"><b>start-composer</b></a> with
<i>read-init-file</i> true. If an error is encountered
reading the Composer init file, reading stops and the error message is
printed but no error is signaled (just as with the
<i>.clinit.cl</i> file). If you wish to debug the error,
load the file after Composer has started.
</p>
<p id="24">
You interact with Allegro Composer using Emacs menus, particularly the
ACL/Composer menu. Once Allegro Composer is started, the items in that
menu will be available.
</p>
<p id="25">
The function <a href="operators/composer/composer-initialized-p.htm"><b>composer-initialized-p</b></a> returns true
after Composer starts.
</p>



<hr><h2 id="26"><a name="starting-in-clinit-3">2.3.2 Starting Allegro Composer from your .clinit.cl file</a></h2>

<p id="27">
You may wish to start Allegro Composer automatically whenever Allegro
CL is started, perhaps by putting the form
<code>(composer:start-composer)</code> (perhaps with additional
arguments) in your <i>.clinit.cl</i>
file. That works but has the annoying side effect of
printing several lines of bogus warnings. 
</p>
<p id="28">
You can avoid these bogus warnings by having code in your
<i>.clinit.cl</i> which modifies the value of <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> in
such a way that Allegro Composer is started when that variable is
processed (which is at the end of the startup process). Do this by
putting the following form in your <i>.clinit.cl</i>
file:
</p>

<pre id="29">
(defun start-composer-from-clinit-file ()
  (let ((initial-restart-init-function *restart-init-function*))
    (cond (initial-restart-init-function
            (setf *restart-init-function*
                  #'(lambda ()
                      (composer:start-composer)
                      (setf *restart-init-function* 
                            initial-restart-init-function)
                      (funcall initial-restart-init-function))))
           (t
             (setf *restart-init-function*
                   #'(lambda ()
                       (composer:start-composer)
                       (setf *restart-init-function* nil)))))))

(start-composer-from-clinit-file)
</pre>

<p id="30">
Note that the value of <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> is restored after
Allegro Composer is started.
</p>



<hr><h2 id="31"><a name="after-starting-3">2.3.3 After Allegro Composer starts up</a></h2>

<p id="32">
Allegro Composer works using Emacs menus. (Most Allegro Composer
functionality is unavailable if you are not running Allegro CL as a
subprocess of Emacs using the Emacs-Lisp interface. See
<a href="eli.htm">eli.htm</a> for general information on the Emacs-Lisp
interface.)
</p>
<p id="33">
There are a number of Emacs menus associated with Allegro CL that are submenus of the ACL menu,
including File, Edit, Debug, and Composer. When
Allegro Composer is started, the ACL/Composer Menu items become
available. (More precisely, before Allegro Composer is started, only
the Start Composer item is available. After Allegro Composer is
started, that item becomes unavailable, and the remaining items become
available.
</p>
<p id="34">
Allegro Composer needs the X window system and Emacs to be running to
work.  If there is a problem starting up, an error message should be
printed. Please see <a href="#startup-errors-a-1">Appendix B Problems starting Allegro Composer</a>
for discussion of possible errors.
</p>



<hr><h2 id="35"><a name="stopping-3">2.3.4 Stopping Allegro Composer</a></h2>

<p id="36">
You stop Allegro Composer by choosing the Exit Composer/Common Windows
item from the Emacs ACL/Composer menu or by calling <a href="operators/composer/stop-composer.htm"><b>stop-composer</b></a> function. As the menu choice
indicates, Common Windows is stopped along with Composer when the menu
item is chosen.  <a href="operators/composer/stop-composer.htm"><b>stop-composer</b></a> has an argument that allows
Common Windows to continue running after Composer is stopped.
</p>
<p id="37">
Common Windows is an old windowing system no longer supported by
Allegro CL but still used by Allegro Composer. It will not be further
discussed in this manual.
</p>





<hr><h2 id="38"><a name="errors-while-running-2">2.4 Errors while running Allegro Composer</a></h2>

<p id="39">
The most common errors caused by user action when running Allegro
Composer are the usual Lisp errors you (may) see from time to time:
typing mistakes that lead to unbound variables or undefined functions,
leaving a quote out when it is needed or supplying one when it is not,
or supplying a value of the wrong type.
</p>
<p id="40">
Because almost all Composer input is via the Emacs minibuffer, such
errors are caught by the Emacs-Lisp interface, which prints a message
to the Emacs minibuffer explaining what was done wrong, but does not
cause a Lisp error to be signaled. For example, choosing the
Composer/Clos/Inspect Class menu item prompts you in the minibuffer
for the name of a class to inspect. Entering
<code>'stream</code> results in this message being displayed in
the minibuffer:
</p>
<pre id="41">
Cannot inspect 'stream: (quote stream) is not a legal class name
</pre>
<p id="42">
Since the value typed to the minibuffer is not (in this case) evaluated,
there should be no quote. 
</p>
<p id="43">
Another problem you may run into is choosing a Composer command (from
the ACL/Composer menu) that requires use of the Emacs minibuffer while the
minibuffer is already in use. For example, enter the Emacs command to
read a file into a new buffer (C-X C-F is the typical key combination
for doing that) and, without specifying a file, choose the Inspect
menu command from the ACL/Composer menu. (That command prompts for something to
inspect in the minibuffer.) A message is printed to the minibuffer that
an attempt was made to use the minibuffer while it was in use, but again
no Lisp error is signaled.
</p>
<p id="44">
Composer errors do occur, usually because of an improper argument to
a Composer function. Resetting out of these errors (using
<a href="tpl-commands/reset.htm"><b>:reset</b></a>) is the usual course.
</p>
<p id="45">
<b>Other problems</b>. The following is a list (by no means exhaustive) of things that 
may go wrong and what may be done about them.
</p>
<ul>
<li id="46">
<b>Composer does not respond to mouse actions.</b> If this happens,
the likely cause is another X client (perhaps the Window manager) is
catching and using the mouse clicks. For example, a left click may be caught by
the Window manager to expose a window and thus be ignored when trying to display
a menu on a Composer Window.
<p id="47">
However, if mouse clicks worked and then suddenly stop working, that is likely not
the cause. More likely is something has grabbed the mouse and that something must
be cleared before Composer can respond.
</p>
<p id="48">
It may be that Allegro CL is garbage collecting or that the system is very loaded,
in which case waiting will typically solve the problem.
</p>
<p id="49">
Do not stack mouse events (that is do something new before the
previous thing has completed). This can confuse the event handler.
</p>
</li>
<li id="50">
<b>Composer windows look odd</b>. If Composer windows have stray bits
in them or are incorrect in some other way, try choosing Refresh (or
one of its relatives, like Update) from the Window menu on the menubar
of most Composer windows. Moving the window or iconifying and then
expanding it (both of which actions cause the system to redraw the
window) may also help. If those do not work, try flushing and
recreating the window.
</li>
</ul>




<hr><h2 id="51"><a name="composer-vars-2">2.5 Composer variables</a></h2>

<p id="52">
These variables either store information about Allegro Composer or
are set to useful values during execution.
</p>

<ul>
<li id="53">
<a href="variables/composer/s_c_s.htm"><code>*c*</code></a>: this variable
provides a temporary location for values. Some menus include the command 
<b>Set *C* to object</b>, providing a useful way to get a handle on displayed
values.
</li>
<li id="54">
<a href="variables/composer/s_composer-init-filename_s.htm"><code>*composer-init-filename*</code></a>:
the name (and typically the path) of the initialization file read when Composer starts.
</li>
<li id="55">
<a href="variables/composer/s_composer-title-and-version_s.htm"><code>*composer-title-and-version*</code></a>:
a string providing version information.
</li>
</ul>



<hr><h2 id="56"><a name="composer-definitions-2">2.6 Definitions of terms associated with Allegro Composer</a></h2>

<ul>
<li id="57">
<b>browser</b>: a window that displays information about a
collection of items.  For example, the Process Browser (displayed with
Composer/Other/Process Browser) displays information about processes
within Lisp.
</li>
<li id="58">
<b>click</b>: To click a mouse button means to
depress and immediately release it.  A click is distinguished from a
press, where a button is pressed and held down for some period.
</li>
<li id="59">
<b>Composer window</b>: Any window associated with Allegro Composer.
</li>
<li id="60">
<b>debugger window</b>: a window showing the backtrace of the current
execution state of a process. This window displays what is printed by <a href="tpl-commands/zoom.htm"><b>:zoom</b></a>.
</li>
<li id="61">
<b>Emacs</b>: Emacs is the name of the editor that must be used in
conjunction with Allegro Composer.
</li>
<li id="62">
<b>Emacs buffer</b>: Emacs organizes information into buffers. One or
more is displayed in an Emacs window. A special buffer is the
minibuffer, described below.
</li>
<li id="63">
<b>graph window</b>: these windows display graphs which show relations
between Lisp objects. Examples are runtime analyzer profile graph
windows and Calls To and Calls From (displayed by Composer/Xref/Show
calls to and Composer/Xref/Show calls from).
</li>
<li id="64">
<b>Inspection</b>: An Inspector window can inspect multiple objects
and can inspect the same object in different ways. At any point in
time, the window displays an <i>inspection</i> of a single object in a
single way. Menus on the Inspector window menubar allow you to change
the display to show a different inspection of the same object or the
inspection of a different object.
</li>
<li id="65">
<b>Inspector window</b>: an Inspector window shows the slots and
values associated with a Lisp object. Many Inspector windows can be on
the screen at one time and each window can contain inspections of
several objects (although only one is visible at any one time).
</li>
<li id="66">
<b>left button</b>: a standard mouse has three buttons, typically
numbered 1, 2, and 3. Mice are either right- or left-handed. On a
right-handed mouse (the most common variety), button 1 is the left
button.  In this manual, we assume a right-handed mouse, so <i>left
button</i> means button 1. This button is used to display menus on
Composer window menubars.
</li>
<li id="67">
<b>menu</b>: a menu is a small window containing a number of items (or
choices), usually identified by one or a few words denoting some
action. Menus are typically displayed when a mouse button is pressed
or clicked.  If you click the mouse button, the menu will stay on the
screen until you click again (either over an item or away from the
menu). If you press the mouse button, the menu stays displayed until
the button is released, and releasing over an item chooses that item.
</li>
<li id="68">
<b>middle button</b>: a standard mouse has three buttons, typically
numbered 1, 2, and 3. Mice are either right- or left-handed but on either type
of three button mouse, the middle button is button 2.
</li>
<li id="69">
<b>minibuffer</b>: a small buffer in the Emacs window, always visible,
where Emacs commands are input and system messages are
displayed. Composer uses the minibuffer for input and also for
messages.  When prompted by Composer for input, you can cancel the
request by entering the keyboard quit chord (typically C-g).
</li>
<li id="70">
<b>Overview window</b>: a graph displayed in a graph window is
typically much larger than the window itself, so only a portion can be
visible at one time. An Overview window is associated with a graph
window and displays the entire layout of the graph in small format
(too small for the contents of nodes to be visible). Clicking a mouse
button inside an Overview window causes the associated graph to be
scrolled to the location corresponding to the mouse cursor location.
</li>
<li id="71">
<b>press</b>: when we say press (or depress) a mouse button, we mean
you should depress the button and hold it down (following other
instructions before releasing it). See also click.
</li>
<li id="72">
<b>Process browser</b>: displayed when you choose
Composer/Other/Process Browser, this window displays information about
processes in Lisp.
</li>
<li id="73">
<b>right button</b>: a standard mouse has three buttons, typically
numbered 1, 2, and 3. Mice are either right- or left-handed. On a
right-handed mouse (the most common variety), button 3 is the right
button. In this manual, we assume a right-handed mouse, so <i>right
button</i> means button 3. When the right button is clicked over an
object in a Composer window, a menu of object-specific choices is
typically displayed.
</li>
<li id="74">
<b>submenu</b>: some menu items have additional choices associated
with them, so clicking over them (or, if the mouse button is pressed,
moving the cursor over them) displays a submenu of these additional
choices. Many of the items on the ACL/Composer menu have submenus.
</li>
</ul>




<hr><hr><h2 id="75"><a name="functionality-overview">3.0 Overview of Composer functionality</a></h2>

<hr><h2 id="76"><a name="big-picture-2">3.1 The big picture</a></h2>

<p id="77">
After Allegro Composer is initialized, most input comes from the mouse
and the Emacs minibuffer and information is displayed either in
Composer windows or, occasionally in the minibuffer. You need not, in
general, evaluate forms or issue commands in Lisp to get Allegro
Composer to do things. An exception is the windowized debugger, which
can only be displayed with the top-level command <a href="tpl-commands/wdebug.htm"><b>:wdebug</b></a>, and other utilities (such as the
windowized inspector) have functional or top-level command
equivalents.
</p>
<p id="78">
A big advantage of using the mouse, and an advantage that Allegro
Composer depends upon, is the ability to denote things by pointing to
them. If you are able to point to something, you need not know how to
denote it in another way. Allegro Composer is set up to display things
which it can act upon. Almost all Composer windows list things
(processes, values, frames, local variables, etc.) which you can act
on in some way.
</p>
<p id="79">
We have tried to make Allegro Composer easy to use. The quickest way
to figure out what the various tools and utilities do is to try
them. If you start playing with the system in order to find out its
capabilities, keep the following things in mind:
</p>
<ul>
<li id="80">
You must run Lisp as a subprocess of Emacs using the Emacs-lisp interface (therefore
you must start Lisp with <b>fi:common-lisp</b>.
</li>
<li id="81">
Many Composer commands require that you input information in the Emacs
minibuffer. Keep your eye on the minibuffer while you run Composer,
particularly if you expect Composer to do something but nothing seems
to be happening.
</li>
<li id="82">
Choosing Help from the Composer/Help menu causes useful introductory information
to be printed in an Emacs buffer.
</li>
</ul>



<hr><h2 id="83"><a name="composer-menu-2">3.2 The ACL/Composer menu</a></h2>

<p id="84">
The Composer menu is a submenu of the ACL MENU on the Emacs menu
bar. Before Allegro Composer is started, only the <b>Start
Composer</b> item is available (active). The various items that
display submenus are available in the sense that mousing on them
displays the submenus, but all items that are commands (rather than
displaying submenus) are unavailable.
</p>
<p id="85">
Once Allegro Composer is started (by choosing the Start Composer menu
item or calling <a href="operators/composer/start-composer.htm"><b>start-composer</b></a>), the menu changes so that
the <b>Start Composer</b> item is unavailable and the remaining items are available.
At that point the menu looks like this:
</p>
<p id="86"><img src="pictures/cmp01-cmenu.jpg"></p>
<p id="87">
We describe each item (and its associated submenu if it has one) in
the next series of subsections.
</p>
<ul>
<li id="88"><a href="#inspect-item-3">Section 3.2.1 The Inspect menu item</a></li>
<li id="89"><a href="#clos-submenu-3">Section 3.2.2 The CLOS submenu</a></li>
<li id="90"><a href="#xref-submenu-3">Section 3.2.3 The Xref submenu</a></li>
<li id="91"><a href="#profiler-submenu-3">Section 3.2.4 The Profiler submenu</a></li>
<li id="92"><a href="#options-item-3">Section 3.2.5 The Options menu item</a></li>
<li id="93"><a href="#other-submenu-3">Section 3.2.6 The Other submenu</a></li>
<li id="94"><a href="#help-submenu-3">Section 3.2.7 The Help submenu</a></li>
<li id="95"><a href="#exit-item-3">Section 3.2.8 The Exit Composer/Common Windows menu item</a></li>
</ul>

<hr><h2 id="96"><a name="inspect-item-3">3.2.1 The Inspect menu item</a></h2>

<p id="97">
Choosing this item prompts the user in the Emacs minibuffer for an
object to inspect. That object is then inspected in an Inspector
window.  What is entered in the minibuffer is evaluated. Thus, if you
want to inspect, say, the symbol <code>mysymbol</code>, enter
<code>'mysymbol</code> in the minibuffer.
</p>
<p id="98">
If you decide that you do not want to enter an object to be inspected,
enter the keyboard quit Emacs command (typically C-g).
</p>
<p id="99">
The system tries to determine a suitable default value as the object to inspect
based on the Emacs cursor location.
</p>
<p id="100">
If there is a problem inspecting the object entered in the minibuffer
(for example, if you enter <code>mysymbol</code> without a quote
and <code>mysymbol</code> does not have a value), a message
explaining the problem is displayed in the minibuffer but no error is
signaled.
</p>
<p id="101">
A new Inspector window is created each time the <b>Inspect</b> menu item, is chosen.
</p>
<p id="102">
The top-level command <a href="tpl-commands/winspect.htm"><b>:winspect</b></a>
and the function <a href="operators/composer/winspect.htm"><b>winspect</b></a> also display Inspector windows.
</p>
<p id="103">
See <a href="#inspector-windows-2">Section 5.1 Inspector windows and their menus</a> for a
description of Inspector windows.
</p>



<hr><h2 id="104"><a name="clos-submenu-3">3.2.2 The CLOS submenu</a></h2>

<p id="105"><img src="pictures/cmp02-closmenu.jpg"></p>

<p id="106">
The CLOS submenu (displayed when the Composer menu is visible and the
mouse cursor is over <b>CLOS</b>) contains items that display
Inspector windows for inspection of classes and generic functions and
graph windows displaying class hierarchies. When you choose an item
from the submenu, you are prompted in the Emacs minibuffer for a class
or generic function name (which is not evaluated, so to enter, for
example, the class <code>stream</code>, enter
<code>stream</code> with no quote).
</p>
<p id="107">
The system tries to determine a suitable default value 
based on the Emacs cursor location.
</p>

<p id="108">
If you decide after choosing a menu item to cancel the command,
enter the keyboard quit Emacs command (typically C-g).
</p>
<p id="109">
If there is a problem with what you enter in the minibuffer (for
example, what you enter does not name a class or generic function, or
you enter <code>'stream</code> -- with a quote -- rather than
<code>stream</code>), a message explaining the problem is
displayed in the minibuffer but no error is signaled.
</p>
<p id="110">
The submenu items are:
</p>
<ul>
<li id="111"><b>Inspect class</b>: prompts in the minibuffer for the name of a
class (what is entered in the minibuffer is not evaluated) and
displays an Inspector window for that class. See
<a href="#inspector-windows-2">Section 5.1 Inspector windows and their menus</a> for information on
inspector windows.
</li>
<li id="112"><b>Inspect generic function</b>: prompts in the minibuffer for the
name of a generic function (what is entered in the minibuffer is not
evaluated) and displays an Inspector window for that generic
function. See <a href="#inspector-windows-2">Section 5.1 Inspector windows and their menus</a> for
information on inspector windows.
</li>
<li id="113"><b>Show class subclasses</b>: prompts in the minibuffer for the
name of a class (what is entered in the minibuffer is not evaluated)
and displays a graph window showing the class hierarchy of subclasses
of the entered class. See
<a href="#clos-browsers-2">Section 6.1 CLOS class browsers</a> and also
<a href="#graphs-2">Section 3.5 Graphs</a>.
</li>
<li id="114"><b>Show class superclasses</b>: prompts in the minibuffer for the name of a class
(what is entered in the minibuffer is not evaluated) and displays a graph window
showing the class hierarchy of superclasses of the entered class.
See
<a href="#clos-browsers-2">Section 6.1 CLOS class browsers</a> and also
<a href="#graphs-2">Section 3.5 Graphs</a>.
</li>
</ul>




<hr><h2 id="115"><a name="xref-submenu-3">3.2.3 The Xref submenu</a></h2>

<p id="116"><img src="pictures/cmp03-xrefmenu.jpg"></p>

<p id="117">
The Xref submenu (displayed when the Composer menu is visible and the
mouse cursor is over <b>Xref</b>) contains items that display
graph windows showing calls to and/or from a function and an additional item that
discards Cross Reference data. Choosing an item that displays a graph
causes you to be prompted in the minibuffer for a function name
(which is not evaluated, so to enter, for
example, the function <code>my-function</code>, enter
<code>my-function</code> with no quote).
</p>
<p id="118">
The system tries to determine a suitable default value 
based on the Emacs cursor location.
</p>
<p id="119">
If you decide after choosing a menu item to cancel the command,
enter the keyboard quit Emacs command (typically C-g).
</p>
<p id="120">
If there is a problem with what you enter in the minibuffer (for
example, what you enter does not name a function, or
you enter <code>'my-function</code> -- with a quote -- rather than
<code>my-function</code>), a message explaining the problem is
displayed in the minibuffer but no error is signaled.
</p>
<p id="121">
See <a href="cross-reference.htm">cross-reference.htm</a> for details of the Allegro CL cross-reference
utility. The graphs displayed by this submenu are based on the database of cross-reference
information collected by the cross-reference
utility. See also <a href="#xref-browsers-2">Section 6.2 Cross reference browsers</a>.
</p>
<p id="122">
The submenu items are:
</p>
<ul>
<li id="123"><b>Show calls to</b>: prompts in the minibuffer for the name of a 
function (what is entered in the minibuffer is not evaluated) and displays a
graph window showing calls to that function (using information in the Cross Reference database).
See <a href="#graphs-2">Section 3.5 Graphs</a> for information on graph windows.
</li>
<li id="124"><b>Show calls from</b>: prompts in the minibuffer for the name of a 
function (what is entered in the minibuffer is not evaluated) and displays a
graph window showing calls from that function (using information in the Cross Reference database).
See <a href="#graphs-2">Section 3.5 Graphs</a> for information on graph windows.
</li>
<li id="125"><b>Show calls to and from</b>: prompts in the minibuffer for the
name of a function (what is entered in the minibuffer is not
evaluated) and displays a graph window showing calls to and from that
function (using information in the Cross Reference database). See 
<a href="#graphs-2">Section 3.5 Graphs</a>
for information on graph windows.
</li>
<li id="126"><b>Discard xref info</b>: choosing this item causes <a href="operators/xref/discard-all-xref-info.htm"><b>discard-all-xref-info</b></a> to
be called and all cross-reference information stored in the system to
be flushed.
</li>
</ul>



<hr><h2 id="127"><a name="profiler-submenu-3">3.2.4 The Profiler submenu</a></h2>

<p id="128"><img src="pictures/cmp04-profmenu.jpg"></p>

<p id="129">
The Profiler submenu (displayed when the Composer menu is visible and
the mouse cursor is over <b>Profiler</b>) contains items that allow
starting and stopping of the Allegro CL time and the space runtime
analyzers, displaying runtime analysis data, and displaying a dialog of
runtime analyzer options.  See <a href="runtime-analyzer.htm">runtime-analyzer.htm</a>
for information on the Allegro CL runtime analyzer.
</p>

<p id="130">
The submenu items are:
</p>
<ul>
<li id="131"><b>Start time profiler</b>: choosing this item will start a time
runtime analysis. A message in the minibuffer will indicate when
initialization has completed and data collection has started. Choosing
this item will cause any undisplayed data (from previous
analysis runs) to be lost.
</li>
<li id="132"><b>Start space profiler</b>: choosing this item will start a space
analysis. A message in the minibuffer will indicate when
initialization has completed and data collection has started. Choosing
this item will cause any undisplayed data (from previous analysis
runs) to be lost.
</li>
<li id="133"><b>Stop profiler</b>: choosing this item will stop collection of
data. (Note that data collection is stopped, not suspended.)  You
choose this item when you have completed running the code which you
want analyzed.
</li>
<li id="134"><b>Display time</b>: choosing this item will display time analysis
information in a profile window. See
<a href="#profiler-graphs-2">Section 7.1 Runtime analyzer profile graphs</a> for information on
windows that display data.
</li>
<li id="135"><b>Display space</b>: choosing this item will display space
analysis information in a profile window. See
<a href="#profiler-graphs-2">Section 7.1 Runtime analyzer profile graphs</a> for information on
windows that display data.
</li>
<li id="136"><b>Options</b>: displays the profile options dialog, which is
described in <a href="#composer-profiling-1">Section 7.0 The window interface to the runtime analyzer</a>.
</li>
</ul>



<hr><h2 id="137"><a name="options-item-3">3.2.5 The Options menu item</a></h2>

<p id="138"><img src="pictures/cmp05-optdialog.jpg"></p>

<p id="139">
Choosing this item displays the Composer Options Dialog pictured
above.  This dialog allows setting of certain options related to
Allegro Composer.  All options can be set <b>Yes</b> or <b>No</b> and
clicking on an option value toggles it to the other value (thus
clicking on <b>Yes</b> toggles it to <b>No</b>). A change is effected as
soon as a value is toggled. Choosing <b>[Undo Changes]</b> (at the bottom)
restores all values to what they were when the dialog was first displayed.
</p>
<p id="140">
The Window menu on the menubar has three choices:
</p>
<ul>
<li id="141"><b>Quit</b>: close the window. Equivalent to clicking on
<b>[Dismiss]</b> at the bottom of the Window or clicking the Close
button. Since all changes to values are effected immediately, closing the Window
does not affect the values of the options.
</li>
<li id="142"><b>Resize to fit</b>: resize the dialog so it
is just large enough to display all data.
</li>
<li id="143"><b>Refresh</b>: update the display to reflect the current values
of the options.  (If you change the value of a variable associated
with an option away from the Options dialog, the change will not be
reflected unless you choose this item. Thus, the <code>Record Xref
Info</code> option is associated with the variable <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a>. If you
change the value of that variable in the Emacs Listener Buffer, the change will be seen
only when you choose this item.)
</li>
</ul>

<p id="144">
The options are:
</p>

<ul>
<li id="145"><code>Record Source File Info</code>: Yes or No as the
variable <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> is true or <code>nil</code>.
</li>
<li id="146"><code>Load Source File Info</code>: Yes or No as the
variable <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a> is true or <code>nil</code>.
</li>
<li id="147"><code>Record Xref Info</code>: Yes or No as the
variable <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> is true or <code>nil</code>.
</li>
<li id="148"><code>Load Xref Info</code>: Yes or No as the
variable <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> is true or <code>nil</code>.
</li>
<li id="149"><code>In-Package Compatibility</code>: Yes or No as the
variable <a href="variables/excl/s_cltl1-in-package-compatibility-p_s.htm"><code>*cltl1-in-package-compatibility-p*</code></a> is true or <code>nil</code>.
</li>
<li id="150"><code>Xref Scans Entire Heap</code>: this option is not
associated with an exported variable, but rather an internal one. If
the value is <b>Yes</b>, cross reference graphs (displayed by the
<a href="#xref-submenu-3">Xref submenu</a>)
include information gathered by scanning code-vectors in the heap as
well as the cross reference database. Compare the display when
<code>Xref/Show Calls To</code> is chosen for the function
<code>cons</code> when this option is <b>Yes</b> (a very big
display) and <b>No</b> (typically little or nothing is displayed).
</li>
<li id="151"><code>Redefinition Warnings</code>: Yes or No as the
variable <a href="variables/excl/s_redefinition-warnings_s.htm"><code>*redefinition-warnings*</code></a> is true or <code>nil</code>. Note that changing from <b>No</b> to <b>Yes</b>
changes the value of the variable from <code>nil</code> to
<code>t</code>. However, the initial value is typically a
list indicating what kind of redefinition warnings are desired.
</li>
</ul>

<p id="152">
At the bottom of the dialog are the commands <b>[Undo Changes]</b>
(which restores values to what they were when the dialog was first
displayed) and <b>[Dismiss]</b> (which closes the dialog).
</p>



<hr><h2 id="153"><a name="other-submenu-3">3.2.6 The Other submenu</a></h2>

<p id="154"><img src="pictures/cmp06-othermenu.jpg"></p>

<p id="155">
The Other submenu (displayed when the Composer menu is visible and the
mouse cursor is over <b>Other</b>) contains two items that display Composer Browsers
and one item that reinitializes X resources.
</p>
<p id="156">
The items are:
</p>

<ul>
<li id="157"><b>Process Browser</b>: display the Process Browser window, described in 
<a href="#process-browser-2">Section 6.4 The Process Browser</a>.
</li>
<li id="158"><b>System Browser</b>: display the Defsystem Browser window, described in 
<a href="#defsystem-browsers-2">Section 6.3 The defsystem browser</a>.
</li>
<li id="159"><b>Reinitialize Composer Resources</b>: this item causes Lisp to
see changes to X resources made after Allegro Composer was
started. See
<a href="#reinitializing-resources-a-2">Appendix A.4 Reinitializing resources</a> for more
details. Resources are discussed in
<a href="#x-composer-a-1">Appendix A Configuring X windows for Allegro Composer</a>.
</li>
</ul>



<hr><h2 id="160"><a name="help-submenu-3">3.2.7 The Help submenu</a></h2>

<p id="161"><img src="pictures/cmp07-helpmenu.jpg"></p>

<p id="162">
The Help submenu (displayed when the Composer menu is visible and the
mouse cursor is over <b>Help</b>) contains two items that display useful
information about Allegro Composer.
</p>
<p id="163">
The items are:
</p>

<ul>
<li id="164"><b>Help</b>: display useful information about using Allegro Composer in
a <code>*Composer Help*</code> Emacs buffer.
</li>
<li id="165"><b>Current pointer gesture bindings</b>: display, in a
<code>*Composer Gesture Bindings*</code> Emacs buffer, the
current list of logical gestures (the association of mouse keys or
mouse key/shift key combinations) and actions, as described further
just below.
</li>
</ul>

<p id="166">
Here is a sample display when <b>Current pointer gesture bindings</b> is chosen:
</p>
<pre id="167">
The current logical gesture definitions are:
 :select            on Left.
 :inspect           on Control-Left.
 :describe          on Shift-Left.
 :edit              on Middle.
 :menu              on Right.
 :secondary-menu    on Shift-Right.
</pre>

<p id="168">
See <a href="#gestures-2">Section 3.3 Gestures and presentations</a> for a discussion of gestures.
</p>



<hr><h2 id="169"><a name="exit-item-3">3.2.8 The Exit Composer/Common Windows menu item</a></h2>

<p id="170">
Choosing this item exits Allegro Composer, just as calling <a href="operators/composer/stop-composer.htm"><b>stop-composer</b></a> does. It also
exits Common Windows, a windowing system no longer supported but still
used by Allegro Composer.  (If you wish to stop Allegro Composer while
leaving Common Windows running, you can do so using <a href="operators/composer/stop-composer.htm"><b>stop-composer</b></a>.) After this item is
chosen, all items that are associated with actual commands (rather than
just display submenus) on the Composer menu become unavailable except
<b>Start Composer</b>.
</p>





<hr><h2 id="171"><a name="gestures-2">3.3 Gestures and presentations</a></h2>

<p id="172">
The way a Lisp object is displayed in a Composer window and the effect of mouse actions
on that object are controlled by the presentation system and the defined gestures.
A presentation controls how an object is printed or displayed,
and which commands can be applied to it (e.g. with the mouse).
Generally, users of Allegro Composer need not concern themselves with presentations since
they simply see the object (more precisely, a printed representation of the object,
in a window.
</p>
<p id="173">
Gestures, also called logical gestures, are more important. Because we
cannot specify how you should configure your window manager (detailing
which mouse button/keyboard combinations should do what where), we
refer to mouse actions on presentations by abstract gestures
identified by keywords: <code>:menu</code>,
<code>:inspect</code>, etc. (a complete list is given
below). There is a mapping from mouse/keyboard actions to gestures and
you can define the mapping which best suits your purposes.
</p>
<p id="174">
The following gestures are defined in Allegro Composer:
</p>
<ul>
<li id="175"><code>:select</code></li>
<li id="176"><code>:inspect</code></li>
<li id="177"><code>:describe</code></li>
<li id="178"><code>:edit</code></li>
<li id="179"><code>:menu</code></li>
<li id="180"><code>:secondary-menu</code></li>
</ul>

<p id="181">
The current mapping from mouse/keyboard actions to gestures is printed
in a <code>*Composer Gesture bindings*</code> Emacs buffer when
you choose <code>Current Pointer Gesture Bindings</code> from
the Help submenu of the Composer menu.
Typical contents are:
</p>

<pre id="182">
The current logical gesture definitions are:
 :select            on Left.
 :inspect           on Control-Left.
 :describe          on Shift-Left.
 :edit              on Middle.
 :menu              on Right.
 :secondary-menu    on Shift-Right.
</pre>

<p id="183">
In the description, Left, Middle, and Right refer to mouse buttons (we
assume a right handed mouse) and Control and Shift refer to keyboard
keys. Thus to perform the <code>:inspect</code> gesture, hold
the Control key down and click the left mouse button. The other keys
typically used (but not in the list above) are Meta, Hyper, and
Super. Double clicks are supported and are called
Double-[button], e.g. Double-Left.
</p>
<p id="184">
Using the mouse, you can perform a variety of actions on a
mouse-sensitive object printed or drawn in a Composer window. Each
action is a <i>command</i>. A large number of commands are defined by
Allegro Composer. Some commands (such as Inspect and Describe) are
applicable to any Lisp object, while others are applicable only to
objects of some limited types or which otherwise satisfy some
criterion. For instance, Process Kill is applicable to any process but
Process Unarrest is applicable only to processes which are
arrested. Allegro Composer dynamically computes the commands
applicable to the object under the mouse. Indeed, having at least one
applicable command is what makes the presentation of an object mouse
sensitive in the first place.
</p>
<p id="185">
A command will be available only if it is appropriate to the object
and is included in the command set of a particular tool. However, with
some exceptions, any generally useful command will be available with
any tool. For example, the various specialized commands which operate
on processes are available not only in the Process Browser but on a
process object displayed, say, in an Inspector window.
</p>
<p id="186">
Nonetheless, for purposes of organization, we usually document commands
on specialized objects in the section on specialized tools concerning
them. Thus, commands on processes are documented in 
<a href="#process-browser-2">Section 6.4 The Process Browser</a>.
</p>
<p id="187">
When the mouse is over a mouse-sensitive object in a Composer window,
the <code>:menu</code> gesture will pop up a menu of applicable
commands. Clicking a command will execute it.
</p>
<p id="188">
Frequently commands will also be available on particular gestures. The
gestures are identified on the menu (in abbreviated form). Here is the
menu displayed by the <code>:menu</code> (usually clicking
right) on an object in an Inspector window:
</p>
<p id="189"><img src="pictures/cmp08-rbm-inw.jpg"></p>
<p id="190">
The first three choices have associated gestures --
<code>Describe</code> (Sh-L = Shift-Left),
<code>Inspect</code> (L = Left),
<code>Inspect in New Window</code> (C-L = Control-Left).
</p>

<hr><h2 id="191"><a name="changing-gestures-3">3.3.1 Changing gesture bindings</a></h2>

<p id="192">
You can change a gesture binding with the following macro
(named by the unexported symbol <code>excl::define-gesture-name</code>).
</p>

<hr><h3 id="193"><a name="excl::define-gesture-binding-op-bookmarkxx"></a>excl::define-gesture-binding</h3><h3 id="194">Macro</h3><h4 id="195">Package: excl</h4>

<p id="196"><b>Arguments: </b><i>gesture-name
</i>&amp;key <i>button shifts action unique</i><i>
</i></p>

<p id="197">
The macro returns <i>gesture-name</i> after (re)defining
the button and keyboard combination associated with
<i>gesture-name</i>. The value of
<i>gesture-name</i> must be a keyword naming a gesture
(i.e. <code>:inspect</code>, <code>:menu</code>, etc.)
</p>
<p id="198">
The value of the <i>button</i> must be one of
<code>:left</code>, <code>:middle</code>,
<code>:right</code>, <code>:double-left</code>,
<code>:double-middle</code>, or
<code>:double-right</code>. The <code>double-</code> means
a double click is required.  A value must be supplied for this
argument. There is no default.
</p>
<p id="199">
The value of the <i>shifts</i> must be either <code>nil</code> (the default); or one of the symbols
<code>:shift</code>, <code>:control</code>,
<code>:meta</code>, <code>:hyper</code>, or
<code>:super</code>; or a list of one or more of those symbols
(note: the argument is not evaluated). All specified keys must be
pressed when the specified button is clicked in order to perform the
gesture.
</p>
<p id="200">
If the <i>unique</i> argument is true (the default), any
previous gesture binding for <i>gesture-name</i> is
removed.  Specifying <code>nil</code> permits defining a
logical gesture with multiple bindings.
</p>
<p id="201">
For example:
</p>
<pre id="202">
;; When the following is evaluated, the :inspect gesture will
;; be performed by clicking the middle button while holding
;; down the Control key:
(excl::define-gesture-name :inspect :button :middle
                           :shifts :control)
</pre>

<hr>





<hr><h2 id="203"><a name="menus-2">3.4 Menus in Allegro Composer</a></h2>

<p id="204">
Menus are an important part of Allegro Composer, typically providing a list
of options suitable to the location and situation of the mouse and the state of 
Lisp and Composer.
</p>
<p id="205">
Some menus are on menu bars (the Composer menu is on the Emacs menu and
most composer windows have menu bars). Other are pop-up menus displayed
by the <code>:menu</code> gesture (and, in graph windows, the
<code>:secondary-menu</code> gesture).
</p>
<p id="206">
<b>Menu bar menus</b>: most Composer windows have menu bars. Clicking
over a menu label displays the menu. Most windows have a Window menu,
with choices <b>Quit</b> (close the window), <b>Resize to Fit</b>
(resize the window to exactly fit the displayed data, if possible),
and <b>Refresh</b> (update the data displayed in the window).
</p>
<p id="207">
<b>Menus over objects</b>. Many objects in Composer windows are mouse
sensitive, meaning some command can be performed on the object with a
gesture. Whenever an object in a Composer window is mouse-sensitive,
the <code>:menu</code> gesture (usually clicking the Right mouse
button) is defined and displays a menu. In graph windows, the
<code>:secondary-menu</code> gesture is usually defined as well.
</p>
<p id="208">
It is important to be sure what is selected and
mouse-sensitive. Allegro Composer indicates this by boxing. Note that
objects and parts of objects may be boxed.  For example, the following
shows the display of the list <code>(2 a 22)</code> in an
Inspector window. In the upper image, the whole list is selected
(boxed) while in the lower image, just the symbol <code>a</code>
(the second element of the list) is selected.
</p>
<p id="209"><img src="pictures/cmp09-boxes.jpg"></p>
<p id="210">
The choices in menus over objects are usually self-explanatory. Here
are some choices you will often see:
</p>

<ul>
<li id="211"><b>Inspect</b>: choosing this will cause the selected item to be inspected in
an Inspector window.
</li>
<li id="212"><b>Describe</b>: choosing this will cause a description (as
printed by <a href="../ansicl/dictentr/describe.htm"><b>describe</b></a>) of the selected item to be
printed in an Emacs buffer.
</li>
<li id="213"><b>Set *C* to object</b>: choosing this will cause the value of the
variable <a href="variables/composer/s_c_s.htm"><code>*c*</code></a> to
be set to the selected object.
</li>
<li id="214"><b>Edit Definition</b>: choosing this will open an Emacs buffer to the source
of the selected object, if such source exists and is known to Composer.
</li>
</ul>

<p id="215">
<b>Background menus</b>. many Composer windows have background menus,
displayed by the <code>:menu</code> gesture over the background
of a window (i.e. in a window but away from mouse-sensitive objects).
This menu is typically the same as the Window menu on the menu bar.
</p>

<p id="216">
<b>Menus over graph nodes and debugger items</b>. Graph nodes are
special in the following way. They often display Lisp objects which
can be acted upon like Lisp objects displayed in other
windows. However, you may be interested in the node as a node of a
graph rather than as a container of what it displays. Because it is
complicated to distinguish between pointing to a node and pointing to
its contents, separate gestures are provided for each purpose. The
<code>:menu</code> gesture performed at the node of a graph
displays a menu appropriate to its contents while the
<code>:secondary-menu</code> gesture displays a menu with
commands applicable to the node itself. The same issue affects frames
in a Debugger window, and both the <code>:menu</code> and the
<code>:secondary-menu</code> gestures are applicable to frames
in a Debugger window.
</p>



<hr><h2 id="217"><a name="graphs-2">3.5 Graphs</a></h2>

<p id="218">
Graph windows are used by several Composer utilities. They are used to
display runtime analysis data, to display cross-reference information,
and to display class hierarchies.
</p>
<p id="219">
Allegro Composer does not correctly display non-ASCII characters in
graphs.
</p>
<p id="220">
Here is a graph displaying the subclasses
of the class <code>stream</code> (displayed by choosing
<code>CLOS/Show class subclasses</code> and entering
<code>stream</code> in the minibuffer).
</p>
<p id="221"><img src="pictures/cmp10-streamgr.jpg"></p>

<hr><h2 id="222"><a name="scrolling-graphs-3">3.5.1 Scrolling graphs</a></h2>

<p id="223">
Since most graphs are larger than the window displaying them, only
part of the graph is visible. You can scroll the graph about in a
window in three ways: (1) with the scroll bars; (2) by dragging
(described next); and (3) with the <a href="#overview-window-3">overview window</a>.
</p>
<p id="224">
Drag scrolling works by placing the mouse cursor in the interior of
the window, but away from any node, and pressing the left or middle
mouse button and dragging the mouse. The graph will move in concert
with the mouse cursor.
</p>



<hr><h2 id="225"><a name="overview-window-3">3.5.2 The graph overview window</a></h2>

<p id="226">
The overview window is displayed when you choose <code>Show
Overview</code> from the Window menu on the menu bar of a graph
window. The overview window of the stream subclasses window shown
<a href="#graphs-2">above</a> is shown here:
</p>
<p id="227"><img src="pictures/cmp11-streamov.jpg"></p>

<p id="228">
The whole graph is visible (though the nodes do not display any
information).  The area currently displayed is shaded. Clicking any
mouse button over a location in the overview window scrolls the
associated graph window so the location clicked on is (roughly) in
the center of the graph window.
</p>



<hr><h2 id="229"><a name="graph-window-menu-3">3.5.3 The Window menu on a graph window menu bar</a></h2>

<p id="230">
The menu typically contains the following commands:
</p>

<ul>
<li id="231"><b>Quit</b>: close the graph window (and its associated overview window, if present).</li>
<li id="232"><b>Resize to Fit</b>: resize the graph window to fit (as best as possible) the data displayed.
</li>
<li id="233"><b>Refresh</b>: redraw the graph, usually to clean up garbage bits and other
visual irregularities. Note the data is not recomputed or otherwise modified.
</li>
<li id="234"><b>Show Overview</b>: show the overview window described in
<a href="#overview-window-3">Section 3.5.2 The graph overview window</a>.</li>
<li id="235"><b>Recompute Graph</b>: recreate the graph. All derived graphs
stored on the <a href="#graph-history-menu-3">History
menu</a> are destroyed (so the History menu reverts to
having one entry). This choice takes into account new data (new
subclasses to <code>stream</code> defined since the graph was
originally displayed, for example).</li>
<li id="236"><b>Find Node(s) From
name</b>: similar to the Lisp <a href="../ansicl/dictentr/aproposa.htm"><b>apropos</b></a> function. See
<a href="#find-nodes-from-name-3">Section 3.5.7 The Find Node(s) from Name menu choice</a> for details.</li>
</ul>




<hr><h2 id="237"><a name="graph-history-menu-3">3.5.4 The History menu on a graph window menu bar</a></h2>

<p id="238">
As described in
<a href="#sec-menu-over-graph-nodes-3">Section 3.5.6 The :secondary-menu gesture over a graph node</a>, you can
display derived graphs that leave out specific subtrees or just
display specific subtrees, etc. Each such derived graph is added as an
item on the History menu. Choosing that item replaces the graph
display with the derived graph. Graphs are typically named by their root (leftmost)
node (perhaps with more information). The item on the menu corresponding to
the currently displayed graph is grayed out.
</p>
<p id="239">
When the graph first appears, the only entry on the History menu is
the graph itself. Derived graphs are added as they are displayed. The
image below shows the History menu for the stream subclasses graph
when it is created (the only entry is labeled
<code>stream</code>) and then the History menu after the derived graph
containing the <code>fundamental-stream</code> subtree (labeled 
<code>subtree: fundamental-stream</code>) is displayed.
</p>

<p id="240"><img src="pictures/cmp12-streamhis1.jpg"></p>

<p id="241">
<b>Note that choosing Recompute Graph from the Window menu
destroys all derived graphs.</b>
</p>



<hr><h2 id="242"><a name="menu-gesture-over-nodes-3">3.5.5 The :menu gesture over a graph node</a></h2>

<p id="243">
The <code>:menu</code> gesture over a node displays a menu
applicable to the object displayed in the node, with the additional
choice <code>Menu of graph commands</code>, which displays the
menu associated with the <code>:secondary-menu</code> gesture
over the node. See the description of that menu <a href="#sec-menu-over-graph-nodes-3">below</a>.
</p>



<hr><h2 id="244"><a name="sec-menu-over-graph-nodes-3">3.5.6 The :secondary-menu gesture over a graph node</a></h2>


<p id="245">
The <code>:secondary-menu</code> gesture over a node displays a menu
of choices which will display derived graphs. Typical choices include:
</p>

<ul>
<li id="246"><b>Display More Parents</b>: this choice only appears in the
secondary menu over the root (leftmost) node. If more parents are known
about, this item will be on the menu and choosing it will redisplay
the graph. If this is chosen over the <code>stream</code> node,
a new node labeled <code>standard-object</code> appears as
<code>stream</code>'s parent.
</li>
<li id="247"><b>Hide Subtree</b>: choosing this causes the graph to be
redisplayed with the subtree to the right of the node removed. The
node will then be boxed with a dotted rather than a solid line.
</li>
<li id="248"><b>Just Display Subtree</b>: choosing this redisplays the graph
with the node as the root node, and only the subtree to the right of
it displayed.
</li>
<li id="249"><b>Print Subtree</b>: this choice, which does not affect the graph,
causes the names of nodes starting with the node under the menu, to be printed
to an Emacs buffer, indented to approximate the graphical relationships.
</li>
</ul>



<hr><h2 id="250"><a name="find-nodes-from-name-3">3.5.7 The Find Node(s) from Name menu choice</a></h2>

<p id="251">
<b>Find Node(s) From Name</b> is a choice in the <a href="#graph-window-menu-3">Window menu</a> on the menu bar
of a graph window. When you choose this item, the following happens:
</p>

<ol>
<li id="252">You are prompted in the Emacs minibuffer for a name. What you type
is not evaluated.  Symbol completion is available. You need only
enter a portion (contiguous letters --
<code>undamental-st</code> from
<code>fundamental-stream</code>, e.g.) of the desired name, just
as with <a href="../ansicl/dictentr/aproposa.htm"><b>apropos</b></a>.
</li>
<li id="253">
The graph is searched for nodes whose names contain the entered contiguous letters.
</li>
<li id="254">If no matches are found, the message "No matching node found" is printed in the minibuffer.
</li>
<li id="255">
If exactly one matching node is found, the graph is scrolled (not redrawn) so the matching node
is placed left middle (as much as possible).
</li>
<li id="256">If more than one matching node is found, two things happen. (1)
The graph is scrolled (not redrawn) so that the first (according to an
internal list) match is left middle (as much as possible). (2) The
overview window (if displayed) is redrawn so that the matching nodes
are filled with gray. The gray fills disappear the next time the overview window is updated.
</li>
</ol>






<hr><hr><h2 id="257"><a name="debugger-1">4.0 The debugger in Allegro Composer</a></h2>

<p id="258">
The debugger in Allegro Composer uses both Emacs buffers and Composer windows
to display information about broken processes. It utilizes the Allegro CL facilities
for evaluation in context and for separate listeners.
</p>
<p id="259">
The debugger functionality provided is not significantly different from
that described in <a href="debugging.htm">debugging.htm</a>. What Allegro Composer adds is enhanced
display of debugging information and the ability to identify and manipulate objects by
pointing to them with the mouse.
</p>
<p id="260">
You may note there is no item on the Composer menu corresponding to
the debugger.  That is because debugging facilities in Allegro
Composer are only available when a Lisp process is in a break
loop. Debugger windows are displayed with the top-level command
<a href="tpl-commands/wdebug.htm"><b>:wdebug</b></a>. Debugger windows display
a stack backtrace (a zoom, displayed in a listener with the <a href="tpl-commands/zoom.htm"><b>:zoom</b></a> top-level command).
</p>
<p id="261">
Debugging background processes (broadly, processes not set up to
receive typed input) in special listener buffers occurs automatically,
as described in <a href="debugging.htm#background-processes-1">Debugging background processes</a>
in <a href="debugging.htm">debugging.htm</a>. Note that this is a Lisp rather
than a Composer feature.
</p>

<hr><h2 id="262"><a name="debugging-window-2">4.1 Displaying a stack backtrace in a window</a></h2>

<p id="263">
You can create a debugger window for a broken process by entering the command
<a href="tpl-commands/wdebug.htm"><b>:wdebug</b></a> to the listener for that process.
</p>
<p id="264">
The window displaying the backtrace is called a debugger
window. Clearing the error in the listener (using e.g. <a href="tpl-commands/pop.htm"><b>:pop</b></a> or <a href="tpl-commands/reset.htm"><b>:reset</b></a>) will cause the associated debugger
window to be closed, as does clearing the error using the appropriate
item in the Debugger menu on the debugger window also closes the
window.  But note that closing the window (by choosing Quit from the
Window menu or clicking on the Close button) does not clear the error.
</p>
<p id="265">
Here is the debugger window displayed when an undefined function
<code>badfun</code> is called.
</p>
<p id="266"><img src="pictures/cmp13-debug.jpg"></p>
<p id="267">
Note the following about this window:
</p>

<ul>
<li id="268">
The individual frames are surrounded by parentheses.
</li>
<li id="269">
Only a maximum of three lines of each frame is displayed (unless you
cause the whole frame to be displayed by choosing the appropriate item
on the menu displayed by the <code>:secondary-menu</code>
gesture over the frame).
</li>
<li id="270">
The function called in the frame is printed in bold type while the arguments are in regular type.
</li>
<li id="271">
The current frame is indicated with a <code>-&gt;</code>.
</li>
</ul>

<p id="272">
Debugger windows inherit the values of <code>*print-level*</code>
and <code>*print-length*</code> from the listener to which the
<a href="tpl-commands/wdebug.htm"><b>:wdebug</b></a> command was typed. If the
system determines the values are inappropriate, it will select
appropriate values and print a message to that effect to the
listener.
</p>

<p id="273">
If another error occurs in the listener associated with a Debugger
window, the Debugger window is not changed or updated. You should
enter the <a href="tpl-commands/wdebug.htm"><b>:wdebug</b></a> command again,
which will cause the current Debugger window to be closed and a new
one to be created.
</p>

<p id="274">
The frames and some of the contents of frames are mouse-sensitive. The subsections that follow
describe menus and mouse actions in debugger windows.
</p>

<ul>
<li id="275"><a href="#debugger-window-menu-3">Section 4.1.1 The Window menu on a Debugger window menu bar</a></li>
<li id="276"><a href="#debugger-debugger-menu-3">Section 4.1.2 The Debugger menu on a Debugger window menu bar</a></li>
<li id="277"><a href="#dw-snd-menu-on-frame-3">Section 4.1.3 Menus over frames 1: the :secondary-menu gesture menu</a></li>
<li id="278"><a href="#dw-menu-on-frame-3">Section 4.1.4 Menus over frames 2: the :menu gesture menu</a></li>
<li id="279"><a href="#dw-menu-on-object-3">Section 4.1.5 Menus over objects</a></li>
<li id="280"><a href="#dw-menu-on-local-3">Section 4.1.6 The :menu gesture over a local</a></li>
</ul>



<hr><h2 id="281"><a name="debugger-window-menu-3">4.1.1 The Window menu on a Debugger window menu bar</a></h2>

<p id="282">
This menu contains the usual Window menu entries. The same entries are
on the background menu, displayed with the <code>:menu</code>
gesture over a non-mouse-sensitive piece of a Debugger window (note that there are few
places in a Debugger window that are not mouse-sensitive).
</p>

<ul>
<li id="283"><b>Quit</b>: close the Debugger window. Note that choosing this option does
not clear the Lisp error being debugged.
</li>
<li id="284"><b>Resize to Fit</b>: resize the Debugger window to fit (as best as possible) the data displayed.
</li>
<li id="285"><b>Refresh</b>: redraw the Debugger window, usually to clean up
garbage bits and other visual irregularities. Note the data is not
recomputed or otherwise modified.
</li>
</ul>



<hr><h2 id="286"><a name="debugger-debugger-menu-3">4.1.2 The Debugger menu on a Debugger window menu bar</a></h2>

<p id="287">
The Debugger menu has choices which affect the broken process as well
as the Debugger window itself. The choices depend on the state of the window.
The two possibilities are illustrated next.
</p>
<p id="288"><img src="pictures/cmp14-debugger-menus.jpg"></p>

<ul>
<li id="289">
<b>Show All Frames</b>: choosing this is similar to calling <a href="tpl-commands/zoom.htm"><b>:zoom</b></a> with arguments <code>:all
t</code>. All frames, including those normally hidden, are
displayed. This choice is only available when frames are hidden.
</li>
<li id="290">
<b>Hide Frames</b>: choosing this is simliar to calling <a href="tpl-commands/zoom.htm"><b>:zoom</b></a> with arguments <code>:all
nil</code>. Frames normally hidden are hidden. This choice is only
available when all frames are shown.
</li>
<li id="291">
<b>Pop</b>: choosing this has the programmatic effect of entering <a href="tpl-commands/pop.htm"><b>:pop</b></a> to the listener of the broken process: the process
pops up one break level (or to the top-level). The Debugger window will be closed (even
if the process was in a break level higher than 1, and so is not reset to the top-level).
See Pop and Refetch below.
</li>
<li id="292">
<b>Reset</b>: choosing this has the programmatic effect of entering <a href="tpl-commands/reset.htm"><b>:reset</b></a> to the listener of the broken process: the process
throws out to the top-level. The Debugger window will be closed.
</li>
<li id="293">
<b>Refetch</b>: choosing this causes the Debugger window to be updated
(the window will go blank and then refill). This command has several
uses. Among them are (1) redisplay when values have changed (because,
perhaps, you set values in the Listener) and (2) redisplay when you
want locals or specials to be hidden (locals and specials are not
displayed after a Refetch even if they were displayed before the
Refetch).
</li>
<li id="294">
<b>Pop and Refetch</b>: similar to choosing Refetch except the process is
popped one break level and the Debugger window is recreated (if the
process is still in a break level -- if popping takes the process to
the top-level, the Debugger window is not recreated). The Debugger window will disappear
and then reappear if the process is still in a break level.
</li>
<li id="295">
<b>Restarts -&gt;</b>: if the process has any available restarts, they
are listed in a submenu (whose existence is indicated by the
-&gt;). If no restarts are available, this item is grayed out (but
restarts are essentially always available).
</li>
</ul>



<hr><h2 id="296"><a name="dw-snd-menu-on-frame-3">4.1.3 Menus over frames 1: the :secondary-menu gesture menu</a></h2>

<p id="297">
When you perform the <code>:secondary-menu</code> gesture over a
frame in a Debugger window, a menu of commands appropriate to the frame
appears. The exact contents of the menu depends on the state of the
Debugger window. The illustration below is the menu as
soon as the Debugger window appears. To display this menu, the cursor
must be over the frame, but the frame itself need not be selected
(boxed). The <code>:secondary-menu</code> works even if
something in the frame is selected (boxed).
</p>

<p id="298"><img src="pictures/cmp15-2nd-menu-frame.jpg"></p>

<p id="299">
The choices are:
</p>

<ul>
<li id="300">
<b>Show entire frame representation</b>: choosing this will cause the
entire frame to be displayed, rather than restricting the
representation to a few lines. There is no direct inverse. Choosing
<b>Refetch</b> from the Debugger menu will recompute the window and display
frames in the abbreviated mode again.
</li>
<li id="301">
<b>Show locals</b>: choosing this will cause the window to be
redisplayed with local variables associated with the frame
displayed. If the frame is associated with compiled code, it must have
been compiled with the compiler instructed to save local names (see
<a href="variables/compiler/save-local-names-switch.htm"><code>save-local-names-switch</code></a>). To get rid of
locals, choose <b>Hide locals</b> from the (modified) menu or choose 
<b>Refetch</b> from the Debugger menu.
</li>
<li id="302">
<b>Hide locals</b> (not illustrated): If locals for the frame are
shown, this item will be on the menu and choosing it will hide the
locals.
</li>
<li id="303">
<b>Show specials</b>: choosing this will cause the window to be
redisplayed with special variables bound in the frame displayed.
To get rid of
specials, choose <b>Hide specials</b> from the (modified) menu or choose 
<b>Refetch</b> from the Debugger menu.
</li>
<li id="304">
<b>Hide the frame</b>: choosing this causes the window to be
redisplayed with this frame hidden. To get the frame back, choose
<b>Refetch</b> from the Debugger menu.
</li>
<li id="305">
<b>Restart this frame</b>: choosing this is similar to entering
the  top-level
command <a href="tpl-commands/restart.htm"><b>:restart</b></a> to the listener. 
</li>
<li id="306">
<b>Restart this frame from a value</b>: choosing this is similar to
entering the top-level command <a href="tpl-commands/restart.htm"><b>:restart</b></a> with an argument to the listener.
You are prompted for the argument in the minibuffer. The argument must
be a frame-like object, a list whose first element is the function
called and whose remaining elements are the evaluated arguments.
</li>
<li id="307">
<b>Return a value</b>: choosing this is similar to entering the
top-level command <a href="tpl-commands/return.htm"><b>:return</b></a> to the
listener. You are prompted for a value in the minibuffer.
</li>
</ul>



<hr><h2 id="308"><a name="dw-menu-on-frame-3">4.1.4 Menus over frames 2: the :menu gesture menu</a></h2>

<p id="309">
Performing the <code>:menu</code> gesture over a frame displays
a menu of commands on the frame. Note that the entire frame must be
selected (boxed) for Composer to treat the frame as the object being
pointed to (there are menus for objects represented in frames as
well). The menu displayed is illustrated below.
</p>


<p id="310"><img src="pictures/cmp16-menu-frame.jpg"></p>

<ul>
<li id="311">
<b>Inspect</b>: inspect the frame object in an Inspector window.
</li>
<li id="312">
<b>Setq *C* to Object</b>: set the value of <a href="variables/composer/s_c_s.htm"><code>*c*</code></a> to the frame object.
</li>
<li id="313">
<b>Edit Definition</b>: if the source file location is known for the code associated with
the frame, that file is accessed and displayed in an Emacs buffer.
</li>
<li id="314">
<b>Select this frame</b>: make the frame the current frame.
</li>
<li id="315">
<b>Menu of Frame Commands</b>: display the menu displayed by the
<code>:secondary-menu</code> gesture over the frame. That menu
is described in <a href="#dw-snd-menu-on-frame-3">Section 4.1.3 Menus over frames 1: the :secondary-menu gesture menu</a>.
</li>
</ul>



<hr><h2 id="316"><a name="dw-menu-on-object-3">4.1.5 Menus over objects</a></h2>

<p id="317">
The objects displayed in a Debugger window are presentations upon
which gestures can be performed. When the mouse is over an object on
which a gesture can be performed, that object is boxed. We described
the menu over frames in the <a href="#dw-menu-on-frame-3">previous section</a> and the menu over locals in the
<a href="#dw-menu-on-local-3">next section</a>.
</p>



<hr><h2 id="318"><a name="dw-menu-on-local-3">4.1.6 The :menu gesture over a local</a></h2>

<p id="319">
Consider the function bar:
</p>

<pre id="320">
(defun bar (x y)
  (break)
  (+ x y))
</pre>

<p id="321">
We evaluate <code>(bar 1 2)</code> and display a Debugger window.
We have locals displayed because we have chosen <b>Show locals</b> from
the
<code>:secondary-menu</code> gesture over the frame (see
<a href="#dw-snd-menu-on-frame-3">Section 4.1.3 Menus over frames 1: the :secondary-menu gesture menu</a>). The local Y is boxed.
</p>

<p id="322"><img src="pictures/cmp17-local-y.jpg"></p>

<p id="323">
When you perform the <code>:menu</code> gesture over a local,
the menu displayed has choices:
</p>

<ul>
<li id="324">
<b>Set this variable</b>: if you choose this, you are prompted in the
minibuffer for a form.  The variable is set to the value of the form.
</li>
<li id="325">
<b>Set this variable from *C*</b>: the value of the local variable will
be set to the value of <a href="variables/composer/s_c_s.htm"><code>*c*</code></a>.
</li>
</ul>






<hr><hr><h2 id="326"><a name="window-inspector-1">5.0 The window-based inspector</a></h2>

<p id="327">
The window-based inspector allows the user to examine the internals of
any Lisp object. Many Composer windows present Lisp objects and allow
you to inspect those objects using the <code>:inspect</code>
gesture.
</p>
<p id="328">
Inspector windows maintain a history of objects inspected. You can use
the mouse to choose elements from that history for display in the
window. Providing a history mechanism prevents a proliferation of inspector windows.
</p>
<p id="329">
There are five ways to bring up an Inspector window:
</p>

<ul>
<li id="330">
<b>Call the winspect function</b>: the function <a href="operators/composer/winspect.htm"><b>winspect</b></a> takes any lisp object as an
argument and displays an Inspector window for that object.
</li>
<li id="331">
<b>Use the :winspect top-level command</b>: the top-level command
<a href="tpl-commands/winspect.htm"><b>:winspect</b></a> takes any Lisp object as
an argument and displays an Inspector window for that object.
</li>
<li id="332">
<b>Choose Inspect from the Composer menu</b>: as described in 
<a href="#inspect-item-3">Section 3.2.1 The Inspect menu item</a>, the
Inspect item of the Composer menu prompts you in the minibuffer for
an object to inspect.
</li>
<li id="333">
<b>Choose Inspect from another Composer menu</b>: the Inspect command
is typically available on the menu displayed by the
<code>:menu</code> gesture. In this case, the object to inspect is
the object being pointed to.
</li>
<li id="334">
<b>Perform the :inspect gesture while over a mouse-sensitive
object</b>: when the menu displayed by the <code>:menu</code>
gesture includes an Inspect item, the <code>:inspect</code>
gesture (usually Control-Left) has the same effect as choosing Inspect from the menu.
</li>
</ul>

<hr><h2 id="335"><a name="inspector-windows-2">5.1 Inspector windows and their menus</a></h2>

<p id="336">
The illustration below shows an Inspector window inspecting <code>(cons 1 2)</code>.
</p>

<p id="337"><img src="pictures/cmp18-inspector-window.jpg"></p>

<p id="338">
The window has a title bar, a menu bar (with menus Window, Inspect as,
and History), an interior (displaying the information) and scroll
bars (not currently active).
</p>
<p id="339">
The interior of an Inspector window has one or two header lines (only one in
the illustration) identifying the object being inspected, and, below
the header lines, two columns. The one on the left is the labels
column and the one on the right the values column. (Note that zero,
one, or more values may appear next to a single label though one value is
most common.)
</p>
<p id="340">
In the illustration, the one-line header line says <code>(1 .2) is
of #&lt;built-in class cons&gt;</code>. Only two lines are
allocated for header lines. Suspension points (...) are used if two
lines are insufficient, to indicate missing material. If you want to
see more, make the window wider (using window manager tools) and
choose <b>Refetch</b> from the Window menu. Note that choosing
<b>Resize to Fit</b> usually does not work for this purpose.
</p>
<p id="341">
In the next illustration, we show the result of choosing Inspect from
the Composer menu and entering <code>(find-class 'stream)</code>
in the minibuffer. Note that this window is organized somewhat
differently than the one illustrated above: instead of there being a
column of labels and a column of values, the description is more
discursive. This style of presentation is thought more useful for CLOS
classes, and so it is used by default when a class is being
inspected. The <code>Inspect as</code> menu (which we describe
in more detail below in
<a href="#inspect-as-menu-on-iw-3">Section 5.1.2 The Inspect As menu on an Inspector window</a>) shows
different presentation styles. The one in the window is the
<code>std-class</code> style. If you select the
<code>t</code>, the window will redisplay in the label
column/value column format.
</p>
<p id="342">
Note too about the Inspector window for the stream class that the
display is complete (because the scroll bars are not active) but none
of the 17 methods mentioned at the bottom are displayed. <code>17
methods</code> is mouse sensitive and choosing Inspect from the
menu displayed by the <code>:menu</code> gesture will inspect
the methods.
</p>

<p id="343"><img src="pictures/cmp19-class-iw.jpg"></p>

<p id="344">
In an Inspector window, you can (1) display an inspection of an object
displayed; (2) set the value of (most of the) slots, and (3) change
the method of inspection.
</p>
<p id="345">
Using the <code>:select</code> gesture (typically clicking Left)
over an object causes it to be inspected in the same window (previous
inspections are available using the History menu). The
<code>:inspect</code> gesture (typically clicking Control Left)
brings up a new window. We recommend using the
<code>:select</code> gesture to reduce the number of windows.
</p>
<p id="346">
Using the <code>:select</code> gesture (typically clicking Left)
over a label (actually, the label and the value are boxed) prompts you
in the minibuffer for a new value and replaces the current value with
the new one.
</p>
<p id="347">
When the value column has no entry for a label, it means the slot
named by the label is unbound. It does not mean that the value is
<code>nil</code> or, say the empty string "". Symbols
without a value have an empty value slot, for example. 
</p>
<p id="348">
In some cases a label has more than one corresponding value. This is
an artifact of the presentation style: you can inspect a 2-d array (as
returned by <code>(make-array '(2 2) :initial-contents '((1 2)(3
4)))</code>) as a 2-d matrix, with two labels indicating rows and
having two values or as a vector with four labels with one value each.
You can select each individual value and modify it. If you select the
label and call for a new value, only one value is accepted and one
changed.
</p>

<hr><h2 id="349"><a name="window-menu-on-iw-3">5.1.1 The Window menu on an Inspector window</a></h2>

<p id="350">
The Window menu has these choices:
</p>

<ul>
<li id="351"><b>Quit</b>: close the window.</li>
<li id="352"><b>Resize to Fit</b>:
cause the window to be resized to fit (as best it can) the
contents.</li>
<li id="353"><b>Refresh</b>: redisplay the window (to remove
garbage bits, e.g.) but do not update the contents.</li>
<li id="354"><b>Change Package</b>: specify (in the minibuffer) the name of the package that
is the current package when the contents are displayed (this 
affects which symbols are and are not package qualified). This action does not affect
the current package in the listener.</li>
<li id="355"><b>Refetch</b>: redisplay the window and update the contents.</li>
<li id="356"><b>Clone</b>: create a new Inspector window with the same contents and history.
</li>
</ul>

<p id="357">
The background menu, displayed with the <code>:menu</code> gesture
over a non-mouse-sensitive portion of the interior of an Inspector window,
has the same contents as the Window menu.
</p>



<hr><h2 id="358"><a name="inspect-as-menu-on-iw-3">5.1.2 The Inspect As menu on an Inspector window</a></h2>

<p id="359">
The contents of this menu are determined by the inspected object. The
choice <code>t</code> will always be present and there may be
other choices as well.
</p>
<p id="360">
The illustration shows the contents of the menu when inspecting a
<code>cons</code>. The choices are <code>t</code>,
<code>cons inspector</code>, and <code>list
inspector</code>. The choices affect what labels are used, and how
the values are grouped.
</p>

<p id="361"><img src="pictures/cmp20-inspect-as-menu.jpg"></p>



<hr><h2 id="362"><a name="history-menu-on-iw-3">5.1.3 The History menu on an Inspector window</a></h2>

<p id="363">
This menu keeps track of the history of inspections in the window. The
printed representation of the object inspected is presented as a menu
selection. The currently inspected object is masked. The purpose of
this menu is to reduce the number of windows in use by using a single
window many times.
</p>



<hr><h2 id="364"><a name="menus-over-labels-and-values-3">5.1.4 Menus over labels and values in an Inspector window</a></h2>

<p id="365">
The <code>:menu</code> gesture over a label of a settable slot
(not all slots are settable) in an inspector window displays a menu
with two choices:
</p>

<ul>
<li id="366"><b>Set Slot</b>: you are prompted in the minibuffer for a new
value for the slot, if you choose this. If more than one value is
displayed for a slot, only one is changed.
</li>
<li id="367"><b>Set slot from *c*</b>: the value of the slot will be set to the
value of <a href="variables/composer/s_c_s.htm"><code>*c*</code></a>.
</li>
</ul>

<p id="368">
The <code>:menu</code> over a value will display a menu of choices
suitable for that value.
</p>






<hr><hr><h2 id="369"><a name="browsers-1">6.0 Composer Browsers</a></h2>

<p id="370">
A browser is a tool to examine some aspect of the Lisp system. Allegro
Composer provides browsers for CLOS classes, cross reference
information, systems defined with <a href="operators/excl/defsystem.htm"><b>defsystem</b></a>, and processes.
</p>

<hr><h2 id="371"><a name="clos-browsers-2">6.1 CLOS class browsers</a></h2>

<p id="372">
The CLOS submenu (see <a href="#clos-submenu-3">Section 3.2.2 The CLOS submenu</a>)
of the Composer menu includes items <code>Show Class
Superclasses</code> and <code>Show Class
Subclasses</code>. When you choose either of these items, you are
prompted in the minibuffer for a class name (which is not evaluated).
See <a href="#graphs-2">Section 3.5 Graphs</a> for information on graphs.
</p>




<hr><h2 id="373"><a name="xref-browsers-2">6.2 Cross reference browsers</a></h2>

<p id="374">
The Xref submenu (see <a href="#xref-submenu-3">Section 3.2.3 The Xref submenu</a>)
of the Composer menu includes items <code>Show Calls To</code>,
<code>Show Calls From</code>, and <code>Show Calls To and
From</code>. Only compiled functions add information to the cross
reference database, and information is only added if <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> and (when
loading a fasl file) <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> are true (but see the comment
next on the <code>Xref Scans Entire Heap</code> option).
</p>
<p id="375">
The cross reference facility (on which the graphs are based) is
described in <a href="cross-reference.htm">cross-reference.htm</a>. Note that more
information may be displayed in the Cross Reference graphs (if the
option <code>Xref Scans Entire Heap</code> is on, see
<a href="#options-item-3">Section 3.2.5 The Options menu item</a>) than cross reference
data displayed in a listener. The latter only displays cross reference
data collected from user files. The former (when the option is on)
scans all compiled code vectors and thus finds much more
information. 
</p>

<p id="376">
See also <a href="#graphs-2">Section 3.5 Graphs</a> for
information on graphs.
</p>



<hr><h2 id="377"><a name="defsystem-browsers-2">6.3 The defsystem browser</a></h2>

<p id="378">
A defsystem browser will be displayed when you choose
<code>Other/System Browser</code> from the Composer menu. All
systems are defined by the defsystem utility described in
<a href="defsystem.htm">defsystem.htm</a>.
</p>
<p id="379">
Consider the following simple example. There are four files:
</p>
<pre id="380">
;; filea.cl

(in-package :user)
(defun funa () 'yow)

;; fileb.cl

(in-package :user)
(defun funb () 'wow)

;; macros.cl

(in-package :user)
(defmacro this-is-a-macro (x) '(+ ,x ,x))

;; not-macros.cl

(in-package :user)
(defun use-macro (x)
  (this-is-a-macro x))
</pre>

<p id="381">
The file <i>sys.cl</i> defines three systems:
</p>

<pre id="382">
(in-package :user)

(defsystem :my-system ()
  (:parallel "filea" "fileb"))

(defsystem :my-other-system ()
  (:definitions "macros" "mot-macros"))

(defsystem :my-super-system ()
  (:serial :my-system :my-other-system))
</pre>

<p id="383">
Load <i>sys.cl</i> and choose <code>Other/System
Browser</code> from the Composer menu. The following window is
displayed (assuming you do not already have systems defined. If you
do, they will also be listed.)
</p>

<p id="384"><img src="pictures/cmp21-defsystem.jpg"></p>

<p id="385">
The Window menu on the menu bar has the following choices:
</p>

<ul>
<li id="386"><b>Quit</b>: close the window.</li>
<li id="387"><b>Resize to Fit</b>:
cause the window to be resized to fit (as best it can) the
contents.</li>
<li id="388"><b>Refresh</b>: redisplay the window (to remove
garbage bits, e.g.) but do not update the contents.</li>
<li id="389"><b>Update Browser</b>: redisplay the window and update the contents.</li>
</ul>

<p id="390">
Applying the <code>:menu</code> gesture over a system displayed in the browser
(in either column) displays the menu shown here.
</p>


<p id="391"><img src="pictures/cmp22-defsystem-menu.jpg"></p>

<p id="392">
It has the following choices:
</p>

<ul>
<li id="393">
<b>Describe</b>: describe (in an Emacs buffer) the indicated system.
</li>
<li id="394">
<b>Inspect</b>: display an Inspector window inspecting the indicated system.
</li>
<li id="395">
<b>Set *c* to Object</b>: set the value of <a href="variables/composer/s_c_s.htm"><code>*c*</code></a> to the the indicated system object.
</li>
<li id="396">
<b>Edit Definition</b>: find the file where the system is defined and open it in an Emacs buffer
(the file <i>sys.cl</i> would be opened in our example).
</li>
<li id="397">
<b>Show System</b>: print a description of the indicated system to an Emacs buffer.
</li>
<li id="398">
<b>Compile System</b>: apply <a href="operators/excl/compile-system.htm"><b>compile-system</b></a> to the indicated
system.
</li>
<li id="399">
<b>Load System</b>: apply <a href="operators/excl/load-system.htm"><b>load-system</b></a> to the indicated
system.
</li>
<li id="400">
<b>Compile and Load System</b>: apply <a href="operators/excl/compile-system.htm"><b>compile-system</b></a> and then <a href="operators/excl/load-system.htm"><b>load-system</b></a> to the indicated
system.
</li>
</ul>



<hr><h2 id="401"><a name="process-browser-2">6.4 The Process Browser</a></h2>

<p id="402">
Choosing <code>Other/Process Browser</code> from the
Composer menu displays the Process Browser, which contains information
about processes (or threads) currently running. (See
<a href="multiprocessing.htm">multiprocessing.htm</a> for information on processes
and threads.)
The Process Browser is illustrated below. This window is regularly automatically updated.
</p>

<p id="403"><img src="pictures/cmp23-process-browser.jpg"></p>

<p id="404">
The header line at the top of the interior of the window labels the
columns of information. These headings are the same as those
printed by the <a href="tpl-commands/processes.htm"><b>:processes</b></a> top-level command. They are:
</p>

<ul>
<li id="405">
<b>P</b>: `*' if the process is set to be profiled by the runtime
analyzer.
</li>
<li id="406">
<b>Dis</b>: The number of times this process has been resumed by the
scheduler since the previous report.
</li>
<li id="407">
<b>Sec</b>: The total cpu time consumed by this process (approximate).
</li>
<li id="408">
<b>dSec</b>: The cpu time consumed by this process since the last report.
</li>
<li id="409">
<b>Priority</b>: The integer process priority.
</li>
<li id="410">
<b>State</b>: one of inactive, runnable, or waiting.
</li>
<li id="411">
<b>Process name, Whostate, Arrest</b>:
the process name, the process whostate (if any), and a list of
arrest reasons (if any).
</li>
</ul>

<p id="412">
The Process Browser has a Window menu on its menu bar. The choices are:
</p>

<ul>
<li id="413">
<b>Quit</b>: close the window.
</li>
<li id="414">
<b>Resize to Fit</b>: resize the window (as best as can be done) to show all data.
</li>
<li id="415">
<b>Refresh</b>: redraw the window and update the contents.
</li>
<li id="416">
<b>Change Update rate</b>: the Process Browser is automatically updated regularly.
This menu item allows you to specify the update rate. You are prompted in the Emacs 
minibuffer for an integer number (of seconds) when you choose this item. You can also specify
<code>nil</code> to suppress automatic updating. When the window is not
updated automatically, you can update manually be choosing <b>Refresh</b>.
</li>
</ul>



<hr><h2 id="417"><a name="menu-over-process-3">6.4.1 The :menu gesture over a process</a></h2>

<p id="418">
Only processes (the whole line, not any part) are boxed as you move
the mouse about the interior.
The menu displayed by the <code>:menu</code> gesture over a process is shown next.
</p>

<p id="419"><img src="pictures/cmp24-menu-over-process.jpg"></p>

<ul>
<li id="420">
<b>Describe</b>: describe (in an Emacs buffer) the process object.
</li>
<li id="421">
<b>Inspect</b>: inspect the process object in an Inspector window.
</li>
<li id="422">
<b>Set *c* to Object</b>: set the value of <a href="variables/composer/s_c_s.htm"><code>*c*</code></a> to the the indicated process object.
</li>
<li id="423">
<b>Process Break</b>: interrupt the process and put it in a break loop. Warning: do not 
use this on Allegro Composer processes.
</li>
<li id="424">
<b>Process Kill</b>: kill the process (with <a href="operators/mp/process-kill.htm"><b>process-kill</b></a>). Warning: do not use
this on Allegro Composer processes.
</li>
<li id="425">
<b>Process Arrest</b>: add an arrest reason to the list of arrest reasons for the
process. Warning: do not use
this on Allegro Composer processes.
</li>
<li id="426">
<b>Toggle Profile Stack Group P</b>: change whether the space and time
analyzers will collect data when this process is the current
process. See <a href="operators/mp/profile-process-p.htm"><b>profile-process-p</b></a>.
</li>
<li id="427">
<b>Restrict Profile to This Process Only</b>: after choosing this,
only this process will have a * in the P column indicating that it
will be profiled by the runtime analyzer.
</li>
</ul>







<hr><hr><h2 id="428"><a name="composer-profiling-1">7.0 The window interface to the runtime analyzer</a></h2>

<p id="429">
Runtime analysis using profiling in Allegro CL is described in
<a href="runtime-analyzer.htm">runtime-analyzer.htm</a>. There are space and time
analyzers (as well as a call-counting profiler which has no window
interface). The window interface described here is most useful for
examining runtime analysis data. You can start and stop data
collection with items on the profiler menu (see
<a href="#profiler-submenu-3">Section 3.2.4 The Profiler submenu</a>) but you cannot
suspend it, as you can with the functional interface.
</p>

<p id="430">
Here is an illustration of the profiler submenu.
</p>

<p id="431"><img src="pictures/cmp04-profmenu.jpg"></p>

<p id="432">
The items are described in <a href="#profiler-submenu-3">Section 3.2.4 The Profiler submenu</a>.
Here we just discuss the <b>Options</b> choice. When you choose <b>Options</b>,
the following dialog is displayed:
</p>

<p id="433"><img src="pictures/cmp25-profiler-options.jpg"></p>

<p id="434">
The <code>Profile Time or Space</code> option is set to
time. Click on it to change it to space. Only one of <b>[Start
Profiler]</b> (which starts data collection of the indicated type) and
<b>[Stop Profiler]</b> is active, as the data collection is or is not
occurring.  The <b>[Display Time Profile]</b> and <b>[Display Space
Profile]</b> are active only when there is data of the appropriate
type to display. Note that items on the Profiler menu allow starting
the time and the space data collection, and stopping them, and displaying
data.
</p>
<p id="435">
Two of the display parameters are associated with runtime analyzer
variables, <a href="variables/prof/s_fractional-significance-threshold_s.htm"><code>*fractional-significance-threshold*</code></a> and
<a href="variables/prof/s_significance-threshold_s.htm"><code>*significance-threshold*</code></a>. You can set the
values by clicking on the current value, at which point you are
prompted in the minibuffer for a new one. <b>Max Number of
Children</b> specifies the value of an internal variable that controls
the maximum number of child nodes a node in a graph may have. <code>nil</code> means no restriction. A change made to a value
immediately changes the associated variable's value.
</p>
<p id="436">
<b>[Undo Changes]</b> restores values to what they were when the dialog was first displayed.
<b>[Dismiss]</b> closes the dialog.
</p>


<hr><h2 id="437"><a name="profiler-graphs-2">7.1 Runtime analyzer profile graphs</a></h2>

<p id="438">
Runtime analyzer profile graphs are similar in most respects to other
Composer graph windows described in
<a href="#graphs-2">Section 3.5 Graphs</a> but they do have some
additional features. Let us consider an example. First display the
Process Browser (choose <code>Other/Process browser</code> from
the Composer menu. Click right (the <code>:menu</code> gesture
over the Initial Lisp Listener process and choose <b>Restrict Profile
To This Process Only</b> (this will reduce the amount of extraneous
data).  Start the time runtime analyzer profile by choosing
<code>Profiler/Start Time Profiler</code> and evaluate
<code>(pprint (list-all-packages))</code> in the listener.  When
that form completes, stop the data collection by choosing
<code>Profiler/Stop Profiler</code>. Finally choose
<code>Profiler/Display Time</code>. A window similar to this
should appear.
</p>

<p id="439"><img src="pictures/cmp26-profiler-graph.jpg"></p>

<p id="440">
Note the several double-headed arrows (&lt;=&gt;). These indicate
elisions, where nodes have been left out (elided) because no
significant time was used between the node to the left and the one to
the right.
</p>
<p id="441">
The first (leftmost) node is labeled <code>start
100%</code>. This node does not correspond to any actual Lisp
function. It is simply the root of the graph.
</p>
<p id="442">
All boxed nodes are sensitive to the mouse and have
<code>:menu</code> and <code>:secondary-menu</code> menus
defined. As usual, the <code>:menu</code> is associated with the
contents of the node and the <code>:secondary-menu</code>
gesture is associated with the node itself and the graph. here is the
menu displayed by the <code>:secondary-menu</code> gesture over a node:
</p>

<p id="443"><img src="pictures/cmp27-2nd-menu-node.jpg"></p>

<ul>
<li id="444">
<b>Hide Subtree</b>: this standard graph menu command displays a graph
with the subtree starting at this node hidden.
</li>
<li id="445">
<b>Just Display Subtree</b>: this standard graph menu command displays a graph
with just the subtree starting at this node displayed.
</li>
<li id="446">
<b>Print Subtree</b>: prints a description of the subtree starting at
this node to an Emacs buffer.
</li>
<li id="447">
<b>Hide This Subchain</b>: this profile-graph-specific command is similar
to Hide Subtree except the node is hidden as well.
</li>
<li id="448">
<b>Unhide Suppressed Subchains</b> (not illustrated): this
profile-graph-specific command appears if subchains below the selected node are
hidden. This command unhides them.
</li>
<li id="449">
<b>Show Combined Subtree</b>: show a new graph with all nodes naming
the same function as the selected node combined. This is a useful
choice when investigating one function.
</li>
<li id="450">
<b>Print Statistics</b>: print statistics associated with the selected
node to an Emacs buffer.
</li>
<li id="451">
<b>Expand Elision</b> (not illustrated): when the menu is displayed over an elision marker
(&lt;=&gt;), this command is on the menu and expands the elision.
</li>
</ul>



<hr><hr><h2 id="452"><a name="x-composer-a-1">Appendix A: Configuring X windows for Allegro Composer</a></h2>

<p id="453">
Allegro Composer is a standard X client. It therefore depends on standard
X facilities for customization. In this appendix, we provide information necessary
for using X utilities to customize Allegro Composer but it is beyond the
scope of this document to describe X utilities in detail.
We assume you are familiar with customizing X.
</p>
<p id="454">
Like most X clients, Allegro Composer uses X resources for
configuration.  Unfortunately, different implementations of X on
different machines set up resources differently. In most, however,
there is a file name <i>.Xresources</i> which is used by
X for configuration. The exact details of how this file is used are
system-dependent but if the file is set up correctly when X is
started, things should work as you want.
</p>

<hr><h2 id="455"><a name="tool-names-ad-classes-a-2">Appendix A.1 Name and class of Composer tools</a></h2>

<p id="456">
In X, tools have a name and a class. The following table shows the
name and class of various Composer tools.
</p>


<table border="1" width="100%">
  <tr>
    <td width="33%"><b>Tool</b></td>
    <td width="33%"><b>Name</b></td>
    <td width="34%"><b>Class</b></td>
  </tr>
  <tr>
    <td width="33%">debugger</td>
    <td width="33%"><code>composer.debugger</code></td>
    <td width="34%"><code>Composer.Debugger</code></td>
  </tr>
  <tr>
    <td width="33%">class graph</td>
    <td width="33%"><code>composer.classGraph</code></td>
    <td width="34%"><code>Composer.Grapher</code></td>
  </tr>
  <tr>
    <td width="33%">who calls</td>
    <td width="33%"><code>composer.whoCallsGraph</code></td>
    <td width="34%"><code>Composer.Grapher</code></td>
  </tr>
  <tr>
    <td width="33%">process browser</td>
    <td width="33%"><code>composer.processBrowser</code></td>
    <td width="34%"><code>Composer.ProcessBrowser</code></td>
  </tr>
  <tr>
    <td width="33%">defsystem browser</td>
    <td width="33%"><code>composer.defsysBrowser</code></td>
    <td width="34%"><code>Composer.DefsysBrowser</code></td>
  </tr>
  <tr>
    <td width="33%">inspector</td>
    <td width="33%"><code>composer.inspector</code></td>
    <td width="34%"><code>Composer.Inspector</code></td>
  </tr>
  <tr>
    <td width="33%">profile graph</td>
    <td width="33%"><code>composer.profilerGraph</code></td>
    <td width="34%"><code>Composer.Grapher</code></td>
  </tr>
  <tr>
    <td width="33%">listener</td>
    <td width="33%"><code>composer.listener</code></td>
    <td width="34%"><code>Composer.Listener</code></td>
  </tr>
  <tr>
    <td width="33%">profiler options</td>
    <td width="33%"><code>composer.profilerOptions</code></td>
    <td width="34%"><code>Composer.ProfilerOptions</code></td>
  </tr>
</table>

<p id="457">
Graph overview windows have a name/class that is the same as the graph
window name/class with `.overview'/`.Overview' appended to the
name/class. Thus <code>composer.whoCallGraph.overview</code> and
<code>Composer.Grapher.Overview</code>.
</p>



<hr><h2 id="458"><a name="tool-resources-a-2">Appendix A.2 Resources of tools</a></h2>

<p id="459">
Tool resources include the following:
</p>

<ul>
<li id="460">geometry</li>
<li id="461">font</li>
<li id="462">boldFont</li>
<li id="463">italicFont</li>
<li id="464">boldItalicFont</li>
<li id="465">foreground</li>
<li id="466">background</li>
<li id="467">baseColor</li>
<li id="468">borderWidth</li>
<li id="469">matWidth</li>
<li id="470">borderColor</li>
<li id="471">matColor</li>
<li id="472">titleColor</li>
<li id="473">titleFont</li>
<li id="474">title</li>
<li id="475">iconGeometry</li>
<li id="476">backingStore</li>
<li id="477">maxWidth</li>
<li id="478">maxHeight</li>
</ul>

<p id="479">
A resource of a particular tool is the <i>name.resource</i>. For
example, the font resource of the process browser is
<code>composer.processBrowser.font</code>.
</p>
<p id="480">
The baseColor resource sets the tone colors of the window. It is
normally a light color. The font resource specifies the default
font. Bold, italic, and boldItalic fonts are derived from font unless
they are also specified.
</p>



<hr><h2 id="481"><a name="specifying-resources-a-2">Appendix A.3 Specifying resource values in .Xdefaults</a></h2>

<p id="482">
You can specify the resource values in several ways.
</p>
<p id="483">
You can specify exact matches, as with the following specifying the
font of the Defsys Browser:
</p>
<pre id="484">
composer.defsysBrowser.font -adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1
</pre>
<p id="485">
You can match the class and apply the resource to all tools of that class:
</p>
<pre id="486">
Composer.Grapher: -adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1
</pre>
<p id="487">
You can use wildcards to specify a number of matching tools:
</p>
<pre id="488">
composer*font: -adobe-courier-medium-r-normal--12-120-75-75-m-70-iso8859-1
</pre>
<p id="489">
You can specify both specific and general resources in the same
file. The specific will take precedence over the general. For example,
if the file contains this:
</p>
<pre id="490">
composer*background: pink
composer.processBrowser.background: purple
</pre>
<p id="491">
the background of all Composer windows will be pink except for the
Process Browser. Its background will be purple.
</p>



<hr><h2 id="492"><a name="reinitializing-resources-a-2">Appendix A.4 Reinitializing resources</a></h2>

<p id="493">
The X resources are read by Lisp when Allegro Composer starts up. The
resources are typically read by the X server. If you change the
resources in the server (typically by modifying your
<i>.Xdefaults</i> file and using the <b>xrdb</b> utility
to load them into the server) Lisp will not see the changes unless you
choose the <code>Reinitialize Composer Resources</code> item
from the Other submenu of the Composer menu on the Emacs menu bar.
Stopping and restarting Allegro Composer also works. 
</p>
<p id="494">
Note that we said `typically' several times in the last paragraph. It
may be that resources are not loaded into the server but are handled
in a different fashion. If that is the case, you must adapt what we
have said to that situation. If choosing <code>Reinitialize
Composer Resources</code> does not work, stop Allegro Composer and
restart it.
</p>



<hr><hr><h2 id="495"><a name="startup-errors-a-1">Appendix B: Problems starting Allegro Composer</a></h2>

<p id="496">
If you start Allegro Composer from Allegro CL started with the Emacs
command <b>fi:common-lisp</b>, so it is running as a subprocess of an
Emacs displaying in a X window, you should not have any startup
problems, since things should be set up in such a way that they will
just work. Nonetheless, this appendix discusses potential problems.
</p>

<hr><h2 id="497"><a name="no-connect-to-emacs-proc-a-2">Appendix B.1 Error: there is no process named Connect to Emacs daemon</a></h2>

<p id="498">
Allegro Composer can only be started when Allegro CL was started as a
subprocess of Emacs with <b>fi:common-lisp</b> (in that case, there
will be a Lisp process that communicates with Emacs called "Connect to
Emacs daemon"). If you get this error, you have likely tried to start
Allegro Composer when Lisp is not running as a subprocess of Emacs or
the Emacs-Lisp interface has not started. Exit Lisp and restart in Emacs with
<b>fi:common-lisp</b>.
</p>



<hr><h2 id="499"><a name="no-package-composer-a-2">Appendix B.2 Error: package Composer not found</a></h2>

<p id="500">
Allegro Composer is only available on Unix platforms. It is not
available on the Windows version of Allegro CL, and the
<code>composer</code> package is not defined in the Windows
version. If you see this error, it is likely you are trying to start
Allegro Composer in the Windows version. The Integrated Development
Environment, which has many tools similar to those in Allegro
Composer, is available in the Windows version.
</p>



<hr><h2 id="501"><a name="unknown-hostname-a-2">Appendix B.3 Error: Unknown hostname:</a></h2>

<p id="502">
Since Emacs should already be running in an X window (and thus knows
the host information), and Composer usually inherits this information
from Emacs, this error should be unusual. However, you may be
specifying a value for the <i>host</i> to <a href="operators/composer/start-composer.htm"><b>start-composer</b></a>, and that value
is invalid, of (for some reason) the value within Emacs has changed.
You might try calling <a href="operators/composer/start-composer.htm"><b>start-composer</b></a> with what you know to be
the right host name.
</p>




</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/composer.htm">8.1 version</a></td></tr></table></html>