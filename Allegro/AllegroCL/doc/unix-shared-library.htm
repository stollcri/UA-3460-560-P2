<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Lisp as a Shared Library</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/unix-shared-library.htm">8.1 version</a></td></tr></table><h1 id="2">Lisp as a Shared Library</h1><p id="3">This document contains the following sections:</p><a href="#why-update-1">1.0 Why an updated interface</a><br><a href="#lisp-app-files-1">2.0 Lisp as a shared library application files</a><br><a href="#lisp-components-1">3.0 Lisp as a shared library application components</a><br><a href="#lisp-init-1">4.0 What happens at Lisp as a shared library initialization</a><br><a href="#for-fun-1">5.0 A note about using Foreign Functions on non-os-thread platforms</a><br><a href="#c-api-1">6.0 C API (routines and data structures)</a><br><a href="#lisp-api-1">7.0 Lisp API</a><br><a href="#comp-and-del-1">8.0 Compilation and Delivery</a><br><a href="#search-path-1">Appendix A. OS Specific Library Search Path</a><br>
<p id="4">
Allegro CL supports the use of lisp via a shared library by C/C++
programs in the same manner as they use any other function
libraries. This document describes how Allegro Common Lisp developers
on UNIX machines can create applications with Lisp as a shared
library. See <a href="dll.htm">dll.htm</a> for information on creating
similar files on Windows.
</p>

<p id="5">
This functionality makes use of posix threads and is supported on all
Unix-style Allegro CL platforms.
</p>


<hr><hr><h2 id="6"><a name="why-update-1">1.0 Why an updated interface</a></h2>

<p id="7">
The previous Lisp as a shared library example was written at a time
when good thread library support was not available on many
platforms. As a result, the example was available on very few
platforms. Further, the example was built in a way that was not
compatible with how we build our lisp binaries, link in the allegro
shared library, and load in the lisp environment at startup. This
often led to problems in customer applications that were difficult to
debug. Lastly, many changes have gone into our lisp environment since
the example was written.  A refactoring of the Lisp as a shared
library interface allows us to provide a more simplified and concise
API.
</p>
<p id="8">
Many of the steps involved in loading the lisp environment need not be
exposed to the user, nor clutter their code. This updated interface
hopes to better separate lisp startup code from user application
code. A single call is needed to start lisp initialization. This call
handles choosing the appropriate allegro shared library, spawning a
thread, and returning control to the user once initialization is
complete. Various hooks, described below, allow you to perform app
specific initialization at various points, as well as synchronize
access to the Lisp control thread, from which calls into the lisp
environment can be made.
</p>

<hr><hr><h2 id="9"><a name="lisp-app-files-1">2.0 Lisp as a shared library application files</a></h2>

<p id="10">
The following files are needed to build a lisp shared library application.
</p>

<ul>
<li id="11">

<b>examples/unix-shared-library/lnkacl.{so,sl,dylib,a}</b>

</li>
<li id="12">

<b>examples/unix-shared-library/lnkacl.fasl</b>

</li>
<li id="13">

<b>misc/lisp.h</b>

</li>
<li id="14">

<b>misc/shlibs.h</b>

</li>
<li id="15">

The Allegro shared library, though this typically will be copied into
your application directory automatically when you it is built.

</li>
</ul>

<p id="16">
Also in <b>examples/unix-shared-library/</b> is code for a sample C
application that calculates factorials by calling into lisp. An
architecture specific makefile is also provided with the recommended
build commands for compiling and linking user applications. Typing
<b>make</b> in this directory will build the factorial example
(<b>ftest</b>), placing it in the subdirectory <b>fact/</b>.
</p>
<p id="17">
Run <b>fact/ftest &lt;integer&gt;</b> to test the demo. You will
likely need to set your dynamic library search path environment
variable to include this
directory. See <a href="#search-path-1">Appendix A OS Specific Library Search Path</a> for what
environment variable is expected to be set.
</p>

<hr><hr><h2 id="18"><a name="lisp-components-1">3.0 Lisp as a shared library application components</a></h2>

<p id="19">
The components of a Lisp as a shared library application are as follows: 
</p>
<h3 id="20">
Foreign Code 
</h3>
<ul>
<li id="21">

User application code, including a user-defined main() routine. 

</li>
<li id="22">

lisp_ready_hook().  This function must be defined by the user with this name. It is the last routine called in the lisp thread during initialization of the lisp environment. This function hands off control of the lisp thread to the user-app and should be used to synchronize access to the lisp environment. 
</li>
<li id="23">

The lnkacl shared library (<b>liblnkacl</b>). This contains the
exported C API of the lisp as a shared library interface and must be
linked in with your application.

</li>
</ul>

<h3 id="24">
Lisp code 
</h3>
<ul>
<li id="25">

User application code. 

</li>
<li id="26">

lnkacl.fasl. This file should be included when building your
application image file. When loaded, this file
sets <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> in order to properly
set up the lisp side of the interface. Your application should instead
use the <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> for initialization and
application startup code.

</li>
</ul>


<hr><hr><h2 id="27"><a name="lisp-init-1">4.0 What happens at Lisp as a shared library initialization</a></h2>


<p id="28">
The basic flow of control of a Lisp as a shared library application appears as follows:
</p>

<pre id="29">
<b>MAIN THREAD</b>

- user defined C main()
  - calls initialize_lisp(...)
    - spawns a new thread to load and initialize lisp
    - (wait for lisp_init_complete() signal)     
  - ...continue app execution... (see FOREIGN THREAD below)       

<b>LISP THREAD</b>

- lisp initialization begins, normal lisp startup sequence begins.
  - *restart-init-function* is called 
    (user:initialize-lisp, from lnkacl.fasl)

    - internal set up (such as define callback routine 
      lisp_lookup_address() )
    - call *restart-app-function*, a user defined function 
      to perform necessary lisp setup for user application.
    - call lisp_ready_hook()
      - signal init complete by calling lisp_init_complete()
      - user-defined code to handle requests to be handled by lisp
      - perform any application setup as necessary.
      - (wait for work)
      - call lisp routine. lisp_lookup_address() takes a string 
        as argument and returns a function pointer to the 
        associated lisp callback function.
      - pass return value(s) back to calling thread.
      - resume (wait for work) or return, which will terminate 
        the lisp thread.
   - exit_routine(int value)
     cleanup as necessary for shutting down lisp environment.

<b>FOREIGN THREAD</b> (MAIN or other)

    - contact lisp thread to request work be performed.
    - wait for (user-defined) synchronization event signifying
      completion of lisp work.
    - use value
    ... continue app execution ...
</pre>

<hr><hr><h2 id="30"><a name="for-fun-1">5.0 A note about using Foreign Functions on non-os-thread platforms</a></h2>

<p id="31">
On non-os-thread platforms, only a single thread (the thread spawned
by <b>initialize_lisp()</b>) can call into the lisp environment. As a
result, multi-threaded applications must synchronize with this thread
in order to dispatch work performed by lisp. This is done either from
within lisp in the application's <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> or via foreign code in
the <b>lisp_ready_hook()</b>).
</p>
<p id="32">
See <a href="foreign-functions.htm#ff-and-multiprocessing-2">Foreign functions and
multiprocessing</a>&gt;
in <a href="foreign-functions.htm">foreign-functions.htm</a>.
</p>
<p id="33">
Synchronization with the lisp thread is left to the application
developer. A factorial example is provided which uses one possible
method.
</p>

<hr><hr><h2 id="34"><a name="c-api-1">6.0 C API (routines and data structures)</a></h2>

<p id="35">
The following functions must be defined (except where
labeled <b>optional</b>).
</p>

<pre id="36">
<b>int initialize_lisp(char **envp, char *image_arg, int libtype, 
                    int suppress_io,
                    void (*exit_routine) (int),
                    struct shlib_library_item **shlib_items)</b>
</pre>
<blockquote>
<p id="37">
This existing function must be called to set up the lisp environment.
The arguments are:
</p>
<ul>
<li id="38">
<b><i>envp</i></b>: by default, use the environment
argument passed into <b>main()</b>.

</li>
<li id="39">

<b><i>image_arg</i></b>: the name of the lisp image that
you want loaded.

</li>
<li id="40">

<b><i>libtype</i></b>: specifies the Allegro CL shared
library that will be loaded with this application. Accepted values are
0, for the non-international Allegro CL library, 1 for the International
Allegro CL library, and 2 for the Allegro CL Free Express Edition shared library.

</li>
<li id="41">

<b><i>suppress_io</i></b>: suppress lisp output to
stdout or allow it. <b>Express users</b> must pass an argument of 0
or the unix-shared-library interface will not function. 


</li>
<li id="42">

<b><i>exit_routine</i></b>: a function pointer to a
function you want called when the lisp thread exits. A NULL value
means the default exit routine is called that
invokes <b>pthread_exit()</b>.

</li>
<li id="43">

<b><i>shlib_items</i></b>: this is an array of structs
indicating the shared libraries you linked into your application at
build time. This information is passed into lisp at startup so that
exported symbols in these libraries will be accessible via the foreign
functions interface. Typically, the variable
<code>linked_shared_libraries</code> --defined in
<b>misc/shlibs.h</b>--should be modified accordingly, #include'd, and
passed in as this argument. <code>struct
shlib_library_item</code> is defined in <b>misc/lisp.h</b>, and
should also be #include'd by your application.

</li>
</ul>
<p id="44">
The Allegro shared library, and the <i>image_arg</i>
if specified with no path component, are searched for at startup using
the OS specific library search path environment variable. See
<a href="#search-path-1">Appendix A OS Specific Library Search Path</a>
to find out what the search path is for your target platform.
</p>
<p id="45">
This function returns 0 on success, or a negative value when an
error occurs.
</p>
</blockquote>

<pre id="46">
<b>void *lisp_lookup_address(char *func_name)</b>
</pre>

<blockquote>
<p id="47">
This existing function is a simplified routine for finding entry
points (function pointers) into lisp. This is provided as an
alternative to the index based lookup API provided
by <a href="operators/ff/register-foreign-callable.htm"><b>ff:register-foreign-callable</b></a>
and <b>lisp_call_address()</b>. As of Allegro CL 8.1, the address
returned by <a href="operators/ff/register-foreign-callable.htm"><b>ff:register-foreign-callable</b></a> is allocated in
Allegro's C heap, and is static even across dumplisps. As a result, it
is possible to map directly from function name to function pointer
without the index redirection.
</p>
<p id="48">
The arguments are:
</p>
<ul>
<li id="49">
<b><i>func_name</i></b>: a null-terminated string naming
a function in the lisp environment.
</li>
</ul>
<p id="50">
This function returns a function pointer to the indicated
function or 0 if not found.
</p>
</blockquote>

<pre id="51">
<b>int lisp_init_complete()</b>
</pre>

<blockquote>
<p id="52">
This existing function is called from the callback routine
<b>lisp_ready_hook()</b>. This signals <b>initialize_lisp()</b> that
the lisp environment has been initialized and control can be returned
to it's calling function.
</p>
<p id="53">
This function returns a value as <b>pthread_cond_signal()</b>.
</p>
</blockquote>

<pre id="54">
<b>void lisp_ready_hook()</b>
</pre>

<blockquote>
<p id="55">
This function must be defined. The user must establish a C function
that will be called into by the lisp thread, once initialization is
complete.  The body of this function must
call <b>lisp_init_complete()</b>.  The rest of the code in this
routine should contain whatever application specific synchronization
is required to communicate with the lisp thread.
</p>
<p id="56">
The function has no return value. When this function returns, the 
<a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> in the lisp
environment calls <b>(exit)</b> (see <a href="operators/excl/exit.htm"><b>exit</b></a>). This will then cause your exit routine,
if specified, or the default exit routine, to be invoked.
</p>
</blockquote>

<h3 id="57">Optional</h3>

<pre id="58">
<b>exit_routine(int exit_value)</b>
</pre>

<blockquote>
<p id="59">
A default exit function is defined, but users may define
their own to perform whatever cleanup of the lisp environment is
desired. The <i>exit-rountine</i> argument to
<b>initialize_lisp</b> specifies what exit routine to call. The
default exit routine calls <b>pthread_exit()</b>.
</p>
<p id="60">
If you define an exit routine and expect your application to continue
execution after the lisp thread is complete, it must
call <b>pthread_exit()</b>. If the exit routine returns, <b>exit()</b>
will be called, stopping the entire running process.
</p>
</blockquote>


<hr><hr><h2 id="61"><a name="lisp-api-1">7.0 Lisp API</a></h2>

<p id="62">
The lisp API is almost completely user-defined. After the lisp
environment is loaded, the following values should be set in order to
set up the lisp as a shared library application environments.
</p>
<ul>
<li id="63">

<a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>: must be set to
<b>user:initialize-lisp</b>. This will occur by default if you
load <b>lnkacl.fasl</b>. Most notably, this establishes the callback
routine
<b>lisp_lookup_address()</b>.

</li>
<li id="64">

<a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a>: when
non-<code>nil</code> should name a lisp function used to
perform any necessary lisp-side initialization of the user
application. It is called by <b>user:initialize-lisp</b> prior to it
calling <b>lisp_ready_hook()</b>.

</li>
</ul>


<hr><hr><h2 id="65"><a name="comp-and-del-1">8.0 Compilation and Delivery</a></h2>

<p id="66">
<b>examples/unix-shared-library/makefile</b> contains the recommended
architecture specific compile/link commands for building your
application. It also contains the recommended build script for
generating your lisp application.
</p>
<p id="67">
In addition, please note the following:
</p>

<ul>
<li id="68">

Your C application must include <b>misc/lisp.h</b> and
<b>misc/shlibs.h</b>. The latter should be modified to list all shared
libraries linked into your application at build time.

</li>
<li id="69">

Your C application must be linked with the lnkacl shared library
(<b>liblnkacl.*</b>).

</li>
</ul>

<p id="70">
When building your lisp application,  
</p>
<ul>
<li id="71">

the third argument to <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> must include lnkacl.fasl,
along with all modules required by your application.

</li>
<li id="72">

the :application-files argument to <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> must include the lnkacl
library, as well as the file(s) necessary to run your C application.

</li>
</ul>

<p id="73">
See <a href="operators/excl/generate-application.htm"><b>generate-application</b></a>
and <a href="delivery.htm">delivery.htm</a> for general help with building
lisp deliverables.
</p>


<hr><hr><h2 id="74"><a name="search-path-1">Appendix A: OS Specific Library Search Path</a></h2>

<p id="75">
On most *nix platforms, the dynamic loader library search path can be
modified by setting the value of the environment
variable <strong>LD_LIBRARY_PATH</strong>, with the following
exceptions.
</p>
<ul>

<li id="76">

<b>AIX</b> uses LIBPATH 

</li>
<li id="77">

<b>HP-UX (32-bit)</b> uses SHLIB_PATH

</li>
<li id="78">

<b>Mac OS X</b> uses DYLD_LIBRARY_PATH

</li>
</ul>


</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/unix-shared-library.htm">8.1 version</a></td></tr></table></html>