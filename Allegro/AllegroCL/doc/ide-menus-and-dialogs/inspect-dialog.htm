<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>inspect-dialog</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Dialog</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/inspect-dialog.htm">8.1 version</a></td></tr></table><h2 id="2">Inspect</h2>

<p id="3"><img src="../pictures/insp.jpg"></p>
<p id="4">
The Inspector window displays information about objects. The same
information is displayed (when not in the IDE) using the function
<a href="../../ansicl/dictentr/inspect.htm"><b>inspect</b></a> and the various
inspector top-level commands documented in the <a href="../inspector.htm">inspector.htm</a>.
</p>
<p id="5">
This dialog is displayed by the various Inspect commands on
the <a href="tools-menu.htm">Tools menu</a>, such
as <a href="tools-menu.htm#inspect-selected-object">Tools | Inspect Selected
Object</a>. It is also displayed (even when the IDE is not
running but is loaded) by the operators <a href="../operators/ide/ide-inspect.htm"><b>ide:ide-inspect</b></a> and
<a href="../operators/ide/ide-inspect-standalone.htm"><b>ide:ide-inspect-standalone</b></a>.
</p>
<p id="6">
The illustration shows an Inspector window inspecting a form.
We describe the various fields and controls on the Inspector,
and the right button menu.
</p>
<h3 id="7">The Properties and Internals buttons</h3>
<p id="8">
The buttons at the top (in the illustration, <b>Properties and
Internals</b>, other objects may have more or different buttons),
indicate what pane of the window is visible. In the illustration, the
Properties pane is visible and the button looks pressed. Properties
are usually changeable aspects of the object while Internals should
not normally be modified. Controls have an Events button listing the
event functions called when certain mouse events occur over the
control.
</p>
<p id="9">
The pane has names (of properties or event handlers of whatever pane
is displayed) listed on the left and the value on the right. You can
modify the value by selecting it and typing a new value or clicking on
the extended editor button which will display a dialog suitable for
the value required (such as a color choice dialog for a color, and
the <a href="menu-editor-dialog.htm">Menu Editor</a>
dialog for the menu property, illustrated).
</p>
<p id="10">
Clicking over the name causes the value to be inspected. 
</p>
<h3 id="11">The drop-down list</h3>
<p id="12">
The drop-down list at the top shows a history of the objects that have
already been inspected by this inspector. The objects are arranged
into a hierarchy, where objects that were inspected by clicking in the
left column of the inspector are indented just below the objects from
which they were inspected; otherwise more recently inspected objects
appear toward the top of the list.  Clicking an item in this list
re-inspects it.
</p>
<p id="13">
A pixmap appears at the left of each item in the drop-down history
list to make it easier to find objects of various types. By default,
widgets are identified with the pixmaps that are used for them in the
Component Toolbar, windows display a picture of an empty window, all
other first-class objects (instances of standard-object or
structure-object) display a solid gray dot, and all remaining
objects show a hollow dot. These pixmaps (except for the dots) also
appear in the always-visible part of the history widget for the
currently inspected object, and appear in the rows of the inspector
body when it is inspecting a sequence.
</p>
<p id="14">
The inspector may be customized to show additional pixmaps for other
types of objects by defining <a href="../operators/cg/p/pixmap.htm"><b>pixmap</b></a> methods.
</p>
<h3 id="15">The button with the left-pointing arrow</h3>
<p id="16">
The button with a left-pointing arrow at the upper left of the
inspector re-inspects the previously-inspected object. Clicking this
button multiple times will re-inspect successively older objects
from the inspector history. Or use your mouse's
back button if it has one.
</p>
<h3 id="17">The status bar at the bottom</h3>
<p id="18">
The status bars at the bottom show the type of value accepted (on the
left) and information on the value on the right.
</p>
<h3 id="19">The right button menu over the inspector</h3>
<p id="20">
Right-clicking in the inspector shows a pop-up menu of additional
inspector commands. A child menu of this menu shows further inspector
commands that are more easily accomplished in other ways but are shown
as a reminder of their keyboard shortcuts. Here are the
inspector-specific commands on the main pop-up menu:
</p>
<ul>
<li id="21">
<b>Inspect in New Window</b>: Inspects the currently selected object,
but first opening a new inspector window in which to inspect it. This
allows retaining the current state of the earlier inspector.
</li>
<li id="22">
<b>Refresh Values</b>: Updates the currently displayed information to
reflect any changes that have occurred in the lisp environment since
the most recent inspection was done. This essentially re-inspects the
current object. Information is also updated when re-inspecting an
object from the inspector history, or for an individual attribute if
it is not read-only and is selected for typing in a new value.
</li>


<li id="23">
<b>Back in History</b>: Re-inspects the previously inspected object,
just as the arrow button at the upper left or your mouse's back
button does.
</li>

<li id="24">
<b>Forward in History</b>: Re-inspects later objects just after earlier
objects have been re-inspected. Or use your
mouse's forward button if it has one.
</li>
<li id="25">
<b>Clear History</b>: Empties the inspector history of all objects that
have been inspected so far.
</li>
</ul>
<h3 id="26">More on the Properties and Events tabs</h3>
<p id="27">
The Properties and Events tabs also provide brief documentation on how
to access an object programmatically (assuming that properties are
defined for the object). The function for reading the value of a
property almost always has the same name as the property.
</p>
<p id="28">
Thus if you notice in the inspector that an object has a property
called <a href="../operators/cg/b/border.htm"><b>border</b></a>,
this means that you can read the current value of that property with a
form such as
</p>
<pre id="29">
(border my-object)
</pre>
<p id="30">
Likewise, the writer function is almost always the setf of the
property name, and the initarg for specifying the property value when
creating the object is almost always the corresponding keyword.  So
</p>
<pre id="31">
(setf (border my-object) :frame)
</pre>
<p id="32">
would set the border property, and an initarg/value pair such as
</p>
<pre id="33">
:border :frame
</pre>
<p id="34">
would initialize the border when creating the object.
</p>
<h3 id="35">Other comments</h3>
<p id="36">
A property value is displayed in a bold font if it is not equivalent
to the programmatic default value for that property.  This highlights
values that you have changed, as well as some sample values that are
given to widgets that you place onto forms (and which you typically
will want to change).  A read-only value will never be bold.  A
handful of properties are never shown bold because they generally do
not have meaningful default values and are more distracting than
useful when made bold; these exceptions include the properties <a href="../operators/cg/c/child-p.htm"><b>child-p</b></a>, <b>class</b>, <a href="../operators/cg/t/tab-position.htm"><b>tab-position</b></a>, <a href="../operators/cg/l/left.htm"><b>left</b></a>, <a href="../operators/cg/t/top.htm"><b>top</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, <a href="../operators/cg/h/height.htm"><b>height</b></a>, <a href="../operators/cg/d/dialog-items.htm"><b>dialog-items</b></a>, and <a href="../operators/cg/p/pixmap-use-handle.htm"><b>pixmap-use-handle</b></a>.
</p>
<p id="37">
Brief help information is supplied in the main Allegro status bar when
a property is selected in the inspector, and for more detailed help
(or to make sure that the accessor functions really have the same
name) you can invoke the <a href="help-menu.htm#help-on-selected-sym">Help | Help On
Selected Symbol</a> command (shortcut F1) while the property or event
handler of interest is selected in the inspector.
</p>
<p id="38">
For further information on using properties programmatically, refer to
<a href="../operators/cg/d/defproperties.htm"><b>defproperties</b></a> or
<a href="../operators/cg/d/define-property.htm"><b>define-property</b></a>.
</p>




<hr><p id="39"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/inspect-dialog.htm">8.1 version</a></td></tr></table></body></html>