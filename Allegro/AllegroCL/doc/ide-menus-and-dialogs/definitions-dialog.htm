<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>definitions-dialog</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Dialog</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/definitions-dialog.htm">8.1 version</a></td></tr></table><h2 id="2">Definitions</h2>


<p id="3"><img src="../pictures/definitions.jpg"></p>

<p id="4">
The Definitions dialog can be used to list all of the existing
definitions for a symbol, and also to locate and edit the source code
for a selected definition. The definitions include all functions,
methods of generic functions (including class accessors), macros,
variables, constants, standard classes, and structure classes that are
named by the symbol. The dialog may also be used to remove individual
methods from the Lisp environment.
</p>
<p id="5">
This dialog is displayed by the  <a href="search-menu.htm#find-definition">Search | Find
Definition</a> command. It
is also displayed by the Find Definition or Find Applicable Methods
commands on the shortcut (right button) menus in certain windows.
</p>
<p id="6">
Above is the Definitions window listing the definitions of the symbol
<code>doodler</code>. We have loaded the final tutorial project
file
(<i>gui-builder-tutorial/final/interface-builder-tutorial.lpr</i>),
and both a function and a class named <code>doodler</code> have
been found.
</p>
<p id="7">
To use the dialog, invoke the <a href="search-menu.htm#find-definition">Search | Find
Definition</a> command. If a symbol was selected at the time, it
will be placed into the Symbol text widget at the upper left of the
dialog (it says "doodler" in the picture). If this is not the symbol
whose definitions you want to list, then type or paste the desired
symbol into the Symbol widget. As you type each character, if you have
named a symbol that has any definitions, then a bit of information
will appear in a static-text widget just beneath the symbol widget,
such as the parameter list of a function. Pressing the Find/Open
button at the upper right will then list all definitions for the
symbol in the "found definitions" widget at the bottom of the
dialog. (The button is labeled Find before searching and Open after a
search is complete. The illustration is after a search, so the button
is labeled Open.)
</p>
<p id="8">
Once some found definitions have been listed, the Find button becomes
an Open button; pressing it will edit the source code for the
currently selected definition if the location of the source code is
known. The source code location will be known for any definitions
that were compiled, evaluated, or loaded in the current lisp session.
(When a fasl file is loaded, the dialog assumes that the source code
is located in a corresponding file with a .cl extension.) If the
editor is already editing the file that contains the definition, then
the definition will be shown in the existing editor buffer that
contains it.
</p>
<p id="9">
The Find/Open button is the dialog's default-button when it says Find
as well as when it says Open.  Therefore, the main Enter key may be
pressed to list a symbol's definitions when there are no definitions
currently listed, and may be pressed again to edit a selected
definition.  The button will say Open whenever any found definitions
are currently listed, and will say Find otherwise.  Typing into the
Symbol widget or invoking the <a href="search-menu.htm#find-definition">Search | Find
Definition</a> command again
always clears the list of found definitions and changes the button to
say Find.
</p>
<p id="10">
Note that if you have the Common Graphics/IDE source code installed in
your Allegro directory, then you can use the Definitions dialog to
find all CG/IDE definitions by first calling the function <a href="../operators/ide/load-cg-source-file-info.htm"><b>load-cg-source-file-info</b></a>. (If
you attempt to locate a CG or IDE definition without first calling
this function, a dialog will appear that offers to call the function
for you.  After calling the function, you will need to do the Find
Definitions command again to locate the source code.)
</p>

<h3 id="11">The Applicable Methods Filter</h3>

<p id="12">
The Applicable Methods Filter is an <a href="../classes/cg/editable-text.htm"><code>editable-text</code></a> widget that may
contain a list of applicable arguments to filter out found methods
that are not of interest. If this widget does contain such a list of
argument values, then any found methods that are not applicable to
those arguments are excluded from the list of found definitions.  This
widget is available only when the All check-box is unchecked, since
checking the All check-box overrides the applicable arguments widget
and shows all found definitions. The All check-box itself is available
only when methods have been found.
</p>
<p id="13">
Typically the applicable arguments widget is filled in automatically.
This happens whenever the <b>Find Definitions</b> command is invoked from the
Trace Dialog's main outline widget or from a Debug Window backtrace
pane.  In each of these panes, the selected value denotes a function
call that has occurred, including the arguments that were passed.
Invoking the Definitions dialog in one of these panes places the
list of the function call's arguments into the applicable arguments
widget of the Definitions dialog, so that the dialog will list
only the methods that might have been invoked by the selected function
call (though all non-method definitions for a symbol are always
listed).
</p>
<p id="14">
You may also type in a list of applicable arguments explicitly.  To do
so, first uncheck the All check-box if it is checked.  (This check-box
causes all methods to be listed whenever it is checked, and the
applicable arguments widget is available for typing or pasting only
when All is unchecked.)  Then in the applicable arguments widget, type
an expression that will produce the desired list of applicable
arguments when evaluated, and press the main Enter key to evaluate the
expression and list the definitions that exclude any non-applicable
methods.  The expression entered is always evaluated because it is
impossible to literally type most argument values.  (It's an exception
that pressing Enter while the keyboard focus is in this widget will
always evaluate the expression there (if newly entered) and then do a
Find, even if the Find/Open button currently says Open.)
</p>
<p id="15">
If the Methods text widget is not roomy enough to easily enter this
expression, you may click the ellipsis button (just to the right of
the editable-text widget) to enter the expression into a modal dialog
containing a multi-line-editable-text widget instead.
</p>
<p id="16">
When a found method is selected, the <b>Remove Selected Method</b>
button may be pressed to remove the method from the Lisp environment.
This can be handy, for example, when you edit a method and change one
of the classes that it specializes on, or change an :after method into
an :around method. In these cases, the earlier method with the
original specializers and qualifiers will still exist in the Lisp
environment along with the new version, and this can affect the
behavior of your application. By listing all of the methods in this
dialog, you can see which ones still exist and easily remove the
obsolete methods.
</p>

<hr><p id="17"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/definitions-dialog.htm">8.1 version</a></td></tr></table></body></html>