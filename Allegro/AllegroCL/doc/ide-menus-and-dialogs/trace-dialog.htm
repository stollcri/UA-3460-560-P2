<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>trace-dialog</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Dialog</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/trace-dialog.htm">8.1 version</a></td></tr></table><h2 id="2">Trace dialog</h2>

<p id="3"><img src="../pictures/trace.gif"></p>

<p id="4"><img src="../pictures/trace-alt.gif"></p>
<p id="5">
The Trace Dialog provides a graphical display of all calls to traced
functions and methods that occur while the dialog is present.  This
includes functions that are traced by calling <a href="../../ansicl/dictentr/traceunt.htm"><b>trace</b></a> or using the <a href="../tpl-commands/trace.htm"><b>:trace</b></a> top-level
command as well as functions that are traced by selecting the function
name in any IDE dialog and invoking the <a href="run-menu.htm#trace">Run | Trace</a> command.
</p>
<p id="6">
If the Trace Dialog is present, then all trace output in Common
Graphics and IDE processes will go to the Trace Dialog and will not be
printed elsewhere.  Otherwise all trace output is printed as usual in
the listener for each process.  The Trace Dialog is "present" if it
has been shown with the <a href="run-menu.htm#trace-dialog">Run | Trace dialog</a> command and it has not
subsequently been hidden by clicking its close button or using the
<a href="file-menu.htm#close-window">File | Close Window</a> command.  (It is still
present if it has been iconized or is covered by other windows.)
</p>
<p id="7">
The large <b>Trace History</b> outline at the left shows the
hierarchical relationship of the function calls, where a child item
represents a call that was made while inside the call represented by
its parent item.  Selecting a call in the <b>Trace History</b> outline
displays more detailed information about that call in the dialog's
other widgets.
</p>
<p id="8">
The <b>Arguments</b> and <b>Values Returned</b> widgets at the right
show the arguments that were passed to, and the values returned from,
the selected function call.  (If the values were thrown rather than
returned, then the widget label will say &quot;Values Thrown to &lt;some
tag&gt;&quot; instead.)  Note that each value is the actual lisp object
that was passed, and so you can select a value and then use commands
such as <a href="tools-menu.htm#inspect-selected-object">Tools | Inspect Selected Object</a>
to inspect that argument object or <a href="tools-menu.htm#return-selected-object">Tools | Return Selected
Object</a> to set the value of the variable <a href="../../ansicl/dictentr/unnamed2.htm"><code>*</code></a> to that object.
Double-clicking an argument or
returned value will inspect it.
</p>
<p id="9">
Pressing the <b>Toggle View</b> button shows an alternate view that
replaces the <b>Arguments</b> and <b>Values</b> widgets with two
others, shown in the second illustration above. (Pressing this button
repeatedly toggles between the two views.)  The <b>Effective
Method</b> widget shows the individual methods that may have been
called for a selected generic function call (given the particular
arguments that were passed), along with their calling order and
relationship.  Each method is represented here only by its qualifiers
and specializers to save space, since the generic function name is
highlighted in the <b>Trace History</b> to the left.  Double-clicking
an individual method (or using <a href="search-menu.htm#quick-find-definition">Search | Quick Find
Definition</a>) will invoke the editor on that method's souce
code directly if its location is known.  Using the <a href="run-menu.htm#trace">Run |
Trace</a> command on a method in this widget will trace the
individual method rather than its generic function.  This widget will
show information only for a traced generic function, and not for a
traced regular function or a traced individual method.
</p>
<p id="10">
The <b>Stack</b> widget (also in the alternate view shown by the
<b>Toggle View</b> button) lists the names of functions that were
found on the function call stack at the time of the selected call.
The most recent calling function is at the top of the list.  The
<b>Depth</b> widget lets you specify how many stack frames to search
for calling functions; a lower value may decrease the amount of time
taken up by tracing.  The <b>Stack</b> widget can be useful when you
can't remember the name of a function that you would like to trace ---
you can instead trace a lower-level function that you know that the
desired function calls, and then look in the stack widget at the
callers to that function; if you see the desired function in the stack
widget, you can select it and use <a href="run-menu.htm#trace">Run | Trace</a> to trace it, and then
run your test again with the desired function traced.
</p>
<p id="11">
The <b>Clear</b> button will clear all accumulated information from
the trace dialog, making it easier to find subsequent trace
information at the top of the <b>Trace History</b>.
</p>
<p id="12">
Checking the <b>Scroll While Tracing</b> check-box will turn on the
<a href="../operators/ide/scroll-while-tracing.htm"><b>scroll-while-tracing</b></a>
configuration option.
This
option continuously scrolls traced function calls into view as they
occur, allowing you to see when each call happens.  On the other hand,
this can slow things down or cause the <b>Trace History</b> to scroll
to the bottom when you are looking at an earlier call.  The <b>Scroll
to Bottom</b> button may be used instead to quickly scroll to the most
recent trace information only when desired.
</p>

<p id="13">
You can resize some of the widgets in the <b>Trace</b> dialog by using
the invisible <a href="../classes/cg/split-bar.htm"><code>split-bar</code></a>
widgets that lie between them. Just move the mouse cursor into the
vertical gap between the two columns of widgets, or into the
horizontal gap between the widgets in the righthand column, until the
mouse cursor becomes a resizing cursor. Then click and drag.
</p>


<p id="14">
Traced calls that occur in multiple threads are combined into the
single outline widget of the Trace Dialog, but hierarchies of traced
calls in multiple threads are never interleaved in the outline.
Specifically, the tree of calls that appear under a single top-level
item in the trace outline are always calls that occurred in the same
thread as that top-level item; any traced calls that occurred in other
threads during the call represented by that top-level item will appear
under further distinct top-level items of the trace outline.  The
numbers at the left of each outline item, on the other hand, indicate
the global order in which the individual calls occurred; so the
numbers will not be in numerical order from top to bottom if
hierarchies of traced calls in multiple threads overlap in time.  The
title of the Trace Dialog indicates the thread in which the currently
selected call occurred. (Tracing in the event handling code for a
specific window can be suppressed. See <a href="../operators/cg/i/inhibit-trace-for-object.htm"><b>inhibit-trace-for-object</b></a>.)
</p>
<p id="15">
Double-clicking an item in the <b>Trace History</b> outline will
invoke the <a href="search-menu.htm#quick-find-definition">Search | Quick Find Definition</a>
command on the selected function call. This overrides the usual
outline functionality of toggling the selected item open or closed,
but that can still be done by single-clicking the item's arrow icon or
by using the left and right arrow keys.  Several other commands from
the IDE menu-bar of likely interest are on the right-button pop-up
menu. Pressing the Enter key when any of the non-button widgets
on the Trace dialog has the keyboard focus does the same thing as
double-clicking the selected value there.
</p>
<p id="16">
When either <a href="search-menu.htm#find-definition">Search | Find Definition</a> or <a href="search-menu.htm#quick-find-definition">Search | Quick Find Definition</a> is
invoked on a call to a generic function in the <b>Trace History</b>
outline, the methods that are presented as choices will include only
the methods that are applicable to the arguments that were passed in
that function call, sorted with the most applicable methods first (as
determined by <a href="../../ansicl/dictentr/compute0.htm"><b>compute-applicable-methods</b></a>).  To
instead choose from all methods of the generic function, invoke
<a href="search-menu.htm#find-definition">Search | Find Definition</a> and then turn
on the "All" check-box on the <a href="definitions-dialog.htm">Definitions</a> Dialog.
</p>
<p id="17">
See <a href="../operators/ide/trace-format.htm"><b>trace-format</b></a>
for a way to write arbitrary debugging output to the Trace Dialog. See
<a href="../operators/ide/process-trace-color.htm"><b>process-trace-color</b></a> and <a href="../operators/ide/with-trace-color.htm"><b>with-trace-color</b></a> for
information on modifying the background color on a per-process
basis. The configuration option <a href="../operators/ide/scroll-while-tracing.htm"><b>scroll-while-tracing</b></a> allows you to
view new trace output as it is being collected.  To direct trace
output from non-CG/IDE processes to the Trace dialog, call
<a href="../operators/ide/use-trace-dialog-in-this-process.htm"><b>use-trace-dialog-in-this-process</b></a>.
</p>
<p id="18">
The <a href="file-menu.htm#save">File |
Save</a> command is implemented for the trace dialog to save all
the trace info (except the stack and effective method for each call)
as an indented text file.
</p>





<hr><p id="19"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/trace-dialog.htm">8.1 version</a></td></tr></table></body></html>