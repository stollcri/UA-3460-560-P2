<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>edit-menu</title><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>IDE Menu</b></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/edit-menu.htm">8.1 version</a></td></tr></table><h2 id="2">Edit Menu</h2>

<p id="3">
The Edit Menu contains commands that mostly deal with editing text
although some commands are appropriate for non-text objects (<a href="edit-menu.htm#cut">Cut</a> and
<a href="edit-menu.htm#copy">Copy</a> work on components on a form, e.g.) The
commands on the menu are:
</p>


<ul><li id="4"><b><a name="undo">Undo</a></b> --  Undoes the last edit-like operation, if possible. See
<a href="../operators/cg/u/undo-command.htm"><b>undo-command</b></a>.
</li></ul>


<ul><li id="5"><b><a name="redo">Redo</a></b> -- 
Redoes the last undone edit-like operation on <a href="../classes/cg/text-edit-pane.htm"><code>text-edit-pane</code></a>s, if possible.  Only available on
Windows. See <a href="../operators/cg/r/redo-command.htm"><b>redo-command</b></a>.
</li></ul>





<ul><li id="6"><b><a name="cut">Cut</a></b> -- 
Deletes the current selection and places it on the clipboard so it can
be pasted.
</li></ul>



<ul><li id="7"><b><a name="copy">Copy</a></b> -- 
Copies the current selection to the clipboard so it can be pasted.
</li></ul>



<ul><li id="8"><b><a name="paste">Paste</a></b> --  Pastes from the clipboard to the current location in the
currently-selected window. Usually, text is pasted but controls on a
form can also be copied or cut and pasted. See also <a href="edit-menu.htm#pop-and-paste">Pop and
Paste</a> below.
</li></ul>

<ul><li id="9"><b><a name="pop-and-paste">Pop and Paste</a></b> --  Pops the topmost item off of the Lisp clipboard
stack, and then pastes the item that is now at the top of the stack.
Doing a <a href="edit-menu.htm#paste">Paste</a> followed by a <a href="edit-menu.htm#pop-and-paste">Pop and
Paste</a>, for example, would paste the two most recently copied
objects.
</li></ul>



<ul><li id="10"><b><a name="delete">Delete</a></b> -- 
Deletes the current selection without placing it on the clipboard (so
it cannot be pasted).
</li></ul>



<ul><li id="11"><b><a name="select-all">Select All</a></b> -- 
Selects all text in a text buffer.
</li></ul>



<ul><li id="12"><b><a name="change-case">Change Case</a></b> --  Displays a submenu with <b>UPCASE</b>,
<b>downcase</b>, and <b>Capitalize</b> as the commands. Choosing one
changes the selected text as desired. Only alphabetic characters are
affected. <b>Capitalize</b> typically leaves words like <i>the</i> and
<i>a</i> downcased, but the first selected letter is always upcased.
</li></ul>



<ul><li id="13"><b><a name="comment-in-out">Comment In/Out</a></b> -- 
Comment in indents any selected text and puts semicolons at the line
beginning making the text into a comment. Comment out uncomments text
which was commented in. This is a rote command so commenting out text
which was not first commented in has undefined effect.
</li></ul>



<ul><li id="14"><b><a name="reindent">Reindent</a></b> --  Rearranges the selected code in a text buffer with
traditional Lisp indentation. The <a href="../operators/ide/pretty-printer.htm"><b>pretty-printer</b></a> configuration property, set
directly or with the Pretty Print field on the <a href="options-dialog-editor.htm">Editor</a> tab on
the <a href="options-dialog.htm">Options</a>
dialog, affects this command. If the value of that field is :reindent,
reindenting will change the indentation of each line but not move
things between lines. If the value is :pretty-print, the number of
lines and their contents may change to provide the optimal result. The
reindenting is simply for appearance. No syntactic changes are made to
the code, of course. If reindenting a large form is taking too
long, it can be interrupted by pressing the Escape key. The form may
be left partially reindented, though, if indentation is
interrupted.
</li></ul>

<ul><li id="15"><b><a name="insert-special-char">Insert Special Char</a></b> --  Allows you to insert an untypable character
either into the editor or into any other text-editing widget in the
IDE.  A dialog of all characters in the Latin1 character set is shown,
and the one that you select will be inserted.  This may be useful, for
example, in the modal 
<a href="search-menu.htm#find-forward">Search | Find Forward</a> or <a href="search-menu.htm#find-backward">Search |
Find Backward</a> dialog or the
<a href="search-menu.htm#find-definition">Search | Find Definition</a> dialog.  For
single-line editable-text controls, you may need to use the Control-Q
keyboard shortcut rather than showing the menu, or else the current
text cursor position will not be retained for the insertion.

</li></ul>

<ul><li id="16"><b><a name="colorize-definition">Colorize Definition</a></b> -- 
Colorizes the top-level definition that
surrounds the text cursor in the editor. The IDE never saves
colorization into the file that is written from an editor buffer.  See
the <a href="../operators/cg/c/colorize-source-code.htm"><b>colorize-source-code</b></a> and
the <a href="options-dialog-editor-color.htm">Editor
Color</a> tab on the <a href="options-dialog.htm">Options</a> dialog.


</li></ul>

<ul><li id="17"><b><a name="colorize-buffer">Colorize Buffer</a></b> -- 
Colorizes all of the source code in the currently
selected editor buffer. See
the <a href="../operators/cg/c/colorize-source-code.htm"><b>colorize-source-code</b></a> and
the <a href="options-dialog-editor-color.htm">Editor
Color</a> tab on the <a href="options-dialog.htm">Options</a> dialog.

</li></ul>


<h3 id="18">Macro expansion commands</h3>

<p id="19">
The next four commands macroexpand selected forms.
The IDE macroexpansion
commands are useful only when a complete lisp expression is
selected. They are typically used in the IDE Editor, where a lisp
expression may be selected by double-clicking immediately to the left
of the expression's opening parenthesis.  The expanded source code is
printed to the Debug Window.
</p>




<ul><li id="20"><b><a name="macro-expand-once">Macro Expand Once</a></b> -- 
Macroexpands the top-level selected macro call a single time, by
calling <a href="../../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a>. 
</li></ul>

<ul><li id="21"><b><a name="macro-expand">Macro Expand</a></b> -- 
Macroexpands the top-level selected macro call iteratively, by calling
<a href="../../ansicl/dictentr/macroex0.htm"><b>macroexpand</b></a>. That is, if the
initial expansion produces another top-level macro call, that call
will also be expanded and so on, but non-top-level macro calls
elsewhere in the form will not be expanded. See <a href="edit-menu.htm#walk-form">Walk Form</a>, which recursively
macroexpands all subforms.

</li></ul>




<ul><li id="22"><b><a name="walk-form">Walk Form</a></b> -- 
does a complete macro expansion of the selected form
by recursively macroexpanding all macro calls in the selected form.
The related <a href="edit-menu.htm#walk-form">Compiler Walk Form</a>
does the same but also considers compiler macros
and performs certain other compiler transformations to the source.
(Thus, <b>Walk Form</b> applied to <code>(list
1)</code>, displays <code>(list 1)</code>, because the
compiler-macro associated with <a href="../../ansicl/dictentr/listlist.htm"><b>list</b></a> is ignored.)
</li></ul>

<ul><li id="23"><b><a name="compiler-walk-form">Compiler Walk Form</a></b> --  does a complete macro expansion of the
selected form by recursively macroexpanding all macro calls in the
selected form, taking compiler-macros into account and performing
certain other compiler transformations to the source.  Contrast with
the related <a href="edit-menu.htm#walk-form">Walk Form</a>.  (Thus, <b>Compiler Walk
Form</b> applied to <code>(list 1)</code>, displays
<code>(cons 1 nil)</code>, because the compiler-macro associated
with <a href="../../ansicl/dictentr/listlist.htm"><b>list</b></a> is used.)
</li></ul>

<h3 id="24">Mark and selection commands</h3>

<p id="25">
The final four commands deal with the mark (a specified location in
text) and with selected text.
</p>

<p id="26">
The first two commands, <a href="edit-menu.htm#set-mark">Set Mark</a> and <a href="edit-menu.htm#swap-with-mark">Swap with
Mark</a>, may be useful for returning to a buffer position after
some other IDE command scrolls the buffer away from it. For example,
if the <a href="search-menu.htm#find-definition">Find Definition</a> command shows a
definition in a pre-existing editor buffer, it first sets the mark
before scrolling to the new definition. This allows using the <a href="edit-menu.htm#swap-with-mark">Swap with
Mark</a> command to toggle between viewing the newly-found
definition and whatever was being viewed in the same editor buffer
beforehand.
</p>


<ul><li id="27"><b><a name="set-mark">Set Mark</a></b> -- 
Establishes a bookmark (called simply "the mark") at the current text
cursor position in the selected editor buffer. The mark is used by the
other mark-related commands <a href="edit-menu.htm#swap-with-mark">Swap with Mark</a> and
<a href="edit-menu.htm#select-to-mark">Select to Mark</a>. In particular, <a href="edit-menu.htm#swap-with-mark">Swap with
Mark</a> scrolls the buffer back to the mark. 
<p id="28">
There is only a
single mark that is set by the interactive commands, though multiple
marks may be set programmatically (see <a href="../operators/cg/m/make-mark.htm"><b>make-mark</b></a>). Marks know how to
retain the same logical position within the text when text before the
mark is inserted or deleted.
</p>

</li></ul>


<ul><li id="29"><b><a name="swap-with-mark">Swap with Mark</a></b> -- 
Sets the selected editor buffer's mark to the current text cursor
position, and moves the text cursor to the previous mark position,
scrolling the buffer as needed to show that position. In other words,
after the mark is set at one position (see <a href="edit-menu.htm#set-mark">Edit | Set
Mark</a>) and then the text cursor is moved to some other
position, repeatedly invoking <b>Swap with Mark</b> toggles between
viewing the two areas of the editor buffer around these two positions.

</li></ul>



<ul><li id="30"><b><a name="select-to-mark">Select to Mark</a></b> -- 
Selects the text in the selected editor buffer between the current
text cursor position and the mark position (see <a href="edit-menu.htm#set-mark">Edit | Set
Mark</a>).  This command may be useful for selecting a large
range of text which cannot be scrolled entirely into the editor
window.
</li></ul>



<ul><li id="31"><b><a name="display-selection">Display Selection</a></b> -- 
Scrolls the selected editor buffer so that the currently selected text
(or the current text cursor position if no text is selected) is in
view. (The text cursor position may not be in view if, for example,
the scrollbars have been used to scroll it out of view.)
</li></ul>







<hr><p id="32"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/ide-menus-and-dialogs/edit-menu.htm">8.1 version</a></td></tr></table></body></html>