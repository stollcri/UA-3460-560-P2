<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Pixmaps in Common Graphics</title></head><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-pixmaps.htm">8.1 version</a></td></tr></table><h1 id="2">Pixmaps in Common Graphics</h1><p id="3">This document contains the following sections:</p><a href="#pixmap-intro-1">1.0 Introduction to pixmaps</a><br><a href="#using-properties-1">2.0 Using properties</a><br><a href="#pixmap-properties-1">3.0 Pixmap properties</a><br><a href="#creating-pixmap-programmatically-1">4.0 Creating a pixmap programmatically</a><br><a href="#textures-1">5.0 Textures</a><br>&nbsp;&nbsp;&nbsp;<a href="#textures-properties-2">5.1 Texture properties</a><br>&nbsp;&nbsp;&nbsp;<a href="#textures-infos-2">5.2 Texture-infos</a><br><a href="#cached-pixmaps-1">6.0 Cached pixmaps</a><br><a href="#picture-control-pixmaps-1">7.0 Pixmaps on picture controls</a><br><a href="#outlines-and-pixmaps-1">8.0 Outline controls and pixmaps</a><br><a href="#pixmap-handle-funs-1">9.0 Pixmap handle functions</a><br><a href="#bmp-to-lisp-1">10.0 Converting from .bmp files to lisp code</a><br><a href="#enhancing-ide-1">11.0 Enhancing the IDE with pixmaps</a><br><a href="#mouse-cursors-1">12.0 Mouse cursors</a><br><hr><hr><h2 id="4"><a name="pixmap-intro-1">1.0 Introduction to pixmaps</a></h2>


<p id="5">
A pixmap stores and displays a graphical image as a rectangular array
of pixel color values. (The term "pixmap" is short for
"pixel map".)  A pixmap that uses only a single bit to
denote the color of each pixel (resulting in a <em>monochrome</em>
image) is often referred to as a <em>bitmap</em>. Bitmap is also
sometimes used to refer to any pixmap.
</p>


<p id="6">
While the term "pixmap" is often used in a general way to
describe the actual array of pixels or the image that they create,
Common Graphics now uses the term to describe a class of objects that
are used to manage pixmap images.
</p>

<p id="7">
Applications may use Common Graphics <em>pixmap objects</em> (referred
to as pixmaps) to manage their images. A pixmap can be created either
by loading it from a <strong>.bmp</strong> file with <a href="../operators/cg/l/load-pixmap.htm"><b>load-pixmap</b></a>, or by defining it
programmatically with a <a href="../../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> form. Once defined, a pixmap can
then be used either directly by copying it to a window or printer
stream with <a href="../operators/cg/c/copy-to-stream.htm"><b>copy-to-stream</b></a>, or indirectly by
associating it with a <a href="../classes/cg/static-picture.htm"><code>static-picture</code></a>, <a href="../classes/cg/picture-button.htm"><code>picture-button</code></a>, or
<a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a> control. (Note
that while a <a href="../classes/cg/bitmap-pane.htm"><code>bitmap-pane</code></a> is sometimes said to
have a backing-store pixmap or bitmap, this is actually an internal
object and not a pixmap.)
</p>

<hr><hr><h2 id="8"><a name="using-properties-1">2.0 Using properties</a></h2>

<p id="9">
This document describes much of the programmatic interface to pixmaps
rather briefly in terms of properties. When we mention, for example,
that a pixmap has a "name property", this generally implies
that the <a href="../operators/cg/n/name.htm"><b>name</b></a> can
be specified when creating a pixmap by passing a
<code>:name</code> initarg to <a href="../../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>, that the name can be read later
by calling <a href="../operators/cg/n/name.htm"><b>name</b></a>
on the pixmap, and that the name can be modified later with <a href="../../ansicl/dictentr/setfpset.htm"><b>setf</b></a> and <a href="../operators/cg/n/name.htm"><b>name</b></a>.
</p>

<p id="10">
The names of the initarg and accessor symbols will always be the same
as the property name (rare exceptions occur and will be noted). Some
properties are defined as read-only, and so the setf will not be
defined. When editing properties in the inspector, the property
definition also tells the inspector what sort of extended editing to
use when the button on the right side of the property row is clicked,
and what sort of replacement values will be allowed. Properties also
know how to enact needed side effects when modified.
</p>

<hr><hr><h2 id="11"><a name="pixmap-properties-1">3.0 Pixmap properties</a></h2>


<p id="12">
Pixmaps have the following properties. While pixmap properties can be
modified at any time, they typically are specified at creation time
since the various properties must be mutually compatible, and a pixmap
is typically a static object. (To use a different image, it's best to
create a separate pixmap.)
</p>


<table CELLSPACING="0" BORDER="1" CELLPADDING="6" WIDTH="100%">
<tr>
<td VALIGN="top" align="left"><a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a></td> 
<td VALIGN="top" align="left">Specifies the number of bits that are
used to denote each pixel value. Must be either 1, 4, 8, 16, or
24. Must be large enough for the largest pixel value used by the
pixmap. 
<ul>
<li id="13">
1-bit-per-pixel values are 0 and 1
</li>
<li id="14">
4-bits-per-pixel values are 0 through 15
</li>
<li id="15">
8-bits-per-pixel values are 0 through 255
</li>
<li id="16">
16-bits-per-pixel values are 0 through 65535
</li>
<li id="17">
24-bits-per-pixel (true color) values are not a single index
into a colormap, but instead uses one byte for each of the red,
green, and blue components of the color.
</li>
</ul>
</td>
</tr>
<tr>
<td VALIGN="top" align="left"><a href="../operators/cg/c/colors.htm"><b>colors</b></a></td>
<td VALIGN="top" align="left">A vector of RGB color structures that determines the
color that will be used for each pixel value. Pixels with the value 0
will use the first color in the color vector, and in general pixels
with the value N will use the (N+1)th member of the color vector. The
colors vector should contain at least (one more than) as many members
as the largest pixel value in the contents list.
</td>
</tr>
<tr>
<td VALIGN="top" align="left"><a href="../operators/cg/c/contents.htm"><b>contents</b></a>
</td>
<td VALIGN="top" align="left">A list of lists containing the individual 
pixel values of the pixmap. Each inner list contains the pixels for 
one row of the pixmap from left to right, and the outer list contains 
the rows from top to bottom. When pretty-printed, the contents list 
is oriented as the image will appear, giving a rough idea of what 
the real thing will look like.
</td>
</tr>
<tr>
<td VALIGN="top" align="left"><a href="../operators/cg/m/mask-contents.htm"><b>mask-contents</b></a>
</td>
<td VALIGN="top" align="left">An optional property to define part of 
the pixmap as transparent. If supplied, it is a list of lists 
that corresponds to the contents list. Each member of the inner 
lists is either a 1 to indicate that the pixel at that location
should be transparent, or a 0 to indicate that the pixel should 
be the color in the corresponding contents list (or in the texture, 
if a texture is supplied rather than a contents list).
<p id="18">
When a mask is used, the main contents list (or texture) should have a
zero for each transparent pixel. Therefore, the first entry in the 
colors vector of a pixmap that uses a mask will normally be a dummy 
color that never appears in the image, since index zero is reserved 
for transparent pixels.
</p>
<p id="19">
Also note that if a pixmap uses a mask then it should not also use a
pixmap-handle, because the "device-dependent bitmap" that
the handle points to will not incorporate the mask. This restriction
may be removed in the future.
</p>
<p id="20">
An alternative to specifying the individual pixels for a mask is to
call <a href="../operators/cg/g/generate-mask.htm"><b>generate-mask</b></a>, which
will automatically create a mask that is transparent wherever a
particular pixel value occurs.
</p>
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/h/height.htm"><b>height</b></a>
</td>
<td VALIGN="top" align="left">
The height in pixels of the pixmap's texture. Normally this need not
be specified, as it is computed automatically from the <a href="../operators/cg/c/contents.htm"><b>contents</b></a>
property.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/i/invert-p.htm"><b>invert-p</b></a>
</td>
<td VALIGN="top" align="left">
A flag indicating whether the rows of
the contents list are specified from top to bottom or from bottom to
top.
<ul>
<li id="21">
If <a href="../operators/cg/i/invert-p.htm"><b>invert-p</b></a> is
<code>nil</code>, then the rows of the contents list will
be pretty-printed so as to look right-side-up.
</li>
<li id="22">
If <a href="../operators/cg/i/invert-p.htm"><b>invert-p</b></a> is
non-<code>nil</code>, then the pretty-printed contents
will look upside down.
</li>
</ul>
<p id="23">
Note, though, that the operating system specifies pixmaps from bottom
to top, so when <a href="../operators/cg/i/invert-p.htm"><b>invert-p</b></a> is non-<code>nil</code>, this is actually the most natural orientation
from the operating system's point of view, and an "inverted"
pixmap will actually be somewhat faster. In addition, pixmaps created
by calling <a href="../operators/cg/l/load-pixmap.htm"><b>load-pixmap</b></a> will be
"inverted" because that is the way that the data is read
from the <strong>.bmp</strong> file most efficiently.
</p>
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/n/name.htm"><b>name</b></a>
</td>
<td VALIGN="top" align="left">An arbitrary symbol used for finding the
pixmap programmatically. A pixmap may be associated with a control by
specifying its <a href="../operators/cg/n/name.htm"><b>name</b></a> as the <a href="../operators/cg/p/pixmap-name.htm"><b>pixmap-name</b></a> property of the
control (assuming that the pixmap has been cached).
<p id="24">
<strong>See Also</strong>
<a href="#cached-pixmaps-1">Section 6.0 Cached pixmaps</a> below.
</p>
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
palette-size
</td>
<td VALIGN="top" align="left">
This property is no longer supported.  Please use the <a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a> option
instead (the first entry above).
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/p/pixmap-handle.htm"><b>pixmap-handle</b></a>
</td>
<td VALIGN="top" align="left">
The handle to an optional more efficient version of the pixmap which
is managed inside the operating system. This property should not be
set directly by an application, but instead is set indirectly by
calling <a href="../operators/cg/o/open-pixmap-handle.htm"><b>open-pixmap-handle</b></a> on the pixmap to
create the handle. The handle can be destroyed later by calling
<a href="../operators/cg/c/close-pixmap-handle.htm"><b>close-pixmap-handle</b></a> on the pixmap.
<p id="25">
This property is optional because there is a trade-off to using a
pixmap handle. While they draw faster, they essentially double the
amount of memory required for the pixmap since the operating system is
making its own copy of the pixels that are defined in Lisp for the
pixmap. It is a good idea to close pixmap handles that are no longer
being used by calling close-pixmap-handle on the pixmaps that had used
them.
</p>
<p id="26">
Sometimes Common Graphics automatically opens a pixmap handle for a
pixmap, in particular if it is used by a control (since controls tend
to be small enough that we can assume that the extra space is not very
significant). A <a href="../classes/cg/button-info.htm"><code>button-info</code></a> (on a <a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a>)
must use a pixmap handle, since its implementation currently depends
on that, so the handle should not be removed from a pixmap that is
used in a <a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a>.
</p>
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/s/source.htm"><b>source</b></a>
</td>
<td VALIGN="top" align="left">
If this pixmap was created by calling <a href="../operators/cg/l/load-pixmap.htm"><b>load-pixmap</b></a> on a
<strong>.bmp</strong> file, then the path namestring will be preserved
as the value of the source property. If the pixmap was defined
programmatically instead, then the source property will be <code>nil</code>.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/t/texture.htm"><b>texture</b></a>
</td>
<td VALIGN="top" align="left">
A texture object that describes each pixel in the pixmap. Typically
the pixels are specified with the contents property, but alternatively
a texture object may first be created and then specified here. This is
most useful for backward compatibility with the older texture
interface, where <a href="../operators/cg/t/texture.htm"><b>texture</b></a>s and <a href="../operators/cg/t/texture-info.htm"><b>texture-info</b></a>s are used
individually.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/m/mask.htm"><b>mask</b></a>
</td>
<td VALIGN="top" align="left">
An optional second texture object that describes whether or not the
pixmap is transparent at each pixel. Typically the mask pixels are
specified with the <a href="../operators/cg/m/mask-contents.htm"><b>mask-contents</b></a> property, but
alternately a texture object may first be created and then specified
here. If supplied, the mask texture's <a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a> must be 1, and the
texture should have a 1 for each transparent pixel and a 0 for each
non-transparent pixel.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/t/texture-info.htm"><b>texture-info</b></a>
</td>
<td VALIGN="top" align="left">
A structure that internally contains the <a href="../operators/cg/c/colors.htm"><b>colors</b></a>, <a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, and <a href="../operators/cg/h/height.htm"><b>height</b></a> properties of the
pixmap.
<p id="27">
Provided as a property that is redundant with these other properties,
primarily for backward compatibility with the older texture interface in
applications that have created texture-info structures, so that these
structures can be specified directly as the <a href="../operators/cg/t/texture-info.htm"><b>texture-info</b></a> property of a pixmap
as an alternative to specifying the other properties separately.
</p>
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/w/width.htm"><b>width</b></a>
</td>
<td VALIGN="top" align="left">
The width in pixels of the <a href="../operators/cg/t/texture-info.htm"><b>texture-info</b></a>'s texture. Normally
this need not be specified, as it is computed automatically from the
<a href="../operators/cg/c/contents.htm"><b>contents</b></a>
property.
</td>
</tr>
</table>

<hr><hr><h2 id="28"><a name="creating-pixmap-programmatically-1">4.0 Creating a pixmap programmatically</a></h2>



<p id="29">
An example of a programmatically created pixmap:
</p>

<pre id="30">
(make-instance 'pixmap
  :name :find-debug-prompt
  :bits-per-pixel 4
  :colors (vector black dark-red dark-green
             dark-yellow dark-blue dark-magenta
             dark-cyan light-gray gray red green
             yellow blue magenta cyan white)
  :contents
  '((7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 0 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 0 0 0 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 0 0 0 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 0 0 0 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 0 0 0 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 7 0 0 0 7 7 7 7 7 7 7)
    (7 7 7 7 7 0 0 0 7 7 7 7 7 7 7 7)
    (7 7 7 7 0 0 0 7 7 7 7 7 7 7 7 7)
    (7 7 7 0 0 0 7 7 7 7 7 7 7 7 7 7)
    (7 7 0 0 0 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 0 7 7 7 7 7 0 0 0 0 0 7 7)
    (7 0 0 7 7 7 7 7 7 0 0 0 0 0 7 7)
    (7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)))
</pre>

<p id="31">
In the above example, each "7" pixel will be drawn in
light-gray because light-gray is at position 7 in the color vector of
the pixmap.
</p>

<p id="32">
While the example color vector above uses the built-in constants for
the system colors, the general format using arbitrary colors is: 
</p>

<pre id="33">
:colors (vector (make-rgb :red 200 :green 200)
                (make-rbg :red 200 :green 100 :blue 200)
                ...)
</pre>

<p id="34">
As a side note, if a pixmap uses the exact color vector shown in this
example, then it could instead specify
<code>(default-pixmap-color-vector)</code> (see <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a>) as its
<a href="../operators/cg/c/colors.htm"><b>colors</b></a> property,
since it returns a vector with these particular colors. This saves
space by reusing the same vector. The IDE uses the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> for
many of its picture buttons.
</p>
<p id="35">
There is also <code>(default-gray-pixmap-color-vector)</code>
(see <a href="../operators/cg/d/default-gray-pixmap-color-vector.htm"><b>default-gray-pixmap-color-vector</b></a>)
which is just like the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> except
that black (at position 0) has been replaced by the value of <a href="../operators/cg/s/system-edge-shadow-color.htm"><b>system-edge-shadow-color</b></a>. Replacing
a pixmap's color with this color vector can make it appear to be
dimmed. If your application uses multiple pixmaps that can share the
same color vector, then consider storing such color vectors globally
and reusing them to save space.
</p>

<p id="36">
You may also want to use the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> for the
following reason. When the IDE or a standalone application starts up,
a few of the colors in the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> and the
<a href="../operators/cg/d/default-gray-pixmap-color-vector.htm"><b>default-gray-pixmap-color-vector</b></a> are
modified.
</p>

<ul>
<li id="37">
Light-gray at index 7 is changed to the value of <a href="../operators/cg/s/system-dialog-background-color.htm"><b>system-dialog-background-color</b></a>
</li>
<li id="38">
gray at index 8 is changed to the value of <a href="../operators/cg/s/system-edge-shadow-color.htm"><b>system-edge-shadow-color</b></a>
</li>
<li id="39">
white at index 15 is changed to the value of <a href="../operators/cg/s/system-background-color.htm"><b>system-background-color</b></a>.
</li>
</ul>

<p id="40">
These special functions return the colors that the end user has set up
in the Windows Control Panel. If you use the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> for your
application's buttons, then the buttons will adapt at runtime to match
the end user's color preferences. You can demonstrate this by choosing
a new color scheme in Control Panel and then switching back to the
Allegro IDE. Using the <a href="../operators/cg/d/default-pixmap-color-vector.htm"><b>default-pixmap-color-vector</b></a> will
cause your own application to adapt in the same way.
</p>

<hr><hr><h2 id="41"><a name="textures-1">5.0 Textures</a></h2>


<p id="42">
A <em>texture</em> specifies the rectangular array of pixel values
that are used by a pixmap, without the additional information such as
colors that are included in a pixmap (or texture-info) object. While a
pixmap internally includes a texture, using a pixmap does not require
dealing with the texture object directly at all, since the information
contained in the texture is available directly from the pixmap by
using its <a href="../operators/cg/c/contents.htm"><b>contents</b></a>, <a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, and <a href="../operators/cg/h/height.htm"><b>height</b></a> properties.
</p>

<hr><h2 id="43"><a name="textures-properties-2">5.1 Texture properties</a></h2>


<p id="44">
A texture shares some of the properties of a pixmap, and these
properties are accessed in the same way. The shared properties are
contents, bits-per-pixel, palette-size, width, and height. In
addition, a texture has the following unique properties: 
</p>

<table CELLSPACING="0" BORDER="1" CELLPADDING="7" WIDTH="100%">
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/t/texture-array.htm"><b>texture-array</b></a>
</td>
<td VALIGN="top" align="left">
An internal two-dimensional array that implements the texture. The
<a href="../operators/cg/t/texture-array.htm"><b>texture-array</b></a> can
be passed to Windows functions, like StretchDIBits, if direct WinAPI
calls are made. Usually, the texture-array is not specified when
making an instance; instead, the <a href="../operators/cg/c/contents.htm"><b>contents</b></a> property is specified and
the texture-array is created from the contents.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/t/texture-array-height.htm"><b>texture-array-height</b></a></td>
<td VALIGN="top" align="left">
The height of the internal texture array.
</td>
</tr>
<tr>
<td VALIGN="top" align="left">
<a href="../operators/cg/t/texture-array-width.htm"><b>texture-array-width</b></a>
</td>
<td VALIGN="top" align="left"> The width of the internal texture
array. This may be larger than the logical width of the texture
(accessed with the <a href="../operators/cg/w/width.htm"><b>width</b></a> property) due to an internal
need to pad the array rows to 32-bit boundaries (which is done
automatically).
</td>
</tr>
</table>


<p id="45">
Here is how to create the texture used by the earlier pixmap
example. This texture would be created automatically by that example,
but an application can alternately create a texture in this way and
then pass it to a pixmap.
</p>

<pre id="46">
(make-instance 'texture
   :bits-per-pixel 4
   :contents
   '((7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 0 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 0 0 0 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 0 0 0 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 0 0 0 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 0 0 0 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 7 0 0 0 7 7 7 7 7 7 7)
    (7 7 7 7 7 0 0 0 7 7 7 7 7 7 7 7)
    (7 7 7 7 0 0 0 7 7 7 7 7 7 7 7 7)
    (7 7 7 0 0 0 7 7 7 7 7 7 7 7 7 7)
    (7 7 0 0 0 7 7 7 7 7 7 7 7 7 7 7)
    (7 0 0 0 7 7 7 7 7 0 0 0 0 0 7 7)
    (7 0 0 7 7 7 7 7 7 0 0 0 0 0 7 7)
    (7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)
    (7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7)))
</pre>



<hr><h2 id="47"><a name="textures-infos-2">5.2 Texture-infos</a></h2>

<p id="48">
A texture-info is a structure that is retained mostly for backward
compatibility with the older but still supported texture interface. It
internally holds the <a href="../operators/cg/c/colors.htm"><b>colors</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, <a href="../operators/cg/h/height.htm"><b>height</b></a>, and <a href="../operators/cg/b/bits-per-pixel.htm"><b>bits-per-pixel</b></a> property values of a
pixmap. When using a pixmap object, you do not need to know about the
texture-info used by the pixmap because each of the values held in the
texture-info are immediately accessible from the pixmap by using the
accessor functions.
</p>

<p id="49">
<strong>Note</strong>: In order to access these values from a
texture-info itself, the older accessor functions <a href="../operators/cg/t/texture-info-colors.htm"><b>texture-info-colors</b></a>, <a href="../operators/cg/t/texture-info-width.htm"><b>texture-info-width</b></a>,
<a href="../operators/cg/t/texture-info-height.htm"><b>texture-info-height</b></a>, and <a href="../operators/cg/t/texture-info-bits-per-pixel.htm"><b>texture-info-bits-per-pixel</b></a> must be
used instead.
</p>

<p id="50">
A texture-info may be created by calling <a href="../operators/cg/m/make-texture-info.htm"><b>make-texture-info</b></a> and then passed
as the <i>:texture-info</i> initarg when creating a
pixmap, as an alternative to passing separate initargs for the four
corresponding properties when creating the pixmap.
</p>



<hr><hr><h2 id="51"><a name="cached-pixmaps-1">6.0 Cached pixmaps</a></h2>


<p id="52">
A cached pixmap is simply a pixmap on which the function <a href="../operators/cg/c/cache-pixmap.htm"><b>cache-pixmap</b></a> has
been called, and which therefore is a member of an internal global
list of pixmaps. 
</p>
<p id="53">
An application may choose
to cache a pixmap so that it can later look up the pixmap from its
name, rather than keeping the pixmap itself around in a variable
somewhere.
</p>
<p id="54">
An IDE user may want to cache a pixmap so that it will appear in the
list of available pixmaps that drops down when using the inspector to
modify the <a href="../operators/cg/p/pixmap-name.htm"><b>pixmap-name</b></a> property of a <a href="../classes/cg/static-picture.htm"><code>static-picture</code></a>, <a href="../classes/cg/picture-button.htm"><code>picture-button</code></a>, or
<a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a>
control.
</p>

<p id="55">
A list of all cached pixmaps (with tiny representations of their
images) can be viewed by evaluating the following form (in an editor
or in the Debug window):
</p>
<pre id="56">
(inspect cg:pixmap:*cached-pixmaps*)
</pre>
<p id="57">
The following functions are useful when using cached pixmaps:
</p>
<ul>
<li id="58">
<a href="../operators/cg/f/find-pixmap.htm"><b>find-pixmap</b></a>:
finds the cached pixmap with the name specified by the argument and
returns it.  Returns <code>nil</code> if no such pixmap is
found. The name argument may be the actual <a href="../operators/cg/n/name.htm"><b>name</b></a> property of the pixmap (an
arbitrary symbol) or the <a href="../operators/cg/s/source.htm"><b>source</b></a> property (a path namestring
of the <strong>.bmp</strong> file from which the pixmap was originally
loaded).
<p id="59">
Pixmap names should be mutually unique to ensure finding the desired
one.
</p>
</li>
<li id="60">
<a href="../operators/cg/u/uncache-pixmap.htm"><b>uncache-pixmap</b></a>:
removes the specified pixmap from the global list of
cached pixmaps. The pixmap can still be used but it may no longer be
found by its name.
</li>
</ul>

<hr><hr><h2 id="61"><a name="picture-control-pixmaps-1">7.0 Pixmaps on picture controls</a></h2>



<p id="62">
A control that can display a pixmap has several properties that
provide alternate ways of specifying the pixmap that it will
display. These properties exist on a <a href="../classes/cg/static-picture.htm"><code>static-picture</code></a>, or <a href="../classes/cg/picture-button.htm"><code>picture-button</code></a>
control, or on a <a href="../classes/cg/button-info.htm"><code>button-info</code></a> object (which specifies
a single button of a <a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a> control). If
you are editing one of these objects in the inspector and change one
of these properties, the other properties in this set will update
themselves to match.
</p>
<p id="63">
The properties are:
</p>

<ul>
<li id="64">
<a href="../operators/cg/p/pixmap.htm"><b>pixmap</b></a>: the
actual pixmap object to be displayed. This property may be specified
programmatically, but it is read-only on the inspector since it's not
feasible to type in a pixmap object. This property is handy in the
inspector for jumping from a control to the pixmap that it displays.
</li>

<li id="65">
<a href="../operators/cg/p/pixmap-name.htm"><b>pixmap-name</b></a>: the
arbitrary symbol that is the name property of a pixmap that has been
cached by calling cache-pixmap on it. The inspector's extended editor
button for this property will drop down a list of all cached pixmaps
to choose from. When building a form, any of these pixmaps may be used
(even if they are currently used only by the IDE) since a copy will be
saved in the <strong>.bml</strong> file associated with the dialog
that the control is on.
</li>
<li id="66">
<a href="../operators/cg/p/pixmap-source.htm"><b>pixmap-source</b></a>:
the path namestring of a <strong>.bmp</strong> file from which to load
the pixmap. When this property is modified, <a href="../operators/cg/l/load-pixmap.htm"><b>load-pixmap</b></a> is internally
called at that time to create a pixmap from the file contents. The
pixmap is then cached and used as the pixmap for the control. The
inspector's extended editor button for this property will invoke the
file selection dialog for choosing a <strong>.bmp</strong> file. The
<a href="../operators/cg/p/pixmap-source.htm"><b>pixmap-source</b></a>
property will be <code>nil</code> if the pixmap was
created programmatically rather than being loaded from a
<strong>.bmp</strong> file.
<p id="67">
As long as the pixmap is not replaced again, the path namestring will
remain as the <a href="../operators/cg/p/pixmap-source.htm"><b>pixmap-source</b></a> property of the
control even though the original <strong>.bmp</strong> file may no
longer exist. This is not a problem, because the pixmap is loaded only
a single time and (when building a form) the pixmap definition is
thereafter stored in the <strong>.bml</strong> file associated with
the dialog that the control is on.
</p>
<p id="68">
If the original <strong>.bmp</strong> file has changed and you need to
update all pixmaps that were loaded from that file, <a href="../operators/cg/u/update-widgets-of-image-file.htm"><b>update-widgets-of-image-file</b></a>
can be called. Or use the "Sync to Pixmap File" item on the
right-button shortcut menu of a pixmap control on a form.
</p>
</li>
<li id="69">
<a href="../operators/cg/p/pixmap-icon.htm"><b>pixmap-icon</b></a>: some
controls can display an icon instead of a pixmap. An icon is similar
to a pixmap that has a mask, but they are always managed within the
operating system. Controls that can display an icon can set this
property to either an icon handle (an integer returned by <a href="../operators/cg/e/extract-icon-from-file.htm"><b>extract-icon-from-file</b></a>
or <a href="../operators/cg/c/create-icon-handle.htm"><b>create-icon-handle</b></a>) or to a symbol
that is bound to an icon handle. Note that when designing a form
interactively, the IDE cannot save out code to recreate an icon's
pixels as it can with pixmaps, so if it is desired to use an icon
other than one of the built-in icons such as <a href="../variables/cg/error-icon.htm"><code>error-icon</code></a>, it is up to the
application at runtime to load or create the icon and then assign it
the control.
<p id="70">
Note that setting a control's <a href="../operators/cg/p/pixmap-icon.htm"><b>pixmap-icon</b></a> will remove its pixmap,
and vice versa.
</p>
</li>
<li id="71">
<a href="../operators/cg/p/pixmap-use-handle.htm"><b>pixmap-use-handle</b></a>:
a flag that specifies whether the
pixmap displayed by this control will create and use a more
efficient version of the pixmap that is managed within the
operating system. When this property is toggled on, the pixmap
handle is created and stored on the pixmap itself. When this
property is toggled off, the pixmap handle is removed from the
pixmap and destroyed.
</li>
</ul>


<hr><hr><h2 id="72"><a name="outlines-and-pixmaps-1">8.0 Outline controls and pixmaps</a></h2>


<p id="73">
The <a href="../classes/cg/outline.htm"><code>outline</code></a>
and <a href="../classes/cg/outline-item.htm"><code>outline-item</code></a> controls also use
pixmaps as the other controls mentioned above do, but instead of
having a single pixmap property, there are separate properties for the
leaf, opened, and closed pixmaps. An icon cannot be used instead of a
pixmap, and there is no <a href="../operators/cg/p/pixmap-use-handle.htm"><b>pixmap-use-handle</b></a> property since
pixmap handles are always used for outlines. Typically these
properties are specified for the outline as a whole rather than for
each outline-item, but the latter is provided if needed. The pixmap
properties of an outline or outline-item are:
</p>

<ul>
<li id="74">
<a href="../operators/cg/l/leaf-pixmap.htm"><b>leaf-pixmap</b></a>
</li>
<li id="75">
<a href="../operators/cg/l/leaf-pixmap-name.htm"><b>leaf-pixmap-name</b></a>
</li>
<li id="76">
<a href="../operators/cg/l/leaf-pixmap-source.htm"><b>leaf-pixmap-source</b></a>
</li>
<li id="77">
<a href="../operators/cg/o/opened-pixmap.htm"><b>opened-pixmap</b></a>
</li>
<li id="78">
<a href="../operators/cg/o/opened-pixmap-name.htm"><b>opened-pixmap-name</b></a>
</li>
<li id="79">
<a href="../operators/cg/o/opened-pixmap-source.htm"><b>opened-pixmap-source</b></a>
</li>
<li id="80">
<a href="../operators/cg/c/closed-pixmap.htm"><b>closed-pixmap</b></a>
</li>
<li id="81">
<a href="../operators/cg/c/closed-pixmap-name.htm"><b>closed-pixmap-name</b></a>
</li>
<li id="82">
<a href="../operators/cg/c/closed-pixmap-source.htm"><b>closed-pixmap-source</b></a>
</li>
</ul>

<p id="83">
These behave similarly to the corresponding control properties
documented in <a href="#cached-pixmaps-1">Section 6.0 Cached pixmaps</a>.
</p>

<hr><hr><h2 id="84"><a name="pixmap-handle-funs-1">9.0 Pixmap handle functions</a></h2>


<p id="85">
There are serveral functions for creating and deleting pixmap
handles. ("Creating a pixmap handle" is a lazy way of saying
"telling the operating system to create an optimized internal
version of the pixmap and returning a handle to this internal pixmap
to Common Graphics".) This section describes the differences
between them.
</p>

<p id="86">
When working with textures and texture-infos, the pixmap handle must
be created and managed as a separate object. <a href="../operators/cg/c/create-pixmap-handle.htm"><b>create-pixmap-handle</b></a> creates and
returns a pixmap handle, and <a href="../operators/cg/d/destroy-pixmap-handle.htm"><b>destroy-pixmap-handle</b></a> will destroy
it later to free up operating system resources. (If <a href="../operators/cg/d/destroy-pixmap-handle.htm"><b>destroy-pixmap-handle</b></a> is not called
explicitly, the handle will be destroyed automatically when Lisp or a
standalone application exits.)
</p>

<p id="87">
When working with pixmaps, <a href="../operators/cg/o/open-pixmap-handle.htm"><b>open-pixmap-handle</b></a> will create a
handle and store it on the pixmap, while <a href="../operators/cg/c/close-pixmap-handle.htm"><b>close-pixmap-handle</b></a> will
remove the handle from the pixmap and destroy it. These functions may
also be called on a control that uses a pixmap in order to address its
pixmap indirectly.
</p>

<p id="88">
When working with controls that use pixmaps (such as <a href="../classes/cg/static-picture.htm"><code>static-picture</code></a>s, or
<a href="../classes/cg/picture-button.htm"><code>picture-button</code></a>s control, or <a href="../classes/cg/button-info.htm"><code>button-info</code></a>s, which
specifies a single button of a <a href="../classes/cg/multi-picture-button.htm"><code>multi-picture-button</code></a> control),
calling <a href="../operators/cg/p/pixmap-use-handle.htm"><b>(setf pixmap-use-handle)</b></a> on the
control will establish whether its pixmap uses a handle.
</p>

<hr><hr><h2 id="89"><a name="bmp-to-lisp-1">10.0 Converting from .bmp files to lisp code</a></h2>



<p id="90">
Since loading pixmaps from <strong>.bmp</strong> files is pretty fast,
an application can simply include any needed <strong>.bmp</strong>
files with it and load them at runtime. But if you would rather embed
the pixmap data in your Lisp code to avoid distributing the
<strong>.bmp</strong> files, then you can convert the
<strong>.bmp</strong> data into Lisp source code. 
</p>


<p id="91">
The simplest way is to call the function <a href="../operators/cg/i/import-pixmaps.htm"><b>import-pixmaps</b></a>.  It loads an entire set of .bmp
files and creates a new source code file that you can incorporate
directly into your application code to create the pixmaps.
</p>
<p id="92">
An older alternative is to call <a href="../operators/cg/s/save-lisp-pixmap.htm"><b>save-lisp-pixmap</b></a> on a pixmap that
has been loaded from a <strong>.bmp</strong> file with <font face="Courier New"><b>load-pixmap</b></font>, which will create a new
Lisp source code file with the programmatic definition of the pixmap
in it. <a href="../operators/cg/l/load-lisp-pixmap.htm"><b>load-lisp-pixmap</b></a> will then load
this file and return the saved pixmap. The saved file may optionally
be compiled in the meantime, and then <a href="../operators/cg/l/load-lisp-pixmap.htm"><b>load-lisp-pixmap</b></a> called on the
compiled file.
</p>

<p id="93">
<a href="../operators/cg/l/load-lisp-pixmap.htm"><b>load-lisp-pixmap</b></a>
cannot be used at runtime, though, if the individual source code or
<strong>fasl</strong> files have been replaced by an image file for
distribution. In order to use <a href="../operators/cg/s/save-lisp-pixmap.htm"><b>save-lisp-pixmap</b></a> for a generated
application without distributing the pixmap source or
<strong>fasl</strong> files, you would need to either edit the source
code file that <a href="../operators/cg/s/save-lisp-pixmap.htm"><b>save-lisp-pixmap</b></a> creates to force
it to store the returned pixmap in some accessible location, or else
make your application code call <a href="../operators/cg/f/find-pixmap.htm"><b>find-pixmap</b></a> on the name of the
pixmap that was saved. (The generated code does call <a href="../operators/cg/c/cache-pixmap.htm"><b>cache-pixmap</b></a> on the
created pixmap.)
</p>

<p id="94">
An alternative to using <a href="../operators/cg/s/save-lisp-pixmap.htm"><b>save-lisp-pixmap</b></a> at all is to
evaluate a form like <code>(pprint (recreation-code
my-pixmap))</code> in the debug window, and then to simply cut and
paste the printed source code into your application. (See <a href="../operators/cg/r/recreation-code.htm"><b>recreation-code</b></a>.)
</p>
<p id="95">
This allows placing multiple pixmaps into a single Lisp
source file. Or inspect a pixmap object, go to the internals tab, and
click on the button at the right side of the top line to invoke the
"extended editor" for the pixmap. The modal editor window
that pops up will contain the recreation code for the pixmap, which
you could copy and paste into your application. (Though the editor is
read-only, you can still copy the text from it.)
</p>

<hr><hr><h2 id="96"><a name="enhancing-ide-1">11.0 Enhancing the IDE with pixmaps</a></h2>




<p id="97">
The generic function <a href="../operators/cg/p/pixmap.htm"><b>pixmap</b></a> returns a pixmap to be
associated with certain classes of objects. Normally this is a
4-bits-per-pixel 16 by 16 pixmap. The inspector will display a pixmap
in its history list for any object for which a <a href="../operators/cg/p/pixmap.htm"><b>pixmap</b></a> method returns a pixmap. For
example, adding the following method would cause all conses that
appear in the inspector's history list to be represented by the
<code>:macroexpand</code> pixmap (which looks like
<code>(&lt;-&gt;)</code>).
</p>

<pre id="98">
(defmethod pixmap ((object cons))
  (find-pixmap :macroexpand))
</pre>

<p id="99">
Evaluate that form in the Debug window and then evaluate
<code>(inspect (cons 1 2))</code> and you will see the pixmap in
the drop-down list in the <a href="../ide-menus-and-dialogs/inspect-dialog.htm">Inspect</a> dialog. 
</p>
<p id="100">
Evaluating
</p>
<pre id="101">
(defmethod pixmap ((object cons)) nil)
</pre>

<p id="102">
will undo the associated between conses and the icon.
</p>

<hr><hr><h2 id="103"><a name="mouse-cursors-1">12.0 Mouse cursors</a></h2>



<p id="104">
Mouse cursors are now standard-objects with some of the same
properties as pixmaps. The object is called a <b>cursor</b> and has
the properties <a href="../operators/cg/n/name.htm"><b>name</b></a>, <a href="../operators/cg/t/texture.htm"><b>texture</b></a>, <a href="../operators/cg/m/mask.htm"><b>mask</b></a>, <a href="../operators/cg/c/cursor-handle.htm"><b>cursor-handle</b></a>, and <a href="../operators/cg/c/click-position.htm"><b>click-position</b></a> (which is
a position indicating the point within the cursor's image, relative to
its upper left corner, that is considered to be the exact location
pointed to by the cursor).
</p>
<p id="105">
The properties <a href="../operators/cg/t/texture-info.htm"><b>texture-info</b></a>, <a href="../operators/cg/w/width.htm"><b>width</b></a>, and <a href="../operators/cg/h/height.htm"><b>height</b></a> from pixmaps are not needed
for mouse cursors since all cursors are the same size and depth. (The
depth is always 1-bit-per-pixel, and the standard mouse cursor size is
returned by the functions <b>cg::mouse-cursor-width</b> and
<b>cg::mouse-cursor-height</b>.)
</p>
<p id="106">
The function <a href="../operators/cg/c/cursor.htm"><b>cursor</b></a> and its setf get and set the
mouse cursor of a window; the new cursor can be either a cursor object
or a cursor handle. There is a <a href="../operators/cg/c/cursor.htm"><b>cursor</b></a> property on every window for
its current cursor. Like pixmaps, cursors can be cached, using the
function <a href="../operators/cg/c/cache-cursor.htm"><b>cache-cursor</b></a>, retrieved with
<a href="../operators/cg/f/find-cursor.htm"><b>find-cursor</b></a>, and
uncached with <a href="../operators/cg/u/uncache-cursor.htm"><b>uncache-cursor</b></a>.
</p>

<p id="107">
A cursor object will create its handle as needed when the cursor is
assigned to a window.
</p>

<p id="108">
Below is the IDE's definition of the "hand" mouse
cursor. After defining a cursor in this way, you can immediately tell
a window to use it with a form like
</p>

<pre id="109">
(setf (cursor my-window) (find-cursor :hand-cursor))
</pre>

<p id="110">
Note that black pixels require a "zero" in both the main
texture and the mask texture, white pixels require a "one"
in the main texture and a "zero" in the mask texture, and
transparent pixels require a "zero" in the main texture and
a "one" in the mask texture.
</p>

<pre id="111">
(cache-cursor
    (make-instance 'cursor
      :name :hand-cursor
      :click-position (make-position 13 4)
      :texture (make-instance 'texture
                 :bits-per-pixel 1
                 :contents
                 '(
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000011000000000000000000
                   #*00000000000011000000000000000000
                   #*00000000000011000000000000000000
                   #*00000000000011000000000000000000
                   #*00000000000011000000000000000000
                   #*00000000000011011000000000000000
                   #*00000000000011011011000000000000
                   #*00000000000011011011010000000000
                   #*00000000000011011011011000000000
                   #*00000000110011111111011000000000
                   #*00000000111011111111111000000000
                   #*00000000011011111111111000000000
                   #*00000000001011111111111000000000
                   #*00000000001111111111111000000000
                   #*00000000000111111111111000000000
                   #*00000000000111111111110000000000
                   #*00000000000011111111110000000000
                   #*00000000000011111111110000000000
                   #*00000000000001111111100000000000
                   #*00000000000001111111100000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000
                   #*00000000000000000000000000000000 
                   #*00000000000000000000000000000000
                   ))

      :mask (make-instance 'texture
              :bits-per-pixel 1
              :contents
              '(
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111100111111111111111111
                #*11111111111000011111111111111111
                #*11111111111000011111111111111111
                #*11111111111000011111111111111111
                #*11111111111000011111111111111111
                #*11111111111000000011111111111111
                #*11111111111000000000111111111111
                #*11111111111000000000001111111111
                #*11111111111000000000000111111111
                #*11111110001000000000000011111111
                #*11111110000000000000000011111111
                #*11111110000000000000000011111111
                #*11111111000000000000000011111111
                #*11111111100000000000000011111111
                #*11111111100000000000000011111111
                #*11111111110000000000000011111111
                #*11111111110000000000000111111111
                #*11111111111000000000000111111111
                #*11111111111000000000000111111111
                #*11111111111100000000001111111111
                #*11111111111100000000001111111111
                #*11111111111100000000001111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111
                #*11111111111111111111111111111111 
                #*11111111111111111111111111111111
                ))))
</pre>

<p id="112">
In addition to the ability to define custom mouse cursors as above, a
number of built-in mouse cursors are supplied. There are two groups of
these. 
</p>

<p id="113">
The first is a set supplied by the operating system, and are the
values of the following variables:
</p>


<ul>
<li id="114">
<a href="../variables/cg/arrow-cursor.htm"><code>arrow-cursor</code></a>
</li>
<li id="115">
<a href="../variables/cg/cross-cursor.htm"><code>cross-cursor</code></a>
</li>
<li id="116">
<a href="../variables/cg/line-cursor.htm"><code>line-cursor</code></a>
</li>
<li id="117">
<a href="../variables/cg/waiting-cursor.htm"><code>waiting-cursor</code></a>
</li>
<li id="118">
<a href="../variables/cg/vertical-arrow-cursor.htm"><code>vertical-arrow-cursor</code></a>
</li>
<li id="119">
<a href="../variables/cg/app-starting-cursor.htm"><code>app-starting-cursor</code></a>
</li>
<li id="120">
<a href="../variables/cg/help-cursor.htm"><code>help-cursor</code></a>
</li>
<li id="121">
<a href="../variables/cg/no-drop-cursor.htm"><code>no-drop-cursor</code></a>
</li>
<li id="122">
<a href="../variables/cg/sizing-cursor.htm"><code>sizing-cursor</code></a>
</li>
<li id="123">
<a href="../variables/cg/sizing-north-south-cursor.htm"><code>sizing-north-south-cursor</code></a>
</li>
<li id="124">
<a href="../variables/cg/sizing-west-east-cursor.htm"><code>sizing-west-east-cursor</code></a>
</li>
<li id="125">
<a href="../variables/cg/sizing-northeast-southwest-cursor.htm"><code>sizing-northeast-southwest-cursor</code></a>
</li>
<li id="126">
<a href="../variables/cg/sizing-northwest-southeast-cursor.htm"><code>sizing-northwest-southeast-cursor</code></a>
</li>
</ul>

<p id="127">
The value of each of these variables is actually a cursor-handle
integer rather than a cursor object, but it may be used in the same
way that a cursor object is used. These cursors are standard in the
Windows operating system, and if the user is using a custom Windows
desktop scheme, then these built-in cursor handles will invoke the
corresponding mouse cursors of that scheme.
</p>

<p id="128">
The second set of built-in cursors is supplied by Common
Graphics. These cursor objects must be retrieved by calling <a href="../operators/cg/f/find-cursor.htm"><b>find-cursor</b></a> on one of
the following keyword symbols, which are the names of the cursors:
</p>

<ul>

<li id="129">
<code>:hand-cursor</code> --- a human hand with pointing index
finger (often used by web browsers). On GTK, there is an OS hand
cursor, so there is a vaiable <a href="../variables/cg/hand-cursor.htm"><code>hand-cursor</code></a> whose value on GTK is the handle of
that cursor. On Windows, the value of that variable is <code>nil</code>. <code>(find-cursor :hand-cursor)</code>
will always return the right thing on any platform.
</li>

<li id="130">
<code>:default-drop-cursor</code> --- a large hollow arrow
pointing downward (used by the CG drag-and-drop facility)
</li>
<li id="131">
<code>:horizontal-splitbar-cursor</code> --- used by particular
IDE dialogs that implement child pane split bars (and could be used by
applications that implement similar features)
</li>
<li id="132">
<code>:vertical-splitbar-cursor</code> --- similar to
<code>:horizontal-splitbar-cursor</code>, but in the other
orientation
</li>
</ul>

</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-pixmaps.htm">8.1 version</a></td></tr></table></html>