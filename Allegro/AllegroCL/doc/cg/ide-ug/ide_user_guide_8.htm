<html>

<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 3.0">
<title>IDE User Guide, Chapter 8: Events</title>
</head>

<body LINK="#0000ff">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>

<h1><a name="begin"></a>8. Events</h1>

<p>This chapter contains the following sections:</p>

<blockquote>
  <p><a href="#sec-8-1">8.1 Events not on components</a><br>
  <a href="#sec-8-2">8.2 A simplistic example as an introduction</a><br>
  <a href="#sec-8-3">8.3 Writing an event handler function</a><br>
  &nbsp;&nbsp;&nbsp;&nbsp; <a href="#sec-8-3-1">8.3.1 What if you change to the same value</a><br>
  <a href="#sec-8-4">8.4 The on-click event handler runs with any click</a><br>
  <a href="#sec-8-5">8.5 Getting a handler to display another window</a></p>
</blockquote>

<p>This is chapter 8 of the User Guide for the Allegro CL 8.2 Integrated Development
Environment (IDE). The IDE is only supported on Windows machines. </p>

<p>The chapters of the IDE User Guide are:</p>

<blockquote>
  <p><a href="ide_user_guide_1.htm">Chapter 1: Introduction to the IDE</a> <br>
  <a href="ide_user_guide_2.htm">Chapter 2: The Allegro CL Development Environment (IDE)</a><br>
  <a href="ide_user_guide_3.htm">Chapter 3: An example</a><br>
  <a href="ide_user_guide_4.htm">Chapter 4: Projects</a><br>
  <a href="ide_user_guide_5.htm">Chapter 5: Components</a><br>
  <a href="ide_user_guide_6.htm">Chapter 6: Designing a user interface using forms</a><br>
  <a href="ide_user_guide_7.htm">Chapter 7: Menus</a><br>
  <b>Chapter 8: Events</b> (this chapter)</p>
</blockquote>

<p>Events are a critical component of any visual application, that is one where users
communicate with an application through windows and dialogs. An event is a mouse action
(clicking a button, moving the mouse). Keyboard actions (typing a character, e.g.) are
also an event but keyboard events are typically handled automatically. </p>

<h3><a name="sec-8-1"></a>8.1 Events not on components</h3>

<p>This chapter mostly deals with events occuring on controls. Controls, as we will
describe, have built-in event handlers that can easily be made to perform what task is
desired in response to events. Catching events not over controls is more complicated. </p>

<p>See the essay <a href="../cg-events.htm">cg-events.htm</a> for more information.
General Common Graphics and IDE documentation is described in <a href="../../cgide.htm">doc/cgide.htm</a>.
The HTML documentation files can be accessed from the Allegro CL Integrated Development
Environment using the <a href="../../ide-menus-and-dialogs/help-menu.htm#acl-doc">Help |
Allegro CL Documentation</a> menu command (which displays <a href="../../introduction.htm">introduction.htm</a>,
which in turn contains a list of all essay help files, including <a href="../../cgide.htm">doc/cgide.htm</a>).
The remainder of this chapter discusses event handler functions on controls only. </p>

<h3><a name="sec-8-2"></a>8.2 A simplistic example as an introduction</h3>

<p>This example is designed for programmers who are new to events. If you are already
familiar with events, you may wish to skip down to the next section.</p>

<p>We are going to design a form where events simply cause something to be printed to the
debug window. Evaluating this form:</p>

<pre>(eval-in-listener-thread
 '(format t &quot;Action at ~D~%&quot; 
    (mod (get-universal-time) 10000)))</pre>

<p>causes `Action at xxxxx' (where xxxxx is a number based on the current time in seconds)
to be printed in the debug window. (The <a
href="../../operators/ide/eval-in-listener-thread.htm">eval-in-listener-thread</a> wrapped
around the call to <b>format</b> binds <font face="Courier New">*terminal-io*</font> to
the Debug window during the evaluation of the body. If it was not present, <font
face="Courier New">*terminal-io*</font> might be the Console window when a project is run,
and then the messages would not be easily visible.)</p>

<p><img src="dw-action-1-8.jpg" width="708" height="168"
alt="dw-action-1-8.bmp (356886 bytes)"></p>

<p>We are going to define a function that causes this printing and see what happens when
that function is associated with various events on a form. </p>

<p>First, define the function in the debug window (simply because that is a convenient
place). The function is</p>

<pre>(defun foo (&amp;rest args) (declare (ignore args))
  (eval-in-listener-thread 
   '(format t &quot;Action at ~D~%&quot; 
      (mod (get-universal-time) 10000))))</pre>

<p><img src="dw-action-2-8.jpg" width="709" height="198"
alt="dw-action-2-8.bmp (421398 bytes)"></p>

<p>Two points about this function: 

<ul>
  <li>The argument list, <code>(&amp;rest args)</code> accepts any number of arguments
    (including none), bundles them into a list and makes that list the value of args. <code>(declare
    (ignore args))</code> tells the system args will not be used. In this simplistic example,
    we are not concerning ourselves with what arguments are actually passed to event functions
    nor with what might be done with these arguments. We are simply interested in seeing when
    events happen. In a real application, the arguments will typically be used rather than
    ignored. </li>
  <li><code>(get-universal-time)</code> returns an integer which is the number of seconds from
    00:00:00 GMT midnight, December 31, 1899/January 1, 1900. Therefore, a different value
    will be printed each time, indicating the number of seconds since the last call. We do
    this simply to ensure the printed messages can be distinguished from one another. </li>
</ul>

<p>Now, start with a blank form. Add a radio button (click on the radio button icon on the
toolbar and click on the blank form) and a check box. The form will look something like
this (we have made it smaller but that is not necessary):</p>

<p><img SRC="ide8-3.jpg" ALT="ev-3.bmp (256182 bytes)" width="464" height="184"></p>

<p>The radio button is selected (as indicated by the bounding box with the little
squares). Choose the Events tab of the Inspector window:</p>

<p><img src="in-rb1-8.jpg" width="354" height="370" alt="in-rb1-8.bmp (393734 bytes)"></p>

<p>All the events (except <a href="../../operators/cg/o/on-change-test.htm">on-change-test</a>
which we discuss <a href="#sec-8-3-1">below</a>) have no associated functions (as
indicated by the nil's). The <code>nil</code> next to <code>on-double-click</code> is
highlighted. Type foo &lt;enter&gt; and foo will appear in the <a
href="../../operators/cg/o/on-double-click.htm">on-double-click</a> slot:</p>

<p><img src="ide8-rb1-ev-insp.jpg" width="354" height="370"
alt="ide8-rb1-ev-insp.jpg (17886 bytes)"></p>

<p>Now, click <a href="../../ide-menus-and-dialogs/run-menu.htm#run-form">Run | Run Form</a>
or <a href="../../ide-menus-and-dialogs/run-menu.htm#run-project">Run | Run Project</a>.
You will be asked if you want to save the project. There is no reason to save this
simplistic example but do so if you wish. The form now becomes active. Arranging your
windows so that the Debug windows and the form are both visible, double click on the radio
button. You should see a message in the Debug window. Do it again and another message
appears. Double clicking elsewhere, such as over the check box, does not cause a message
to be printed. This picture shows the running form and the debug window after several
messages (you will get different numbers if you try this, of course):</p>

<p><img src="dw-acts-3-8.jpg" width="720" height="335"
alt="dw-acts-3-8.bmp (723654 bytes)"></p>

<p>Stop running the form (click <a href="../../ide-menus-and-dialogs/run-menu.htm#stop">Run
| Stop</a>). Using the Inspector window, change the value of the <code>on-double-click</code>
for the radio button back to <code>nil</code>. Try setting other values to <strong>foo</strong>
(except <strong>on-change-test</strong> where <strong>foo</strong> is not an appropriate
value) and trying some mouse actions to see what happens. In this way, when you run the
form again using <a href="../../ide-menus-and-dialogs/run-menu.htm#run-form">Run | Run
Form</a>, you can get a feel for the mouse (or keyboard) action associated with an event. </p>

<p>Here are some comments about some of the other event functions:</p>

<blockquote>
  <p><a href="../../operators/cg/o/on-set-focus.htm">on-set-focus</a></p>
</blockquote>

<dir>
  <blockquote>
    <p>When a dialog has focus, one of the controls on the dialog (if there are more than one
    &#150; that is why the check box is there) has focus within the dialog. This is usually
    visually evident because the border is modified. In the picture above, the radio button
    has focus and Radio Button is outlined. If you make <strong>on-set-focus</strong> foo (as
    we did with <strong>on-double-click</strong> above), and run the form, a message will be
    printed in the debug window when you click over the radio button, causing it to have
    focus. Pressing the Tab key also moves the focus about the dialog, from the radio button
    to the check box and back (you must have clicked on the radio button first, or tabbing
    will not select it). Press Tab repeatedly and a message is printed every other press (as
    the focus moves back from the check box to the radio button).</p>
  </blockquote>
</dir>

<blockquote>
  <b><p></b><a href="../../operators/cg/o/on-kill-focus.htm">on-kill-focus</a><b></p>
  </b>
</blockquote>

<dir>
  <blockquote>
    <p>This event function is run when the focus moves away from the radio button control.</p>
  </blockquote>
</dir>

<blockquote>
  <b><p></b><a href="../../operators/cg/o/on-mouse-in.htm">on-mouse-in</a>, <a
  href="../../operators/cg/o/on-mouse-out.htm">on-mouse-out</a><b></p>
  </b>
</blockquote>

<dir>
  <blockquote>
    <p>This event function is run when the mouse cursor moves over the control (regardless of
    where the focus on the window is, no clicks necessary). As you move the mouse back and
    forth over the radio button, messages will be printed in the debug window. If you move the
    mouse a lot, there will be a lot of messages. This is a good time to tell or remind you
    that <a href="../../operators/cg/o/on-mouse-in.htm">on-mouse-in</a> and <a
    href="../../operators/cg/o/on-mouse-out.htm">on-mouse-out</a> event functions should (1)
    be fast (because can run many, many times); (2) not have a permanent effect (since the
    mouse moving may be accidental &#150; actions that have permanent effect should require a
    deliberate action such as a mouse click). Typical on-mouse-in and -out event functions do
    simple visual things such as changing the cursor.</p>
  </blockquote>
</dir>

<p>This is the end of our simplistic example. We call it simplistic because in a real
application, event functions will not simply print useless messages to a text-edit window.
The purpose of this example was to show when event functions are run and what actions
trigger them. </p>

<h3><a name="sec-8-3"></a>8.3 Writing an event handler function</h3>

<p>In our simple example, our event function simply wrote a message to a text-edit window
saying that the event had occurred. This is not, of course, a useful event-handling
function (users usually know that they did something with the mouse and do not need to be
told). However, usefulness is only meaningful in the context of your application. </p>

<p>Once you have figured out what you want it to do, you write the handler by clicking on
the extended editor button (with the three dots) in the events tab of the inspector. Here
is the initial events tab for a button (named :button4):</p>

<p><img src="ide8-but-iev-nsp.jpg" width="354" height="370"
alt="ide8-but-iev-nsp.jpg (16944 bytes)"></p>

<p>Clicking on the extended editor button for the <a
href="../../operators/cg/o/on-change.htm">on-change</a> event displays a function template
in the editor workbook tab corresponding to the form being worked on:</p>

<p><img src="ew-f1-but4-8.jpg" width="731" height="370"
alt="ew-f1-but4-8.bmp (812574 bytes)"></p>

<p>The template looks like:</p>

<pre>(defun form1-button4-on-change (widget new-value old-value)
  (declare (ignore-if-unused widget new-value old-value))
  
  t) ; Accept the new value</pre>

<p>This is a complete function definition, so far doing nothing except returning t. The
system calls the <a href="../../operators/cg/o/on-change.htm">on-change</a> event handler
function with three arguments: <em>widget</em> (the control whose values has changed, the
button in this case); the <em>new-value</em> and the <em>old-value</em>. This function
must return non-nil (t or any other value except nil) in order for the change to be
effected (with some exceptions &#150; radio buttons change whether the event handler
returns true or nil, indeed even when there is no event handler). Generally, if this
function returns nil, the change is rejected and the previous value returned to the
control (though other side-effects performed by the <a
href="../../operators/cg/o/on-change.htm">on-change</a> function are not undone, of
course). </p>

<p>You can add code to the function so it will do additional things in your application.</p>

<p>Let us consider a more complicated example. We get a new form (by choosing File | New
Form) and choosing <strong>dialog</strong> from the possible form types. Then we place a
single-item-list on it:</p>

<p><img src="ide8-nf2.jpg" width="666" height="370" alt="ide8-nf2.jpg (57743 bytes)"></p>

<p>We inspect the form (by double-clicking on it away from the single-item-list) and
change the value of the status-bar property to t:</p>

<p><img src="ide8-nf2-insp.jpg" width="354" height="370"
alt="ide8-nf2-insp.jpg (20924 bytes)"></p>

<p>We inspect the single-item-list (by double-clicking on it) and change the value of the
range to (:gray :white :yellow). This is done by clicking on the button with three dots to
the right of the range value, and replace the contents of the control that appears with
'(:gray :white :yellow) (including the leading apostrophe). We also change the value to
:gray:</p>

<p><img src="ide8-nf2-sil-insp.jpg" width="354" height="370"
alt="ide8-nf2-sil-insp.jpg (21975 bytes)"></p>

<p>Now the form looks like this, with a status bar (containing `:form2') at the bottom and
a single-item-list with choices gray, white, and yellow (the printing function prints the
symbol name of the values, which causes the leading colon not to be printed):</p>

<p><img src="ide8-nf2-ready.jpg" width="666" height="370"
alt="ide8-nf2-ready.jpg (55740 bytes)"></p>

<p>We want to make choosing a color have the effect of changing the background-color of
the control.</p>

<p>We again inspect the single-item-list, look at the Events tab, and click on the
extended editor button (with three dots, to the right) for the on-change event. We get a
template in an editor buffer similar to the following: </p>

<pre>(defun form2-single-item-list-1-on-change 
    (widget new-value old-value)
  (declare (ignore-if-unused widget 
                             new-value old-value))
  
  t) ; Accept the new value</pre>

<p>We add this code to change the background color according to the new value:</p>

<pre>  (cond
   ((eql new-value :gray) 
    (setf (background-color (parent widget)) gray))
   ((eql new-value :white) 
    (setf (background-color (parent widget)) white))
   ((eql new-value :yellow) 
    (setf (background-color (parent widget)) yellow)))
  (invalidate (parent widget))</pre>

<p>so the entire function looks like:</p>

<pre>(defun form2-single-item-list-1-on-change 
    (widget new-value old-value)
  (declare (ignore-if-unused widget 
                             new-value old-value))
  (cond
   ((eql new-value :gray) 
    (setf (background-color (parent widget)) gray))
   ((eql new-value :white) 
    (setf (background-color (parent widget)) white))
   ((eql new-value :yellow) 
    (setf (background-color (parent widget)) yellow)))
  (invalidate (parent widget))
  t) ; Accept the new value </pre>

<p>The <a href="../../operators/cg/i/invalidate.htm">invalidate</a> form makes sure that
the background color change is put into effect (covering and uncovering the running form
has the same effect). If you evaluate the new definition (click <a
href="../../ide-menus-and-dialogs/tools-menu.htm#incremental-evaluation">Tools |
Incremental Evaluation</a> with the cursor just after the final parenthesis) and you run
the form, you can change the background color by clicking the appropriate value.</p>

<h3><a name="sec-8-3-1"></a>8.3.1 What if you change to the same value</h3>

<p>In our single-item-list example, the value could be <code>:yellow</code> and a user
could click on <code>yellow</code>. What happens? The answer is nothing. The <a
href="../../operators/cg/o/on-change.htm">on-change</a> handler only runs when the new
value is different from the old value according to the <a
href="../../operators/cg/o/on-change-test.htm">on-change-test</a> predicate. To make this
clear, let us modify the previous example by having the <a
href="../../operators/cg/o/on-change.htm">on-change</a> event change the value and print a
message to the status bar of the dialog (using the function <a
href="../../operators/cg/w/window-message.htm">window-message</a>) showing the time of the
action and the color chosen:</p>

<pre>(defun form2-single-item-list-1-on-change 
    (widget new-value old-value)
  (declare (ignore-if-unused widget 
                             new-value old-value))
  (cond
   ((eql new-value :gray) 
    (setf (background-color (parent widget)) gray)
    (window-message (parent widget) 
        (format nil &quot;Color is gray at ~D~%&quot; (mod (get-universal-time) 10000))))
   ((eql new-value :white) 
    (setf (background-color (parent widget)) white)
    (window-message (parent widget) 
        (format nil &quot;Color is white at ~D~%&quot; (mod (get-universal-time) 10000))))
   ((eql new-value :yellow) 
    (setf (background-color (parent widget)) yellow)
    (window-message (parent widget) 
         (format nil &quot;Color is yellow at ~D~%&quot; (mod (get-universal-time) 10000)))))
 (invalidate (parent widget))
 t) ; Accept the new value</pre>

<p>(Remember to evaluate this new definition &#150; click <a
href="../../ide-menus-and-dialogs/tools-menu.htm#incremental-evaluation">Tools |
Incremental Evaluation</a> with the cursor just after the final parenthesis.)</p>

<p>Now clicking on a new value causes the color to change and causes a message to be
printed in the status bar. But, as we said, clicking on the current value does not cause
anything new to be printed in the status bar because the system compares the old value and
the new value using the <a href="../../operators/cg/o/on-change-test.htm">on-change-test</a>
handler. The <a href="../../operators/cg/o/on-change.htm">on-change</a> handler will only
be run if the <a href="../../operators/cg/o/on-change-test.htm">on-change-test</a>
indicates that the <em>old-value</em> and the <em>new-value</em> are different by
returning nil. The default <a href="../../operators/cg/o/on-change-test.htm">on-change-test</a>
is the function <a href="../../operators/cg/w/widget-value-equal.htm">widget-value-equal</a>
and that function returns true for the same value.</p>

<p>To get something to happen with every click, you can change the <a
href="../../operators/cg/o/on-change-test.htm">on-change-test</a> function (to, for
example, always return nil). But this is not the recommended way. Instead, if you want
feedback to the user confirming that their click was received, use the <a
href="../../operators/cg/o/on-click.htm">on-click</a> handler, as we describe next.</p>

<h3><a name="sec-8-4"></a>8.4 The on-click event handler runs with any click</h3>

<p>As we noted above, the <a href="../../operators/cg/o/on-change.htm">on-change</a> event
handler only runs if the new-value is determined (by the <a
href="../../operators/cg/o/on-change-test.htm">on-change-test</a>) different from the old
value. The typical way to change a value is with a mouse click, which moves the focus to
the control and (typically) changes the value of controls such as radio buttons,
single-item-lists, etc. Whether or not the <a href="../../operators/cg/o/on-change.htm">on-change</a>
handler runs, the <a href="../../operators/cg/o/on-click.htm">on-click</a> handler will
run whenever the component is clicked. However, if the component is changed by an access
key or by tabbing, the <a href="../../operators/cg/o/on-click.htm">on-click</a> is not run
since there was no click. But this is probably what you want. The typical concern is a
user is clicking but seeing no response. In the example we have been developing, there is
no response when the choice is not a change. We add an <a
href="../../operators/cg/o/on-click.htm">on-click</a> handler to print a message to the
status bar when the current color is clicked. First, on the Events tab of the inspector
for the single-item-list, click on the extended definition button. This will put this code
in the form2 editor buffer:</p>

<pre>(defun form2-single-item-list-1-on-click (dialog widget)
  (declare (ignore-if-unused dialog widget))
  
  t)</pre>

<p>Now add this below the <strong>declare</strong> form:</p>

<pre>  (window-message (parent widget) 
        (format nil &quot;Color clicked at ~D~%&quot; (mod (get-universal-time) 10000)))</pre>

<p>so the result is</p>

<pre>(defun form2-single-item-list-1-on-click (dialog widget)
  (declare (ignore-if-unused dialog widget))
  (window-message (parent widget) 
        (format nil &quot;Color clicked at ~D~%&quot; (mod (get-universal-time) 10000)))
  t)</pre>

<p>Now when you click the same color, a message appears in the status bar. We have two
messages being sent to the status bar when a new color is clicked: one from the on-click
and one from the on-change, and only one ends up visible. But that doesn't matter for our
purpose, which is just to confirm to the user that the click was received.</p>

<h3><a name="sec-8-5"></a>8.5 Getting a handler to display another window</h3>

<p>See section <a href="ide_user_guide_4.htm#sec-4-15-5">4.15.5</a> in <a
href="ide_user_guide_4.htm">chapter 4 Projects</a> for information on how to display
another window in your application. Similar code can go into an event handler (allowing
you to have clicking a button pop-up or otherwise display another window in your
application).</p>

<p>Go to <a href="#begin">beginning</a> of this chapter.</p>

<hr>

<p><small>Copyright (c) 1998-2010, Franz Inc. Berkeley, CA., USA. All rights reserved.</small><br>
<small>Documentation for Allegro CL version 8.2. This page has been moderately modified
from the 6.1 version.</small><br>
<small>Created 2009.12.09.</small></p>

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>
</body>
</html>
