<html>

<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 3.0">
<title>IDE User Guide, Chapter 4: Projects</title>
</head>

<body LINK="#0000ff">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>

<h1><a NAME="begin"></a>4. Projects</h1>

<p>This chapter contains the following sections:</p>

<blockquote>
  <p><a href="#sec-4-1">4.1 Configuration options</a><br>
  <a href="#sec-4-2">4.2 A project example</a><br>
  <a href="#sec-4-3">4.3 The Project Manager dialog</a><br>
  <a href="#sec-4-4">4.4 The project .lpr file</a><br>
  <a href="#sec-4-5">4.5 Types of modules in a project</a><br>
  <a href="#sec-4-6">4.6 More on adding modules to a project</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-6-1">4.6.1 Subprojects</a><br>
  <a href="#sec-4-7">4.7 How files are displayed in the Modules tab of the Project manager</a><br>
  <a href="#sec-4-8">4.8 Changing the order of files in a project</a><br>
  <a href="#sec-4-9">4.9 Opening a new project</a><br>
  <a href="#sec-4-10">4.10 Opening an existing project</a><br>
  <a href="#sec-4-11">4.11 Compiling a project</a><br>
  <a href="#sec-4-12">4.12 Project before and after functions</a><br>
  <a href="#sec-4-13">4.13 Saving a project</a><br>
  <a href="#sec-4-14">4.14 Running a project</a><br>
  <a href="#sec-4-15">4.15 The main form</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-15-1">4.15.1 Does a project need a main form?</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-15-2">4.15.2 The Project package</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-15-3">4.15.3 The Project name</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-15-3">4.15.4 The Project init function</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-4-15-5">4.15.5 Running secondary form windows
  programmatically</a><br>
  <a href="#sec-4-16">4.16 The Project Manager Build tab</a><br>
  <a href="#sec-4-17">4.17 The Project Manager Include and Advanced tab</a><br>
  <a href="#sec-4-18">4.18 The Project Manager Version Info tab</a><br>
  <a href="#sec-4-19">4.19 Building the application</a><br>
  <a href="#sec-4-20">4.20 Modifying the .lpr file</a></p>
</blockquote>

<p>This is chapter 4 of the User Guide for the Allegro CL 8.2 Integrated Development
Environment (IDE). The IDE is only supported on Windows machines. </p>

<p>The chapters of the IDE User Guide are:</p>

<blockquote>
  <p><a href="ide_user_guide_1.htm">Chapter 1: Introduction to the IDE</a> <br>
  <a href="ide_user_guide_3.htm">Chapter 2: The Allegro CL Development Environment (IDE)</a><br>
  <a href="ide_user_guide_3.htm">Chapter 3: An example</a><br>
  <strong>Chapter 4: Projects</strong> (this chapter)<br>
  <a href="ide_user_guide_5.htm">Chapter 5: Components</a><br>
  <a href="ide_user_guide_6.htm">Chapter 6: Designing a user interface using forms</a><br>
  <a href="ide_user_guide_7.htm">Chapter 7: Menus</a><br>
  <a href="ide_user_guide_8.htm">Chapter 8: Events</a></p>
</blockquote>

<p>A project is a collection of modules used to build an application. Allegro CL provides
tools for managing projects. In this chapter, we describe how to create and manage
projects, how to add modules to the project, and how to convert the project into an
application ready for delivery.</p>

<p>In the Allegro CL Development Environment, there can only be one project open at a
time, which is the current project. The project window, with the menu bar, displays the
name of the current project in its title:</p>

<p><img src="../../pictures/pw.jpg"></p>

<p>In the illustration, the current project is Project20. </p>

<h3><a NAME="sec-4-1"></a>4.1 Configuration options</h3>

<p>As with many things in Allegro CL, behavior dealing with projects is configurable.
Bring up the <a href="../../ide-menus-and-dialogs/options-dialog.htm">Options</a> dialog
by clicking <a href="../../ide-menus-and-dialogs/tools-menu.htm#options">Tools | Options</a>
and select the <a href="../../ide-menus-and-dialogs/options-dialog-project.htm">Project</a>
tab:</p>

<p><img src="../../pictures/options-project.jpg"></p>

<p>The initial option values are displayed in the illustration. The options are: 

<dir>
  <p><b>New</b> <strong>Project Action</strong>: when a new project is created, the Project
  Manager and an editor workbook are (<strong>Show Project Manager </strong>and<strong> Show
  Editor</strong> checked) or are not (unchecked) displayed, and a new form is (<strong>Create
  a Form</strong> checked) or is not (unchecked) created.</p>
  <p><b>Open</b> <strong>Project Action</strong>: upon opening an existing project, only
  files that have no compiled counterpart or whose compiled counterpart is out of date are
  compiled (<strong>Compile As Needed</strong> is chosen, as in the illustration) or all
  files are compiled (<strong>Full Compile</strong> is chosen). If <strong>No Compile or
  Load</strong> is chosen, no compilation will be done and no files will be loaded. (That
  option is useful when compilation or loading causes an error.) You can also choose to have
  the Project Manager displayed and the project source files opened in the editor.</p>
  <p><b>Run</b> <strong>Project Action</strong>: just before running the current project,
  its files will be or will not be saved and/or compiled based on this option's setting. In
  the illustration, when a form is run, the files will be saved and incrementally compiled (<strong>Save
  and Compile as Needed</strong> is chosen).</p>
</dir>

<blockquote>
  <p>A check box near the bottom right allows you to have project files
  opened in the editor closed when the project is closed.</p>
</blockquote>

<p>In this chapter, we describe the default configuration. We usually note where a
configuration option may change behavior in the text but if you are seeing behavior
different from what is described, check your project options as that may explain the
difference.</p>

<h3><a NAME="sec-4-2"></a>4.2 A project example</h3>

<p>The tutorial supplied with Allegro CL creates a project called
:interface-builder-tutorial (producing the <em>doodler</em> application). It draws
cycloidal curves in a window and allows you to set the background and line colors and to
modify the curve being drawn. We will use this project as an example. You can bring up
that project by clicking on <strong>Open Project</strong> in the <a
href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu and then opening the file <i>interface-builder-tutorial.lpr</i>
in <i>&lt;Allegro directory&gt;\gui-builder-tutorial\final</i> folder.</p>

<h3><a NAME="sec-4-3"></a>4.3 The Project Manager dialog</h3>

<p>Information about a project is displayed in the <a
href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project Manager</a> dialog,
displayed by clicking Project Manager on the View menu. The current project displayed is
the :interface-builder-tutorial project associated with the Tutorial.</p>

<p><img src="../../pictures/pm-doodler.jpg"></p>

<p>This dialog lists the form, libraries, other projects and source files associated with
the current project. We will describe the things listed <a href="#sec-4-5">below</a>. Most
information about a project is displayed in the various tabs of the Project Manager dialog
and tools on the dialog allow modifying projects as desired.</p>

<h3><a NAME="sec-4-4"></a>4.4 The project .lpr file</h3>

<p>Each project has an associated file with extension <i>.lpr</i>. This file is generated
automatically when a project is saved. All information displayed visually in the Project
Manager dialog is stored in the .lpr file. The file is updated whenever the project is
saved. Projects are saved by clicking <a
href="../../ide-menus-and-dialogs/file-menu.htm#save-all">File | Save All</a> at any time
(all files associated with the project are saved, not just the <i>.lpr</i> file). Whenever
you run a project or exit Allegro CL, you are prompted to save the project files as well. </p>

<p>Editing the <i>.lpr</i> files directly is discouraged except for several advanced
capabilities that cannot be specified from the Project Manager dialog (particularly before
and after functions &#150; see <a href="#sec-4-12">4.12 Project before and after functions</a>
below). Except for these advanced capabilities, projects should be managed using the
Project Manager dialog.</p>

<p>You can view (and edit, if necessary) the current project .lpr file by clicking on the <b>View
Project Source</b> button of the Project Manager toolbar.</p>

<p><img src="Image37.jpg" width="180" height="224" alt="Image37.jpg (9924 bytes)"></p>

<p>In addition to storing information about a project in a file, you can include one
project in another (as a sub-project) by including (adding) the sub-project's .lpr file to
the modules of the current project.</p>

<h3><a NAME="sec-4-5"></a>4.5 Types of modules in a project</h3>

<p>The modules associated with a project are displayed in the Modules tab of the Project
Manager. Each module is a collection of one or more files. Modules can be added or deleted
from a project by clicking on the + button on the Project Manager toolbar (to add) or
selecting a file in the project and clicking on the x button (to delete).</p>

<p>The following list shows the types of modules which can be included in a project. 

<dir>
  <b><p>Form module</b>. A form module has two or three files, all with the same name but
  different extensions. The Project Manager list shows the filename only. Following the
  filename is information on whether the module is saved and if so, the location of the .cl
  file relative to the current directory is displayed. The three types of files associated
  with a form module are: </p>
  <blockquote>
    <b><p>A source file (.<i>cl</i>)</b>. This file has definitions of functions and other
    objects (classes, parameters, etc.) needed for the form. It is created automatically and
    can be modified by the editor workbook. The starting code for event handlers is
    automatically added to the source file of the form module. You can add any other code to
    the source file that you would like associated with the form. It is very common that you
    will define the class of the form in its source file. </p>
    <b><p>A builder file (.<i>bil</i>)</b>. The <em>bil</em> file is automatically created
    when you save a form. The <em>bil</em> file contains information about the appearance of
    the form as well as its components. You must not edit the <em>bil</em> file because your
    changes could be lost the next time that you save your form. Instead, add your code to the
    source file. The <em>bil</em> file contains two function definitions based on the name of
    the form. It does this by defining two functions, one with the same name as the form (if
    the form is named <em>myform</em>, the function is named <b>myform</b>) and the other with
    the name of the form prepended with <b>make-</b> (<b>make-myform</b>). </p>
    <b><p>A bitmap (.<i>bml</i>) file</b>. This file is automatically created when you save a
    form if any of the components in the form have bitmaps. For example, the bitmap providing
    the picture of a picture button would be included in this file. The bml file contains a
    description of the bitmaps used in the form (saving you from having to manage the bitmap
    files). </p>
  </blockquote>
</dir>

<blockquote>
  <p>A project may contain any number of forms. One is identified as the main form as
  described below.</p>
  <p>It is possible to add an existing form module to a project by clicking on + and
  specifying the form's <em>.cl</em> or <em>.bil</em> file but this is not recommended.. </p>
  <p>To add a new, blank form, click on <a
  href="../../ide-menus-and-dialogs/file-menu.htm#new-form">New Form</a> on the <a
  href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu. A blank form named <em>formn</em>,
  where <em>n</em> is a number that makes the name unique, is created and added to the end
  of the list of modules in the project.</p>
  <p>Forms are displayed in the Project manager modules tab. Each is listed with an icon
  shown. The main form first (icon is a speeding window) followed by two source files and
  then two more forms (and more that are cut out of this illustration):</p>
  <p><img src="Image38.jpg" width="223" height="150" alt="Image38.jpg (8698 bytes)"></p>
  <p>A list of form and source modules in a project is returned by the <a
  href="../../operators/ide/modules.htm">modules</a> function.</p>
  <p><code>(modules (current-project))</code></p>
  <p>returns a list of the form and source modules in the current project. The functions <a
  href="../../operators/ide/finder-function.htm">finder-function</a> and <a
  href="../../operators/ide/maker-function.htm">maker-function</a> may be called on a form
  module to find the names of the auto-generated functions in the <em>.bil</em> file for
  creating the module's running window.</p>
  <b><p>Other source (.cl) files</b>. These files typically define additional functionality
  for the application. Add a new source file by clicking on + and specifying the .cl file
  you want to add. If a source file is already in the editor, it can be added quickly to the
  current project by right-clicking over its editor pane and selecting <b>Add File to
  Project</b> from the shortcut menu that is displayed. Note that both forms and source
  files can be specified with .cl file. The system knows you mean a form if there is a .bil
  file with the same name and in the same folder. If there is no corresponding .bil file,
  the system knows you mean a source file. Source files are displayed in the Project manager
  modules tab with an icon of a piece of paper with the upper right corner turned down (see <i>util.cl</i>,
  the second entry, in the illustration above). </p>
  <b><p>Other project (.lpr) files</b>. The ability to include one project within another
  allows modularity. Add a subproject by clicking on + and specifying the subproject&#146;s
  .lpr file. </p>
  <p>A list of project modules in a project is returned by the <a
  href="../../operators/ide/projects.htm">projects</a> function.</p>
  <p><code>(projects (current-project))</code></p>
  <p>returns a list of the projects in the current project.</p>
  <b><p>Library files (.dll files)</b>. These are foreign libraries that will be loaded into
  the application. See the description of the foreign function interface <a
  href="../../foreign-functions.htm">foreign-functions.htm</a> for information on using
  foreign code in an application. </p>
  <p>A list of library modules in a project is returned by the <a
  href="../../operators/ide/libraries.htm">libraries</a> function.</p>
  <p><code>(libraries (current-project))</code></p>
  <p>returns a list of the libraries in the current project.</p>
  <p><strong>Distributed files</strong> (any type). A distributed file is one which will be
  included with the project distribution but will not be compiled or loaded into the image.
  Such files might include a data file needed for the application, license files particular
  to the application, etc. See <a href="../../operators/ide/distributed-files.htm">distributed-files</a>.
</p>
<p>
<b>Distributed directories</b>. A distributed directory will have its
entire contents copied to the distribution directory for the
standalone application of the project. This is similar to a set of
distributed files, but is easier to select interactively as a single
directory, and it avoids cluttering up the main directory of your
distribution. The paths for distributed directories are stored in the
project's <a href="../../operators/ide/distributed-files.htm">distributed-files</a>
property along with individual distributed files.
</p>
<p>
<b>Editable files</b>. These are files that are neither compiled &
loaded nor distributed, but are still accessible in the Project
Manager. See <a
href="../../operators/ide/editable-files.htm">editable-files</a>.
</p>
</blockquote>



<h3><a NAME="sec-4-6"></a>4.6 More on adding modules to a project</h3>

<p>Files can be added to a project when a new form is created using <a
href="../../ide-menus-and-dialogs/file-menu.htm#new-form">New Form</a> on the <a
href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu or when a previously
unsaved editror buffer is saved (you are asked if the file should be added to the current
project). Files can also be added to a project by clicking the + button on the Project
Manager toolbar. Clicking that button causes the following dialog to appear, which asks
what sort of file you wish to add:</p>

<p><img src="../../pictures/pro-file-type.jpg"></p>

<p>You select the type of file, and click <strong>OK</strong>. These files are neither compiled nor loaded into the
application image, but they can have any extension, so the extension alone does not
determine the type of file.</p>

<p><b>Adding an existing form</b>. As stated <a href="#sec-4-5">earlier</a>, raw form
descriptions in the Allegro CL Integrated Development Environment are stored as <em>.bil</em>
files (ie, files whose names have 'bil' extension). A complete form description consists
of two or three files with the same name but with extensions <em>.cl</em>, <em>.bil</em>,
and (if present) <em>.bml</em>. For example, myform.cl, myform.bil, and perhaps
myform.bml. Normally, a user does not directly handle .bil files as they are associated
with corresponding .cl files. When you choose FORM from the list in the dialog above, you
are asked for the .bil file.</p>

<p>
<b>Adding an existing project</b>. When you choose
PROJECT from the list in the dialog above, you are asked for the
project .lpr file (see <a href="#sec-4-6-1">4.6.1 Subprojects</a> for
more information on subprojects). Note that if a particular form
already belongs to a project, we do not recommend adding it directly
to a different project. Instead, you can include the project
containing the form as a subproject.
</p>

<p><b>Adding a code, library, distributed file or directory, or
editable file</b>. When you choose CODE, you are asked for a Common
Lisp source file (with extension typically .cl). When you choose
LIBRARY, you are asked for a .dll file. When you choose DISTRIBUTED
FILE, no specific extension is specified in the file choice dialog
that appears. DISTRBUTED DIRECTORY asks for a directory. EDITABLE-FILE
asks for an editable file.</p>

<p><strong>Adding a new form</strong>. New forms can be added to a project by clicking <a
href="../../ide-menus-and-dialogs/file-menu.htm#new-form">New Form</a> on the <a
href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu while a project is open.
You will be prompted for the type of window associated with the form (that is, the type of
window that will be created when the application is run). The usual choice is dialog but
see <a href="ide_user_guide_6.htm">chapter 6</a> for more information of the type of
window to choose. Once the type of window is chosen, a new form is opened and added to the
list of modules in the current project. </p>
<b>

<p>Where modules are added</b>. Form modules and code modules are processed together as
are subproject modules and library modules, so it is only the position of a module with
respect to other modules processed with it that is important. However, the ordering of
modules that are processed together can make a difference. In general, you want
definitions (of functions, macros, variables, etc.) to precede use. You can change the
order by selecting a module and clicking on the up or down arrows, which will move the
module up or down within the list of modules. </p>

<h3><a NAME="sec-4-6-1"></a>4.6.1 Subprojects</h3>

<p>
A subproject (or child project) of project <b>foo</b> is a project
that is automatically loaded whenever you open project foo for editing
in the IDE. The subproject's code will also be included in the
standalone application that you generate for project <b>foo</b>.  A
subproject typically contains utilities that are used by one or more
other projects, and are useful for dividing a project into smaller
modules for manageability.
</p>
<p>
If you haven't used subprojects before and would like to try them, you
can make an existing project <b>foo</b> load another existing project
<b>bar</b> as a subproject as follows:
</p>
<ol>
<li>
<b>Open foo as the current project</b>.
</li>
<li>
Press the <b>Add File</b> button on the left end of the Project
Manager's toolbar (its icon is a plus sign) to add a new module to
project foo.
</li>
<li>
<b>Select the PROJECT option</b> when a dialog appears asking which
type of module to add. You will then be prompted to select the .lpr
project definition file of another project, and here is where you
would select project <b>bar</b>.
</li>
</ol>
<p>
After selecting the subproject, it will appear near the top of the
list of modules for the open project. (Subprojects are always loaded
before the open project's own code so subprojects appear above any
form or source code modules.) Here is the Modules tab for project foo
after project bar has been added:
</p>
<p><img SRC="proj-foo-pm.jpg"></p>
<p>
If you click on the blue arrow (or double-click the subproject item
anywhere, or select the item and press the right arrow key), then the
subproject's own modules will be listed just below the subproject in
the module list, and indented to show the hierarchy, as illustrated:
</p>
<p><img SRC="proj-foo-bar-pm.jpg"></p>
<p>
Not only can you now see what modules are in the subproject, but you
may now access any module of the subproject just as you could modules
of the current project previously.  So you could, for example,
double-click a code module that's in a subproject to edit its source
code, or double-click a form module to show its form window, and then
edit the form.  Or right-click any module to invoke those and other
commands from the pop-up menu.
</p>
<p>
A subproject may itself have further subprojects, and the entire
hierarchy of project modules may be accessed from the project manager.
</p>
<p>
Whenever you use the <b>File | Save All</b> command, the project
system will save any files that need to be saved for the current
project and any descendent projects in the hierarchy. This includes
regenerating the .bil file for any form that you've modified in any
subproject, and regenerating the .lpr project definition file for any
subproject whose contents have changed.
</p>
<p>
One thing that may be confusing is adding a new module to a project.
You can add a new module to a subproject, but first you need to select
either the subproject itself in the list of modules, or select one of
the (non-subproject) modules that are in that subproject.  Then when
you click the <b>Add File</b> button, a dialog will first ask whether
you want to add a module to the current (top-level) project or to the
selected subproject.  Otherwise it wouldn't be obvious where the new
module would end up.  If you press the button for the selected
subproject, you can then proceed to select the module to add to the
subproject.  This could even be another project to add as a
subsubproject.
</p>
<p>
An auxilliary feature is that you can right-click a subproject in the
list of modules and select <b>Open Selected Project</b> from the
pop-up menu to make that project be the current project, though
there's actually less need to do that now.  One time you may need to
open a subproject is to add a new form to it, because at this time you
still can't create a new form directly into a subproject of the
current project.
</p>


<h3><a NAME="sec-4-7"></a>4.7 How files are displayed in the Modules tab of the Project
manager</h3>

<p>The illustration shows the <a
href="../../ide-menus-and-dialogs/project-manager-dialog-modules.htm">Modules Tab of a
Project Manager</a> listing a number of modules. We have added a library (dll file), a
subproject (lpr file), and a distributed file to the :gui-builder-tutorial project
for this illustration only:</p>

<p><img src="pm-ibt-plus.jpg"></p>

<p>
The project has a single library called <i>linkacl.dll</i>, a single
sub-project called
<i>project1</i> and a single distributed file
(<em>c:\temp\sort-test.cl</em>, indicated with a gray circle) along
with the forms and source files of the interface-builder-tutorial
project.
</p>


<p>
<b>Location of files</b>: all modules are given paths relative to the
project file if they are in the same folder or subfolders of the
project file. All the forms and source files are in the same folder as
the project file. The library and the subproject are specified with
absolute paths because they are not located in the project folder or
one of its sub-folders (when you add them, you are asked if you want
them moved or copied; in this case, they were neither moved or copied
to the project directory).</p>


<p><b>The order in which modules are listed</b>: libraries (.dll files on Windows),
sub-projects (.lpr files) and other files (source files and forms) are treated separately,
so order within those types of modules is what is important. All library modules are
loaded first, and all sub-project modules next, both in a depth-first order. Then all
source and form modules are loaded in the order that they are specified. In this example,
the load order is: 

<dir>
  <dir>
    <p>lnkacl project2 doodler util cycloid curve-dialog coefficient-dialog colorx
    background-palette</p>
  </dir>
</dir>

<p>The appointment file is not loaded. It is a distributed file, so it is included in the
project directory but not loaded as part of the project. (Examples files, test files,
template files, etc. are all examples of distributed files. The documentation for users of
the application typically describes distributed files and their purpose.)</p>

<p>Compilation of form and source files follows the same order as loading, with each
compiled file being loaded before the next is compiled. </p>

<h3><a NAME="sec-4-8"></a>4.8 Changing the order of files in a project</h3>

<p>As said just above, library (.dll) modules, sub-project (.lpr) modules, and source and
form modules (.cl) are all handled separately, so order only matters within those file
types. Files can be reordered (among other modules processed together) by selecting a
module (so it is highlighted) and moving it up or down with the up- and down-arrow buttons
on the tool bar. </p>

<h3><a NAME="sec-4-9"></a>4.9 Opening a new project</h3>

<p>Choose <a href="../../ide-menus-and-dialogs/file-menu.htm#new-project">New Project</a>
from the <a href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu. The current
project will be closed (only one project can be worked on at a time) &#150; you will be
prompted to save files associated with the project being closed if necessary. You are then
asked to specify a project directory with a dialog like this:</p>

<p><img src="../../pictures/new-project-dir.jpg" width="508" height="427"
alt="new-project-dir.jpg (21696 bytes)"></p>

<p>Once the directory is decided, the new project will be created. </p>

<h3><a NAME="sec-4-10"></a>4.10 Opening an existing project</h3>

<p>Choose <a href="../../ide-menus-and-dialogs/file-menu.htm#open-project">Open Project</a>
from the <a href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu. The open
dialog will appear. Specify the .lpr file associated with the desired project.</p>

<h3><a NAME="sec-4-11"></a>4.11 Compiling a project</h3>

<p>If you click <a href="../../ide-menus-and-dialogs/tools-menu.htm#compile-project">Tools
| Compile Project</a>, all source files (.cl and .bil) that have been modified since the
last compile are compiled and loaded and the project file is compiled and loaded.</p>

<p>If you click <a href="../../ide-menus-and-dialogs/tools-menu.htm#full-compile">Tools |
Full Compile</a>, all source files and the project file are compiled and loaded (each file
is loaded after it is compiled and before the next file is compiled).</p>

<p>Incremental compilation (with <a
href="../../ide-menus-and-dialogs/tools-menu.htm#compile-project">Tools | Compile Project</a>)
is usually satisfactory when working on a project and is faster because only a few files
(typically) need be compiled. Full compilation is necessary when changes to one file
result in changes to another file even though that file is not modified. For example,
suppose in the project illustrated above, a macro is defined in <em>utils.cl </em>which is
used in doodler. If you change the macro definition in utils, doodler should be recompiled
even though it has not been touched because uses of the macro in doodler must be
re-expanded. (Recompilation is not necessary when a function defined in util.cl and used
in a later file or form is redefined since changes in function definitions are
automatically tracked even in compiled code.)</p>

<p>Compilation of a source (.cl) file results in a .fasl file, of the same name. </p>

<p>Whenever a project is compiled, before functions are called before the compilation and
after functions are called after.</p>

<h3><a NAME="sec-4-12"></a>4.12 Project before and after functions</h3>

<p>Before and after functions are zero-argument functions which are called before any
loading within the project (before functions) and after all loading is complete (after
functions). When you compile a project, all files are loaded even if they are not
compiled. Before and after functions are useful, for example, for modifying the
environment appropriately for the compilation (before functions) and restoring the
environment after the compilation. Before and after functions are accessed with <a
href="../../operators/ide/before-functions.htm">before-functions</a> and <a
href="../../operators/ide/after-functions.htm">after-functions</a> but are not specified
on the Project Manager dialog. Before and after functions are added with setf and <a
href="../../operators/ide/before-functions.htm">before-functions</a> and <a
href="../../operators/ide/after-functions.htm">after-functions</a>.</p>

<h3><a NAME="sec-4-13"></a>4.13 Saving a project</h3>

<p>All modified and unsaved files associated with a project are saved when <a
href="../../ide-menus-and-dialogs/file-menu.htm#save-all">Save All</a> is chosen from the <a
href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu. </p>

<p>Note that certain other actions, such as opening a new project or exiting Allegro CL,
causes you to be prompted to save all files associated with the current project.</p>

<h3><a NAME="sec-4-14"></a>4.14 Running a project</h3>

<p>Click on <a href="../../ide-menus-and-dialogs/run-menu.htm#run-project">Run | Run
Project</a>. The Init Function of the project will be run in a separate thread. The
default Init Function creates and displays the window associated with the main form and
the function returns the window object (a stream). If you have not arranged to display
other windows in the project programmatically, you can run forms other than the main form
by selecting the form of interest and clicking <a
href="../../ide-menus-and-dialogs/run-menu.htm#run-form">Run | Run Form</a>. Clicking <a
href="../../ide-menus-and-dialogs/run-menu.htm#stop">Run | Stop</a> hides the running
window and displays the form. Running a project executes the initialization function of
the project. </p>

<p>As we said above, by default, the initialization function of a project calls the
maker-function for the project&#146;s main form which creates and displays the window
associated with the main form only. Any other windows (associated with forms other than
the main form) are not displayed by default and must be displayed programmatically. How
they are displayed is part of your application. Looking at the interface-builder-tutorial
(doodler) project, for example, there are several windows some of which are displayed
along with the main form window and others are displayed by user action.</p>

<h3><a NAME="sec-4-15"></a>4.15 The main form</h3>

<p><img SRC="Image33.jpg" WIDTH="481" HEIGHT="286"></p>

<p>One form associated with a project is identified as the main form. The main form is
defined by the property that (assuming the default project init function is used) the
window associated with it is the primary window of the application. That means that
closing it (when the application associated with the project is run) exits the
application. You can have many other windows in your application but only one primary
window. Usually, the primary window is the first window displayed when your application is
run and it is the only one displayed by default.</p>

<p>If there are many forms associated with a project, one must be identified as the main
form.</p>

<p>The forms associated with a project are listed on the <a
href="../../ide-menus-and-dialogs/project-manager-dialog-options.htm">Options</a> tab of
the <a href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project Manager</a>
dialog. In the illustration, the four forms associated with the project are listed. The
selected form (in this case doodler) is the main form. This can be changed by simply
selecting another form on the list.</p>

<h3><a NAME="sec-4-15-1"></a>4.15.1 Does a project need a main form?</h3>

<p>A project can have no associated forms. The application built with the project will
thus have no windows. Also, projects designed to be sub-projects of other projects may
have no need of windows. For window-less projects, you must specify an initialization
function. The initialization function can do whatever you want including writing to files,
monitoring sockets, etc. The initialization function is specified in the Init Function box
on the Options pane of the Project Manager and may be retrieved or set programmatically
with <a href="../../operators/ide/on-initialization.htm">on-initialization</a> and its <b>setf</b>.</p>

<h3><a NAME="sec-4-15-2"></a>4.15.2 The Project package</h3>

<p>A project has a project package associated with it. This package is specified on the
Options tab of the Project Manager dialog, in the Package field. The value should be a
symbol naming a package. The package of a project specifies the default package for all
forms in the project. Individually you can specify the package of any form but the initial
package of a form is determined by the package of the project. When a form is added to a
project, the source file of a form has an in-package statement added.</p>

<h3><a NAME="sec-4-15-3"></a>4.15.3 The Project name</h3>

<p>Projects are named with symbols. The symbol naming a project is specified in the Name
field of the Options tab of the Project Manager. We recommend using a keyword for names,
as we have done. The name can be used with find-project to programmatically find the
project with the specified name.</p>

<h3><a NAME="sec-4-15-4"></a>4.15.4 The Project Init Function</h3>

<p>The init function is called (with no arguments) when the project is run. It is also run
when the application associated with the project is started. The initialization code looks
like this, in part:</p>

<pre>(let (main-window (&lt;project-init-function&gt;))
  &nbsp; (loop
      (if (not (open-stream-p main-window)) (exit)
        (process-single-event)))</pre>

<p>(We are showing the structure of the code, not the actual code.) We note from this
code-like fragment: 

<ol>
  <li>The init function typically should return a window (which is a type of stream). The
    default init function returns the window associated with the main form and whatever window
    is returned, closing that window will cause the application to exit. On the other hand,
    the application will run until that window is closed unless exit is called by some other
    means. </li>
  <li>Events are processed in each iteration of the loop. Therefore, actual work must be
    triggered by some event. One might have a button labeled Go or Do It and clicking that
    button could do the work of the application and display the results. In the tutorial
    (doodler) application, clicking the Draw All button causes the defined curves to be drawn
    in the doodler window. </li>
  <li>An init function is free to do as much work as you want. Its only requirements are that
    it return a window and not need any arguments. You may want to create, display, and close
    a window in the init function. Such a window could take a password from the user (and exit
    if the password is invalid) or take configuration information from the user before
    displaying the main window. Note that you must call process-single-event, if necessary, in
    order to have events in the window handled. </li>
</ol>

<p>If closing the main window is not an adequate technique for exiting an application, an
alternative is to place the event-handling loop shown above directly in your own <a
href="../../operators/ide/on-initialization.htm">on-initialization</a> function, and exit
the event-handling loop when the application should exit. If you do that, make sure that
the init function does not return a window.</p>

<h3><a NAME="sec-4-15-5"></a>4.15.5 Running secondary form windows programmatically</h3>

<p>When you use the <a href="../../ide-menus-and-dialogs/run-menu.htm#run-project">Run |
Run Project</a> command or start up a standalone application that was generated from a
project, a window is created from the main form of the project automatically; you do not
need to write any code to do this. But typically an application's main window will invoke
other windows when the user clicks on certain widgets or otherwise requests particular
windows to be shown. </p>

<p>If these windows were designed interactively as forms, then the application needs to
know how to create these windows programmatically, such as in an <a
href="../../operators/cg/o/on-change.htm">on-change</a> event handler function of a button
widget.</p>

<p>The best way to create a window from a form programmatically is to call the <a
href="../../operators/ide/finder-function.htm">finder-function</a> or <a
href="../../operators/ide/maker-function.htm">maker-function</a> for the form. These
functions are generated automatically whenever you save a form, and their names follow a
simple rule so that you can know what function to call to create a window from the form. </p>

<p>Specifically, the finder-function name will be a symbol having the same name as the
form, and the maker-function's name will be a symbol whose name consists of the string
&quot;make-&quot; followed by the name of the form. So if the name of the form is <code>:form2</code>,
then the finder-function will be <code>form2</code> and the maker-function will be <code>make-form2</code>.
Both symbols will be in the form's package, as set via the <a
href="../../operators/ide/form-package-name.htm">form-package-name</a> property of the
form in the inspector. If you later change the <a href="../../operators/cg/n/name.htm">name</a>
property (or the <a href="../../operators/ide/form-package-name.htm">form-package-name</a>
property) of the form and save the form again, then the generated functions will have
corresponding new names as well.</p>

<p>Here is an example of an <a href="../../operators/cg/o/on-change.htm">on-change</a>
event-handler for a button widget that would create a second window from a form named <code>form2</code>,
making it owned by the first window so that it will shrink and close along with the first
window:</p>

<pre>(defun form1-button1-on-change 
    (button new-value old-value)
  (declare (ignore new-value old-value))
  (select-window 
   (make-form2 :owner (parent button)
               :title &quot;This is Form 2&quot;))
  t)</pre>

<p>The <a href="../../operators/ide/finder-function.htm">finder-function</a> returns a
window that has already been created from the form if one exists, otherwise creating and
returning one, while the maker-function <i>always</i> creates a new window and returns it.
The <a href="../../operators/ide/finder-function.htm">finder-function</a> takes no
arguments, and always creates the window (when it does create one) as a non-owned
top-level window with the properties that were specified at design time. The <a
href="../../operators/ide/maker-function.htm">maker-function</a>, on the other hand, has a
number of keyword arguments that allow creation of the window as an owned or child window
of any other window and with a custom position, size, name, title, and/or border. The
names of the maker-function's keyword arguments are <i>owner</i>, <i>child-p</i>, <i>exterior</i>,
<i>name</i>, <i>title</i>, and <i>border</i>, and have the same meanings as with the
function <a href="../../operators/cg/m/make-window.htm">make-window</a>.</p>

<p>Since the names of the <a href="../../operators/ide/finder-function.htm">finder-function</a>
and <a href="../../operators/ide/maker-function.htm">maker-function</a> are predictable,
there is typically no need to look at the actual generated source code for them. But if
you do wish to view it, it can be found in a source code file with the extension <i>.bil</i>
at the path where you specified to save the form. For example, if you save a form to the
file <i>second-form.cl</i>, then the file <i>second-form.bil</i> is created containing the
auto-generated finder-function and maker-function for the form. </p>

<p>While it is possible to edit a <i>.bil</i> source code file directly, it is so
dangerous that it is better never to do so. It is dangerous to do so because if you later
save the form itself then your edited code will be overwritten by newly auto-generated
code. Note that in addition to saving a form explicitly by invoking the <a
href="../../ide-menus-and-dialogs/file-menu.htm#save">File | Save</a> command on it, the
form could easily be saved inadvertantly if you have interactively made any changes to it
(even by accidentally moving it a bit) if you sometime later use the <a
href="../../ide-menus-and-dialogs/file-menu.htm">File | Save All</a> command in any window
or if you say OK when a dialog asks if you want to save various current modifications. A
warning dialog will appear for these reasons if you do in fact attempt to save a <i>.bil</i>
file in the editor.</p>

<p>See also the help pages for <a href="../../operators/ide/finder-function.htm">finder-function</a>
and <a href="../../operators/ide/maker-function.htm">maker-function</a>, which return the
names of the generated functions programmatically.</p>

<h3><a NAME="sec-4-16"></a>4.16 The Project Manager Build tab</h3>

<p><img src="../../pictures/pm-b.jpg"></p>

<p>This <a href="../../ide-menus-and-dialogs/project-manager-dialog-build.htm">tab</a> of the Project manager allows specifying options for building the application
associated with the project. The first check box allows you to specify whether debugging
information is printed to a window during the build. You can associate other auxiliary
files with your project in the next set of controls. The auxiliary files are a splash
bitmap (displayed as your application starts up) and an icon file (used as the icon for
the application by Windows). By default, your application will not have a splash screen
unless you specify a bitmap. The Allegro CL head of Franz Liszt icon is used as the icon
if no icon file is specified.</p>

<p>Additional choices allow displaying the icon in the system tray (when the application
is running) allowing access to the Console and a way to interrupt the application; full
recompilation when building the project distribution with the <code>:runtime</code>
feature; and specification of the runtime type (standard &#150; no compiler, dynamic
&#150; with compiler, partners &#150; custom license). Note you may only choose the
runtime options you are licensed to use (see <a href="../../runtime.htm">doc/runtime.htm</a>).</p>

<h3><a NAME="sec-4-17"></a>4.17 The Project Manager Include and Advanced tabs</h3>

<p><img src="../../pictures/pm-include.jpg"></p>

<p><img src="../../pictures/pm-ad.jpg"></p>

<p>
The <a href="../../ide-menus-and-dialogs/project-manager-dialog-include.htm">include</a>
and <a href="../../ide-menus-and-dialogs/project-manager-dialog-advanced.htm">advanced</a>
tabs allows further specification of options when building the
application associated with the project. On the include tab, you can
add and remove Allegro CL build modules. You can have these modules
included or left out of the build by selecting or deselecting (so it
is unhighlighted) modules. If a build module is not selected, its
functionality will not be available in the application. If the
functionality is truly unused, leaving it out is desirable since the
resulting application will be smaller. But, if the module is in fact
needed, the application may fail when the application executes and
needs to use the needed but missing functionality (an error in the
Console window may indicate this problem). There are various modules
left out by default (none are illustrated). Simply click on a module
to toggle its inclusion or exclusion. You are also asked whether you
want to include the the top level (so there can be a Lisp listener --
some applications use that as the user interface). the debugger, or
the compiler (you must be licensed to include the compiler). You can
specify that local names in functions be saved. (Saving local names
helps debugging, since debugger frames show actual local variable
names rather than simple identifiers, but takes up space; it has no
affect on the application absent a failure of some
sort. See <a href="../../variables/excl/s_load-local-names-info_s.htm">*load-local-names-info*</a>.)</p>

<p>On the Advanced tab, various controls affect other aspects of the application.</p>

<p><b>Deliver a Runtime Bundle</b>: a bundle file appropriate for the application (and
containing only things allowable in runtime) will be included in the distribution. This
allows for a smaller image size and code which may not be needed is not included in the
image but is available for loading.</p>

<p><b>Purify</b>: various constants (code vectors, strings, and others) will be placed in
a .pll file included with the distribution.</p>

<p><strong>Autoload Warning</strong>: if checked, a dialog will be displayed indicating
the functions (if any) which will trigger an autoload of a module if called. If the
necessary module is not available when the application is run, an error will be signaled
if such a function is called. However, displaying a dialog means that a human must monitor
the build process.</p>

<p><b>For US Government</b>: if checked, an addition to the standard copyright notice is
added which, complying with US regulations of software used by the US Government,
indicates (as a simple copyright notice does not) that the US Government does not have
free use of the software. Adding to the copyright notice is the only effect of checking
this box.</p>

<p><strong>Command Line Arguments</strong>: specifies default command line arguments that
will be passed to the generated executable automatically. See <a
href="../../operators/ide/default-command-line-arguments.htm">default-command-line-arguments</a>.</p>

<p><b>Old and New Space</b>. The size (in bytes) of the initial old and new spaces in the
application. See <a href="../../gc.htm">gc.htm</a> for definitions of old and new spaces.
The default values are typically adequate, at least early in development.</p>

<p><strong>Additional Build-Lisp-Image Arguments</strong>: <a
href="../../operators/excl/build-lisp-image.htm">build-lisp-image</a> is the function that
builds the application. It accepts many keyword arguments. Some common ones are specified
by other controls on this tab. You can specify additional ones in this area.</p>

<p>See <a href="../../building-images.htm">building-images.htm</a> and <a
href="../../delivery.htm">delivery.htm</a> for more information about these values (the <i>oldspace</i>,
<i>newspace</i>, <i>runtime-bundle</i>, <i>purify</i>, and <i>us-government</i> keyword
arguments to <a href="../../operators/excl/build-lisp-image.htm">build-lisp-image</a>).</p>

<h3><a NAME="sec-4-18"></a>4.18 The Project Manager Version Info tab</h3>

<p><img src="../../pictures/pm-vi.jpg"></p>

<p>
This <a href="../../ide-menus-and-dialogs/project-manager-dialog-version-info.htm">tab</a>
is for use on Windows only (it is ignored on other platforms). It
allows you to provide information which will be made the version info
of your application is Windows tools the file manager.
</p>

<h3><a NAME="sec-4-19"></a>4.19 Building the application</h3>

<p>Two choices on the <a href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu, <a
href="../../ide-menus-and-dialogs/file-menu.htm#build-project-exe">Build Project exe</a>
and <a href="../../ide-menus-and-dialogs/file-menu.htm#build-project-distribution">Build
Project Distribution</a>, build your application. </p>

<p><a href="../../ide-menus-and-dialogs/file-menu.htm#build-project-exe">Build Project exe</a>
is for simple testing. It builds your application in the project folder (where the .lpr
file resides), resulting in a .exe file named &lt;projectname&gt;.exe (where
&lt;projectname&gt; is the name specified on the Options tab). After using this command,
you may need to copy DLL files from the Allegro Directory to the test directory to allow
the standalone to run. (On the same machine, some of the DLL files may be in
system-visible locations so copying may not be required.) </p>
<b>

<p></b><a href="../../ide-menus-and-dialogs/file-menu.htm#build-project-distribution">Build
Project Distribution</a> prompts you for a folder and copies all necessary files to that
folder, including the application .exe file. The contents of this folder can be sent to
users of your application (note: you are distributing copyrighted Allegro CL material
along with your own files so you must be licensed to distribute).</p>

<h3><a NAME="sec-4-20"></a>4.20 Modifying the .lpr file</h3>

<p>Since the .lpr file is automatically generated, you should not modify it. Modifications
may be lost if the file is generated again.</p>

<p>Go to <a href="ide_user_guide_5.htm">chapter 5</a>. Go to the <a href="#begin">beginning</a>
of this chapter.</p>

<hr>

<p><small>Copyright (c) 1998-2010, Franz Inc. Berkeley, CA., USA. All rights reserved.</small><br>
<small>Documentation for Allegro CL version 8.2. This is the initial (unrevised) page.</small><br>
<small>Created 2009.12.09.</small></p>

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>
</body>
</html>
