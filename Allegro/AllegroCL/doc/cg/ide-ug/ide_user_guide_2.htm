<html>

<head>
<meta HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=windows-1252">
<meta NAME="GENERATOR" CONTENT="Microsoft FrontPage 3.0">
<title>IDE User Guide, Chapter 2: The Allegro CL Development Environment (IDE)</title>
</head>

<body LINK="#0000ff">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>

<h1><a name="begin"></a>Chapter 2. The Allegro CL Development Environment (IDE)</h1>

<p>This chapter contains the following sections:</p>

<blockquote>
  <p><a href="#sec-2-1">2.1 Opening Allegro CL</a><br>
  <a href="#sec-2-2">2.2 The startup sequence</a><br>
  <a href="#sec-2-3">2.3 The startup dialog</a><br>
  <a href="#sec-2-4">2.4 After startup</a><br>
  &nbsp;&nbsp;&nbsp; <a href="#sec-2-4-1">2.4.1 The startup configuration</a><br>
  <a href="#sec-2-5">2.5 Putting components on a form</a><br>
  <a href="#sec-2-6">2.6 Modifying components on a form</a><br>
  <a href="#sec-2-7">2.7 Testing a form by running it</a><br>
  <a href="#sec-2-8">2.8 Specifying event handler behavior</a><br>
  <a href="#sec-2-9">2.9 Projects</a><br>
  <a href="#sec-2-10">2.10 Saving files</a><br>
  <a href="#sec-2-11">2.11 Getting help</a></p>
</blockquote>

<p>This is chapter 2 of the User Guide for the Allegro CL 8.2 Integrated Development
Environment (IDE). The IDE is only supported on Windows machines. </p>

<p>The chapters of the IDE User Guide are:</p>

<blockquote>
  <p><a href="ide_user_guide_1.htm">Chapter 1: Introduction to the IDE</a> <br>
  <strong>Chapter 2: The Allegro CL Development Environment (IDE)</strong> (this chapter)<br>
  <a href="ide_user_guide_3.htm">Chapter 3: An example</a><br>
  <a href="ide_user_guide_4.htm">Chapter 4: Projects</a><br>
  <a href="ide_user_guide_5.htm">Chapter 5: Components</a><br>
  <a href="ide_user_guide_6.htm">Chapter 6: Designing a user interface using forms</a><br>
  <a href="ide_user_guide_7.htm">Chapter 7: Menus</a><br>
  <a href="ide_user_guide_8.htm">Chapter 8: Events</a></p>
</blockquote>

<h3><a name="sec-2-1"></a>2.1 Opening Allegro CL</h3>

<p>Start Allegro CL with the IDE by choosing an appropriate item from the Allegro CL 8.2
menu item on the Start menu. The choices that start the IDE include: 

<ul>
  <i>
  <li>Allegro CL 8.2/Modern/Allegro CL (w IDE) </i>start modern mode (case sensitive) Allegro
    CL and the IDE.</li>
  <i>
  <li>Allegro CL 8.2/Ansi/Allegro CL (w IDE) </i>start ANSI mode (case insensitive) Allegro CL
    and the IDE.</li>
  <i>
  <li>Allegro CL 8.2/[Modern or Ansi]/AllegroStore (w IDE) </i>start modern/ansi mode Allegro
    CL with AllegroStore and the IDE. (AllegroStore is a Lisp-based object-oriented database
    utility, which is an Add-on product. This choice is only for customers with AllegroStore.)</li>
</ul>

<p>If you do start Allegro CL without the IDE, you can start the IDE by evaluating the
following two forms. The first loads IDE fasl files and the second starts it up:</p>

<blockquote>
  <pre>(require :ide)
(ide:start-ide)</pre>
</blockquote>

<h3><a name="sec-2-2"></a>2.2 The startup sequence</h3>

<p>When <a href="../../operators/ide/start-ide.htm">start-ide</a> is called, it performs
the following steps. (This is an abbreviated list providing highlights only. See <a
href="../../cgide.htm#startup-1">About IDE Startup</a> in <a href="../../cgide.htm">doc/cgide.htm</a>
for a complete description of IDE startup.) 

<ol>
  <li>If the Allegro CL image was started in batch mode (i.e. with the command-line argument <code>-batch</code>),
    <a href="../../operators/ide/start-ide.htm">start-ide</a> exits immediately returning nil.
    (The IDE is an interactive interface and it does not make sense to run it in batch &#150;
    non-interactive &#150; mode.)</li>
  <li>The global variable <a href="../../variables/ide/s_starting-ide_s.htm">*starting-ide*</a>
    is set to t and the variable <a href="../../variables/ide/s_ide-is-running_s.htm">*ide-is-running*</a>
    is set to nil. <a href="../../variables/ide/s_starting-ide_s.htm">*starting-ide*</a> will
    be t throughout IDE startup and set to nil when startup is complete, while <a
    href="../../variables/ide/s_ide-is-running_s.htm">*ide-is-running*</a> is nil throughout
    startup and t when startup is complete. These variables allow the process that called <strong>cg:start-ide</strong>
    to know when startup is complete.It is recommended that the test be on <a
    href="../../variables/ide/s_ide-is-running_s.htm">*ide-is-running*</a> rather than on <a
    href="../../variables/ide/s_starting-ide_s.htm">*starting-ide*</a>.</li>
  <li>Multiprocessing is started and the &quot;IDE GUI&quot; thread is initialized. The
    remainder of the startup procedure is done in this thread.</li>
  <li>The IDE system (encapsulated in the <a href="../../variables/ide/s_ide-system_s.htm">*ide-system*</a>
    variable) is initialized.</li>
  <li>The various CG/IDE windows are displayed and, if the IDE starts by opening a project,
    the appropriate project is opened. </li>
  <li>The &quot;Listener 1&quot; thread (the Debug window) is created.</li>
  <li>The file <em>startup.cl</em> (or <em>startup.fasl</em>) is loaded, if it exists in the
    Allegro directory.</li>
  <li>If the value of the variable <a href="../../variables/ide/s_ide-startup-hook_s.htm">*ide-startup-hook*</a>
    is a list of function names or objects, they are funcall'ed with no arguments.</li>
  <li>The variable <a href="../../variables/ide/s_starting-ide_s.htm">*starting-ide*</a> is
    set to nil and the variable <a href="../../variables/ide/s_ide-is-running_s.htm">*ide-is-running*</a>
    is set to t. IDE startup is complete.</li>
</ol>

<p>After the initialization functions are called, the <a
href="../../ide-menus-and-dialogs/startup-dialog.htm">startup-dialog</a> is displayed
(unless it has been disabled).&nbsp; </p>

<h3><a name="sec-2-3"></a>2.3 The startup dialog</h3>

<p>When you start the IDE in Allegro CL 8.2, you are shown the <a
href="../../ide-menus-and-dialogs/startup-dialog.htm">startup-dialog</a> asking about
projects: whether you want an existing project opened or a new project created or do not
want a project opened by default. The first time the Allegro CL 8.2 IDE is started, the
dialog looks like this:</p>

<p><img src="startup-action.jpg"></p>

<p>
The first choice is <strong>Open a Recent Project</strong>, which
lists projects known to the system. This choice will be unavailable if
there are no such projects.
</p>


<p>
You can arrange to have this dialog suppressed (with, for example, the
check box near the bottom). If this dialog is not displayed, the IDE
is started with no current project.  You can at any time create a new
project or open an existing one
with <a href="../../ide-menus-and-dialogs/file-menu.htm#new-project">File
| New Project</a>
or <a href="../../ide-menus-and-dialogs/file-menu.htm#open-project">File
| Open Project</a>.</p>

<p>If you choose <strong>Create a New Project</strong> (the third radio button down), you
are asked to specify a project directory, where project files will be located. The very
first time you do this, the <a
href="../../ide-menus-and-dialogs/project-parent-directory-dialog.htm">Project Parent
Directory</a> dialog is displayed, allowing you to choose the parent directory for project
directories. The default for the project parent directory is <a
href="file:///C:/allegro-projects"><strong>C:\allegro-projects</strong></a>. After the
project parent directory is specified (it applied to all projects), then creating a new
project causes this dialog to appear, asking for the project directory for the new
project:</p>

<p><img src="../../pictures/new-project-dir.jpg"></p>

<p>You can accept the default or specify a different directory. The project parent
directory is stored in the <em>prefs.cl</em> file in the Allegro directory. If you delete
that file, the next time you create a new project, you will be asked to specify a project
parent directory first.</p>

<h3><a name="sec-2-4"></a>2.4 After startup</h3>

<p>The figure shows the Allegro CL start-up state (slightly rearranged to make the pieces
more visible). This is the state when a new project is created on startup. Note that there
are numerous ways to customize what is displayed on startup (see the dialog). However, the
windows shown here and those listed but not shown are most of the important windows in the
IDE. You can display a particular window with the <a
href="../../ide-menus-and-dialogs/view-menu.htm">View</a> menu.</p>

<p><img src="../../pictures/startup.jpg"></p>

<p>At the top of the screen is: 

<dir>
  <dir>
    <b><p>The Project window</b>. The project window has the menu bar
    and a toolbar. The toolbar has buttons grouped in associated sets,
    first standard file operations such as Open, New, Load, and Save,
    and then groups for running forms and projects, for inspecting
    Lisp objects or searching source code, and so on. In earlier
    versions, components were displayed on the toolbar but components
    have been moved to their own floating palette, displayed
    with <a href="../../ide-menus-and-dialogs/form-menu.htm#show-widget-palette">Form
    | Show Widget
    Palette</a>. The <a href="../../ide-menus-and-dialogs/widget-palette-dialog.htm">widget
    palette</a> is shown here:
</p>
<p>
<img src="../../pictures/widget-palette.jpg">
</p>
<p>
The buttons on the palette correspond to
    available components that can be placed on forms while designing the user interface to
    your application. 
</p>
<p>
We have started the IDE with the option <b>Use Single IDE Parent
Window</b> specified true (as it is initially). There is an opaque
background to the IDE on which all IDE windows and dialogs are
diplayed. The status bar, which displays useful information such as operator argument lists and current status, is at the bottom of this background
window. If we turn that option off (as can be done on the IDE1 tab of
the Options dialog displayed
with <a href="../../ide-menus-and-dialogs/tools-menu.htm#options">Tools
| Options</a>):
</p>
<p>
<img src="../../pictures/options-bas-and-ide1.jpg">
</p>
<p>
The IDE will look like this (after it is restarted -- that option
cannot be changed in a running Lisp; note we have cropped the bottom):
</p>
  </dir>
</dir>
<p>
<img src="startup-no-bg-win.jpg">
</p>

<p>
Now the status bar is on the bottom of the Project window. The current package (common-graphics-user, nickname
    cg-user) is displayed to the right of the status bar. See the note below if you want more
    items on the toolbar.</p>

<p>Below the Project Window is the Debug Window. Other Windows are displayed
with the <a href="../../ide-menus-and-dialogs/view-menu.htm">View menu</a>.
</p>
<p>
<b>The <a href="../../ide-menus-and-dialogs/debug-window.htm">debug
    window</a></b> is a Lisp listener with a prompt and can be used to evaluate Lisp expressions
    (useful to check the values of variables and to test functions, among other things). If
    there is an error, a backtrace and information about the error are displayed in this
    window (unless the backtrace is too big, in which case it is displayed in a separate
    window).</p>

<p>Not visible in that illustration (because we started without a
project open) are:

<dir>
    <p><strong>The Project Manager</strong>. The <a
    href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project Manager</a> dialog
    displays information about the current project. You can use this dialog to modify aspects
    of projects (add files, delete files, etc.)</p>
    <p><b>The Inspector</b>. The <a href="../../ide-menus-and-dialogs/inspect-dialog.htm">inspector</a>
    displays properties, events and internals of the currently selected object, When viewing
    the properties tab of the inspector, the property names are on the left and values are
    displayed on the right. A value can be set directly in the Inspector Window, with the new
    value having an immediate effect on the object being designed. Display an inspector with
    the <a href="../../ide-menus-and-dialogs/view-menu.htm">View</a> menu. Certain gestures
    (such as double-clicking over a form) display the inspector inspecting the object clicked
    over.</p>
    <p><b>A blank form</b>. A form is a design tool for designing the windows (of all types)
    that may appear when your application is run. Each form corresponds to a window in the
    application. You can add components to forms and then customize their display and behavior
    according to the needs of your application. (You must have a project open to display a form so we have opened a new project with <a href="../../ide-menus-and-dialogs/file-menu.htm#new-project">File
| New Project</a>. The <a
    href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project Manager</a> and an <a
    href="../../ide-menus-and-dialogs/editor-workbook.htm">editor workbook</a> are displayed when we do this.) 
</p>
<p>
Get a new form by choosing <strong>New </strong>Form
    on the <a href="../../ide-menus-and-dialogs/file-menu.htm">File</a> menu. The <a
    href="../../ide-menus-and-dialogs/new-form-dialog.htm">New Form</a> dialog appears asking
    you to choose the class of the new form:</p>
  </dir>
</dir>

<p><img src="../../pictures/new-form1.jpg"></p>

<dir>
  <dir>
    <p>We accept the default, which is dialog. The new form appears and is automatically added
    to the current project.</p>
  </dir>
</dir>

<p><img src="../../pictures/startup-new-form.jpg"></p>

<p>Along with the new form, named form1, an inspector window inspecting the form is
opened. And an editor buffer named form1 has been opened and form1 is listed as a module
in the project (look at the visible bit of the Project Manager).</p>

<h4>Note on extending the toolbar on the Project Window</h4>

<p>The set of commands that are included on the Standard Toolbar may be customized. To do this, first expose the Extended Toolbar via
the <a href="../../ide-menus-and-dialogs/view-menu.htm#extended-toolbar">View | Extended
Toolbar</a> command. Then hold down the ALT key, left-click down on an icon in either the
Standard Toolbar or the Extended Toolbar, drag it (while continuing to hold the mouse
button down), and then release the mouse button to drop the icon on the other toolbar (or
at another location on the same toolbar). </p>

<p>If not all of the icons fit into the current area of the Standard Toolbar, then its
scroll buttons will be turned on and you won't see all of the commands at once; to remedy
this, invoke the <a href="../../ide-menus-and-dialogs/view-menu.htm#toolbars">View |
Toolbars</a> command twice to toggle the Standard Toolbar off and back on
--- this will adjust the size of the Standard Toolbar to fit all of its icons without
scrolling. The new set of icons will be saved in the <em>prefs.cl</em> file (as the value
of the <a href="../../operators/ide/standard-toolbar-icons.htm">standard-toolbar-icons</a>
property) whenever the configuration options are saved (typically at Lisp exit, to be
restored in later Lisp sessions). Note that there is no provision to add or remove the
vertical separator bars.</p>

<h3><a name="sec-2-4-1"></a>2.4.1 The startup configuration</h3>

<p>The configuration (the arrangement of windows) and various choices options, like the
editor mode, are stored in the file <i>&lt;Allegro directory&gt;/prefs.cl</i>. Many of
these options may be modified by displaying the <a
href="../../ide-menus-and-dialogs/options-dialog.htm">Options</a> dialog (click <a
href="../../ide-menus-and-dialogs/tools-menu.htm#options">Tools | Options</a>). The <i>prefs.cl</i>
file is generated automatically when Allegro CL exits (unless <a
href="../../ide-menus-and-dialogs/tools-menu.htm">Tools | Save Options on Exit</a> is
toggled off). You can write the <i>prefs.cl</i> file at any time by choosing <a
href="../../ide-menus-and-dialogs/tools-menu.htm#save-options-now">Tools | Save Options
Now</a>. If you want to get the original configuration, remove or rename <i>prefs.cl</i>
before starting Allegro CL. Note that <i>prefs.cl </i>should not be edited by hand. </p>

<h3><a name="sec-2-5"></a>2.5 Putting components on a form</h3>

<p>Applications typically display one or more windows (including dialogs) when run. These
display information to the user and collect input from the user. You design these windows
by placing components on a form while you are designing the interface.</p>

<p>Components that you can use while designing in a form are displayed on Widget Palette displayed with <a href="../../ide-menus-and-dialogs/form-menu.htm#show-widget-palette">Form
| Show Widget Palette</a>.
</p>

<p><img src="../../pictures/widget-palette.jpg"></p>

<p>To put a component on a form, click on the button corresponding to the desired
component on the toolbar and then click or press the mouse button on the blank form. The
component with default size will be placed where you click. Pressing the mouse button
anchors one corner of the component on the form. If you release the mouse button at once,
the component with default size is placed on the form. If you hold the mouse button down
and move the mouse, a rubber band outline shows the proposed exterior of the component.
Releasing the button places the component with the specified size and location.</p>

<p>Components on a form can be resized, moved, or deleted at will. As a component is
moved, alignment cues appear when it is in alignment with other controls on the form.
Components can also be copied by selecting and clicking <a
href="../../ide-menus-and-dialogs/edit-menu.htm#copy">Edit | Copy</a>. <a
href="../../ide-menus-and-dialogs/edit-menu.htm#paste">Paste</a> then places them on the
same form or on another form (you cannot control the location of the paste but you can
move the component as desired after pasting). </p>

<p>When a component is selected on a form, it can be resized as desired using the sizing
handles (the little solid squares about the control). You can reposition the component by
clicking inside the component but not on a sizing handle and dragging the mouse. Also,
when a component has been selected, the Inspector displays information about the
component. Many properties in an inspector window can be modified directly, and those
modifications show up on the component on the form when the inspector is modified. </p>

<p>You can select more than one component: select one, then click on others while the
shift key is down. Each selected component has hollow handles (rather than solid sizing
handles). The components cannot be resized as a group but can be moved as a group, and the
Inspector shows properties common to all selected components and change likewise affects
them all. You can also use rectangular selection to select several components at once.
Press the left button away from any component and move the mouse, which causes a rubber
band box, anchored where the button was pressed, to be displayed. All components within
the box when the button is released will be selected.</p>

<h3><a name="sec-2-6"></a>2.6 Modifying components on a form</h3>

<p>When a component is selected on a form, it can be resized or moved with the mouse. In
this example, the radio button is selected. Notice the small dark squares surrounding the
radio button in the illustration. They are sizing handles. When the cursor moves over one
of the solid sizing handles, it changes to one of the standard resizing cursors. If you
click when the cursor is one of the resizing cursors, then you can resize the component.</p>

<p><img SRC="Image77.gif" WIDTH="478" HEIGHT="303"></p>

<p>As a component is moved or resized, alignment cues appear when appropriate to allow
accurate alignment of the component with other components on the form.</p>

<p>Changes other than moving or resizing can be made with the Inspector. When a component
is selected, the Inspector displays information about the component. Here is the Inspector
inspecting the radio button control from the illustration above:</p>

<p><img src="insp-rb1.jpg" width="354" height="370" alt="insp-rb1.jpg (22353 bytes)"></p>

<p>The object being inspected is identified by name in the box just below the title
(:radio-button-1 in the illustration). The box is a combo-box and previously inspected
objects are shown in its drop-down menu. Choosing one changes the inspection to that
object. Clicking the button to the left inspects the object inspected just before the
current object. The buttons below, labeled <b>Properties</b>, <b>Events</b>, and <b>Internals</b>
(those are the usual buttons for a component; other types of objects have different
buttons), allow inspection of different aspects of an object. For a component, the
properties mostly affect the appearance; the events name functions to be called when an
event (mouse click, e.g.) happens to the component; and internals are features of the
component that can be looked at but should not, in general, be changed.</p>

<p>The illustration shows the properties pane. Property names are listed on the left and
values on the right. If an editable property value is selected (as name is in the
illustration), the value can be changed, either by typing a new value directly or by
clicking on the extended editor button to the right of the value slot. The extended editor
button illustrated has three dots, indicating a text control will appear allowing input of
a new name. </p>

<p>Other extended editors include a font choices dialog, a color choice dialog, the menu
editor, and others. If the values are true and false only, the extended editor button will
toggle between <code>t</code> and <code>nil</code> (button with a check mark, for example,
the available property). If there are only a few values, it will display a list of all
possible values. &nbsp; For example, for the border property the button looks like a down
arrow (not shown in above graphic).</p>

<p>Inappropriate values will not be accepted; for example, only a color or nil are
appropriate for <a href="../../operators/cg/b/background-color.htm">background-color</a>
and other values will be rejected. Certain properties are read-only and they cannot, of
course, be modified. </p>

<p>Clicking on the name side causes the current value to be inspected. If you click over
name in the illustration (value :radio-button-1), you see the inspection of that symbol.</p>

<h3><a name="sec-2-7"></a>2.7 Testing a form by running it</h3>

<p>It is useful while using a form to design an application window to see what the window
will look like and how it will behave when the application is run. Clicking <a
href="../../ide-menus-and-dialogs/run-menu.htm#run-form">Run | Run Form</a> causes the
window associated with the selected form to be created and displayed. Components are
active and respond to the mouse. Look at the Window list (click on <a
href="../../ide-menus-and-dialogs/view-menu.htm#window-list">View | Window List</a>). You
will see two windows named form1 (or whatever you have named the selected form). One is
the actual form (which you are designing) and the other is a window built from your
design. (The running window exactly covers the design form so the fact that there are two
windows is not immediately noticeable.) Clicking <a
href="../../ide-menus-and-dialogs/run-menu.htm#stop">Run | Stop</a> closes the running
window (as you see if you update the Window List) and re-exposes the design form. Note
that when we say `form' in this manual, we do not mean the running window corresponding to
the form. </p>

<p>Clicking <a href="../../ide-menus-and-dialogs/run-menu.htm#run-project">Run | Run
Project</a> invokes the Project Init Function in a separate thread. In the default, this
function makes and displays the window associated with the main form of the project so
only that window is run unless you have changed the Init Function. This does not matter if
your project has only one window. If your project has several windows, <a
href="../../ide-menus-and-dialogs/run-menu.htm#run-form">Run | Run Form</a> can be used to
examine a specific window and <a
href="../../ide-menus-and-dialogs/run-menu.htm#run-project">Run | Run Project</a> to test
the application as a whole. (You have presumably either changed the Init Function or made
other programmatic changes to cause the other windows to be displayed.)</p>

<h3><a name="sec-2-8"></a>2.8 Specifying event handler behavior</h3>

<p>Events (mouse motions, mouse button clicks, keys pressed on the keyboard, and
combinations of those things) are a common way for a user to communicate with an
application. When a component is selected on a form, the Inspector window has an <i>Events</i>
tab. Displaying this shows the event handlers associated with the component. The value of
an event handler is either nil meaning there is no event handler to run or a symbol naming
a function. The event handler function is called when the specified event occurs to the
component in the running window. There is a simple example illustrating events and
handlers at the beginning of <a href="ide_user_guide_8.htm">chapter 8</a>.</p>

<h3><a name="sec-2-9"></a>2.9 Projects</h3>

<p>A project is a collection of modules used to build an application. The modules can be
of various types, including application source files, forms, libraries (.dll files), and
other projects. See <a href="ide_user_guide_4.htm">chapter 4 Projects</a> for more
information on projects, on managing projects, and on the Project Manager window. </p>

<p>Each module is associated with one or more files and taken together with necessary
pieces of Allegro CL itself, these files comprise the application. Tools are provided for
testing an application and for preparing an application for delivery, again as described
in <a href="ide_user_guide_4.htm">chapter 4</a>.</p>

<p>The <a href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project Manager</a>
dialog, displayed by clicking <a
href="../../ide-menus-and-dialogs/view-menu.htm#project-manager">View | Project Manager</a>,
is a visual display of the current state of a project, showing the modules associated with
it, and the name and certain other options of the project. You can use the Project Manager
to assist in managing the project and in testing and building the application associated
with the project. This is the project manager for the final doodler project created by the
doodler tutorial.</p>

<p><img src="../../pictures/pm-doodler.jpg"></p>

<h3><a name="sec-2-10"></a>2.10 Saving files</h3>

<p>When you are editing a file in the Editor, clicking <a
href="../../ide-menus-and-dialogs/file-menu.htm#save">File | Save</a> (or using the Save
toolbar button) saves the file to disk, prompting you if necessary for a filename. Save
also saves the files associated with a form when clicked while a form is selected. <a
href="../../ide-menus-and-dialogs/file-menu.htm#save-all">Save All</a> saves all editors
with unsaved changes, all forms with unsaved changes and the project file if necessary.
(When the Project Manager has focus, <a
href="../../ide-menus-and-dialogs/file-menu.htm#save">Save</a> saves the project (.lpr)
file.)</p>

<h3><a name="sec-2-11"></a>2.11 Getting help</h3>

<p>There is online help. In many cases, pressing the F1 key displays help for the
currently-selected symbol. If no appropriate page can be determined, a dialog is displayed
saying that. A dialog is also displayed if the currently-selected symbol names more than
one kind of object (a class and a function, for example). <a
href="../../ide-menus-and-dialogs/help-menu.htm#help-on-selected-sym">Help | Help on
Selected Symbol</a><b> </b>is the same as pressing F1. When a dialog has focus, <a
href="../../ide-menus-and-dialogs/help-menu.htm#help-on-dialog">Help | Help on Selected
Dialog</a> displays the help page for the dialog if there is one.</p>
<b>

<p></b><a href="../../ide-menus-and-dialogs/help-menu.htm">Help | Tree of Knowledge</a>
displays an outline of the Common Graphics/IDE documentation with links to the various
pages and files.</p>

<p>Other sources for help: 

<ul>
  <li><b>The status bar</b> (at the bottom of the Project Window) prints information about
    what you are doing which is often useful. </li>
  <li><b>The <a href="../../ide-menus-and-dialogs/help-menu.htm">Help</a> menu</b> includes
    choices for providing help. <b>Describe Selected Object</b> prints a description or the
    documentation string of the symbol at the editor cursor to the debug window. <b>Quick
    Symbol Info</b> and <b>Quick Class Info</b> print information to the Project Window status
    bar, again about the symbol at the editor cursor. <b>Common Graphics Examples</b> displays
    the Navigator dialog open to the Examples tab. There are many examples showing how to do
    common things. The various Help choices display the online help page appropriate to
    whatever is selected, if such documentation exists.</li>
  <li><b><a href="../../ide-menus-and-dialogs/search-menu.htm#apropos">Apropos</a> on the <a
    href="../../ide-menus-and-dialogs/search-menu.htm">Search</a> menu</b> lists (in a dialog)
    all symbols containing a specific sequence of letters, useful in getting the exact name of
    a function part of whose name you remember.</li>
  <li><b>Browse Class</b>, <b>Graph Superclasses</b> and <b>Graph Subclasses</b>, all on the <a
    href="../../ide-menus-and-dialogs/tools-menu.htm"><b>Tools</b></a> menu, display dialogs
    showing graphs of the class hierarchy and (for <b>Browse Class</b>) other information
    about the class. The two <b>Graph</b> choices only work when the name of a class is
    selected.</li>
</ul>

<p>Go to <a href="ide_user_guide_3.htm">chapter 3</a>. Go to the <a href="#begin">beginning</a>
of this chapter.</p>

<hr>

<p><small>Copyright (c) 1998-2005, Franz Inc. Berkeley, CA., USA. All rights reserved.</small><br>
<small>Documentation for Allegro CL version 8.2. This is the initial (unrevised) page.</small><br>
<small>Created 2005.12.8.</small></p>

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.2</b></td>
  </tr>
</table>
</body>
</html>
