<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>About event-handling in Common Graphics</title></head><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-events.htm">8.1 version</a></td></tr></table><h1 id="2">About event-handling in Common Graphics</h1><p id="3">
Event-handling is a critical part of any visual application, where
users communicate with the application through dialogs and other
windows.  Events are handled differently for controls than for general
windows. Events on controls are discussed in the IDE User Guide,
chapter 8 (<a href="ide-ug/ide_user_guide_8.htm">Chapter 8
of the IDE User Guide</a>). Here we introduce the more general type of
event-handling for "regular" windows (non-controls), and point to a
set of functions that can be looked up for more detailed
information. A simple application may need to supply event-handling
code only for controls, while a more complex application will probably
need to supply code for non-control windows as well.
</p><h3 id="4">
Event-Handling for Non-Control Windows
</h3><p id="5">
The operating system sends messages to individual Common Graphics
windows (either in the IDE or in a standalone application) when events
such as mouse clicks and focus movement occur. To respond to these
events, an application can supply code that will be called whenever
these messages are received.
</p><p id="6">
The type of code to be supplied depends on whether the message is
being received by a control or by a regular window. A message to a
control is usually handled by an event-handler function that is
written especially for a particular control instance. These
event-handlers for controls (which are discussed in 
<a href="ide-ug/ide_user_guide_8.htm">IDE User Guide,
chapter 8</a>) appear on the
Events tab of the inspector when a control is being inspected, and
skeleton code for an event handler can be generated interactively by
clicking on the extended editor button to the right of the
event-handler in the inspector.
</p><p id="7">
For non-control windows, on the other hand, messages are handled by
methods that typically apply to a whole window class rather than to an
individual window instance. The IDE does not have an interface for
adding these methods interactively (like the inspector's list of
event-handlers for a control), and so you must know what generic
function to modify in order to handle a particular message, and write
a method from scratch.  Normally an application should first define
its own subclass of basic-pane (or one of its subclasses), and then
define an event-handling method for that subclass. The method will
then be called by Common Graphics whenever a window of that subclass
receives the corresponding message from the operating system. Here is
a list of many of the event-handling generic functions for non-control
windows:
</p><h3 id="8">
For mouse movement:
</h3><ul>
<li id="9">
<a href="../operators/cg/m/mouse-in.htm"><b>mouse-in</b></a>,
when the mouse moves into a window
<li id="10">
</li>
<a href="../operators/cg/m/mouse-moved.htm"><b>mouse-moved</b></a>, when the
mouse moves within a window
<li id="11">
</li>
<a href="../operators/cg/m/mouse-out.htm"><b>mouse-out</b></a>, when the mouse
moves out of a window
</li>
</ul><h3 id="12">
For mouse clicks:
</h3><ul>
<li id="13">
<a href="../operators/cg/m/mouse-left-down.htm"><b>mouse-left-down</b></a>
<li id="14">
</li>
<a href="../operators/cg/m/mouse-left-up.htm"><b>mouse-left-up</b></a>
<li id="15">
</li>
<a href="../operators/cg/m/mouse-middle-down.htm"><b>mouse-middle-down</b></a>
<li id="16">
</li>
<a href="../operators/cg/m/mouse-middle-up.htm"><b>mouse-middle-up</b></a>
<li id="17">
</li>
<a href="../operators/cg/m/mouse-right-down.htm"><b>mouse-right-down</b></a>
<li id="18">
</li>
<a href="../operators/cg/m/mouse-right-up.htm"><b>mouse-right-up</b></a>
<li id="19">
</li>
<a href="../operators/cg/m/mouse-double-click.htm"><b>mouse-double-click</b></a>,
this is for the left mouse button only
<li id="20">
</li>
<a href="../operators/cg/m/mouse-right-double-click.htm"><b>mouse-right-double-click</b></a>
</li>
</ul><h3 id="21">
For non-client-area (window border) mouse movement and clicks:
</h3><ul>
<li id="22">
<a href="../operators/cg/n/nc-mouse-moved.htm"><b>nc-mouse-moved</b></a>
<li id="23">
</li>
<a href="../operators/cg/n/nc-mouse-left-down.htm"><b>nc-mouse-left-down</b></a>
<li id="24">
</li>
<a href="../operators/cg/n/nc-mouse-left-up.htm"><b>nc-mouse-left-up</b></a>
<li id="25">
</li>
<a href="../operators/cg/n/nc-mouse-middle-down.htm"><b>nc-mouse-middle-down</b></a>
<li id="26">
</li>
<a href="../operators/cg/n/nc-mouse-middle-up.htm"><b>nc-mouse-middle-up</b></a>
<li id="27">
</li>
<a href="../operators/cg/n/nc-mouse-right-down.htm"><b>nc-mouse-right-down</b></a>
<li id="28">
</li>
<a href="../operators/cg/n/nc-mouse-right-up.htm"><b>nc-mouse-right-up</b></a>
</li>

<li id="29">
<a href="../operators/cg/m/mouse-back-down.htm"><b>mouse-back-down</b></a>
</li>
<li id="30">
<a href="../operators/cg/m/mouse-back-up.htm"><b>mouse-back-up</b></a>
</li>
<li id="31">
<a href="../operators/cg/m/mouse-forward-down.htm"><b>mouse-forward-down</b></a>
</li>
<li id="32">
<a href="../operators/cg/m/mouse-forward-up.htm"><b>mouse-forward-up</b></a>
</li>

</ul><h3 id="33">
For mouse wheel movement
</h3><ul>
<li id="34">
<a href="../operators/cg/m/mouse-wheel.htm"><b>mouse-wheel</b></a>
</li>
</ul><h3 id="35">
For keypresses:
</h3><ul>
<li id="36">
<a href="../operators/cg/v/virtual-key-down.htm"><b>virtual-key-down</b></a>,
when a key is pressed down
<li id="37">
</li>
<a href="../operators/cg/v/virtual-key-up.htm"><b>virtual-key-up</b></a>, when
a key is released
<li id="38">
</li>
<a href="../operators/cg/c/character-message.htm"><b>character-message</b></a>,
when a keypress indicates a graphic character
</li>
</ul><h3 id="39">
For menus:
</h3><ul>
<li id="40">
<a href="../operators/cg/a/about-to-show-menu.htm"><b>about-to-show-menu</b></a>,
when the user invokes a menu
</li>
<li id="41">
<a href="../operators/cg/m/menu-item-highlighted.htm"><b>menu-item-highlighted</b></a>,
when the user moves over a menu-item
</li>
<li id="42">
<a href="../operators/cg/h/handle-menu-selection.htm"><b>handle-menu-selection</b></a>,
when the user chooses a menu-item
</li>
<li id="43">
<a href="../operators/cg/e/event-synonym.htm"><b>event-synonym</b></a>
associated with a key or group of keys, the pressing of which is
equivalent to choosing a menu item.
</li>
<li id="44">
<a href="../operators/cg/p/proxy-menu-bar-window.htm"><b>proxy-menu-bar-window</b></a> determines
the window whose menu will be accessed by an event-synonym entered in
a window.
</li>
</ul><h3 id="45">
Miscellaneous:
</h3><ul>
<li id="46">
<a href="../operators/cg/u/user-scroll.htm"><b>user-scroll</b></a>, when the
user scrolls a window
</li>
</ul><h3 id="47">
Application-Callable:
</h3><ul>
<li id="48">
<a href="../operators/cg/r/redisplay-window.htm"><b>redisplay-window</b></a>,
when a window is uncovered
<li id="49">
</li>
<a href="../operators/cg/s/set-focus.htm"><b>set-focus</b></a>, when the
keyboard focus moves to a window
<li id="50">
</li>
<a href="../operators/cg/u/user-close.htm"><b>user-close</b></a>, when the user
attempts to close a window
<li id="51">
</li>
<a href="../operators/cg/m/move-window.htm"><b>move-window</b></a>, when the
user moves a window
<li id="52">
</li>
<a href="../operators/cg/r/resize-window.htm"><b>resize-window</b></a>, when
the user resizes a window
</li>
</ul><p id="53">
The generic functions in the <b>Application-Callable</b> section above may
also be called programmatically by an application, in addition to
being called by Common Graphics when an interactive event occurs.  For
example, <a href="../operators/cg/s/set-focus.htm"><b>set-focus</b></a> may be called by
an application to move the
keyboard focus to a window, and is also called by Common Graphics when
the focus is otherwise moved to a window, such as by clicking in
it. An application should keep in mind that when its method for one of
these generic functions is called, that it may be due to an
interactive gesture by the user or due to a programmatic call.
</p><p id="54">
Any primary methods added to these generic functions should call
<code>(call-next-method)</code> unless you are sure that you
want to override the default Common Graphics behavior for the event.
</p><p id="55">
Here's an example that handles the virtual-key-down event, since its
arguments are a little tricky.  This code will create a window that
will change its size when the user types control-L, control-semicolon,
control-shift-L, or control-shift-semicolon.  The buttons argument is
some subset of the values of the constants control-key, shift-key, and
alt-key logior'ed together (each one is a bit flag).  The data
argument is an integer for the key that was pressed, expressed either
as the char-int of the character that is printed on the key or as the
value of one of the "vk-..." constants that are the value of the
constant <a href="../variables/cg/key-names.htm"><code>key-names</code></a>.
</p><pre id="56">
(in-package :cg-user)

(defclass my-window (frame-window)())

(defmethod virtual-key-down ((window my-window) buttons data)
   (case buttons
     (#.control-key
      (case data
        (#.vk-semicolon
         (incf (width window) 50))
        (#.(char-int #\L)
         (decf (width window) 50))
        (t (call-next-method))))
     (#.(logior control-key shift-key)
      (case data
        (#.vk-semicolon
         (incf (height window) 50))
        (#.(char-int #\L)
         (decf (height window) 50))
        (t (call-next-method))))
     (t (call-next-method))))

(make-window 'herbert :device 'my-window 
             :parent (screen *system*))
</pre><p id="57">
Note that if the example window above were created on
(main-development-window <a href="../variables/cg/s_system_s.htm"><code>*system*</code></a>) instead of on the screen,
then the virtual-key-down method would not get called for the defined
keystrokes, because the keystrokes would be overridden by IDE menubar
shortcuts.  In general, a menubar shortcut will override a <a href="../operators/cg/v/virtual-key-down.htm"><b>virtual-key-down</b></a> method,
and a custom virtual-key-down method will override a comtab binding
(since comtab events are implemented as a virtual-key-down method on
the general comtab-mixin class).
</p><h3 id="58">
Handling Low-Level WinAPI Messages
</h3><p id="59">
The Common Graphics event-handling generic functions listed above
provide a high-level interface to many of the messages sent by the
operating system.  But since an application may still need to handle
low-level Windows events, generic functions also exist for each
Windows API message that is handled at all by Common Graphics, and an
application may add methods to these functions to handle raw Windows
messages.
</p><p id="60">
The name of each generic function is the same as the Windows API
constant for the message being received.  The functions are in the
windows package, and their parameters are
</p><pre id="61">
(window wparam lparam)
</pre><p id="62">
The arguments are what would be received by a standard Windows "window
procedure", except without a parameter for the message name itself,
since we have a generic function for each message.  We do not document
these WinAPI symbols, and provide these generic functions only for
programmers who are familiar with the Windows API and can consult
Microsoft's documentation on their use.  Any primary methods added to
these generic functions should call
<code>(call-next-method)</code> so that the default method will
call the DefaultWindowProc, unless you are sure that you really want
to override the operating system's own handling of the event.  Here is
an example method that would be called whenever an application is
activated:
</p><pre id="63">
(in-package :cg-user)

(defmethod win:WM_ACTIVATEAPP 
           ((window my-top-level-window-class) wparam lparam)
   (declare (ignore lparam))
   (call-next-method)
   (when (eq wparam win:TRUE)
      (beep)
      (lisp-message "The user has returned to my application!")))
</pre><h3 id="64">
Event-Handling for Controls
</h3><p id="65">
The generic functions listed above for non-control windows are not
called for controls, as is sometimes expected.  There are a few
reasons for this:
</p><ul>
<li id="66">
The subset of window messages that are sent to controls are not
sent to the control itself, but to the control's separate window
object (which is found by calling the function <a href="../operators/cg/w/window.htm"><b>window</b></a> on a control).  An
application generally should not deal with events for controls at this
level, though.
</li>
<li id="67">
Some control events do not correspond to a lower-level window
event. For example, the <a href="../operators/cg/o/on-change.htm"><b>on-change</b></a> event occurs whenever the
value of a control changes, whether this results from clicking or from
pressing an arrow key or from calling setf of <a href="../operators/cg/v/value.htm"><b>value</b></a>.
</li>
<li id="68">
Rather than defining a method to handle a particular event on a
whole class of control, an application normally defines a function
that handles that event on a particular control instance. This
function is stored as a property of the control, and is then called by
Common Graphics whenever that control instance receives that event.
</li>
</ul><p id="69">
For example, the <a href="../operators/cg/o/on-change.htm"><b>on-change</b></a> property of a control
holds a function that is called whenever the value of the control has
changed. Such properties are called event-handlers, and are accessible
in the inspector on the Events tab. When an event-handler is selected
in the inspector, pressing F1 (to invoke the <a href="../ide-menus-and-dialogs/help-menu.htm">Help</a> | <a href="../ide-menus-and-dialogs/help-menu.htm#help-on-selected-sym">Help On Selected
Symbol</a> command) will display help on that event-handler
(rather than on its current value, as would happen in the Internals
tab).
</p><p id="70">
(To be precise, there are also exported generic functions for a few of
the events received by controls.  These are <a href="../operators/cg/c/click-event.htm"><b>click-event</b></a>, <a href="../operators/cg/d/double-click-event.htm"><b>double-click-event</b></a>, <a href="../operators/cg/s/set-focus-event.htm"><b>set-focus-event</b></a>, and
<a href="../operators/cg/k/kill-focus-event.htm"><b>kill-focus-event</b></a>. The
default method for each of these generic functions will call the
corresponding event-handler function of the individual widget, but an
application could override the default method to define behavior for a
whole control subclass. Usually it is preferable to stick with
individual event-handlers.)
</p></body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-events.htm">8.1 version</a></td></tr></table></html>