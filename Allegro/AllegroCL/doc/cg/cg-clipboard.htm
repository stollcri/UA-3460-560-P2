<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>About the clipboard in Common Graphics</title></head><link rel="stylesheet" href="../acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-clipboard.htm">8.1 version</a></td></tr></table><h1 id="2">About the clipboard in Common Graphics</h1><p id="3">This document contains the following sections:</p><a href="#two-clipboards-1">1.0 The two clipboards in Common Graphics</a><br><a href="#os-clipboard-1">2.0 The OS clipboard</a><br><a href="#lisp-clipboard-1">3.0 The lisp clipboard</a><br><a href="#cut-copy-paste-1">4.0 Built-In Cut, Copy, and Paste functionality</a><br><a href="#adding-cut-copy-paste-1">5.0 Adding Cut/Copy/Paste commands to a menu-bar</a><br><a href="#viewing-lisp-clipboard-contents-1">6.0 Viewing the lisp clipboard contents</a><br><a href="#clipboard-example-1">7.0 Clipboard example</a><br><p id="4">
The clipboard is a facility that allows the user to interactively copy
or move text or other data from one application to another, or from
one window to another within an application.  This is typically done
via the common "cut", "copy", and "paste" commands.  Common Graphics
provides a general programmatic interface to the clipboard that allows
applications to implement arbitrary gestures to cut, copy, and paste
arbitrary data objects or to otherwise manipulate data on the
clipboard.
</p><hr><hr><h2 id="5"><a name="two-clipboards-1">1.0 The two clipboards in Common Graphics</a></h2>

<p id="6">
There are actually two clipboards in Common Graphics. The first is the
<em>operating system clipboard</em> or <em>OS clipboard</em>, and the
second is the <em>lisp clipboard</em>. The OS clipboard is the one
implemented within the operating system, and behaves as it does in
many applications. The lisp clipboard adds additional functionality on
top of the OS clipboard. Some Common Graphics functions act directly
on the OS clipboard, and may be used if the additional lisp clipboard
functionality is not needed, while other Common Graphics functions act
on the lisp clipboard (and thereby indirectly on the OS clipboard as
well). The IDE's cut, copy, and paste commands always use the lisp
clipboard.
</p>
<p id="7">
The OS clipboard allows copying data from one application to another,
but allows copying only certain standard types of data, such as text,
rich text, and pixmaps. The lisp clipboard allows copying any type of
data, but this works only among the windows of a single lisp
application. In the IDE, if you do a paste into the inspector, for
example, the inspector knows to insert the actual lisp object that's
on the top of the lisp clipboard into the currently selected slot.
Custom pasting such as this is accomplished by defining a <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a> method or
a <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a>
method (discussed later) for the window.
</p>
<p id="8">
The OS clipboard holds only one data object at any time (or perhaps up
to one object of each standard type). The lisp clipboard can hold a
stack of data items, and items can be pushed onto or popped off of the
stack.
</p>
<p id="9">
The two clipboards are kept in sync as long as the lisp clipboard
functions are used rather than the OS clipboard functions. This means
that the top object on the lisp clipboard is always the same as the
single object on the OS clipboard. Popping the top object off of the
lisp clipboard, for example, will leave a different object not only on
the top of the lisp clipboard but also on the OS clipboard. Also,
when a value is copied to the OS clipboard in another application, it
is placed on the lisp clipboard stack.
</p>
<p id="10">
If the top lisp clipboard object is not of one of the data types that
are defined for the OS clipboard, then the OS clipboard value will be
a string representation of the object, while the lisp clipboard will
hold the object itself. Therefore, pasting into another application
will paste a string, while pasting into a window within the lisp
application may potentially paste the object itself, if the window
knows how to handle that sort of object.
</p>

<hr><hr><h2 id="11"><a name="os-clipboard-1">2.0 The OS clipboard</a></h2>

<p id="12">
The OS clipboard value for any of the defined data types may be
retrieved by calling <a href="../operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a>, or set by calling
<a href="../operators/cg/c/clipboard-object.htm"><b>(setf clipboard-object)</b></a>. For example,
<code>(clipboard-object :text)</code> returns the plain-text
value which is currently on the OS clipboard if any, and otherwise
returns nil. <code>(setf (clipboard-object :text) "foo")</code>
would place the string "foo" onto the OS clipboard, from where another
application could paste the string.
</p>
<p id="13">
<a href="../operators/cg/a/available-clipboard-formats.htm"><b>available-clipboard-formats</b></a> returns
a list of symbols indicating which standard OS clipboard data formats
are both implemented in CG and happen to be present at the moment on
the OS clipboard. This tells an application which data types it could
retrieve from the OS clipboard at that time. Currently CG implements
the :text, :rich-text, and :pixmap data formats.
</p>
<p id="14">
For example, if <code>(available-clipboard-formats)</code>
returns the list <code>(:pixmap)</code>, this indicates that the
only thing currently on the OS clipboard that CG knows how to retrieve
is a pixmap. An application could then either do nothing because it
doesn't care about pixmaps, or it could call <a href="../operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a>, passing :pixmap as
the <i>clipboard-format</i> argument, to create and
return a Common Graphics pixmap from the OS clipboard value. Then it
could use that pixmap however it wishes, such as by "pasting" it into
a window by calling <a href="../operators/cg/c/copy-to-stream.htm"><b>copy-to-stream</b></a> to draw the pixmap
in a window.
</p>
<p id="15">
Most applications first clear all values from the OS clipboard when a
copy is done, so that only the newly copied object remains on the OS
clipboard.  A common exception is that when rich text is copied, it is
often available as the :rich-text object on the OS clipboard while the
plain text version of it is simultaneously available as the :text
object.  A Common Graphics application could then take whichever
format it is interested in by passing the appropriate
<i>clipboard-format</i> argument to <a href="../operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a>. When calling
<a href="../operators/cg/c/clipboard-object.htm"><b>(setf clipboard-object)</b></a>, the
clipboard is first cleared unless the
<i>empty-clipboard</i> keyword argument is passed as
nil.
</p>

<hr><hr><h2 id="16"><a name="lisp-clipboard-1">3.0 The lisp clipboard</a></h2>

<p id="17">
The functions discussed in this section manipulate the lisp clipboard,
and because the lisp clipboard is built on top of the OS clipboard,
they manipulate the OS clipboard as well.
</p>
<p id="18">
The function <a href="../operators/cg/p/push-lisp-clipboard.htm"><b>push-lisp-clipboard</b></a> adds a new
value to the top of the lisp clipboard stack and sets the OS clipboard
value; this corresponds to calling <a href="../operators/cg/c/clipboard-object.htm"><b>(setf
clipboard-object)</b></a> to modify the OS clipboard only. The
<a href="../operators/cg/c/clipboard-history-limit.htm"><b>clipboard-history-limit</b></a>
configuration option prevents the lisp clipboard stack from
becoming overly long. The function <a href="../operators/cg/p/pop-lisp-clipboard.htm"><b>pop-lisp-clipboard</b></a> removes the top
object from the lisp clipboard stack and returns it, placing the
object that remains at the top of the lisp clipboard stack onto the OS
clipboard; this corresponds to calling <a href="../operators/cg/c/clipboard-object.htm"><b>clipboard-object</b></a> to retrieve the OS
clipboard value directly without modifying the OS clipboard.
</p>
<p id="19">
If an application would like to be notified whenever the lisp
clipboard changes, it can add a <a href="../operators/cg/c/clipboard-changed.htm"><b>clipboard-changed</b></a> method.
</p>

<hr><hr><h2 id="20"><a name="cut-copy-paste-1">4.0 Built-In Cut, Copy, and Paste functionality</a></h2>

<p id="21">
You can use the functions above to manipulate clipboard values however
you like. But if you are implementing typical cut/copy/paste behavior,
you may be able to do so with less code by using the built-in
overridable generic functions that Common Graphics supplies for this.
The functions <a href="../operators/cg/c/cut-command.htm"><b>cut-command</b></a>, <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a>, and <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> all manipulate the
lisp clipboard (and therefore the OS clipboard as well). The default
methods also call the corresponding functions <a href="../operators/cg/c/cut-selection.htm"><b>cut-selection</b></a>, <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a>, and <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a>, which
are responsible for actually retrieving the value from the window that
is to be placed onto the clipboard, or inserting the value being
pasted into the window in some way.
</p>
<p id="22">
(An exception is that the <a href="../operators/cg/c/cut-selection.htm"><b>cut-selection</b></a> and <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a> methods for
rich-edit-pane do push the value onto the clipboards, due to
constraints in the API of this operating system control. Similarly,
the <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a> method for
rich-edit-pane will paste the OS clipboard rich text value if nil is
passed as the object to paste.)
</p>
<p id="23">
Typically an application can add a menu-bar command that calls <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a> (for
example) on the selected window, and then add <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a> methods for any
custom windows that don't have a suitable <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a> method built-in.
The built-in <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a> method takes care of
placing the value returned by the custom <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a> method onto the
clipboards. The built-in <a href="../operators/cg/c/cut-command.htm"><b>cut-command</b></a> and <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> methods behave
similarly.
</p>
<p id="24">
The built-in <a href="../operators/cg/c/cut-selection.htm"><b>cut-selection</b></a>, <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a>, and <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a> methods
know how to cut, copy, and paste the :text format in text-edit-pane
windows and the various controls that can edit text; how to cut, copy,
and paste the :rich-text format in rich-edit-pane windows and the
rich-edit control; and how to copy and paste the :pixmap format in
bitmap-pane windows and drawable controls (when the drawable has the
use-bitmap-stream property turned on). The built-in pixmap methods
simply draw the pixmap at its standard size at the upper left of the
window, and copy from the whole window.
</p>
<p id="25">
The default <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> method calls <a href="../operators/cg/d/default-clipboard-format.htm"><b>default-clipboard-format</b></a>
on the window where the paste is being done to determine which OS
clipboard data format to read from the clipboard. It then looks down
through the lisp clipboard stack to find an item of that type, and
calls paste-selection with that value (passing nil if nothing was
found of the desired type). If you implement a window that should know
how to paste pixmaps, for example, you could first define a
paste-selection method that draws a pixmap that's passed to it in some
way that's appropriate to that kind of window.  Then you could define
a <a href="../operators/cg/d/default-clipboard-format.htm"><b>default-clipboard-format</b></a> method on
the window class that returns the symbol :pixmap. Then whenever
<a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> is
called on the window, the default <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> method will retrieve
the current pixmap from the clipboard (if any) and call your <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a> method
for the window, passing the pixmap to paste.
</p>
<p id="26">
Note that the default <a href="../operators/cg/c/cut-command.htm"><b>cut-command</b></a>, <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a>, and <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> methods recursively
call themselves on the <a href="../operators/cg/s/selected-window.htm"><b>selected-window</b></a> of the window
that's passed until they come to a child window that has no children,
and then they call <a href="../operators/cg/c/cut-selection.htm"><b>cut-selection</b></a>, <a href="../operators/cg/c/copy-selection.htm"><b>copy-selection</b></a>, or <a href="../operators/cg/p/paste-selection.htm"><b>paste-selection</b></a> on that
child window. If that default behavior is not appropriate for your
application, then you need to either not use those functions or add
methods that override this behavior.
</p>

<hr><hr><h2 id="27"><a name="adding-cut-copy-paste-1">5.0 Adding Cut/Copy/Paste commands to a menu-bar</a></h2>

<p id="28">
When creating a menu-bar programmatically, simply making menu-items
that call <a href="../operators/cg/c/cut-command.htm"><b>cut-command</b></a>, <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a>, and <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a> on a window should
make them work with code written as described above.
</p>
<p id="29">
When building a form window interactively, adding a menu-bar to the
form will create an initial menu-bar with an Edit pull-down-menu that
already includes menu-items that call <a href="../operators/cg/c/cut-command.htm"><b>cut-command</b></a>, <a href="../operators/cg/c/copy-command.htm"><b>copy-command</b></a>, and <a href="../operators/cg/p/paste-command.htm"><b>paste-command</b></a>. For applications
that implement any sort of cut/copy/paste functionality, these
menu-items can likely be used as is.
</p>

<hr><hr><h2 id="30"><a name="viewing-lisp-clipboard-contents-1">6.0 Viewing the lisp clipboard contents</a></h2>



<p id="31">
The <a href="../ide-menus-and-dialogs/view-menu.htm">View</a> | <a href="../ide-menus-and-dialogs/view-menu.htm#clipboard">Clipboard</a> command shows the <a href="../ide-menus-and-dialogs/clipboard-dialog.htm">Clipboard</a> dialog,
with a list of everything on its stack. This dialog may be useful for
finding something that you cut or copied a while back, which you could
then copy to the top of the stack and then paste somewhere.
</p>
<p id="32">
The value of the variable <a href="../variables/cg/s_clipboard_s.htm"><code>*clipboard*</code></a> is a tree
containing the entire stack of lisp clipboard data. And the variables
<code>=</code>, <a href="../variables/cg/eq__eq.htm"><code>==</code></a>, and <a href="../variables/cg/eq__eq__eq.htm"><code>===</code></a> are bound to the three objects
on the top of the stack, similar to the way <a href="../../ansicl/dictentr/unnamed2.htm"><code>*</code></a>, <a href="../../ansicl/dictentr/unnamed2.htm"><code>**</code></a>, and <a href="../../ansicl/dictentr/unnamed2.htm"><code>***</code></a> are bound to the three most recent returned
values in a lisp listener.
</p>

<hr><hr><h2 id="33"><a name="clipboard-example-1">7.0 Clipboard example</a></h2>



<p id="34">
Below is a complete sample application that has a window with a
menu-bar containing the familiar Cut, Copy, and Paste commands, plus
two child windows that know how to paste either text or pixmaps in a
particular way. This code is also available as an example on the
<a href="../ide-menus-and-dialogs/help-menu.htm">Help</a> | <a href="../ide-menus-and-dialogs/help-menu.htm#examples">Examples</a> area of the <a href="../ide-menus-and-dialogs/navigator-dialog.htm">Navigator</a> dialog.
</p>

<pre id="35">
(in-package :cg-user)

;; Call this function to run the test.
(defun run-clipboard-example ()
  (let* ((parent (make-window :clipboard-test
                   :class 'frame-window
                   :menu (my-menu-bar)
                   :scrollbars nil
                   :exterior (make-box
                              0 150
                              (interior-width (screen *system*))
                              (interior-height (screen *system*)))))
         (width (interior-width parent))
         (height (interior-height parent))
         (margin 20))
    
    ;; Make a child window to paste strings into.
    (make-window :text-window
      :class 'my-text-window
      :owner parent
      :scrollbars nil
      :exterior (make-box margin margin (floor (- width margin) 2)
                          (- height margin)))
    
    ;; Make a child window to paste pixmaps into.
    (make-window :pixmap-window
      :class 'my-pixmap-window
      :owner parent
      :scrollbars nil
      :exterior (make-box (floor (+ width margin) 2)
                          margin (- width margin)(- height margin)))
    
    ;; Place an object of each type initially onto the clipboard.
    (push-lisp-clipboard :text "Initial Clipboard Text")
    (push-lisp-clipboard :pixmap (find-pixmap :gray-drop-arrow))
    
    parent))
    
;; -------------------------------------------------------------------
;; Define a class of windows that know how to paste text.
(defclass my-text-window (frame-window)
  ((my-string :accessor my-string :initform "Nothing pasted yet"))
  (:default-initargs
   :font (make-font-ex nil "Arial" 24)
   :title "Paste strings here to see them large"))

(defmethod default-clipboard-format ((window my-text-window))
  ;; This tells the default paste-command method to grab the
  ;; current :text object off of the clipboard, if any.
  :text)

(defmethod cut-selection ((window my-text-window))
  (let* ((string (my-string window)))
    (setf (my-string window) nil)
    ;; Cause the window to redisplay to erase the string.
    (invalidate window)
    (values window string)))

(defmethod copy-selection ((window my-text-window))
  ;; We have only one thing to copy to the clipboard, so return it.
  ;; A copy-selection or cut-selection method must return the window
  ;; and the object to be placed on the clipboard.
  (values window (my-string window)))

(defmethod paste-selection ((window my-text-window) object)
  ;; Just record the current string to draw here, so that all
  ;; drawing is encapsulated in the redisplay-window method, which
  ;; is called whenever the window is uncovered or otherwise invalidated.
  (when object
    (setf (my-string window)(princ-to-string object)))
  (invalidate window))

(defmethod redisplay-window ((window my-text-window) &optional box)
  (declare (ignore box))
  (call-next-method) ;; clear the window
  
  ;; Whenever the window is uncovered, draw its current string
  ;; wrapped to fit the window's width.
  (let* ((string (my-string window)))
    (when string
      (move-to-x-y window 0 0)
      (setf (right-margin window)(interior-width window))
      (draw-wrapped-string window string
                           :newline-spacing-in-lines .2))))

;; -------------------------------------------------------------------
;; Define a class of windows that know how to paste pixmaps.
(defclass my-pixmap-window (frame-window)
  ((my-pixmap :accessor my-pixmap :initform (find-pixmap :melvin)))
  (:default-initargs
      :title "Paste pixmaps here to see them double size"))

(defmethod default-clipboard-format ((window my-pixmap-window))
  ;; This tells the default paste-command method to grab the
  ;; current :pixmap object off of the clipboard, if any.
  :pixmap)

(defmethod paste-selection ((window my-pixmap-window) object)
  (when (typep object 'pixmap)
    (setf (my-pixmap window) object)
    (invalidate window)))

(defmethod redisplay-window ((window my-pixmap-window) &optional box)
  (declare (ignore box))
  (call-next-method) ;; clear the window
  
  ;; Whenever the window is uncovered, draw its current pixmap
  ;; centered in the window, scaling it by a factor of two.
  (when (my-pixmap window)
    (let* ((pixmap (my-pixmap window))
           (pixmap-width (* 2 (width pixmap)))
           (pixmap-height (* 2 (height pixmap)))
           (window-width (interior-width window))
           (window-height (interior-height window)))
      (with-boxes (box1)
        (copy-to-stream
         pixmap window
         (nmake-box box1
           (floor (- window-width pixmap-width) 2)
           (floor (- window-height pixmap-height) 2)
           (floor (+ window-width pixmap-width) 2)
           (floor (+ window-height pixmap-height) 2)))))))
  
;; -------------------------------------------------------------------
(defun my-menu-bar ()
  ;; Return a menu-bar with Cut, Copy, and Paste commands on it.
  ;; The menu-bar has a single menu-item whose value is the
  ;; Edit pull-down menu.
  (open-menu
   (list (make-instance 'menu-item
           :name :edit-menu
           :title "~Edit"
           :value
           (open-menu
            (list (make-instance 'menu-item
                    :name :cut
                    :title "~Cut"
                    :value 'cut-command
                    :event-synonym '(control-key #\X)
                    :help-string "Copy to clipboard and delete.")
                  (make-instance 'menu-item
                    :name :copy
                    :title "C~opy"
                    :value 'copy-command
                    :event-synonym '(control-key #\C)
                    :help-string "Copy to clipboard")
                  (make-instance 'menu-item
                    :name :paste
                    :title "~Paste"
                    :value 'paste-command
                    :event-synonym '(control-key #\V)
                    :help-string "Draw from clipboard"))
            'pull-down-menu (screen *system*)
            :name :edit-menu
            :on-click 'funcall-menu-item-with-window)))
   'menu-bar (screen *system*)
   :name :my-menu-bar))

;; These methods cause the windows to be redrawn when resized,
;; since they will then fit their content differently then
(defmethod invalidate-window-on-resize ((window my-text-window))
  t)
(defmethod invalidate-window-on-resize ((window my-pixmap-window))
  t)

;; -------------------------------------------------------------------
#+run-example
(run-clipboard-example)
</pre>

</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="../contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cg/cg-clipboard.htm">8.1 version</a></td></tr></table></html>