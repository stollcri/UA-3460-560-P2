<html>

<head>
<title>A Lisp Based HTML Parser</title>
<meta name="GENERATOR" content="Microsoft FrontPage 3.0">
</head>

<body>

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.0</b></td>
  </tr>
</table>

<h1>A Lisp Based HTML Parser</h1>

<p>This is a preliminary document which will be updated over time. Upates will be
available for downloading.</p>

<p><a href="#intro">Introduction and a simple example</a><br>
<a href="#lhtml">LHTML parse output format</a><br>
<a href="#case">Case mode notes</a><br>
<a href="#comment">Parsing HTML comments</a><br>
<a href="#script">Parsing &lt;SCRIPT&gt; and &lt;STYLE&gt; tags</a><br>
<a href="#sgml">Parsing SGML &lt;! tags</a><br>
<a href="#illegal">Parsing Illegal and Deprecated Tags</a><br>
<a href="#default">Default Attribute Values</a><br>
<a href="#char">Parsing Interleaved Character Formatting Tags</a><br>
<a href="#reference">parse-html reference</a><br>
&nbsp;&nbsp; <a href="#methods">methods</a><br>
&nbsp;&nbsp; <a href="#internal">phtml-internal</a></p>

<h3><a name="intro"></a>Introduction and a simple example</h3>

<p>The <strong>parse-html</strong> generic function processes HTML input, returning a list
of HTML tags, attributes, and text. </p>

<p>The :phtml module is loaded with the form <font face="Courier New">(require :phtml)</font>.
Symbols naming functionality in the module are in the net.html.parser package. Examples in
this document assume <font face="Courier New">(use-package :net.html.parser)</font> has been
evaluated.</p>

<p>Here is a simple example (we have added carriage returns in the string for
readability): </p>

<pre>(pprint (parse-html &quot;&lt;HTML&gt;
             &lt;HEAD&gt;
             &lt;TITLE&gt;Example HTML input&lt;/TITLE&gt;
             &lt;BODY&gt;
             &lt;P&gt;Here is some text with a &lt;B&gt;bold&lt;/B&gt; word &lt;br&gt;and a 
                &lt;A HREF=\&quot;help.html\&quot;&gt;link&lt;/A&gt;&lt;/P&gt;
             &lt;/HTML&gt;&quot;))</pre>

<p>generates:</p>

<pre>((:html (:head (:title &quot;Example HTML input&quot;))
&nbsp; (:body (:p &quot;Here is some text with a &quot; (:b &quot;bold&quot;) &quot;word&quot; :br &quot;and a 
            &quot;  ((:a :href &quot;help.html&quot;) &quot;link&quot;)))))</pre>

<p>The output format is known as LHTML (Lisp HTML) format; it is the same format that the
aserve <strong>htmlgen</strong> macro accepts. As the example shows, it is a nested
collection of lists where the first element of each list is a keyword associated with an
HTML marker, or a list whose first element is a keyword associated with an HTML marker and
the other elements are attribute names and values. (The link is an example where the first
element is a list.)</p>

<h3><a name="lhtml"></a>LHTML parse output format</h3>

<p>LHTML is a list representation of HTML tags and content.</p>

<p>Each list member may be: 

<ol>
  <li>a string containing text content, such as &quot;Here is some text with a &quot;</li>
  <li>a keyword package symbol representing a HTML tag with no associated attributes or
    content, such as :br.</li>
  <li>a list representing an HTML tag with associated attributes and/or content, such as (:b
    &quot;bold&quot;) or ((:a :href &quot;help.html&quot;) &quot;link&quot;). </li>
</ol>

<p><strong>More on the list (# 3) member</strong>: if the HTML tag does not have
associated attributes, then the first list member will be a keyword package symbol
representing the HTML tag, and the other elements will&nbsp; represent the content, which
can be a string (text content), a keyword package symbol (HTML tag with no attributes or
content), or list (nested HTML tag with associated attributes and/or content). If there
are associated attributes, then the first list member will be a list containing a keyword
package symbol followed by two list members for each associated attribute; the first
member is a keyword package symbol representing the attribute, and the next member is a
string corresponding to the attribute value.</p>

<h3><a name="case"></a>Case Mode and LHTML</h3>

<p>If <code>excl:*current-case-mode*</code> is <code>:CASE-INSENSITIVE-UPPER</code>,
keyword package symbols will be in upper case; otherwise, they will be in lower case.</p>

<h3><a name="comment"></a>HTML Comments</h3>

<p>HTML comments are represented with a <code>:comment</code> symbol. For example,</p>

<pre>(parse-html &quot;&lt;!-- this is a comment--&gt;&quot;)

--&gt; ((:comment &quot; this is a comment&quot;))</pre>

<h3><a name="script"></a>HTML &lt;SCRIPT&gt; and &lt;STYLE&gt; tags</h3>

<p>All &lt;SCRIPT&gt; and &lt;STYLE&gt; content is not parsed; it is returned as text
content.</p>

<p>For example,</p>

<pre>(parse-html &quot;&lt;SCRIPT&gt;this &lt;B&gt;will not&lt;/B&gt; be parsed&lt;/SCRIPT&gt;&quot;)

--&gt; ((:script &quot;this &lt;B&gt;will not&lt;/B&gt; be parsed&quot;))</pre>

<h3><a name="sgml"></a>XML and SGML &lt;! tags</h3>

<p>Since, some HTML pages contain special XML/SGML tags, non-comment tags starting with
'&lt;!' are treated specially:</p>

<pre>(parse-html &quot;&lt;!doctype this is some text&gt;&quot;)

--&gt; ((:!doctype &quot; this is some text&quot;))</pre>

<h3><a name="illegal"></a>Illegal and Deprecated HTML</h3>

<p>There is plenty of illegal and deprecated HTML on the web that popular browsers
nonetheless successfully display. The <strong>parse-html</strong> parser is generous - it
will not raise an error condition upon encountering most input. In particular, it does not
maintain a list of legal HTML tags and will successfully parse nonsense input.</p>

<p>For example,</p>

<pre>(parse-html &quot;&lt;this&gt; &lt;is&gt; &lt;some&gt; &lt;nonsense&gt; &lt;input&gt;&quot;)

--&gt; ((:this (:is (:some (:nonsense :input)))))</pre>

<p>In some situations, you may prefer a two-pass parse that results in a parse where deep
nesting related to unrecognized tags is minimized:</p>

<pre>(let ((string &quot;&lt;this&gt; &lt;is&gt; &lt;some&gt; &lt;nonsense&gt; &lt;/some&gt; &lt;input&gt;&quot;))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (multiple-value-bind (res rogues)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (parse-html string :collect-rogue-tags t)
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (declare (ignorable res))
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (parse-html string :no-body-tags rogues)))

--&gt; (:this :is (:some (:nonsense)) :input)</pre>

<p>See the descriptions of the <em>collect-rogue-tags</em> and <em>no-body-tags</em>
keyword arguments to <strong>parse-html</strong> descriptions in the <a href="#reference">reference</a>
section below for more information.</p>

<h3><a name="default"></a>Default Attribute values</h3>

<p>As per the HTML 4.0 specification, attributes without specified values are given a
lower case string value that matches the attribute name.</p>

<p>For example,</p>

<pre>(parse-html &quot;&lt;P here ARE some attributes&gt;&quot;)

--&gt; (((:p :here &quot;here&quot; :are &quot;are&quot; :some &quot;some&quot; :attributes &quot;attributes&quot;)))</pre>

<h3><a name="char"></a>Interleaved Character Formatting Tags</h3>

<p>Existing HTML pages often have character format tags that are interleaved among other
tags. Such interleaving is removed in a manner consistent with the HTML 4.0 specification.</p>

<p>For example,</p>

<pre>(parse-html &quot;&lt;P&gt;Here is &lt;B&gt;bold text&lt;P&gt;that spans&lt;/B&gt;two paragraphs&quot;)

--&gt; ((:p &quot;Here is &quot; (:b &quot;bold text&quot;)) (:p (:b &quot;that spans&quot;) &quot;two paragraphs&quot;))</pre>

<hr>

<h3><a name="reference"></a>parse-html Reference</h3>

<h4>parse-html [Generic function]</h4>

<blockquote>
  <p><strong>Arguments:</strong> <em>input-source</em> &amp;key <em>callbacks callback-only
  collect-rogue-tags no-body-tags eliminate-blank-strings parse-entities</em></p>
</blockquote>

<p>Returns LHTML output, as described above in this document. 

<ul>
  <li>The <em>callbacks</em> argument, if non-nil, should be an association list. Each list
    member's car (first) element specifies a keyword package symbol, and each list member's
    cdr (rest) element specifies a function object or a symbol naming a function. The function
    should expect one argument. The function will be invoked once for each time the HTML tag
    corresponding to the specified keyword package symbol is encountered in the HTML input;
    the argument will be an LHTML list containing the tag, along with associated attributes
    and content. The default callbacks argument value is nil.</li>
  <li>The <em>callback-only</em> argument, if non-nil, directs parse-html to not generate a
    complete LHTML output. Instead, LHTML lists will only be generated when necessary as
    arguments for functions specified in the callbacks association list. This results in
    faster parser execution. The default <em>callback-only </em>argument value is nil.</li>
  <li>The <em>collect-rogue-tags</em> argument, if non-nil, directs <strong>parse-html</strong>
    to return an additional value,&nbsp; a list containing any unrecognized tags closed by the
    end of input.</li>
  <li>The <em>no-body-tags</em> argument, if non-nil, should be a list containing unknown tags
    that, if encountered, will be treated as a tag with no body or content, and thus, no
    associated end tag. Typically, the argument is a list or modified list resulting from an
    earlier <strong>parse-html</strong> execution with the <em>collect-rogue-tags</em>
    argument specified as non-nil.</li>
  <li>The <em>eliminate-blank-strings</em> argument, if true, causes blank strings to be
    deleted.</li>
  <li>If <em>parse-entities</em> is true, entities are converted to the characters they
    represent.</li>
</ul>

<p><a name="methods"></a><strong>parse-html Methods</strong></p>

<p>Methods specializing on the required argument are defined for <code>stream</code>
(reads output from the stream) and <code>string</code> (parses the argument string).</p>

<blockquote>
  <pre>parse-html (p stream) &amp;key callbacks callback-only collect-rogue-tags no-body-tags</pre>
  <pre>parse-html (str string) &amp;key callbacks callback-only collect-rogue-tags no-body-tags</pre>
  <pre>parse-html (file t) &amp;key callbacks callback-only collect-rogue-tags no-body-tags</pre>
</blockquote>

<blockquote>
  <p>The t method assumes the argument is a pathname suitable for use with the <strong>with-open-file</strong>
  macro.</p>
</blockquote>

<p><a name="internal"></a><strong>phtml-internal [Function]</strong></p>

<blockquote>
  <p><strong>Arguments:</strong> <em>stream read-sequence-func callback-only callbacks
  collect-rogue-tags no-body-tags</em></p>
</blockquote>

<blockquote>
  <p>This function may be used when more control is needed for supplying the HTML input. The
  <em>read-sequence-func</em> argument, if non-nil, should be a function object or a symbol
  naming a function. When <strong>phtml-internal</strong> requires another buffer of HTML
  input, it will invoke the <em>read-sequence-func</em> function with two arguments - the
  first argument is an internal buffer character array and the second argument is the <strong>phtml-internal</strong>
  <em>stream</em> argument. If <em>read-sequence-fun</em> is nil, <strong>phtml-internal</strong>
  will invoke <strong>read-sequence</strong> to fill the buffer. The <em>read-sequence-func</em>
  function must return the number of character array elements successfully stored in the
  buffer. </p>
</blockquote>

<p><small>Copyright (c) 2000, 2001, 2004 by Franz Inc. All rights reserved. </small><br>
<small>Documentation for Allegro CL version 7.0. This is the initial (unrevised) page.</small><br>
<small>Created 2004.9.12.</small> </p>

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL version 8.0</b></td>
  </tr>
</table>
</body>
</html>
