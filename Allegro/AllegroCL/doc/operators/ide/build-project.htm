<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>build-project</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ide</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ide/build-project.htm">8.1 version</a></td></tr></table><h2 id="2">build-project</h2>

<p id="3"><b>Arguments: </b><i>
project
</i>&amp;key <i>distribution-directory replace-if-exists exe-only autoload-warning completion-dialog</i> (<i>increment-build-number</i> t)<i>
</i></p>

<p id="4">
Calls either <a href="../excl/build-lisp-image.htm"><b>build-lisp-image</b></a> or <a href="../excl/generate-application.htm"><b>generate-application</b></a>, passing various
properties of the project as arguments in order to build a standalone
executable for the project. This is the programmatic equivalent of the
<a href="../../ide-menus-and-dialogs/file-menu.htm#build-project-distribution">File | Build Project
Distribution</a> and the <a href="../../ide-menus-and-dialogs/file-menu.htm#build-project-exe">File | Build Project
Exe</a> menu commands. This function also emulates certain other
functionality of these IDE commands that is not provided by <a href="../excl/build-lisp-image.htm"><b>build-lisp-image</b></a> or <a href="../excl/generate-application.htm"><b>generate-application</b></a>, such as
embedding the project's icon file in the generated executable, and
recompiling it with <code>:runtime-system</code> in the <a href="../../../ansicl/dictentr/features.htm"><code>*features*</code></a> list if the
property's <a href="full-recompile-for-runtime-conditionalizations.htm"><b>full-recompile-for-runtime-conditionalizations</b></a>
property is turned on. This function may be useful for automating the
building of standalone executables for a project.
</p>
<p id="5">
The arguments are:
</p>
<ul>
<li id="6">
<b><i>project</i></b>: The project for which to build a
standalone executable or complete distribution. The project may be
either the project that is currently open for editing (the value
returned by <a href="current-project.htm"><b>current-project</b></a>)
or any project that has been loaded into the current IDE session by
calling <a href="load-project.htm"><b>load-project</b></a>.
</li>
<li id="7">
<b><i>distribution-directory</i></b>: The pathname or
path namestring of a directory in which to place the generated
distribution. Used only if <i>exe-only</i>
is <code>nil</code>, in which case it must be
passed. Should be either a new directory or an existing distribution
directory to be replaced by
passing <i>replace-if-exists</i> as true.
</li>
<li id="8">
<b><i>replace-if-exists</i></b>: Used only if
<i>exe-only</i> is <code>nil</code> and the
specified distribution-directory already exists.  In this situation,
if <i>replace-if-exists</i> is true then the
distribution-directory and all of its subdirectories and the files
contained in those directories are all deleted, and then the new
distribution is created in a new directory at the same path. (Note
that no warning is given.) If <i>replace-if-exists</i>
is <code>nil</code> (the default), then an error is
signaled.
</li>
<li id="9">
<b><i>exe-only</i></b>: If true, then <a href="../excl/build-lisp-image.htm"><b>build-lisp-image</b></a> is called to create a
standalone executable for the specified
project. If <code>nil</code> (the default),
then <a href="../excl/generate-application.htm"><b>generate-application</b></a> is
called to create a standalone executable and place it with other files
to be distributed into a new directory; this directory must be
specified as the value of
the <i>distribution-directory</i> argument.
</li>
<li id="10">
<b><i>autoload-warning</i></b>: This argument is passed
straight through to either <a href="../excl/build-lisp-image.htm"><b>build-lisp-image</b></a> or <a href="../excl/generate-application.htm"><b>generate-application</b></a>, to create an
<i>autoloads.out</i> file to report on autoloadable
functions. The IDE menu commands pass true for this argument, but
<code>nil</code> (the default) may be more appropriate for
an automated build in order to avoid an interactive modal dialog that
mentions the <i>autoloads.out</i> file.
</li>
<li id="11">
<b><i>completion-dialog</i></b>: If true, a modal dialog
with beep is presented to inform you that the process has
completed. The modal dialog is a "topmost" window so that it will
appear in front of other applications to which you may have shifted
your attention while waiting for the build to complete. The IDE menu
commands pass true for this argument, but <code>nil</code>
(the default) may be more appropriate for an automated build in order
to avoid the interactive dialog.
</li>

<li id="12">
<b><i>increment-build-number</i></b>: If true, then the
<a href="../cg/b/build-number.htm"><b>build-number</b></a> property of the
project will be incremented by one. The default value
is <code>t</code>.  When building projects
programmatically, it might be desirable to pass the value
as <code>nil</code> to avoid modifying the project and
making the IDE inclined to save it.
</li>

</ul>

<h3 id="13">
Automating a Project Build Using the startup.cl File
</h3>
<p id="14">
Here's a technique to automate starting up an IDE, loading a project,
generating a standalone distribution, and exiting: Place code similar
to the following at the top of your <i>startup.cl</i>
file. (If this file does not exist, simply create
one. <i>startup.cl</i> is used here because it is loaded
only after the IDE has finished coming up.) This particular example
will make a distribution for the IDE's form-building tutorial.
</p>
<pre id="15">
(in-package :cg-user)

(when (member "build-tutorial" (sys:command-line-arguments
                                :application t)
              :test #'string-equal)
  (let* ((project (ide:load-project
                   (merge-pathnames
                    "gui-builder-tutorial/final/interface-builder-tutorial.lpr"
                    (translate-logical-pathname "sys:"))
                   :compile nil))
         (destination "c:/tutdist/"))
    (ide:build-project project
                   :distribution-directory destination
                   :replace-if-exists t))
  (exit))
</pre>
<p id="16">
The above code will run whenever "build-tutorial" is passed as an
"application argument" in the command line that is used to start up
lisp. ("Application arguments" are all those following a "--" in the
command line.)  Such a command line, which could either be placed in a
.bat batch file to be double-clicked or be used in a Windows Start
Menu command, could be as simple as this ("XX" means the version
indicator, e.g. "acl81"):
</p>
<pre id="17">
"c:\Program Files\aclXX\allegro.exe" -- build-tutorial
</pre>
<p id="18">
To build your own projects this way, simply replace the pathnames and
command-line argument name in the sample code above, or customize it
further as desired. Multiple application arguments could even be used
to build the distributions for a set of projects automatically.
</p>

<p id="19">
<b>If an automated build fails to complete</b>: An automated build
might fail to complete, leaving the build console window on the
screen, if you have turned on the "Enable Debugging of Build Errors"
option for the project at some time on the <a href="../../ide-menus-and-dialogs/project-manager-dialog-build.htm">Build</a> tab of the
<a href="../../ide-menus-and-dialogs/project-manager-dialog.htm">Project
Manager</a> dialog. If this happens, you could either turn that
option back off in the Project Manager, or else make the build script
ensure that the option is off during the automated build by adding a
line of code like the following to the build script just before it
calls
<a href="build-project.htm"><b>build-project</b></a>:
</p>


<h3 id="20">
Automating a Project Build Using a Make File
</h3>
<p id="21">
If you use a <b>make</b> facility on your system, then you could use
an alternate approach that employs a makefile and one or more script
files for one or more projects. This approach allows typing a briefer
command line to build a particular project.
</p>
<p id="22">
Your makefile could have a simple rule for each project, where it
starts the IDE and passes the name of a script file to load for that
project:
</p>

<pre id="23">
sample:
	allegro.exe +s build-sample.cl
</pre>

<p id="24">
Then the script file <i>build-sample.cl</i> could contain the
following code that loads and builds the project.
</p>
<p id="25">
One tricky point is that it must first wait until other processes have
finished starting up the IDE. (That's not necessary when using the
<b>startup.cl</b> approach because that file is loaded only after the
IDE has finished starting up.)
</p>

<pre id="26">
(in-package :cg-user)

;;; Wait until other processes finish starting up the IDE.
(loop (when ide:*ide-is-running*
        (return))
      (sleep 0.1))

;; Load a project and generate its standalone application.
;; (You could load and build multiple projects here if desired.)
;; Using in-cg-process avoids problems if an error in this code
;; tries to display an error message in a CG window.
(in-cg-process ()
  (let* ((project-directory "c:\\allegro-projects\\sample-project\\"))
    (ide:build-project
     (ide:load-project (merge-pathnames "sample-project.lpr" project-directory))
     :distribution-directory (merge-pathnames "dist3" project-directory)
     :replace-if-exists t))
  
  ;; Exit the lisp automatically when the build is done.
  (exit))
</pre>
<p id="27">
Then in a Windows command window or Unix shell you can move to the
directory that contains the makefile and simply enter <b>make
sample</b> to build the standalone application for that project.
</p>


<pre id="28">
(setf (ide:build-flags project)
      (remove :allow-build-debug (ide:build-flags project)))
</pre>



<hr><p id="29"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ide/build-project.htm">8.1 version</a></td></tr></table></body></html>