<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>eval-in-listener-thread</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ide</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ide/eval-in-listener-thread.htm">8.1 version</a></td></tr></table><h2 id="2">eval-in-listener-thread</h2>

<p id="3"><b>Arguments: </b><i>
form
</i>&amp;key <i>wait</i> (<i>listener</i> :selected)<i> funcall trap-errors</i><i>
</i></p>

<p id="4">
Evaluates an arbitrary lisp form in either an
IDE listener thread or the IDE GUI thread. Optionally waits for the
evaluation to complete, returning the result of the evaluation. This
function may be useful when customizing the IDE if it is necessary to
evaluate a form in a thread other than what the IDE would use by
default.
</p>

<p id="5">
The IDE creates its tool windows in the IDE GUI thread, and runs the
code for those windows in that thread. On the other hand, user code
that is evaluated in an IDE Listener or with the <a href="../../ide-menus-and-dialogs/tools-menu.htm#graph-subclasses">Tools
| Graph Subclasses</a> and <a href="../../ide-menus-and-dialogs/tools-menu.htm#incremental-evaluation">Tools | Incremental
Evaluation</a> command is run in an IDE Listener thread.  This
multi-threaded design allows IDE tool windows to respond while an
evaluation of user code is still busy.  In certain cases, this may
result in code being run in an inappropriate thread.  For example, if
you define a global keyboard accelerator (see <a href="../cg/a/add-global-keyboard-accelerator.htm"><b>add-global-keyboard-accelerator</b></a>)
and use it in an IDE tool window, then its code will run in the IDE
GUI thread that created that window. If that code should instead run
in an IDE Listener thread in order to run in the same environment as
other user code, then this can be achieved by calling <a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a>
in the global keyboard accelerator code.
</p>
<p id="6">
<b><i>form</i></b> is the Lisp form to be
evaluated. Note that because this argument is evaluated by the reader
(as are all arguments to functions), the value of
<i>form</i> should evaluate to the Lisp form to be
evaluated. This is done in the examples below by quoting the desired
form.
</p>
<p id="7">
If <b><i>wait</i></b> is true, then <a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a> does not return until
the specified thread has finished the evaluation, at which time
<a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a>
returns the values that were returned by calling <a href="../../../ansicl/dictentr/eval.htm"><b>eval</b></a> on <i>form</i>.
</p>
<p id="8">
If <i>wait</i> is <code>nil</code> (the
default), then <a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a> returns
immediately after posting a notification to the specified thread, and
the returned value is undefined. An exception is that if the specified
listener indicates the current thread, then eval is called on
<i>form</i> directly, and so <a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a> does not
return until the evaluation is done even if <i>wait</i>
is <code>nil</code>.
</p>
<p id="9">
<b><i>listener</i></b> indicates the thread in which the
evaluation will be done. It must be either
<code>:selected</code> (the default),
<code>:initial</code>, or <code>:gui</code>.
<code>:selected</code> means to evaluate the form in the thread
of the IDE listener pane that is currently selected in the Debug
Window. This is the same thread in which forms that are typed into the
Debug Window are evaluated, and the thread in which IDE commands such
as "Tools | Incremental Eval" and "File | Load" evaluate user code.
<code>:initial</code> means to evaluate the form in the thread
of the "Listener 1" listener, which is always present in the IDE (it
cannot be closed except by exiting the IDE). <code>:gui</code>
means to evaluate the form in the "IDE GUI" thread, which is not a
listener thread at all but rather a special IDE thread that handles
mouse and keyboard events in IDE windows. It is probably not usually
appropriate for user code to be evaluated in the IDE GUI thread,
except for IDE customizations that manipulate IDE windows (which are
created in the IDE GUI thread).
</p>

<p id="10">
If <b><i>funcall</i></b> is true, form is passed to
<a href="../../../ansicl/dictentr/funcall.htm"><b>funcall</b></a> rather than to <a href="../../../ansicl/dictentr/eval.htm"><b>eval</b></a>. <i>form</i> must
then be a suitable argument to <a href="../../../ansicl/dictentr/funcall.htm"><b>funcall</b></a> and will be passed with no arguments.
</p>
<p id="11">
If <b><i>trap-errors</i></b> is true, then any errors
that are signaled are ignored. If <i>wait</i> is also
true and an error is signaled, then <a href="eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a> will return two values:
(1) the keyword symbol
<code>:eval-in-listener-thread-error</code> and (2) the error
condition.
</p>

<p id="12">
Note that this function is useful only in the IDE, rather than in
standalone CG applications. The IDE creates a particular set of
threads and has conventions for which thread to use for particular
tasks. These conventions may not be suitable for some IDE
customizations, and so this function is provided to avoid any such
problems. A standalone CG app that uses multiple threads, on the
other hand, must handle its own thread management.
</p>

<h3 id="13">Examples:</h3>

<pre id="14">
(ide:eval-in-listener-thread
  '(mp:process-name sys:*current-process*)
  :wait t :listener :initial)
==&gt; &quot;Listener 1&quot;

(ide:eval-in-listener-thread
  '(mp:process-name sys:*current-process*)
  :wait t :listener :gui)
==&gt; &quot;IDE GUI&quot;
</pre>



<hr><p id="15"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ide/eval-in-listener-thread.htm">8.1 version</a></td></tr></table></body></html>