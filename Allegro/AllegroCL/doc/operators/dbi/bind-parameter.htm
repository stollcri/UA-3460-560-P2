<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>bind-parameter</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: dbi</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/dbi/bind-parameter.htm">8.1 version</a></td></tr></table><h2 id="2">bind-parameter</h2>


<p id="3"><b>Arguments: </b><i>
param-num obj type width
</i>&amp;key <i>db hstmt</i><i>
</i></p>

<p id="4">
This function creates a binding for a parameter for a parameterized
sql statement.
</p>

<p id="5">
A binding is the assigning of a block of memory to hold the value of a
given parameter.  Whenever a parameterized sql statement is executed,
ODBC looks in the bindings and uses the current value found
there. <i>param-num</i> is the index of the parameter to
be bound. The first parameter is number 1 (not
0). <i>obj</i> is the object to bind to the
parameter. If <i>obj</i> is <code>nil</code>
then an object will be allocated. 
</p>
<p id="6">
<i>type</i> is the type of the value stored in the
object. It can be any of the following values:
</p>
<ul>
<li id="7">
<code>:long</code> or <code>:int</code> (treated the
same)
</li>
<li id="8">
<code>:float</code> or <code>:double</code> (treated
the same)
</li>
<li id="9">
<code>:char</code>
</li>
<li id="10">
<code>:varchar</code>
</li>
<li id="11">
<code>:null</code>
</li>
</ul>

<p id="12">
If the <i>type</i> is <code>:char</code> or
<code>:varchar</code> then the <i>width</i>
specifies the maximum number of characters in the object. If
<i>type</i> is <code>:null</code>, then the
<i>width</i> must be specified 0. A null bound
parameter will always insert a NULL into a column.
</p>

<p id="13">
The binding is associated with a particular statement handle for a
particular database connection. If <i>hstmt</i> is 
true
then it is that statement handle. Otherwise if <i>db</i> is 
true
then its default statement handle is used. If <i>db</i> is 
<code>nil</code>
then the value of <a href="../../variables/dbi/s_default-database_s.htm"><code>*default-database*</code></a> is the database connection
whose statement handle is used.
</p>

<p id="14">
Normally in a call to <strong>bind-parameter</strong> the value of
<i>obj</i> is <code>nil</code> which calls
for <strong>bind-parameter</strong> to allocate an object of the
appropriate type and return it as the result of the call. If
<i>obj</i> is true then it should
be an object allocated by a previous call to
<strong>bind-parameter</strong> for the same <i>type</i>
and <i>width</i>. The objects allocated by <a href="bind-parameter.htm"><b>bind-parameter</b></a> are foreign objects of
allocation type <strong>:foreign-static-gc</strong>. It is the
program's responsibility to keep pointers to these bound objects so
that they aren't garbage collected before they are used for the last
time.
</p>

<h3 id="15">Examples</h3>
<p id="16">
There is an example of using <a href="bind-parameter.htm"><b>bind-parameter</b></a> in <a href="../../aodbc.htm#binding-input-2">Binding input parameters</a> in
<a href="../../aodbc.htm">aodbc.htm</a>. That example shows what these bound
objects look like from the Lisp perspective.
</p>
<p id="17">
Here is an example where a parameter is bound to
<code>:int</code> and to <code>:null</code>:
</p>

<pre id="18">
;; We create a table snort and prepare-sql to insert
;; some value into it:

cl-user(39): (dbi:sql &quot;create table snort(i int, j int)&quot;)
nil
cl-user(40): (dbi:prepare-sql &quot;insert into snort(i,j) values(?,?)&quot;)
t

;; We create two bound int parameters p1 and p2

cl-user(41): (setq p1 (dbi:bind-parameter 1 nil :int nil))
#&lt;foreign object of class dbi::odbc-int-param&gt;
cl-user(42): (setq p2 (dbi:bind-parameter 2 nil :int nil))
#&lt;foreign object of class dbi::odbc-int-param&gt;


;; We will insert  111,222 first

cl-user(43): (setf (ff:fslot-value p1 :data) 111)
111
cl-user(44): (setf (ff:fslot-value p2 :data) 222)
222
cl-user(45): (dbi:run-prepared-sql)
nil

;; Now we want to insert NULL,444 into the table.  In order 
;; to accomplish this we rebind paramater 1 to a :null typed 
;; object (note that you must specify the width to be 0):

cl-user(46): (setq nullp1 (dbi:bind-parameter 1 nil :null 0))
#&lt;foreign object of class dbi::odbc-char129-param&gt;

;; We don't have to set the :data slot of the :null parameter.  
;; It only has one value anyway.
;;
;; We set the value of the second parameter to 444

cl-user(47): (setf (ff:fslot-value p2 :data) 444)
444
cl-user(48): (dbi:run-prepared-sql)
nil

;; Now we want to insert 666,888 into the table.  Parameter 2 is 
;; still bound to p2.  We rebind parameter 1 to our p1 object which
;; still exists.

cl-user(49): (dbi:bind-parameter 1 p1 :int nil)
#&lt;foreign object of class dbi::odbc-int-param&gt;

;; Then we use p1 and p2 to set the vaules and insert the rows

cl-user(50): (setf (ff:fslot-value p1 :data) 666)
666
cl-user(51): (setf (ff:fslot-value p2 :data) 888)
888
cl-user(52): (dbi:run-prepared-sql)
nil


;; And we verify that it worked out ok:

cl-user(53): (dbi:sql &quot;select * from snort&quot;)
((&quot;111&quot; &quot;222&quot;) (nil &quot;444&quot;) (&quot;666&quot; &quot;888&quot;))
(&quot;i&quot; &quot;j&quot;)
cl-user(54): 
</pre>

<p id="19">
See <a href="../../aodbc.htm">aodbc.htm</a> for more information on
Allegro ODBC.
</p>

<hr><p id="20"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/dbi/bind-parameter.htm">8.1 version</a></td></tr></table></body></html>