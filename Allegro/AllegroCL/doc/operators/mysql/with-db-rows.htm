<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>with-db-rows</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: dbi.mysql</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/mysql/with-db-rows.htm">8.1 version</a></td></tr></table><h2 id="2">with-db-rows</h2>

<p id="3"><b>Arguments: </b><i>
(columns </i>&amp;key <i>table db where other first norows return convert blob float allrowsvar rowvar nobind showsql</i><i>)
</i> &amp;rest <i>body</i><i>
</i></p>

<p id="4">
This macro creates an sql select statement to retrieve information
from the database. It then executes this sql statement and processes
the results as specified by the arguments to the macro.
</p>
<p id="5">
It is very important to note that all the rows are retrieved before
the processing of the rows started. This means two things:
</p>
<ol>
<li id="6">
in the code that processes the row results you are free to execute
other database commands over the same database connection.
</li>
<li id="7">
if the desire is to short circuit the retrieval of data rows after
looking at the first few rows returned then you should not use this
macro. All rows are retrieved first before the first row is passed to
user code.
</li>
</ol>

<p id="8">
We will use this sample table while we describe the meanings of the
arguments to <a href="with-db-rows.htm"><b>with-db-rows</b></a>.
</p>
<p id="9">
We create a table called "square" with 10 rows, each row holding
a value and its square:
</p>
<pre id="10">
cl-user(19): (sql "create table square(val int, sq int)")
cl-user(20): (dotimes (i 10) 
                (sql (format nil 
                        "insert into square values(~d, ~d)" i (* i i))))

</pre>

<p id="11">
The <i>columns</i> argument to <a href="with-db-rows.htm"><b>with-db-rows</b></a> should be a list specifying
which columns are to be returned. In the simplest case the columns are
specified as Lisp symbols whose names correspond to the column names
in the database.
</p>
<pre id="12">
cl-user(22): (with-db-rows ((val sq) :table &quot;square&quot;) 
                (format t &quot;&gt;&gt; ~s~%&quot; (list val sq)))
&gt;&gt; (0 0)
&gt;&gt; (1 1)
&gt;&gt; (2 4)
&gt;&gt; (3 9)
&gt;&gt; (4 16)
&gt;&gt; (5 25)
&gt;&gt; (6 36)
&gt;&gt; (7 49)
&gt;&gt; (8 64)
&gt;&gt; (9 81)
nil
</pre>

<p id="13">
Listing a column name causes that column to be retrieved from the
database. Then when the body of the <a href="with-db-rows.htm"><b>with-db-rows</b></a> is executed the Lisp symbols
are bound to the successive values retrieved.  The
<i>body</i> is executed once for each row retrieved.
</p>
<p id="14">
We have seen that a column specifier can be a symbol.  It can
also be a list of two or three items.
The two item list is used when you want the lisp variable bound
to have a different name than the column retrieved. This is usually
done when the column retrieved is actually an expression and not
a column name:
</p>
<p id="15">
Here we ask the database to return a third value, the sum of
the first two values.  This value is bound to the lisp variable
sum when the body is evaluated.
</p>
<pre id="16">
cl-user(24): (with-db-rows ((val sq (sum &quot;val+sq&quot;)) :table &quot;square&quot;) 
                (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
&gt;&gt; (0 0 0)
&gt;&gt; (1 1 2)
&gt;&gt; (2 4 6)
&gt;&gt; (3 9 12)
&gt;&gt; (4 16 20)
&gt;&gt; (5 25 30)
&gt;&gt; (6 36 42)
&gt;&gt; (7 49 56)
&gt;&gt; (8 64 72)
&gt;&gt; (9 81 90)
nil
</pre>

<p id="17">
The column specifier can also contain a third item.  This is useful
when you want to give an alias for the column in the sql
statement itself.  This is rarely needed.  Here's an example of
getting an alias for a computed column so that it can
be used in an 'order by' expression.
</p>
<pre id="18">
cl-user(29): (with-db-rows ((val sq (sum &quot;val+sq&quot; &quot;ss&quot;)) 
                                :table &quot;square&quot; 
                                :other &quot;order by ss desc&quot;) 
                  (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
&gt;&gt; (9 81 90)
&gt;&gt; (8 64 72)
&gt;&gt; (7 49 56)
&gt;&gt; (6 36 42)
&gt;&gt; (5 25 30)
&gt;&gt; (4 16 20)
&gt;&gt; (3 9 12)
&gt;&gt; (2 4 6)
&gt;&gt; (1 1 2)
&gt;&gt; (0 0 0)
nil
</pre>

<p id="19">
In order to help the programmer understand and debug uses of <a href="with-db-rows.htm"><b>with-db-rows</b></a>, the macro takes a
<i>showsql</i> argument which if true causes the macro
to print out (at compile or eval time) the sql generated.
</p>
<p id="20">
For example we can see the sql generated in the previous example
</p>
<pre id="21">
cl-user(30): (with-db-rows ((val sq (sum &quot;val+sq&quot; &quot;ss&quot;)) 
                                :table &quot;square&quot; 
                                :other &quot;order by ss desc&quot; 
                                :showsql t) 
                (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
sql: &quot;select val,sq,val+sq ss from square  order by ss desc&quot;
&gt;&gt; (9 81 90)
&gt;&gt; (8 64 72)
&gt;&gt; (7 49 56)
&gt;&gt; (6 36 42)
&gt;&gt; (5 25 30)
&gt;&gt; (4 16 20)
&gt;&gt; (3 9 12)
&gt;&gt; (2 4 6)
&gt;&gt; (1 1 2)
&gt;&gt; (0 0 0)
nil
</pre>

<p id="22">
Now we'll examine the <i>where</i> argument to <a href="with-db-rows.htm"><b>with-db-rows</b></a>. This argument can
either be a string to be used as the <i>where</i> of the
generated select statement or it can be an expression that is
converted by the macro into a where clause.
</p>
<p id="23">
First we will see an example of the <i>where</i> argument
being a string
</p>
<pre id="24">
cl-user(34): (with-db-rows ((val sq (sum &quot;val+sq&quot; &quot;ss&quot;)) 
                                :table &quot;square&quot; 
                                 :where &quot;sq &gt; 30&quot;  
                                 :showsql t) 
                    (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
sql: &quot;select val,sq,val+sq ss from square where sq &gt; 30 &quot;
&gt;&gt; (6 36 42)
&gt;&gt; (7 49 56)
&gt;&gt; (8 64 72)
&gt;&gt; (9 81 90)
nil
cl-user(35): 
</pre>

<p id="25">
Here is the same <i>where</i> clause written using the
lisp expression syntax.
</p>
<pre id="26">
cl-user(37): (with-db-rows ((val sq (sum &quot;val+sq&quot; &quot;ss&quot;)) 
                            :table &quot;square&quot; 
                            :where (&gt; sq 30) 
                            :showsql t) 
                (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
sql: &quot;select val,sq,val+sq ss from square where sq &gt; 30 &quot;
&gt;&gt; (6 36 42)
&gt;&gt; (7 49 56)
&gt;&gt; (8 64 72)
&gt;&gt; (9 81 90)
nil
</pre>

<p id="27">
One reason for using the lisp expression syntax is that 
it enhances readability to lisp programmers, especially for
large expressions.  Another reason is that the expression can use
the value of lisp expressions and then the resulting sql expression
is computed just before it is evaluated.
</p>
<p id="28">
In this example instead of putting the value 30 in the expression
we reference the value of the lisp variable limit.  Note how
the generated sql isn't a string but is instead an expression
which will generate the sql statement based on the current value
of the limit variable.
</p>
<pre id="29">
cl-user(38): (setq limit 30)
30
cl-user(39): (with-db-rows ((val sq (sum &quot;val+sq&quot; &quot;ss&quot;)) 
                            :table &quot;square&quot; 
                            :where (&gt; sq limit) 
                            :showsql t) 
                 (format t &quot;&gt;&gt; ~s~%&quot; (list val sq sum)))
sql: (format nil &quot;select val,sq,val+sq ss from square where sq &gt; ~a &quot;
             (dbi.mysql::stringify-float limit))
&gt;&gt; (6 36 42)
&gt;&gt; (7 49 56)
&gt;&gt; (8 64 72)
&gt;&gt; (9 81 90)
nil
cl-user(40): 
</pre>

<p id="30">
A <i>where</i> clause expression is not a general Lisp
expression. Instead it is very restricted.
</p>
<pre id="31">
where-clause :=  boolean-clause | simple-expression

boolean-clause := (and simple-expression simple-expression ...) |
                  (or  simple-expression simple-expression ...) 

simple-expression := (op column-spec lisp-expr) | (op column-spec string)

op := = | &lt; | &gt; | &lt;= | &gt;= | != | =text

column-spec := symbol | string

lisp-expr := [any lisp expression]
</pre>

<p id="32">
There are a few things to note about simple-expressions:
</p>
<ol>
<li id="33">
The expressions are always binary (compare two values, but not more
than two): thus (&lt; a b c) is not allowed.
</li>
<li id="34">
The column name is always the first argument.
You can use <code>(&lt; val 3)</code> if
<code>val</code> is a column name but you cannot use
<code>(&gt; 3 val)</code>
</li>
<li id="35">
The column name can be a string or symbol: <code>(&lt; val
3)</code> and <code>(&lt; &quot;val&quot; 3)</code> are equivalent.
</li>
<li id="36">
The <code>lisp-expr</code> can be any lisp expression.  It can
reference lisp variables and call lisp functions.  It cannot reference
the value of other columns.  See the next item however.
</li>
<li id="37">
If the second argument to an operator (other than <b>=text</b>) is a
string then that string is used verbatim in the
<i>where</i> expression.  so <code>:where (&lt; val
&quot;sq&quot;)</code> would generate the where clause: &quot;where val &lt; sq&quot;
which references the values of two columns of the table. This is also
useful when comparing column values against expressions involving
mysql built-in functions, such as <code>(&lt; time
&quot;now()-1000&quot;)</code>
</li>
<li id="38">
The <b>=text</b> operator is designed to do a test for string equality.
If the second argument to <b>=text</b> is a lisp-expr then the
lisp-expr is evaluated just before the sql statement is executed.
The lisp-expr should return a string which is then compared for
equality with the column that is the first argument to <b>=text</b>.
</li>
<li id="39">
If the <b>=text</b> operator's second argument is a string then the
column that is the first argument is compared against that
string for equality.
</li>
</ol>

<p id="40">
Next we'll describe the meaning of the <i>first</i> and
<i>norows</i> arguments to <a href="with-db-rows.htm"><b>with-db-rows</b></a>.  When you ask for rows from
the database the case of there being no rows returned can be a special
case you wish to note.
</p>
<p id="41">
Here we see a case where we want to put an error check in for
the case where there's no data in the database to satisfy our query:
</p>
<pre id="42">
cl-user(42): (with-db-rows ((val sq) 
                            :table "square" 
                            :where (= val 200) 
                            :norows (error "the table isn't complete")) 
                    (print sq))
Error: the table isn't complete

Restart actions (select using :continue):
 0: Return to Top Level (an "abort" restart).
 1: Abort entirely from this process.
[1] cl-user(43): 
</pre>

<p id="43">
The value of the <i>norows</i> argument is a Lisp
expression which is evaluated in the case where the select returns no
rows. The result of that evaluation is immediately returned from the
<a href="with-db-rows.htm"><b>with-db-rows</b></a> macro.  In
the previous example the signaling of an error prevented the value
from being returned
</p>
<p id="44">
Here we do the same thing except we return the string "no rows found"
when the database can't find a value to satisfy the
<i>where</i> clause of our query:
</p>
<pre id="45">
cl-user(44): (with-db-rows ((sq) 
                             :table "square" 
                             :where (= val 200) 
                             :norows "no rows found") 
                    (print sq))
"no rows found"
cl-user(45): 
</pre>

<p id="46">
Another common case is where we expect to find just one
row in the table and want to take action only on the first
row.   Here we want to return the value for the sq column
when the val column is 3.   
</p>
<pre id="47">
cl-user(46): (with-db-rows ((sq) 
                             :table "square" 
                             :where (= val 3) 
                             :first sq)
                  )
9
cl-user(47): 
</pre>

<p id="48">
Normally the body of <a href="with-db-rows.htm"><b>with-db-rows</b></a> is executed once for every
row. Specifying a non-<code>nil</code> value for
<i>first</i> causes the body to be executed only once
and then the <i>first</i> expression to be evaluated and
its value returned by <a href="with-db-rows.htm"><b>with-db-rows</b></a>.  In the above example there
is no body so all you see is the result of returning the value of the
<i>first</i> expression.  The <i>first</i>
expression is evaluated inside the binding of the column values to the
column variables (that's why sq has a value).
</p>
<p id="49">
The expression above is a common idiom for returning
a column value from the database.  It is clearer
than writing
</p>
<pre id="50">
(caar (sql "select sq from square where val = 3"))
</pre>

<p id="51">
Also if you cared what happened if there were no rows returned you
could easily add a <i>norows</i> argument to <a href="with-db-rows.htm"><b>with-db-rows</b></a> macro call.
</p>
<p id="52">
We've seen that both <i>first</i> and
<i>norows</i> specify the value to be returned by
<a href="with-db-rows.htm"><b>with-db-rows</b></a>.  If
neither <i>first</i> nor <i>norows</i>
come into play, then the value of the argument
<i>return</i> specifies the expression to evaluate and
return. Note that the <i>return</i> expression cannot
use the column variable names. It is evaluated after all the rows have
been processed.
</p>
<p id="53">
An example of using <i>return</i>:
</p>
<pre id="54">
cl-user(50): (with-db-rows ((val sq) 
                            :table &quot;square&quot; 
                            :where (&gt; val 3) 
                            :return &quot;all done&quot;) 
                    (format t &quot;&gt;&gt; ~s~%&quot; (list val sq)))
&gt;&gt; (4 16)
&gt;&gt; (5 25)
&gt;&gt; (6 36)
&gt;&gt; (7 49)
&gt;&gt; (8 64)
&gt;&gt; (9 81)
&quot;all done&quot;
cl-user(51): 
</pre>

<p id="55">
Now we'll explain the use of the <i>allrowsvar</i>,
<i>rowvar</i> and <i>nobind</i> arguments.
When the select statement returns, the list of rows is stored in a
variable and then processed row by row. You can choose the local
variable used to store the list of rows and the local variable that
takes on successive row values. By choosing the names of these
variables you can then access their values in the
<i>first</i>, <i>return</i> and
<i>body</i> expressions.  Note that the
<i>return</i> expression only has access to one of the
variables - the one containing all rows.
</p>
<p id="56">
<i>allrowsvar</i> should have as a value a symbol which
will name the local variable that will hold the list of all row
values.  <i>rowvar</i> should have as a value a symbol
which will name the local variable holding each successive row.
</p>
<p id="57">
In this example we return the list of results just as the
select statement returned them:
</p>
<pre id="58">
cl-user(53): (with-db-rows ((val sq) 
                            :table &quot;square&quot; 
                            :where (&gt; val 3) 
                            :allrowsvar allofthem 
                            :first allofthem))

((4 16) (5 25) (6 36) (7 49) (8 64) (9 81))
cl-user(54):
</pre>

<p id="59">
This is slightly slower than but equivalent to 
</p>
<pre id="60">
(sql &quot;select val,sq from square where val &gt; 3&quot;)
</pre>

<p id="61">
<a href="with-db-rows.htm"><b>with-db-rows</b></a> is slower
because it bound the val and sq variables to the values from the first
row returned.  It bound them since it didn't know that their values
were not going to be used.
</p>
<p id="62">
You can tell <a href="with-db-rows.htm"><b>with-db-rows</b></a> that you don't want it to
bind to the column variables by adding <code>:nobind t</code> to
the argument list:
</p>
<pre id="63">
cl-user(56): (with-db-rows ((val sq) 
                            :table &quot;square&quot; 
                            :where (&gt; val 3) 
                            :allrowsvar allofthem 
                            :first allofthem 
                            :nobind t))
((4 16) (5 25) (6 36) (7 49) (8 64) (9 81))
cl-user(57): 
</pre>

<p id="64">
Now we have a <a href="with-db-rows.htm"><b>with-db-rows</b></a> expression that's as fast as
the sql expression.
</p>
<p id="65">
<a href="with-db-rows.htm"><b>with-db-rows</b></a> takes the
same conversion arguments as the <a href="sql.htm"><b>sql</b></a> function:
<i>convert</i>, <i>blob</i>, and
<i>float</i>. You can find a description of those
arguments in the documentation for <a href="sql.htm"><b>sql</b></a>.
</p>
<p id="66">
You can also find the documentation for the <i>db</i>
argument in the documentation for the <a href="sql.htm"><b>sql</b></a> function.
</p>
<p id="67">
The <i>table</i> argument has been used in all of the
examples but has not yet been described in detail. If the table
argument is a string then that string is used verbatim in the from
clause of the sql statement. It can list a single table (as above) or
a group of tables as for example "foo, bar, baz". You can also use the
<a href="table-list.htm"><b>table-list</b></a>
function to build a list of table names.  This is especially useful
when the table names aren't known until runtime.
</p>
<pre id="68">
(table-list "foo" "bar "baz")
  <b>returns</b> "foo, bar, baz".
</pre>

<p id="69">
You can alias tables in sql and a table name of ("foo" :as "f")
turns into "foo as f". Thus
</p>
<pre id="70">
(table-list '("foo :as "f") "bar")
  <b>returns</b> "foo as f, bar".
</pre>

<p id="71">
The <i>other</i> argument to <a href="with-db-rows.htm"><b>with-db-rows</b></a> takes a string which is
added verbatim at the end of the sql statement.
</p>

<h4 id="72">Some examples of using with-db-rows</h4>

<p id="73">
This does a join from two tables and returns the row results.
Note that by using aliases for the tables we can write
the column variables without knowing until runtime the exact names 
of the table we'll be reading.
</p>
<pre id="74">
(with-db-rows ((i.u_item 
                i.prodnumber
                i.version
                v.brief_desc
                i.options
                i.quantity
                v.price
                i.totalcost)
                 
               :table (table-list `(,(store-items store) :as "i")
                                  `(,(store-inventory store) :as "v"))
                 
               :where (and (= i.cartnum cartid)
                           (= i.prodnumber "v.prodnumber")
                           (= i.version "v.version"))
               :float nil
               :db db
               :allrowsvar all-ret-vals
               :first all-ret-vals
               :nobind t))
</pre>

<p id="75">
In this example we compute the tax to charge on an order. Bound
outside this expression are two lisp variables:
<code>orderid</code> and
<code>city</code>. <code>city</code> is bound to a lisp
string naming the city for which we want to compute the tax.
</p>
<pre id="76">
(with-db-rows (((tax "(t.rate*o.tsubtotal)/100"))
               :table (table-list
                       '("tax" :as "t")
                       `(,(store-orders store) :as "o"))
               :where (and (= o.u_order orderid)
                           (=text t.city city))
               :first tax))
</pre>

<p id="77">
In this example we want to retrieve a number of columns related to
the processing of a credit card.  We could just have the
<i>first</i> argument to <a href="with-db-rows.htm"><b>with-db-rows</b></a> be the expression
</p>
<pre id="78">
(list u_processor ts result pnref authcode avsaddr avszip cvv2match)
</pre>
<p id="79">
but that would cause us to cons up a list that already existed and was
returned by the select statement.  Why not use the list returned by
the select statement for this row?  We do precisely that by naming the
<i>rowvar</i> (we call the variable
<code>processor</code>) and then we have
<i>first</i> return that variable.
</p>
<pre id="80">
(with-db-rows ((u_processor
                ts
                result
                pnref
                authcode
                avsaddr
                avszip
                cvv2match)
               :table (store-processor store)
               :db db
               :where (= u_processor processornum)
               :nobind t
               :float nil
               :rowvar processor
               :first processor))
</pre>

<p id="81">
See <a href="../../mysql.htm">mysql.htm</a> for information on the Allegro MySQL
facility.
</p>

<hr><p id="82"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/mysql/with-db-rows.htm">8.1 version</a></td></tr></table></body></html>