<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>re-case</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/re-case.htm">8.1 version</a></td></tr></table><h2 id="2">re-case</h2>

<p id="3"><b>Arguments: </b><i>
string
</i> &amp;rest <i>clauses</i><i>
</i></p>

<p id="4">
<i>string</i> must be an expression that evaluates to a
string. The clauses are then examined one by one, checking whether it
matches string or not. <i>clauses</i> must be one of the
following forms:
</p>
<ul>
<li id="5">
<code>(</code><code><i>regexp bindings expr</i></code><code> ...)</code>: if
<i>string</i> matches <code><i>regexp</i></code>,
(sub)matches are bound to the variables according to
<code><i>bindings</i></code>, then <code><i>expr
...</i></code> are evaluated. See the documentation of <a href="re-lambda.htm"><b>re-lambda</b></a> for information on the
specifiction of <code><i>regexp</i></code> and
<code><i>bindings</i></code>.
</li>
<li id="6">
<code>(:test </code><code><i>proc expr ...</i></code><code>)</code>:
<code><i>proc</i></code> must be an expression that evaluates to
a procedure that takes single argument. <code><i>proc</i></code>
is called with <i>string</i>, and if it returns a true
value, evaluates <code><i>expr ...</i></code>.
</li>
<li id="7">
<code>(:testlet </code><code><i>proc var expr ...</i></code><code>)</code>: like
<code>:test</code> above, but binds the result of
<code><i>proc</i></code> to <code><i>var</i></code> while
evaluating <code><i>expr...</i></code>.
</li>
<li id="8">
<code>(t expr ...)</code>: always match and evaluates
<code><i>expr ...</i></code>.  This can be used to describe the
fallback case.
</li>
</ul>
<p id="9">
If no clause match, <code>nil</code> is returned.
</p>

<p id="10">
See also <a href="re-let.htm"><b>re-let</b></a> and <a href="re-lambda.htm"><b>re-lambda</b></a>.
</p>

<h3 id="11">
Example
</h3>

<pre id="12">
cl-user(4): (setq f
	      (re-lambda &quot;([^ ]+) ([^ ]+) ([^ ]+)&quot;
		  ((foo 1) (bar 2) (baz 3))
		(list foo bar baz)))
#&lt;Interpreted Function (unnamed) @ #x71ed7892&gt;
cl-user(5): (funcall f &quot;foo the bar&quot;)
(&quot;foo&quot; &quot;the&quot; &quot;bar&quot;)
cl-user(6): (re-let &quot;([^ ]+) ([^ ]+) ([^ ]+)&quot;
		&quot;foo the bar&quot;
		((foo 1) (bar 2) (baz 3))
	      (list foo bar baz))
(&quot;foo&quot; &quot;the&quot; &quot;bar&quot;)
cl-user(7): 


cl-user(9): (re-case &quot;foo the barmy&quot;
	      (&quot;foo a (.*)&quot; ((it 1)) (list it))
	      (&quot;foo the (.*)&quot; ((it 1)) (list it))
	      (t :no-match))
(&quot;barmy&quot;)
cl-user(10): (re-case &quot;foo a barmy&quot;
	      (&quot;foo a (.*)&quot; ((it 1)) (list it))
	      (&quot;foo the (.*)&quot; ((it 1)) (list it))
	      (t :no-match))
(&quot;barmy&quot;)
cl-user(11): (re-case &quot;foo xx barmy&quot;
	      (&quot;foo a (.*)&quot; ((it 1)) (list it))
	      (&quot;foo the (.*)&quot; ((it 1)) (list it))
	      (t :no-match))
:no-match
cl-user(12): 

cl-user(30): (labels ((parse-date (input)
                        (re-case input
                          (&quot;^(\\d{4})([-/])(\\d{1,2})\\2(\\d{1,2})$&quot;
                           ((year 1) (month 3) (day 4))
                           (mapcar #'read-from-string (list year month day)))
                          (&quot;^(\\d{1,2})([-/])(\\d{1,2})\\2(\\d{4})$&quot;
                           ((year 4) (month 1) (day 3))
                           (mapcar #'read-from-string (list year month day)))
                          (&quot;^(\\d{2})([-/])(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\\2(\\d{4})$&quot;
                           ((year 4) (month 3) (day 1))
                           (list
                            (read-from-string year)
                            (cdr
                             (assoc month
                                    '((&quot;Jan&quot; . 1) (&quot;Feb&quot; . 2) (&quot;Mar&quot; . 3)
                                      (&quot;Apr&quot; . 4) (&quot;May&quot; . 5) (&quot;Jun&quot; . 6)
                                      (&quot;Jul&quot; . 7) (&quot;Aug&quot; . 8) (&quot;Sep&quot; . 9)
                                      (&quot;Oct&quot; . 10) (&quot;Nov&quot; . 11) (&quot;Dec&quot; . 12))
                                    :test #'equal))
                            (read-from-string day))))))
               (list (parse-date &quot;2004/7/21&quot;)
                     (parse-date &quot;7-21-2004&quot;)
                     (parse-date &quot;21-Jul-2004&quot;)))
((2004 7 21) (2004 7 21) (2004 7 21))
cl-user(31): 

</pre>



<p id="13">
The symbol naming this operator is 
also exported from the regexp package.
</p>

<p id="14">
See <a href="../../regexp.htm#regexp-new-1">The new regexp2
module</a> in <a href="../../regexp.htm">regexp.htm</a> for further
information on this macro and the <b>regexp2</b> module.
</p>


<hr><p id="15"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/re-case.htm">8.1 version</a></td></tr></table></body></html>