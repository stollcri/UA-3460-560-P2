<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>generate-application</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/generate-application.htm">8.1 version</a></td></tr></table><h2 id="2">generate-application</h2>

<p id="3"><b>Arguments: </b><i>application-name destination-directory input-files
</i> &amp;rest <i>rest</i><i> </i>&amp;key <i>allow-existing-directory application-files application-administration application-type copy-shared-libraries copy-file-function debug icon-file demo image-only pure-files purify runtime-bundle include-locales file-version-info</i><i></i>...  <a href="build-lisp-image.htm"><b>build-lisp-image</b></a> keyword arguments...  <a href="dumplisp.htm"><b>dumplisp</b></a>
ignore-command-line-arguments keyword
argument...</p>

<p id="4">See <a href="../../delivery.htm">delivery.htm</a> for a complete
description of the issues and functionality associated with this
function. Note that this function
is only available in Enterprise versions of Allegro CL.
</p>

<p id="5">This function writes a collection of files to
destination-directory. In theory, all the files needed to deliver an
application will be in that directory when <a href="generate-application.htm"><b>generate-application</b></a> completes (but you should
test that carefully). </p>

<p id="6">Note that this function calls <a href="build-lisp-image.htm"><b>build-lisp-image</b></a> and like <a href="build-lisp-image.htm"><b>build-lisp-image</b></a>, this function does not
inherit from the currently running image (except for the defaults for
certain arguments).</p>

<p id="7">The required arguments: </p>

<ul>
<li id="8">
<b><i>application-name</i></b>: the name of the
application (i.e., <code>"myapp"</code>).  When coerced to a
pathname, this name should not have a directory or type. It is
used to create the name of the executable or <em>.dll</em> or
<em>.so</em> or <em>.sl</em> (whichever is appropriate for the
platform) and ancillary files.
</li>
<li id="9">
<b><i>destination-directory</i></b>: the name of a
non-existent directory. It is the directory used to create the output
files. See <i>image-only</i> keyword argument below.
</li>
<li id="10">
<b><i>input-files</i></b>: the list of Lisp
(<em>.fasl</em> or <em>.cl</em>) files to be loaded, strings or
pathnames. Symbols are allowed and signify modules to be loaded
with <a href="../../../ansicl/dictentr/provider.htm"><b>require</b></a>. These files are
loaded after
<em>sys:custom.cl</em> is loaded. Note that this argument
supersedes the <a href="build-lisp-image.htm"><b>build-lisp-image</b></a>
argument <code>:lisp-files</code>. That argument is ignored even
if specified to 
<a href="generate-application.htm"><b>generate-application</b></a>.
The section <a href="../../building-images.htm#custom-dot-cl-1">Use of
custom.cl</a> in <a href="../../building-images.htm">building-images.htm</a>
has information on when <em>sys:custom.cl</em> is loaded when an
image is built.
</li>
</ul>

<p id="11">The keyword arguments: </p>

<ul>
<li id="12">
<b><i>allow-existing-directory</i></b>: allow
<i>destination-directory</i> to exist. If the value
of this keyword argument is <code>nil</code> and the
directory exists, then an error is signaled.
</li>
<li id="13"><b><i>application-files</i></b>: files which should
merely be copied to the destination directory.
</li> 
<li id="14">
<b><i>application-administration</i></b>: allows the
specification of various application administrative tasks.  The form
of the value of this keyword is
<blockquote>
          <code>
          (type-keyword ...)
           </code>
</blockquote>
<p id="15">or</p>
<blockquote>
          <code>((type-keyword ...) (type-keyword ...) ...)</code>
</blockquote>
<p id="16">
<code>(type-keyword ...)</code> can be:</p>
<h4 id="17">(:resource-command-line "<em>...command line arguments...</em>")
[UNIX only]</h4>
<blockquote>
<p id="18">This creates a <em>lisprc</em> in the destination directory 
which sets the default
command line arguments to <em>...command line arguments...</em>. 
See the <a href="../../delivery.htm#resources-2">Resources</a> section in 
<a href="../../delivery.htm">delivery.htm</a> for more information.</p>
</blockquote>
<h4 id="19">([:shortcut | :batch-file] <em>filename</em> <em>...command line
arguments...</em>) [Windows only]</h4>
<blockquote>
<p id="20">This creates either a batch file or a shortcut named 
<em>filename</em> that will <em>initialize</em>
the application. For a shortcut, the filename must have
type "lnk" (the letter L, the letter N, the letter K).
<em>command line arguments</em> are the 
arguments to <em>application-name.exe</em>.
The <em>filename</em> argument should actually be
a format control string 
given one argument, the name of the
application. It is used like this: <code>(format nil 
<em>filename</em> &nbsp;<em>application-name</em>)</code>.
This allows the customization of the generated filename 
based on information <a href="generate-application.htm"><b>generate-application</b></a>
has already been given.</p>
<p id="21">One use of this is for OLE registration. For example:</p>
<blockquote>
<pre id="22">'(:shortcut "One-time registration of ~a.lnk" "-register")</pre>
</blockquote>
<p id="23">
If the given <code>application-name</code> was <em>"foo"</em> this
would create a shortcut named <em>One-time registration of foo</em>
with the following command line:
</p>
<blockquote>
<pre id="24">foo.exe -- -register</pre>
</blockquote>
</blockquote>
<p id="25">
An error is signaled if <i>application-type</i> is not
<code>:exe</code>.
</p>
</li>
<li id="26">
<b><i>application-type</i></b>: valid values:
<code>:exe</code>, <code>:ole-in-proc-server</code>, or
<code>:dll</code>.  If <code>:exe</code> is used, then an executable
file named <i>application-name.exe</i> (on Windows) and
<i>application-name</i> (on UNIX) is created.
<p id="27">
If <code>:dll</code>, then the application will be used as a
dll and no executable file is created. The dll used is the 
Allegro CL shared library,
and the application itself will live in the newly created
.dxl file. The Allegro CL shared library
is used to initialize the Allegro CL runtime system, which loads the user's
app in the .dxl file. See <a href="../../dll.htm">dll.htm</a>.
</p>
<p id="28">
If <code>:ole-in-proc-server</code>, a file is created in the
destination directory called <i>application-name.dll</i>.
See the OLE samples in <i>ole/samples/sample05/</i>
and <i>ole/samples/sample06/</i>.
</p>
</li>
<li id="29">
<b><i>autoload-warning</i></b>: when true, the
file <em>autoloads.out</em> is created that contains the functions,
macros and methods that could possibly be autoloaded. Defaults
to <code>t</code>.
</li>
<li id="30">
<b><i>build-executable</i></b>: this is
a <a href="build-lisp-image.htm"><b>build-lisp-image</b></a> keyword
argument but is also used by <a href="generate-application.htm"><b>generate-application</b></a> if a value is
supplied. The value must name a Lisp executable file (such
as <em>mlisp</em> on Unix or <em>mlisp.exe</em> on Windows -- those
are the defaults). It is used by <a href="build-lisp-image.htm"><b>build-lisp-image</b></a> to start the Lisp process
that builds the image. Unless <i>image-only</i> is true,
<a href="generate-application.htm"><b>generate-application</b></a> copies
a Lisp executable to the application directory. The executable
specified as the value of this argument is the one copied.
</li>
<li id="31">
<b><i>copy-shared-libraries</i></b>: if true, then copy
shared objects/libraries that have been loaded with the Common Lisp
function <a href="../../../ansicl/dictentr/load.htm"><b>load</b></a> by the time the
image is dumped. The value of this keyword argument can also be a
lambda expression (you cannot use the <b>function</b> special form,
the value must be a list), accepting one argument, that is a predicate
which determines if the loaded shared objects should be copied. The
one argument is the pathname of the shared object file (the original
pathname given to
<b>load</b>). The predicate should return <code>t</code>
if the shared object is to be copied, and <code>nil</code>
if it is to be ignored by shared-library copying process. The
predicate can also return a relative pathname, which will be used as
the name of the copied shared library relative to the
<i>destination-directory</i>.  <strong>Note</strong>:
shared libraries may be specified without a directory path and found
using Operating System tools (such as LD_LIBRARY_PATH or PATH), as
described in section <a href="../../foreign-functions.htm#load-foreign-code-2">Load foreign code with cl:load</a> in
the <a href="../../foreign-functions.htm">foreign-functions.htm</a> document. However, the
shared library copying functionality will not use Operating System
tools to find shared libraries. If a shared library is specified
without a directory path and is not in the current directory, it will
not be found.
<p id="32">
For shared objects that are copied, the image that is created will
load them from the destination directory upon startup. That is, in the
image built by <a href="generate-application.htm"><b>generate-application</b></a>, the name of the shared
libraries loaded on startup will be <em>sys:[name]</em>, for each
<em>[name]</em> copied by <a href="generate-application.htm"><b>generate-application</b></a>.
</p>
</li>
<li id="33">
<b><i>copy-file-function</i></b>: This function will be
used to copy files to the destination directory. The default value
is <a href="../system/copy-file.htm"><b>copy-file</b></a> and that
function is likely sufficient for most purposes.  However, another
function can be used if that is insufficient. This function will be
called by the image that calls generate-application (not the image
that builds the image).
</li>
<li id="34">
<b><i>debug</i></b>: more information will be printed
about progress as an aid to debugging.
</li>
<li id="35">
<b><i>demo</i></b>: You must be licensed
to produce demos (demonstration applications) to specify a
non-<code>nil</code> value for this argument. If you are
licensed, there is a maximum number of days that a demo will work
specified in your license. The value of this argument, if specified
and non-<code>nil</code>, should be an integer less than
or equal the maximum number of days that a demo is allowed to work.
The application license written to the application directory will then
be valid for that number of days. Contact your Franz Inc. Account
Manager (send email
to <a href="mailto:info@franz.com">info@franz.com</a> if you do not
know who your Account Manager is) for information on the demo license.
</li>
<li id="36">
<b><i>image-only</i></b>: just build for the image, and
possibly the <em>.pll</em> file.
</li>
<li id="37">
<b><i>lisp-files</i></b>: this <a href="build-lisp-image.htm"><b>build-lisp-image</b></a> keyword argument is ignored
by <a href="generate-application.htm"><b>generate-application</b></a>.
The list of files specified as the value of the required
<i>input-files</i> argument is used instead.
</li>
<li id="38">
<b><i>pure-files</i></b>: a list of <em>.cvs</em> and
<em>.str</em> files to be put into the application's <em>.pll</em>
file. See <a href="../../miscellaneous.htm#pll-file-1">Creating
and using pll files</a> in
<a href="../../miscellaneous.htm">miscellaneous.htm</a>.
</li>
<li id="39">
<b><i>purify</i></b>: do automatic purification of Lisp
and the application. This means all the strings and code vectors will
be put into a <em>.pll</em> file. If you choose this option, do not
also specify a value for <i>pure-files</i>.
</li>
<li id="40">
<b><i>runtime-bundle</i></b>: if
true (the default) a bundle file named <em>files.bu</em>
will be placed in the application directory. This file contains the
modules allowable in a runtime image. This means that such modules
need not be loading into the application image during the application
build.
</li>
<li id="41">
<b><i>include-locales</i></b>: if true (the
default) the
<i>copy-file-function</i> is used to copy the
<i>locales/</i> subdirectory and its contents of the
Allegro directory to the application directory being created. Note
that the size of the <i>locales/</i> subdirectory is about 2
Mbytes. You may wish to save space in your application by specifying a
<i>copy-file-function</i> that copies only the locales
that will actually be needed. See <a href="../../iacl.htm#retrieving-efs-3">Retrieving Existing External-Formats</a>
and <a href="../../iacl.htm#locales-in-apps-2">Locales in
applications</a> in
<a href="../../iacl.htm">iacl.htm</a>.
</li>

<li id="42">
<b><i>file-version-info</i></b> (Windows only): set
values of the application VERSIONINFO (the executable is the .exe file
copied to the application directory). The value, of this argument, if
specified, should be a list of keyword/string pairs, where the
keywords appear in the list returned by <a href="../windows/file-version-info.htm"><b>file-version-info</b></a> and the associated value
in that list is a cons. See <a href="../../delivery.htm#version-info-3">Setting the VERSIONINFO of the application
executable on Windows</a> in <a href="../../delivery.htm">delivery.htm</a>.
The following a an example of using this
argument:
<pre id="43">
  :file-version-info '(:company-name "Foo Inc"
                       :product-name "Foo Bar"
                       :legal-copyright "Copyright (C) 2009 Foo, Inc."
                       :product-version "1.0.0.0"))
</pre>
</li>

<li id="44">
<em><code>runtime</code></em>: the value defaults to
<code>:standard</code> and must be either
<code>:standard</code>, <code>:dynamic</code> or
<code>:partners</code>.  See <a href="../../runtime.htm">runtime.htm</a>.
</li>
<li id="45">
<em>build-lisp-image keyword args</em>: <a href="generate-application.htm"><b>generate-application</b></a> accepts and passes
through to <a href="build-lisp-image.htm"><b>build-lisp-image</b></a>
all of <b>build-lisp-image</b>'s keyword arguments except for
<code>:lisp-files</code>. The required
<i>input-files</i> argument is used to specify files to
be loaded. <code>:lisp-files</code>, even if specified, is ignored.
</li>
<li id="46">
<em>dumplisp ignore-command-line-arguments keyword arg</em>: <a href="generate-application.htm"><b>generate-application</b></a> accepts and
passes through to <a href="dumplisp.htm"><b>dumplisp</b></a>
the <i>ignore-command-line-arguments</i> keyword
argument. When true, the resulting image will ignore command-line
arguments prefixed by a dash (<code>-</code>). Command-line
arguments prefixed by a <code>+</code> (used on Windows only)
are never ignored. See <a href="../../startup.htm#command-line-args-1">Command line arguments</a> in
<a href="../../startup.htm">startup.htm</a> for details of command-line arguments.
</li>
</ul>

<p id="47">
The function <a href="generate-executable.htm"><b>generate-executable</b></a> is a wrapper for <a href="generate-application.htm"><b>generate-application</b></a>, producing an
application whose input is the command-line arguments.  It can be used
either as a quick way to create an application, or as an example of
using <a href="generate-application.htm"><b>generate-application</b></a>. The source for <a href="generate-executable.htm"><b>generate-executable</b></a> can be found in
the file <i>[allegro cl dir]/src/genexe.cl</i>.
</p>
<p id="48">
See 
<a href="../../delivery.htm">delivery.htm</a> for a complete description of this
function.
</p>



<hr><p id="49"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/generate-application.htm">8.1 version</a></td></tr></table></body></html>