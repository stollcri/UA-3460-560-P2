<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>make-pipe-stream</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/make-pipe-stream.htm">8.1 version</a></td></tr></table><h2 id="2">make-pipe-stream</h2>

<p id="3"><b>Arguments: </b><i>

</i></p>



<p id="4">
<a href="make-pipe-stream.htm"><b>make-pipe-stream</b></a> creates and
returns (as multiple values) a pair of bidirectional streams. For the
purpose of discussion we'll call the first stream <b>A</b> and the
second stream <b>B</b>. Data written to stream <b>A</b> will be
readable on stream <b>B</b>. Likewise, data written to stream <b>B</b>
will be readable on stream <b>A</b>. Contrast this with <a href="../../os-interface.htm#pipe-op-bookmarkxx"><b>pipe</b></a>
where one stream is specifically the input stream and one stream is
specifically the output stream.
</p>
<p id="5">
<b>Note</b>: When it is time to flush the buffer for the stream being
used as the output stream, the process flushing the output buffer will
block until the other end of the pipe is read by another
process. Example 1 below shows how a separate process should be used to
read the stream. Example 2 shows Lisp blocking if this is not done
correctly.
</p>
<p id="6">
Pipe streams are not particularly useful by themselves.  They are
provided as a building block for inter-process communication within the lisp.
</p>
<p id="7">
See also: <a href="make-function-input-stream.htm"><b>make-function-input-stream</b></a> (which uses pipe
streams), and <a href="with-function-input-stream.htm"><b>with-function-input-stream</b></a>.
</p>

<h3 id="8">
Example 1
</h3>


<pre id="9">
;;  We create the streams and then start a separate process to 
;;  read data written to one of the streams. 
cl-user(1): (multiple-value-setq (one two) (make-pipe-stream))
#&lt;pipe-stream  @ #x10963301&gt;

cl-user(2): (mp:process-run-function &quot;reader&quot;              
               (lambda (s) (format t &quot;Reader got: ~a~%&quot; (read-line s))) two)
#&lt;multiprocessing:process reader(3) @ #x109704a1&gt;
cl-user(3): (write-line &quot;hello there&quot; one)
&quot;hello there&quot;
cl-user(4): (finish-output one)
Reader got: hello there
nil
</pre>

<h3 id="10">
Example 2
</h3>

<pre id="11">
;;  In this example (which shows the WRONG thing to do), we create
;;  the pipe streams and start writing to one without arranging 
;;  for the material to be read. Lisp then hangs because it is
;;  waiting for the material to be read, but there is nothing to
;;  read it.
;;
;;  We include this example because (in our experience) this is 
;;  a common mistake made by programmers when they first use 
;;  MAKE-PIPE-STREAM. In Example 1 above, we do arrange for
;;  reading what is written to a pipe stream
;;
cl-user(1): (multiple-value-setq (one two) (make-pipe-stream))
#&lt;pipe-stream  @ #x10963301&gt;

cl-user(2): (write-line &quot;hello&quot; one)
&quot;hello&quot;

cl-user(3): (finish-output one)

;;  The Lisp will now block until the data is read from stream TWO.
;;  In this case it will block forever because there is no process 
;;  ready to read. Interrupt Lisp (typically with Control-C's on
;;  Unix, and with the Pause/Break or with the Console Window on
;;  Windows) to gain back control.
</pre>



<hr><p id="12"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/make-pipe-stream.htm">8.1 version</a></td></tr></table></body></html>