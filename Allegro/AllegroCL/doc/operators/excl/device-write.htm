<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>device-write</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/device-write.htm">8.1 version</a></td></tr></table><h2 id="2">device-write</h2>

<p id="3"><b>Arguments: </b><i>
stream buffer start end blocking
</i></p>

<p id="4">
<a href="device-write.htm"><b>device-write</b></a> is called to
transfer data to the device or to do a no-hang query on the device.
</p>
<h3 id="5">Data Transfer</h3>
<p id="6">
If <i>start</i> and <i>end</i> are not
<a href="../../../ansicl/dictentr/eql.htm"><b>eql</b></a>, then an attempt
is made to transfer data from the <i>buffer</i> (from
<i>start</i> to <i>end</i>) to the
device specified by <i>stream</i>.
</p>

<p id="7">
If <i>buffer</i> is <code>nil</code>, then
the appropriate buffer slot must be used as the buffer to write from.
Any manipulation of buffers, including replacement of the buffer slot
with a new one of the same size, can be done before returning.
</p>

<p id="8">
<em>buffer</em> (if not <code>nil</code>) must be a
specialized simple-array of one dimension. It can be of any size and
specialized element-type (its upgraded-element-type must not be
<code>t</code>). If the
element-type is not octet (8-bit byte, signed or unsigned) then the
endianness order of bits or bytes is that of the natural order of the
native machine. Thus, with an element-type of <code>(unsigned-byte
32)</code> on a little-endian machine, a write of the value
<code>#x12345678</code> will result in the byte stream
<code>#x78</code>, <code>#x56</code>,
<code>#x34</code>, <code>#x12</code>, whereas on a
big-endian machine the resulting byte stream will be
<code>#x12</code>, <code>#x34</code>,
<code>#x56</code>, <code>#x78</code>.
</p>

<p id="9">
Note that no checking is done to match byte-counts to
element-widths. It is up to the strategy-level programmer (see the end
of section <a href="../../streams.htm#ss-description-2">Simple-stream Description</a>) to ensure
that endianness is matched against the stream, and that data widths
are sent as expected.
</p>

<p id="10">
The output-handle slot of <i>stream</i> can either be an
operating-system file descriptor/handle, or another stream. If it is
another stream, then <strong>device-write</strong> performs the
equivalent of a write-vector on that stream, instead of getting the
data from the operating system. Arguments and return values are
adjusted to agree with the interfaces between 
<strong>device-write</strong> and
<strong>write-vector</strong>.
</p>

<p id="11">
The <em>blocking</em> argument allows asynchronous writes. If
<em>blocking</em> is true, then the write waits
until the first element of the buffer is written (or, if the scheduler
is running, the thread waits until output can be continued, allowing
other threads to continue meanwhile). Because <a href="device-write.htm"><b>device-write</b></a> is a B/NB (blocking/non-blocking)
function, when blocking <em>blocking</em> is true, the function blocks
on the first element only, and does not block thereafter. See <a href="../../streams.htm#block-non-block-3">Blocking behavior in
simple-streams</a> in <a href="../../streams.htm">streams.htm</a>.
</p>
<p id="12">
If <em>blocking</em> is <code>nil</code>, then the write transfers as much as it can
immediately.
</p>

<p id="13">
The number of octets (8-bit bytes) actually written is returned (so a
positive return value indicates success). Errors and other exceptional
situation are encoded as specified in the 'Return values' section
below.</p>


<h3 id="14">No-hand query</h3>
<p id="15">
If the <i>start</i> and <i>end</i>
arguments are eql and if <i>blocking</i> is nil, then
the caller is requesting a no-hang query on the device.  device-write
should return 0 if no data can be written, and a -3 if data could have
been written.
</p>

<h3 id="16">Return values</h3>
<ul>
<li id="17"><b>0:</b> No data could be written. It is likely that the stream 
has become clogged with data, and is rejecting further attempts 
to write.</li>
<li id="18"><b>-3:</b> Special return value for a no-hang query. 
-3 means data could have been written.</li>
<li id="19"><b>(- -10 errno):</b> the value of the error return from the 
system operation. For example, -19 represents an errno value of 9, 
which is EBADF (bad file number) on most systems.</li>
</ul>

<h3 id="20">Defined methods</h3>


<ul>
<li id="21">
On classes: <a href="../../classes/excl/single-channel-simple-stream.htm"><code>single-channel-simple-stream</code></a> and <a href="../../classes/excl/dual-channel-simple-stream.htm"><code>dual-channel-simple-stream</code></a>: for
both methods, after checking for null buffer, <a href="write-octets.htm"><b>write-octets</b></a> is called
directly and the resulting values returned.
</li>
<li id="22">
On classes: <a href="../../classes/excl/null-simple-stream.htm"><code>null-simple-stream</code></a>: nothing is called, and the
entire request <code>(- end start)</code> is returned.
</li>
<li id="23">
On classes: <a href="../../classes/excl/socket-base-simple-stream.htm"><code>socket-base-simple-stream</code></a>: 
chunking is supported.
</li>

</ul>

<p id="24">
Note that the supplied <a href="device-read.htm"><b>device-read</b></a> and <a href="device-write.htm"><b>device-write</b></a> functions do not generate errors
themselves, but pass them back to the higher level for
processing. This allows <a href="read-octets.htm"><b>read-octets</b></a> and <a href="write-octets.htm"><b>write-octets</b></a> to pass errors back as well, as
the implementation of a higher level (encapsulating) 
<a href="device-read.htm"><b>device-read</b></a> and <a href="device-write.htm"><b>device-write</b></a>.
</p>

<p id="25">
See <a href="../../streams.htm">streams.htm</a> for information on the
simple-streams implementation in Allegro CL. The older but still
supported Gray streams implementation is described in
<a href="../../gray-streams.htm">gray-streams.htm</a>.
</p>

<hr><p id="26"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/device-write.htm">8.1 version</a></td></tr></table></body></html>