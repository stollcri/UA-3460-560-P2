<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>write-vector</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/write-vector.htm">8.1 version</a></td></tr></table><h2 id="2">write-vector</h2>

<p id="3"><b>Arguments: </b><i>
sequence stream 
</i>&amp;key <i>start end endian-swap</i><i>
</i></p>



<p id="4">
For a Gray stream, a check is made that the given vector is either a
string or an octet vector (i.e. a simple-vector of (signed-byte 8) or
(unsigned-byte 8) elements), and the equivalent of
<strong>write-sequence</strong> is performed. Otherwise an error is
generated.
</p>
<h3 id="5">For a simple-stream:</h3>


<p id="6">
The value of <i>sequence</i> must normally be a vector,
but there are some exceptions. <i>sequence</i> can also
be an aligned-pointer (an integer), or a <a href="../../classes/ff/foreign-pointer.htm"><code>foreign-pointer</code></a> with an address component that
is word-aligned, but if it is either of these two kinds of addresses,
then a valid <i>end</i> value must be given; no attempt
will be made to figure out the length of the data at the
address. <i>sequence</i> can also be a single-float or a
double-float; see below
</p>

<p id="7">
This function starts by blocking until any unwritten buffer contents
are written out. Then if the vector is a string, then the equivalent
of <strong>write-string</strong> is performed.
</p>
<p id="8">
If the vector is not a string, then the equivalent of
<strong>write-byte</strong> is performed on each byte of the vector,
for as many octets as are specified for the vector. If each element
consists of more than one octet, then the processing is done in the
natural endianness of the machine
architecture. <i>start</i> and <i>end</i>
arguments can be used to modify the number of octets written, and are
specified as octet offsets into the vector (instead of numbers of
elements, as in <strong>write-sequence</strong>). If the
<i>end</i> argument is not specified, the length of the
vector adjusted by the element-width is used instead. Note that if the
vector is of an element-type that is smaller than an octet (8-bit
byte) then the adjustment includes an alignment to the next higher
octet boundary. Thus a bit vector of 10 bits will cause a transfer of
3 octets to occur.
</p>
<p id="9">
<a href="write-vector.htm"><b>write-vector</b></a> is a
B/NB (blocking/non-blocking) function, blocking until the first
element is written and not blocking thereafter. See <a href="../../streams.htm#block-non-block-3">Blocking behavior in
simple-streams</a> in <a href="../../streams.htm">streams.htm</a>.
</p>
<p id="10">
The number of octets actually written (and stored from the vector)
is added to the <i>start</i> argument
and that result returned. Thus, the return value is the index of
the next octet in
the vector that was not yet written. This interface more closely
resembles that of read-vector/read-sequence, rather than that of
<strong>write-sequence</strong>, which always returns the sequence
argument. The reason for this implementation is to allow for partial
and asynchronous writes.
</p>
<p id="11">
If the <i>sequence</i> argument is a single-float or
double-float (and thus not an actual vector), it is treated specially
and its bits are written as if the object were a vector of size one
with element-type single- or double-float (as appropriate). This is an
optimization to prevent consing when passing floats.
</p>
<p id="12">
The <em>endian-swap</em> keyword argument allows the user to treat I/O
with a consistent byte-ordering despite endian issues. See section
<a href="../../streams.htm#endian-swap-3">The endian-swap
keyword argument to read-vector and write-vector</a> in
<a href="../../streams.htm">streams.htm</a>.
</p>
<p id="13">
<strong>Note</strong>: <a href="write-vector.htm"><b>write-vector</b></a> is similar to <a href="../../../ansicl/dictentr/write-se.htm"><b>write-sequence</b></a>, but is
different fundamentally in the following ways:
</p>
<ol>
<li id="14">
<a href="write-vector.htm"><b>write-vector</b></a> operations on
non-strings are done on an octet basis, whereas <a href="../../../ansicl/dictentr/write-se.htm"><b>write-sequence</b></a> on non-strings is specified to
write (variably-sized) bytes on an element-by-element basis.  Thus,
there is a general unpacking that occurs in
<a href="write-vector.htm"><b>write-vector</b></a>.
</li>
<li id="15">
The name "-sequence" implies too much; it includes handling
of output from lists. <a href="write-vector.htm"><b>write-vector</b></a> writes vectors only for
efficiency.
</li>
<li id="16">
<a href="write-vector.htm"><b>write-vector</b></a> works on
simple-arrays of one dimension with an element-type other than <code>t</code> (these arrays contain data rather than pointers to
data); it may not work on non-simple arrays or on arrays of more than
one dimension.
</li>
</ol>

<p id="17"><strong>Note 2</strong>: the <strong>write-byte</strong> equivalent
functionality can be optimized in the following way: If the stream's
output buffer is not empty, it is written out with device-write. Then
device-write is called for <strong>write-vector</strong>'s vector
argument, passing through the start and end arguments. This
optimization only works if the vector is large and the length of the
portion of the vector to be written exceeds a buffer-size.  If the
transfer is to be small, then it is worth taking the extra time to
copy bytes into the stream's buffer, in order to avoid a <a href="device-write.htm"><b>device-write</b></a> call for every call to
<a href="write-vector.htm"><b>write-vector</b></a>.
</p>

<p id="18">
See also <a href="read-vector.htm"><b>read-vector</b></a>.
</p>


<p id="19">
See <a href="../../streams.htm">streams.htm</a> for information on the
simple-streams implementation in Allegro CL. 
</p>

<hr><p id="20"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/write-vector.htm">8.1 version</a></td></tr></table></body></html>