<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>with-native-string</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/with-native-string.htm">8.1 version</a></td></tr></table><h2 id="2">with-native-string</h2>

<p id="3"><b>Arguments: </b><i>(string-var string-exp </i>&amp;key  (<i>start</i> 0)<i> end native-length-var</i> (<i>external-format</i> :default)<i>)
</i> &amp;body <i> body</i></p>

<p id="4">
This macro provides an efficient, portable, and non-garbage (from
the lisp garbage collector's point of view) way of converting
lisp-strings to addresses acceptable for foreign functions expecting
native string arguments.</p>

<p id="5">The <i>string-exp</i> argument can specify an
expression returning a lisp string. If either
<i>start</i> or <i>end</i> is specified,
the substring bounded by the <i>start</i> and
<i>end</i> arguments is used.
</p>
<p id="6">
The <i>string-exp</i> argument may also specify an
expression returning a lisp vector of octet integers. In this case, no
external-format conversion occurs, but the subsequence bounded by the
<i>start</i> and <i>end</i> arguments
is copied into a dynamic-extent array and bound by
<i>string-var</i> as described below.
</p>
<p id="7">
If <i>string-exp</i> is a string, then conversion is
done using the specified <i>external-format</i>.  If
<i>external-format</i> is not specified (or,
equivalently, if the value of <i>external-format</i> is
<code>:default</code>, then the external format returned by the
following form is used:
</p>
<pre id="8">
(locale-external-format *locale*)
</pre>
<p id="9">
See <a href="locale-external-format.htm"><b>locale-external-format</b></a>
and <a href="../../variables/excl/s_locale_s.htm"><code>*locale*</code></a>.
</p>

<p id="10">
The forms of <i>body</i> are evaluated (an implicit
<a href="../../../ansicl/dictentr/progn.htm"><b>progn</b></a>) with the variable
<i>string-var</i> bound to the address of the
null-terminated converted string. If a variable is specified with
<i>native-length-var</i>, that variable will be bound to
the length in 8-bit bytes of the converted string. The
<i>native-length-var</i> variable's value does not
include the null-terminator byte(s). The <a href="ef-nulls.htm"><b>ef-nulls</b></a> function can be used to determine how
many null terminator bytes are being used.
</p>

<p id="11">
Note that the data assigned to <i>string-var</i> is
considered to have dynamic-extent. This means that the value of
<i>string-var</i> is not considered valid outside of the
forms specified in <i>body</i>.
</p>

<p id="12">
<strong>Note</strong>: For non-constant strings named by
<i>string-exp</i>, this macro internally uses static
(non-lisp heap) memory to hold the conversion buffer while the forms
in body are being evaluated. Thus, this macro is a convenient way of
ensuring string data passed to foreign functions will not be
asynchronously moved by lisp's garbage collector. For optimization
reasons, however, static storage is not necessarily used when
<i>string-exp</i> names a literal string.
</p>

<p id="13">
To force non-garbage-collected static storage to be used with
constant strings by this macro, use a non-constant string
expression. Example:
</p>

<pre id="14">
(let ((my-string "My String"))
  (with-native-string (my-converted-string my-string)
    ...))
</pre>

<p id="15">
The macro <a href="with-native-strings_s.htm"><b>with-native-strings*</b></a> allows allows nesting of
<a href="with-native-string.htm"><b>with-native-string</b></a>
calls.
</p>

<p id="16">
See also <a href="../../iacl.htm">iacl.htm</a> for general
information on international character set support in Allegro
CL and see
<a href="string-to-native.htm"><b>string-to-native</b></a>,
<a href="native-to-string.htm"><b>native-to-string</b></a>,
and <a href="../../foreign-functions.htm">foreign-functions.htm</a>
for information on foreign
functions.
</p>


<hr><p id="17"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/with-native-string.htm">8.1 version</a></td></tr></table></body></html>