<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>generate-executable</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/generate-executable.htm">8.1 version</a></td></tr></table><h2 id="2">generate-executable</h2>

<p id="3"><b>Arguments: </b><i>
name input-files </i> &amp;rest <i>rest</i><i>
</i></p>

<p id="4">
Please note that this function is only available in images licensed
for creating runtime images. All Enterprise and above customers are so
licensed.
</p>
<p id="5">
This function is a wrapper for <a href="generate-application.htm"><b>generate-application</b></a>, producing an application
directory containing an application executable/image and other
necessary files. 
</p>
<p id="6">
<i>name</i> should be a string naming the application.
A directory will be created with that name (with path merged with
*default-pathname-defaults*) for the application files (that directory
must not already exist). The image file and the executable will have
filename <i>name</i>.
</p>
<p id="7">
<i>input-files</i> should be a list of files to be
loaded into the application. <i>input-files</i>
corresponds to the <i>input-files</i> (third required)
argument to <a href="generate-application.htm"><b>generate-application</b></a>. Modules can be specified
with keywords which are suitable as arguments to require. (Thus,
placing <code>:sock</code> on the list causes the Socket module
<i>sock.fasl</i> to be loaded; placing
<code>:foreign-functions</code> on the list causes the Foreign
Functions module, <i>foreign-functions.fasl</i>, to be
loaded, and so on.)
</p>
<p id="8">
One of the <i>input-files</i> should define a function
named by the symbol <code>user::main</code>. This function
should accept any number of arguments (that is, its argument list
should be <code>(&rest rest)</code>) and initiate whatever
computation is to be done by the application.
</p>
<p id="9">
When the application starts up, all the command-line arguments
(including the executable name but not the -I or the image name) are
collected (as a list of strings) and <b>user::main</b> is called with
those strings as arguments, as with the form
</p>
<pre id="10">
(apply 'user::main [list of command-line argument strings])
</pre>
<p id="11">
The <i>rest</i> arguments should be keyword/value pairs
where the keyword names a keyword argument to <a href="generate-application.htm"><b>generate-application</b></a>. 
</p>
<p id="12">
<a href="generate-executable.htm"><b>generate-executable</b></a>
processes its arguments and calls <a href="generate-application.htm"><b>generate-application</b></a> with a bunch or keyword
arguments specified. See the source for the function in the file
<i>[allegro cl dir]/src/genexe.cl</i> for information on what
keyword arguments are specified and what values are given to them.
We discuss some keyword arguments in the notes below.
</p>
<h3 id="13">A note about modules</h3>
<p id="14">
Allegro CL images do not contain all modules by default. Instead,
modules (for functionality like foreign functions, contained in the
<code>:foreign-functions</code> module, and sockets, contained
in the <code>:sock</code> module) are loaded when needed. The
loading may be automatic (see <a href="../../implementation.htm#autoloading-1">Autoloading</a> in
<a href="../../implementation.htm">implementation.htm</a>) or may need an explict call to
<a href="../../../ansicl/dictentr/provider.htm"><b>require</b></a>. 
</p>
<p id="15">
But the important fact to consider when building an application is
that modules will not be available in an application unless the module
is loaded during the application build or the
<code>:runtime-bundle</code> keyword argument is specified
true in the call to <a href="generate-application.htm"><b>generate-application</b></a> and thus in the call to
<a href="generate-executable.htm"><b>generate-executable</b></a>.
</p>
<p id="16">
See <a href="../../delivery.htm#including-modules-2">Including
all desired modules</a> in <a href="../../delivery.htm">delivery.htm</a>.
Also, <a href="generate-executable.htm"><b>generate-executable</b></a>
generates a file <em>autoloads.out</em> which tells you what modules
might be autoloaded in your application (that is, which autoloadable
modules are associated with functions in your application) and you can
decide whether it is necessary to include the module.
</p>
<h3 id="17">Command-line arguments</h3>
<p id="18">
The <i>ignore-command-line-arguments</i> keyword
argument to <a href="generate-application.htm"><b>generate-application</b></a> is specified
true in the call to <a href="generate-executable.htm"><b>generate-executable</b></a> unless you specify
<code>:ignore-command-line-arguments nil</code> in the
<i>rest</i>. (<i>ignore-command-line-arguments</i>
is actually an argument to <a href="dumplisp.htm"><b>dumplisp</b></a>. <a href="generate-application.htm"><b>generate-application</b></a> accepts it (and all
<a href="dumplisp.htm"><b>dumplisp</b></a> arguments) and
simply passes it through.)
</p>
<p id="19">
The command-line arguments that are ignored are the ones prefaced by a
<code>-</code> (i.e., a dash) specified in <a href="../../startup.htm#command-line-args-1">Command line
arguments</a> in <a href="../../startup.htm">startup.htm</a>. Arguments
prefaced by a <code>+</code> (which are for Windows only) are
never ignored.  <b>Note</b>: if you specify
<code>:ignore-command-line-arguments nil</code>, then the
<code>-</code> prefaced command-line arguments specified to the
executable will not be passed to the <b>main</b> function as
described. Instead, your <b>main</b> function must access the
arguments itself using functions like <a href="../system/command-line-arguments.htm"><b>command-line-arguments</b></a>.
</p>
<h3 id="20">Calling generate-executable when the directory name exists</h3>

<p id="21">
<a href="generate-executable.htm"><b>generate-executable</b></a> passes
<code>nil</code> as the value of the
<i>allow-existing-directory</i> keyword argument to
<a href="generate-application.htm"><b>generate-application</b></a>. This
means if <a href="generate-executable.htm"><b>generate-executable</b></a>
is called with <i>name</i> naming a directory that
exists (as would happen, for example, if <a href="generate-executable.htm"><b>generate-executable</b></a> is called twice with the
same <i>name</i> without removing the application
directory between the calls), a continuable error will be signaled
because the directory exists. One restart instructs the system to
remove the directory and continue. Aborting and removing or renaming
the directory and changing the <i>name</i> so it does
not name an existing directory are other options.
</p>

<h3 id="22">Example</h3>
<p id="23">
Here is an example using <a href="generate-executable.htm"><b>generate-executable</b></a>:
</p>
<pre id="24">
;; If foo.cl contains:

(in-package :user)

(defun main (&rest args)
  (format t "args: ~s~%" args)
  (force output)
  ;; we sleep for a bit so the args can be seen when
  ;; a window which disappears is used.
  (sleep 5)
  (format t "slept 5 seconds.~%")
  (when (string= "foo" (second args))
    (error "foo!")))

;; and then the application can be built with this:

cl-user(7): :cf foo.cl
;;; Compiling file foo.cl
;;; Writing fasl file foo.fasl
;;; Fasl write complete
cl-user(8): (generate-executable "foo" '("foo.fasl"))
;;; Compiling file /net/killer/tmp/fooa52fe1e.cl
;;; Writing fasl file /net/killer/tmp/fooa52fe1e.fasl
;;; Fasl write complete
Initial generation spread = 1
Allocated 10492920 bytes for old space
Allocated 5242880 bytes for new space
...
cl-user(9): 

;; Example run:

% foo/foo 1 2 3
args: ("foo/foo" "1" "2" "3")
% echo $status
0
% foo/foo foo 1 2 3
args: ("foo/foo" "foo" "1" "2" "3")
foo!
% echo $status
1
% 
</pre>
<p id="25">
See <a href="generate-application.htm"><b>generate-application</b></a>,
<a href="../../building-images.htm">building-images.htm</a> and
<a href="../../delivery.htm">delivery.htm</a>.
</p>

<hr><p id="26"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/generate-executable.htm">8.1 version</a></td></tr></table></body></html>