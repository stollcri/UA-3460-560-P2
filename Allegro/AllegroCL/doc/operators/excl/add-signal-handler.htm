<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>add-signal-handler</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/add-signal-handler.htm">8.1 version</a></td></tr></table><h2 id="2">add-signal-handler</h2>

<p id="3"><b>Arguments: </b><i>number function</i></p>

<p id="4">
<i>function</i> is added as a signal handler for
signal <i>number</i>.
</p>

<p id="5">The handling of operating system dependent signals generated during
program execution is not part of Common Lisp. A signal is a small
integer. The list of valid signals is given in a system dependent
file, usually on UNIX something like <em>/usr/include/signals.h</em>.
Signals are either synchronous or asynchronous, but there is no
distinction made in this interface--the handling of both types of
signals is the same. Such signals are attached at the unix level to
foreign functions <b>gotsig</b> and <b>syncsig1</b>, respectively, if they are
normally handled by the Lisp, via the UNIX <b>signal()</b> function.  Other
signals are not so attached, and will either perform some default
UNIX action, or some action unrelated to Lisp operation.
</p>
<p id="6">
Users adding code to handle UNIX signals should use the foreign
function <b>lisp_signal()</b> rather than
<b>signal()</b>. <b>lisp_signal()</b> (supplied by Franz), which does
the right and safe thing with signals. Note <b>lisp_signal()</b> is
used in the example below. (Some earlier versions of this
documentation had a call to <b>signal()</b> in that example. On many
platforms, it does not make a difference but on some it does.)
</p>
<p id="7">
At the Lisp level, a handler for a signal is a function of two
arguments, signal number and t. If there is no handler for a
particular signal, then some default action is invoked, which is
usually to signal an error. Signal handlers should return a
true value if they handle the signal, so that
other, nested handlers are not invoked to handle the signal. A signal
that is posted during a gc is processed immediately after the gc
finishes.
</p>
<p id="8">
Be warned that once a programmer starts dealing with the signal
interface at the operating system level, the effects might be far
reaching and unintended. Please consider contacting Franz
Inc. Technical Support before proceeding to do so. Further, such
low-level modifications to signal handling could be non-portable
across UNIX platforms, could break existing usages of signals by
Allegro CL and thus affect its operation, or it could break existing
usages of other systems running along with Allegro CL.
</p>

<p id="9">Here is an example of adding a signal handler from a UNIX
machine:</p>

<pre id="10">
user(16): (defun foo (signal &amp;optional ignore)
	   (format t &quot;~&amp;; got signal ~d~%&quot; signal)
	   t)
foo
user(17): (add-signal-handler 2 'foo)
((2 . foo) (14 . mp::sigalrm-handler))
user(18):        &lt;&lt;&lt;&lt; Control-C was typed here at this prompt
; got signal 2
user(18):
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Now, we show how a signal that has not yet been attached at the UNIX
;; level to either gotsig or syncsig1 can be so attached, so that
;; add-signal-handler will have an effect at the lisp level.  It is the
;; programmer's responsibiluty to take care that the signal number is
;; not already attached to some conflicting Unix signal handling function.
;; Although the foreign function interface is used, no foreign
;; files need to be loaded.
;;  Define a function SETUP-FOR-NEW-SIGNAL
user(1): (let ((gotsig-address
		(ff:get-entry-point (ff:convert-to-lang &quot;gotsig&quot;))))
	   (unless gotsig-address
	     (error &quot;couldn't find address of gotsig&quot;))
	   (ff:def-foreign-call (unix-signal &quot;lisp_signal&quot;) 
                                (signal old-handler))
	   (defun setup-for-new-signal (number)
	     (unix-signal number gotsig-address)))
setup-for-new-signal
;;  Define a constant holding our new signal number.
user(2): (defconstant *additional-signal* 30
	   &quot;This is the signal number of the signal we want to catch.&quot;)
*additional-signal*
;;  The lisp function that handles the signal
user(3): (defun additional-signal-handler (signal &amp;optional ignore)
	   (format t &quot;additional-signal-handler: ~s~%&quot; signal)
	   (finish-output)
	   t)
additional-signal-handler
;;  Now we generate a test signal
user(4): (ff:def-foreign-call getpid (:void))
t
user(5): (ff:def-foreign-call kill (pid signal))
t
;;  Tell the system about the new signal
user(6): (setup-for-new-signal *additional-signal*)
0
;;  Send the signal, and notice that the debugger handles it
user(7): (kill (getpid) 30)
Error: Received signal number 30 (user defined signal 1)
  [condition type: simple-break]
Restart actions (select using :continue):
 0: continue computation
[1c] user(8): :pop
;;  Have our handler added...
user(9): (add-signal-handler *additional-signal* 'additional-signal-handler)
((30 . additional-signal-handler) (14 . mp::sigalrm-handler))
;;  ...and try it again
user(10): (kill (getpid) 30)
additional-signal-handler: 30          ;; &lt;&lt;&lt; our function handles it
0
user(11):

</pre>

<p id="11">
See <a href="with-signal-handler.htm"><b>with-signal-handler</b></a>,
<a href="set-signal-handler.htm"><b>set-signal-handler</b></a>, 
<a href="../../variables/excl/s_signals_s.htm"><code>*signals*</code></a>, and 
<a href="remove-signal-handler.htm"><b>remove-signal-handler</b></a>
</p>


<hr><p id="12"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/add-signal-handler.htm">8.1 version</a></td></tr></table></body></html>