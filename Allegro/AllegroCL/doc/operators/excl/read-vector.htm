<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>read-vector</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/read-vector.htm">8.1 version</a></td></tr></table><h2 id="2">read-vector</h2>

<p id="3"><b>Arguments: </b><i>
sequence stream 
</i>&amp;key <i>start end endian-swap</i><i>
</i></p>

<h3 id="4">
Return value:
</h3>

<p id="5">
The number of octets actually read is added to the value of the
<i>start</i> argument and that result returned. Thus,
the return value is the index of the next octet in the vector (the
value of <i>sequence</i>) that was not yet replaced.
</p>
<h3 id="6">For a Gray stream:</h3>
<p id="7">
For a Gray stream, a check is made that the given vector (the value of
<i>sequence</i>) is either a string or an octet vector
(i.e. a simple-vector of (signed-byte 8) or (unsigned-byte 8)
elements), and the equivalent of <strong>read-sequence</strong> is
performed. Otherwise an error is generated.
</p>
<h3 id="8">For a simple-stream:</h3>



<p id="9">
The value of <i>sequence</i> must normally be a vector,
but there are some exceptions. <i>sequence</i> can also
be an aligned-pointer (an integer), or a <a href="../../classes/ff/foreign-pointer.htm"><code>foreign-pointer</code></a> with an address component that
is word-aligned, but if it is either of these two kinds of addresses,
then a valid <i>end</i> value must be given; no attempt
will be made to figure out the length of the data at the address.
</p>

<p id="10">
If the vector is a string, the equivalent of <a href="../../../ansicl/dictentr/read-cha.htm"><b>read-char</b></a> is performed on the stream and the
result is stored into the first character of the portion of the
sequence bounded by the <i>start</i> and
<i>end</i> arguments. The equivalent of <a href="../../../ansicl/dictentr/read-ch0.htm"><b>read-char-no-hang</b></a> is performed for
each character thereafter. Following the last-read-character, the
unread-char length is set (instead of at every character read). See <a href="#block-note">below</a> for the blocking behavior of this
function and the behavior when an EOF is encountered.
</p>
<p id="11">
If the vector is not a string, the equivalent of <a href="../../../ansicl/dictentr/read-byt.htm"><b>read-byte</b></a> is performed on the stream and the
result is stored into the first byte of the portion of the sequence
bounded by the <i>start</i> and <i>end</i>
arguments. The equivalent of <b>excl::read-byte-no-hang</b> (a
internal function alanlogous to <a href="../../../ansicl/dictentr/read-ch0.htm"><b>read-char-no-hang</b></a>) is performed for each byte
thereafter, for as many octets as are specified for the vector. If
each element of the vector consists of more than one octet, then the
processing is done in the natural endianness of the machine
architecture. On big endian machines octets read will be stored in the
most significant through least significant octets of the values in the
array. The reverse is true on little endian machines. See <a href="#block-note">below</a> for the blocking behavior of this
function and the behavior when an EOF is encountered.
</p>

<p id="12">
The <i>start</i> and <i>end</i> arguments
can be used to modify the number of octets to be read, and are
specified as octet offsets into the vector (instead of numbers of
elements, as in <a href="../../../ansicl/dictentr/read-seq.htm"><b>read-sequence</b></a>). If the <i>end</i>
argument is not specified, the length of the vector adjusted by the
element-width is used instead. Note that if the vector is of an
element-type that is smaller than an octet (8-bit byte) then the
adjustment includes an alignment to the next higher octet
boundary. Thus a bit vector of 20 bits will cause a transfer of 3
octets to occur.
</p>
<p id="13">
The number of octets actually read (and stored into the vector) is
added to the <i>start</i> argument and that result
returned. Thus, the return value is the index of the next octet in the
vector that was not yet replaced.
</p>
<h4 id="14">
<a name="block-note">Note on blocking and EOF behavior</a>
</h4>
<p id="15">
<a href="read-vector.htm"><b>read-vector</b></a> is a
B/NB (blocking/non-blocking) function, blocking until the first
element is read and not blocking thereafter. See <a href="../../streams.htm#block-non-block-3">Blocking behavior in
simple-streams</a> in <a href="../../streams.htm">streams.htm</a>.
</p>
<p id="16">
This function does not error if an EOF is encountered. It simply
returns the number of octets actually read (and stored into the
vector) added to the value <i>start</i> argument. That
value contains the relevant information (how much was read) and can be
analyzed if necessary to determine what occurred. For example
</p>
<pre id="17">
(read-vector vec stream)
</pre>
<p id="18">
returns 0 if an EOF is encountered immediately. Because at least one
object is read if there is anything to read, a return value of 0 can
only mean an EOF was encountered before an object was read.
</p>
<p id="19">
If a value for <i>start</i> is specified and an EOF is
encountered immediately, that value is returned (because the return
value is the number of octets actually read -- 0 when an EOF is
encountered immediately added to the value <i>start</i>
argument). This, again assuming trying to read from
<code>stream</code> will result in an immediate EOF,
</p>
<pre id="20">
(read-vector vec stream :start 4)
</pre>
<p id="21">
returns 4.
</p>
<h4 id="22">
The endian-swap argument
</h4>
<p id="23">
The <em>endian-swap</em> keyword argument allows the user to treat I/O
with a consistent byte-ordering despite endian issues. It defaults to
0. See section <a href="../../streams.htm#endian-swap-3">The
endian-swap keyword argument to read-vector and write-vector</a>
in <a href="../../streams.htm">streams.htm</a>.
</p>
<h4 id="24">
read-vector and cl:read-sequence
</h4>
<p id="25">
Note that <a href="read-vector.htm"><b>read-vector</b></a> is similar to
<a href="../../../ansicl/dictentr/read-seq.htm"><b>read-sequence</b></a>, but is
different fundamentally in the following ways:
</p>

<ul>
<li id="26">
<a href="read-vector.htm"><b>read-vector</b></a> operations on
non-strings are done on an octet basis, whereas <a href="../../../ansicl/dictentr/read-seq.htm"><b>read-sequence</b></a> on non-strings is specified to
read (variably-sized) bytes on an element-by-element basis. Thus,
there is a general packing that occurs in <a href="read-vector.htm"><b>read-vector</b></a> into any size vector.  Also, the
<em>start</em> and <em>end</em> keyword arguments and the return value
are always in terms of octets, except for string simple-streams, where
they are in terms of characters.
</li>
<li id="27">
The <em>-sequence</em> (in the name of the function <a href="../../../ansicl/dictentr/read-seq.htm"><b>read-sequence</b></a>) implies too much for efficient
implementation since it includes handling of input into lists. <a href="read-vector.htm"><b>read-vector</b></a> reads into vectors for
efficiency.
</li>
<li id="28">
<a href="read-vector.htm"><b>read-vector</b></a> works on
specialized simple-arrays of one dimension. (A specialized array, of
course, is an array whose element type is a proper subtype of <code>t</code>. See <a href="../../implementation.htm#data-types-1">Data types</a> in
<a href="../../implementation.htm">implementation.htm</a> for a list of specialized arrays
in Allegro CL.)
<p id="29">
<a href="read-vector.htm"><b>read-vector</b></a> is not supported
for non-specialized arrays, non-simple arrays, or arrays of more than
one dimension.
</p>
</li>
</ul>
<p id="30">
See also <a href="write-vector.htm"><b>write-vector</b></a>.
</p>
<p id="31">
See <a href="../../streams.htm">streams.htm</a> for information on the
simple-streams implementation in Allegro CL. 
</p>

<hr><p id="32"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/read-vector.htm">8.1 version</a></td></tr></table></body></html>