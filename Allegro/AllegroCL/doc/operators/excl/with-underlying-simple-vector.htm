<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>with-underlying-simple-vector</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/with-underlying-simple-vector.htm">8.1 version</a></td></tr></table><h2 id="2">with-underlying-simple-vector</h2>

<p id="3"><b>Arguments: </b><i>
(array simple-vector-var
</i> &amp;optional <i>displacement-var length-var explicit-end allow-nil</i><i>)
</i> &amp;body <i>body</i><i>
</i></p>


<p id="4">
This macro returns the last values of the implict <a href="../../../ansicl/dictentr/progn.htm"><b>progn</b></a> of the <i>body</i>
of the macro.
</p>
<h2 id="5">
simple-vector-var and array arguments
</h2>
<p id="6">
Within the body of this macro, the
<b><i>simple-vector-var</i></b>, which must be a symbol,
is a lexical variable given the value of the array's most primitive
data vector, which will always be a simple-array of 1 dimension and
the same element type as the array.
</p>
<p id="7">
The <b><i>array</i></b> must be an array of any kind; it
may itself be a simple-array, and it can be of any dimensionality.
</p>
<h2 id="8">
displacement-var argument
</h2>
<p id="9">
If <b><i>displacement-var</i></b> is supplied, it must
be a symbol, and it is lexically bound to the total displacement of
the array onto its underlying data.  If an array is displaced to
another array which is also displaced, then the displacements are
added together; the <i>displacement-var</i> will contain
the sum of the displacements.
</p>
<h2 id="10">
length-var and explicit-end arguments
</h2>
<p id="11">
If <b><i>length-var</i></b> is supplied it must be a
symbol, and it is lexically bound to the sum of the total displacement
of the array onto its underlying data and one of the following values:
</p>
<ul>
<li id="12">
If <i>explicit-end</i> is supplied and
non-<code>nil</code>, the value
of <i>explicit-end</i>, or

</li>
<li id="13">

If <i>array</i> is a vector, the length of the vector
(as would be returned by a call to <a href="../../../ansicl/dictentr/length.htm"><b>length</b></a>), or

</li>
<li id="14">

If <i>array</i> is multidimensional, the first (most
significant) dimension of the array.

</li>
</ul>
<p id="15">
<b><i>explicit-end</i></b> supplies one of the values
used in the computation of <i>length-var</i>, which
overrides the macro's concept of the upper boundary of the array.
This value is not checked against any real storage; care must be given
when providing <i>explicit-end</i> that it does not
overreach the bounds of the <i>simple-vector-var</i>.
</p>

<h2 id="16">
More on displacement-var, length-var, and explicit-end arguments when
array is a vector
</h2>
<p id="17">
If <i>array</i> is a
vector, <i>displacement-var</i>, <i>length-var</i>,
and <i>explicit-end</i> can be summarized as follows:
</p>
<blockquote>
<p id="18">
<i>displacement-var</i>
and <i>length-var</i> are the real bounding index
designators of <i>simple-vector-var</i> which correspond
to the virtual bounding index designators 0
and <i>explicit-end</i> (which defaults to the length of
array) of <i>array</i>.
</p>
</blockquote>

<h2 id="19">
allow-nil argument
</h2>
<p id="20">
If <b><i>allow-nil</i></b> is supplied and non-<code>nil</code>, and if the <i>array</i> is
<code>nil</code> then no initialization is done for the
<i>displacememt-var</i>, if supplied, and the
<i>length-var</i>, if supplied, gets the value <a href="../../../ansicl/dictentr/most-pos.htm"><code>most-positive-fixnum</code></a>.
The body code is still responsible for testing the
<i>simple-vector-var</i> value for nil, but at least the
<a href="with-underlying-simple-vector.htm"><b>with-underlying-simple-vector</b></a> macro will not
complain about a supplied array value of <code>nil</code>,
if <i>allow-nil</i> is true.
</p>
<p id="21">
Declarations for the variables can be made immediately following the argument
list, and will be transferred to the final expanded form.
</p>
<h4 id="22">
Example
</h4>
<pre id="23">
<b>The following code:</b>

(deftype adim () '(mod #.array-dimension-limit))

(defun simple-write-string (string stream &amp;optional (start 0) end)
  (declare (type adim start)
	   (optimize speed))
  (excl::with-underlying-simple-vector (string str disp len end t)
    (declare (type adim disp)
	     (type (simple-array character 1) str))
    (when string
      (do* ((i (+ start disp) (1+ i)))
	  ((&gt;= i len))
	(declare (type adim i))
	(write-char (aref str i) stream))))
  string)

<b>Results in the following output:</b>

cl-user(2): <b>(setq sstring "hello")</b>
"hello"
cl-user(3): <b>(setq string (make-array 3
                                     :element-type 'character
                                     :displaced-to sstring
                                     :displaced-index-offset 2))</b>
"llo"
cl-user(4): <b>(simple-write-string nil *standard-output*)</b>
nil
cl-user(5): <b>(simple-write-string sstring *standard-output*)</b>
hello
"hello"
cl-user(6): <b>(simple-write-string string *standard-output*)</b>
llo
"llo"
cl-user(7): 
</pre>
<hr><p id="24"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/with-underlying-simple-vector.htm">8.1 version</a></td></tr></table></body></html>