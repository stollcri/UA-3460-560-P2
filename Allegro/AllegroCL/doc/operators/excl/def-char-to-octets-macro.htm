<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>def-char-to-octets-macro</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/def-char-to-octets-macro.htm">8.1 version</a></td></tr></table><h2 id="2">def-char-to-octets-macro</h2>

<p id="3"><b>Arguments: </b><i>
name arglist </i> &amp;body <i>body</i><i>
</i></p>

<p id="4">
<i>name</i> should be a symbol.
<i>arglist</i> should be a macro lambda list with two
required arguments and two specified keyword arguments
<code>:put-next-octet</code>, and
<code>:external-format</code>. (You may choose your own names
for the required arguments, of course. The
<i>arglist</i> argument is present mostly to make this
macro similar in form to <a href="../../../ansicl/dictentr/defmacro.htm"><b>defmacro</b></a>.)  <i>body</i> should be
a list of forms.
</p>
<p id="5">
This macro is just like <a href="../../../ansicl/dictentr/defmacro.htm"><b>defmacro</b></a> except that <i>name</i>
names an external-format, and the actual macro name (a gensym) for the
macro being defined is stored in the external-format's
chars-to-octets-macro slot. Also, if no external-format with name 
<i>name</i>
exists, then a new external-format with name name is created.
</p>
<p id="6">
The macro being defined must accept two required arguments, which we
will call <i>char</i>, and <i>state-loc</i>
(but you can, of course, call anything) and two keyword arguments which
must be called <i>put-next-octet</i> and
<i>external-format</i>. (The
<i>external-format</i> argument is only used if
<i>name</i> names an external-format that is a wrapper
(ie, a composing external-format)).
</p>
<p id="7">
When the macro actually being defined is called, the
<i>char</i> will be a character to convert, and the
<i>state-loc</i> will be a setf-able locative (similar
to the first argument to <a href="../../../ansicl/dictentr/setfpset.htm"><b>setf</b></a>)
that can be used by the convertor to hold state information.
</p>
<p id="8">
The <i>put-next-octet</i> argument to the macro being
defined is a single-argument expression that is invoked in the macro's
expansion at the point or points where the translation procedure
requests that the next translated external-element (eg, octet) be
output.
</p>
<p id="9">
If the <i>external-format</i> named by
<i>name</i> is a composing external-format, then the
<i>external-format</i> argument to the macro being
defined is the name of the external-format being wrapped.
</p>
<h3 id="10">
Examples:
</h3>
<pre id="11">
;; Defines a chars -&gt; octets procedure for latin1 characters.
;;
(def-char-to-octets-macro :latin1-base (char
                                        state-loc
                                        &amp;key put-next-octet external-format)
  (declare (ignore external-format state-loc))
  (let ((code-var (gensym))
        (char-var (gensym)))
    `(let ((,char-var ,char))
       (let ((,code-var (char-int ,char-var)))
         (,put-next-octet ,code-var)))))


;; Defines a chars -&gt; octets procedure for utf-8 characters.
;;
(def-char-to-octets-macro :utf8-base (char
                                      state
                                      &amp;key put-next-octet external-format)
  (declare (ignore external-format state))
  (let ((code-var (gensym)))
    `(let ((,code-var (char-code ,char)))
       (if* (&lt; ,code-var #x7f)
          thenret ;; ascii
        elseif (&lt; ,code-var #x7ff)
          then (,put-next-octet (logior #xc0 (ash ,code-var -6)))
               (setq ,code-var (logior #x80 (logand ,code-var #x3f)))
          else (,put-next-octet (logior #xe0 (ash ,code-var -12)))
               (,put-next-octet (logior #x80 (logand (ash ,code-var -6)
                                                     #x3f)))
               (setq ,code-var (logior #x80 (logand ,code-var #x3f))))
       (,put-next-octet ,code-var))))


;; Defines a composing external format that splits up #\newline into
;; #\return #\linefeed.
;;
(def-char-to-octets-macro :crlf (char
                                 state
                                 &amp;key put-next-octet external-format)
  (declare (ignorable state))
  (let ((char-var (gensym)))
    `(let ((,char-var ,char))
       (when (eq #\newline ,char-var)
         (char-to-octets ,external-format #\return ,state
                         :put-next-octet ,put-next-octet)
         (setq ,char-var #\linefeed))
       (char-to-octets ,external-format ,char-var ,state
                       :put-next-octet ,put-next-octet))))

;; The following uses the above defined wrapper external-format to
;; create a latin1 convertor with #\newline mapped to octets for
;; ASCII Carriage-Return and Linefeed.
;;
;; Note: Using (compose-external-formats :crlf :latin1-base) achieves as one
;; of its side-effects the same effect as evaluating the following:
;;
(def-char-to-octets-macro :crlf-latin1-base (char state
                                             &amp;key put-next-octet
                                                  external-format)
  (declare (ignore external-format))
  `(char-to-octets :crlf ,char ,state
                   :put-next-octet ,put-next-octet
                   :external-format :latin1-base))
</pre>
<p id="12">
See also <a href="char-to-octets.htm"><b>char-to-octets</b></a>.
</p>

<p id="13">
See <a href="../../iacl.htm">iacl.htm</a> for more information on international
character support in Allegro CL.
</p>

<hr><p id="14"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/def-char-to-octets-macro.htm">8.1 version</a></td></tr></table></body></html>