<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>normalize-type</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/normalize-type.htm">8.1 version</a></td></tr></table><h2 id="2">normalize-type</h2>

<p id="3"><b>Arguments: </b><i>
type </i>&amp;key <i>loud msg default environment</i><i> 
</i></p>

<p id="4">
Returns the normalized form of <i>type</i>, which should
be a type specifier.  If <i>environment</i> is provided,
then it is consulted for possible type information.
</p>
<p id="5">
Types are normalized by attempting to find the simplest type
specification which fully describes all types of similar
specification. Sometimes this means that the normalization is itself
simpler, but sometimes it results in a slightly larger specification.
So, for example, when <i>type</i> is given
<code>fixnum</code>, it returns the same thing that evaluating
<code>`(integer ,most-negative-fixnum
,most-positive-fixnum)</code> would return.  Another example is a
combination of <code>(or fixnum bignum)</code>. When given that
form as an argument, <a href="normalize-type.htm"><b>normalize-type</b></a> returns <code>(integer *
*)</code>, because fixnums and bignums are an exhaustive subset of
the type <code>integer</code>.
</p>
<p id="6">
Arrays are normalized into their <code>(&lt;array&gt; &lt;etype&gt;
&lt;dim&gt;)</code> form, where &lt;array&gt; might be
<code>array</code>, <code>simple-array</code>, or
e<code>xcl:short-simple-array</code>, and &lt;etype&gt; is the
upgraded array element-type, and &lt;dim&gt; forms the dimensions
specifications. If the rank of the array type is unknown, * will be
used, otherwise a parenthesized form is always given, with * used in
individual dimensions that are unkown.
</p>
<p id="7">
Thus, <code>(normalize-type '(vector float))</code> returns the
type <code>(array (float * *) (*))</code> and
<code>(normalize-type '(simple-bit-vector 10))</code> returns
<code>(simple-array (integer 0 1) (10))</code>.
</p>
<p id="8">
If the <i>type</i> argument does not represent a type at
the time of the call, the actions of <a href="normalize-type.htm"><b>normalize-type</b></a> are thus:
</p>
<ul>
<li id="9">
With no values specified for <i>loud</i> or
<i>default</i>, <code>t</code> is returned.
</li>
<li id="10">
If value is specified for <i>default</i>, it
is returned.
</li>
<li id="11">
If <i>loud</i> is non-<code>nil</code>, then
it must be a function-spec or a function object which will be <a href="../../../ansicl/dictentr/funcall.htm"><b>funcall</b></a>ed in the following
way:
<pre id="12">
(funcall loud msg type)
</pre>
<p id="13">
and if this function returns, then <a href="normalize-type.htm"><b>normalize-type</b></a> will return the default.  This
allows several styles to be employed, and the most common style is for
<i>msg</i> to be a format string which accepts one
argument, and <i>loud</i> can either be <a href="../../../ansicl/dictentr/warn.htm"><b>warn</b></a>, <a href="../../../ansicl/dictentr/error0.htm"><b>error</b></a>, or <a href="../../../ansicl/dictentr/cerror.htm"><b>cerror</b></a>, though in fact
<i>loud</i> and <i>msg</i> can be used in
other ways, as well.
</p>
</li>
</ul>
<p id="14">
If the <i>type</i> argument is a malformed or impossible
type, then <i>loud</i> is called (as described above) if
specified and the result is returned, and if <i>loud</i>
is not specified, <code>nil</code> is returned.
</p>
<p id="15">
The <i>msg</i> argument is used only as the first
argument to the function which is the value of
<i>loud</i>.
</p>
<p id="16">
Type specifications returned by <a href="normalize-type.htm"><b>normalize-type</b></a> should be considered immutable,
and thus should not be destructively modified.
</p>

<h3 id="17">
Examples
</h3>

<p id="18">
We make a distinction above between a `malformed or impossible'
<i>type</i>, where <code>nil</code> is
returned (absent values specified for <i>default</i>
and/or <i>loud</i>) and a value for
<i>type</i> that `does not represent a type at the time
of the call'. The following examples should make this distinction
clear.
</p>

<pre id="19">
;;  Consider the following type specifications and assume they are
;;  passed as the TYPE argument:

'foo

;;  If foo hasn't been defined yet, it is an invalid type (though it
;;  might become valid at some other time).  NORMALIZE-TYPE returns T, 
;;  or calls the LOUD function.

'(array foo)

;;  If foo isn't defined, then it is not known whether it will eventually
;;  represent a T or some specialized element-type - in this case
;;  NORMALIZE-TYPE recursively calls itself with a default of '*.  Back
;;  at the other call, if LOUD is specified, it is called, otherwise
;;  (ARRAY * *) is returned.

'(array foo bar bas)

;;  This can never be a type, because it is malformed.  Either LOUD is
;;  called or NIL is returned.

'(and fixnum bignum)

;; This one might seem like an impossible type, but it is not.
;; Since there are no values that are both a fixnum and a bignum, 
;; the result type is NIL, which means the empty type, and 
;; LOUD is never called even if specified.

'(mod -2)

;; This is an impossible type The MOD value must be positive).
;; Either LOUD is called, or NIL is returned.
</pre>

<hr><p id="20"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/normalize-type.htm">8.1 version</a></td></tr></table></body></html>