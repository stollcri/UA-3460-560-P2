<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>read-line-into</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: excl</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/read-line-into.htm">8.1 version</a></td></tr></table><h2 id="2">read-line-into</h2>

<p id="3"><b>Arguments: </b><i>
string </i> &amp;optional <i>stream</i> (<i>eof-error-p</i> t)<i>eof-value</i><i>
</i>&amp;key  (<i>start</i> 0)<i> end</i><i>
</i></p>

<p id="4">
This function is a faster variant of <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a> designed to place characters, read
from a stream, into an existing string. It differs from <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a> in (1) using an existing
string rather than creating a new one, (2) reading only as many
characters from a line as are needed, rather than reading a whole
line, and (3) not returning the string where the characters are
placed. Instead, filling the string is a side effect and two
information values are returned:
</p>
<ol>
<li id="5">
<b>The number of characters read and stored</b>, (not including a
newline if read). If an eof is encountered without reading any
characters and <i>eof-error-p</i> was <code>nil</code>, then <i>eof-value</i> is returned
instead. An error is signaled if an eof is encountered immediately and
<i>eof-error-p</i> is non-<code>nil</code>
(its default is <code>t</code>). If any characters are
read (including a newline character), no error will be signaled and
this first returned value will be an integer.
</li>
<li id="6">
<b>A flag indication the reason reading was stopped</b>. The value
<b><code>nil</code></b> indicates a newline was
encountered (as with <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a>, reading will not continue after a
newline and the newline character will not be added to
<i>string</i>). The value <b><code>:eof</code></b>
means an end of file was encountered. The value
<b><code>:short</code></b> means that character reading was
stopped because the end of the string (the actual end or the end
specified by the <i>end</i> keyword argument) was
reached.
<p id="7">
<b>Unexpected :short instead of nil</b>. When the number of characters
in a line is exactly the numbers of characters specified by
<i>start</i> and <i>end</i>, this second
return value will be <code>:short</code> instead of <code>nil</code>. Characters are read until the portion of the
string specified by <i>start</i> and
<i>end</i> is filled. The character after the one read
which fills the substring is not read. If it is a newline, then in
fact the whole line will be copied into string (just as if
<i>end</i> was unspecified and the string was larger)
but the system will not know that to be the case. If further reading
is done when the next unread character is a newline, no characters
will be read and 0 and <code>nil</code> will be the
return values.
</p>
</li>
</ol>

<p id="8">
A traditional way to fill a string with characters from a file is to
read a line from the file with <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a> and copy characters from the string
read into the target string. But that process is costly in time and
space, as new strings must be allocated by <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a>, and characters are copied twice (from
the stream to the new string and from the new string to the target
string). This function is optimized for the specific purpose of
copying characters from a stream into an existing string.
</p>
<p id="9">
The characters are read from <i>stream</i> and placed
into <i>string</i>, beginning at the position specified
by <i>start</i>.  Characters are continually read until
</p>
<ol>
<li id="10">
The <i>end</i> argument is satisfied (the value <code>nil</code> for <i>end</i> is the same as
specifying <code>(length </code><code><i>string</i></code><code>)</code>).
</li>
<li id="11">
A newline is encountered (as with <a href="../../../ansicl/dictentr/read-lin.htm"><b>cl:read-line</b></a>, it is not added to the string).
</li>
<li id="12">
An eof is encountered.
</li>
</ol>

<p id="13">
If the <code>:short</code> situation occurs (i.e. the end
argument is satisfied without having encountered a newline) then
further processing can be done in subsequent calls without loss of
data.  It should therefore be possible if desired to implement <a href="../../../ansicl/dictentr/read-lin.htm"><b>cl:read-line</b></a> using <a href="read-line-into.htm"><b>excl:read-line-into</b></a>.
</p>
<h3 id="14">
Arguments
</h3>
<ul>
<li id="15">
<b><i>string</i></b> may be simple or non-simple, but
must be a string.
</li>
<li id="16">
<b><i>stream</i></b> is a stream designator.
</li>
<li id="17">
<b><i>start</i></b> must be a positive integer less than
the length of <i>string</i>. It specifies the first
character of <i>string</i> to be replaced with a
character read from <i>stream</i>. It defaults to 0
</li>
<li id="18">
<b><i>end</i></b> is the index one beyond where the last
character can be stored. End defaults to <code>nil</code>,
which is the same as specifying <code>(length string)</code>.
</li>
<li id="19">
If <b><i>eof-error-p</i></b> is non-<code>nil</code> (the default) and an eof occurs before any
characters have been read, an end-of-file error is signalled.  As with
<a href="../../../ansicl/dictentr/read-lin.htm"><b>cl:read-line</b></a>,
<i>eof-error-p</i> has no effect on an eof encountered
<b><i>after</i></b> there have been characters read (even if
insufficent characters have been read to fill the target string).
</li>
<li id="20">
If <i>eof-error-p</i> is <code>nil</code>
and an eof is encountered before any characters are read,
<b><i>eof-value</i></b> is returned (and
<code>:eof</code> is returned as the second value).
</li>
</ul>

<p id="21">
The motivation for this function is to provide <a href="../../../ansicl/dictentr/read-lin.htm"><b>read-line</b></a> functionality without an open-ended
consing of result strings, and to allow for more control over
line-oriented input.
</p>
<h3 id="22">
Examples
</h3>
<p id="23">
Assume <i>file</i> is a stream open to a file with
contents shown (there are no space characters, the blank line has just
a newline character, and the last line ends with an eof, not a
newline):
</p>
<pre id="24">
first line
second line

fourth line
last line
</pre>
<p id="25">
Calls to <a href="read-line-into.htm"><b>excl:read-line-into</b></a>
have the following results:
</p>
<pre id="26">
;;  Edit to have FILE be a stream open to the file specified above:
;;  (setq file (open &quot;myfile.cl&quot; :direction :input)

(setq string1 &quot;0123456789&quot; string2 &quot;0123456789012345&quot; 
      string3 &quot;012345678901234567890&quot;)
(read-line-into string1 file) -&gt; 10 :short
string1 -&gt; &quot;first line&quot;
(read-line-into string2 file) -&gt; 0 nil
string2 -&gt; &quot;0123456789&quot;   ;; no characters read beause 
                          ;; a newline was encountered at once
(read-line-into string2 file nil :eof-at-once :start 0 :end 5) 
   -&gt; 5 :short
string2 -&gt; &quot;secon56789012345&quot;
(read-line-into string2 file nil :eof-at-once :start 5) -&gt; 6 nil
string2 -&gt; &quot;second line12345&quot;
(read-line-into string2 file nil :eof-at-once :start 10) -&gt; 0 nil
string2 -&gt; &quot;second line12345&quot;  ;; read blank line, no characters added
(read-line-into string3 file nil :eof-at-once :start 3) -&gt; 11 nil
string3 -&gt; &quot;012fourth line4567890&quot;
(read-line-into string3 file) -&gt; 9 :eof
   ;;  If there is a newline at the end of the last line
   ;;  (sometimes editors insert them without being asked to)
   ;;  then this will return '9 nil' instead of '9 :eof'
string3 -&gt; &quot;last line line4567890&quot;
(read-line-into string3 file nil :eof-at-once) -&gt; :eof-at-once :eof
string3 -&gt; &quot;last line line4567890&quot;
(read-line-into string3 file) -&gt; ERROR ;; eof-error-p is T
</pre>

<p id="27">
See also <a href="simple-stream-read-line.htm"><b>simple-stream-read-line</b></a>. That function is less
space efficient than this one, but has a simpler interface.
</p>



<hr><p id="28"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/excl/read-line-into.htm">8.1 version</a></td></tr></table></body></html>