<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>event-loop</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/e/event-loop.htm">8.1 version</a></td></tr></table><h2 id="2">event-loop</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>window exit-test</i><i>
</i></p>

<p id="4">
Enters a loop that processes all messages that are sent to any windows
that are created in the thread that is calling <a href="../e/event-loop.htm"><b>event-loop</b></a>. When an application
creates a new thread that will create windows, the preset-function
that is passed to <a href="../../mp/process-run-function.htm"><b>process-run-function</b></a> should call
<a href="../e/event-loop.htm"><b>event-loop</b></a> before
it exits, both to cause that thread's messages to be handled and also
to prevent the thread from exiting until it should. The arguments
determine when <a href="../e/event-loop.htm"><b>event-loop</b></a> will return, which then
allows the thread to exit.
</p>
<p id="5">
<i>window</i> may be <code>nil</code> or a
window. If a window, then <a href="../e/event-loop.htm"><b>event-loop</b></a> will check that the
window is still open after processing each message, and return when
the window has been closed. Typically a "main window" for the thread
is passed to event-loop.
</p>
<p id="6">
<i>exit-test</i> may be <code>nil</code> or
a function name or function object. If non-nil, then <a href="../e/event-loop.htm"><b>event-loop</b></a> will call the exit-test
function once after it has processed each message, and return if the
function returns true. For efficient
event-handling, an exit-test if used should execute quickly. The
function should take one argument, which is the value of the
<i>window</i> argument to <a href="../e/event-loop.htm"><b>event-loop</b></a>. An exit-test may be
used along with a null window argument (in which case the argument to
the exit-test function will be nil), but it is probably most often
useful to pass a main-window as well when an exit-test is used.
</p>
<p id="7">
<b>Note</b>: It is not necessary to call <a href="../e/event-loop.htm"><b>event-loop</b></a> when using the project
system to create an application with a single windowing thread,
because it is called automatically for the thread created by the
<a href="../../../ide-menus-and-dialogs/run-menu.htm#run-project">Run |
Run Project</a> command in the IDE and by the corresponding
initial thread of the generated standalone application (as long as the
project's <a href="../../ide/on-initialization.htm"><b>on-initialization</b></a>
function returns a window).  It is also not necessary to call
event-loop when creating windows by evaluating forms in IDE listeners
or editors, since the threads used for evaluation by these IDE windows
are already in event-handling loops.
</p>
<p id="8">
<a href="../e/event-loop.htm"><b>event-loop</b></a>
basically calls <a href="../p/process-single-event.htm"><b>process-single-event</b></a> in a loop
until an exit requirement is met. So if <a href="../e/event-loop.htm"><b>event-loop</b></a> does not meet an
application's needs, it may work to use a custom loop that calls
<a href="../p/process-single-event.htm"><b>process-single-event</b></a> itself. But
<a href="../e/event-loop.htm"><b>event-loop</b></a>
performs some additional internal management and is recommended over
custom <a href="../p/process-single-event.htm"><b>process-single-event</b></a> loops. In
particular, <a href="../e/event-loop.htm"><b>event-loop</b></a> ensures that multiple
threads that call it will all exit cleanly when lisp exits; otherwise
multiple windowing threads may hang on exit unless the :no-unwind
argument is passed to <a href="../../excl/exit.htm"><b>exit</b></a>. In a standalone application that does
its own event handling (rather than returning a window from its
<a href="../../ide/on-initialization.htm"><b>on-initialization</b></a> function),
calling <a href="../e/event-loop.htm"><b>event-loop</b></a> also
ensures that the <b>Enable Debugging of Runtime Errors</b> option
behaves as documented (see the <a href="../../../ide-menus-and-dialogs/project-manager-dialog-build.htm">Build</a> tab of the <a href="../../../ide-menus-and-dialogs/project-manager-dialog.htm">Project
Manager</a>).
</p>
<p id="9">
See also <a href="../../../cgide.htm#cg-multithreading-1">About
using multiple windowing threads in a Common Graphics
application</a> in <a href="../../../cgide.htm">cgide.htm</a>. And see <a href="../i/inside-event-loop.htm"><b>inside-event-loop</b></a> and
<a href="../e/exit-event-loop.htm"><b>exit-event-loop</b></a>.
</p>

<p id="10">
The new (in release 7.0) function <a href="../i/initialize-cg.htm"><b>initialize-cg</b></a> allows using Common
Graphics in a Lisp that does not include the IDE, or in a standalone
application that was not created from an IDE project.  Also new are
<a href="../e/exit-cg.htm"><b>exit-cg</b></a> and
<a href="../../../variables/cg/s_cg-is-initialized_s.htm"><code>*cg-is-initialized*</code></a>.
</p>
<p id="11">
The macro <a href="../i/in-cg-process.htm"><b>in-cg-process</b></a> may be used to handle
the creation of a Common Graphics process and the call to <a href="../e/event-loop.htm"><b>event-loop</b></a> for a body of
Common Graphics code.
</p>


<p id="12">
See also the variable <a href="../../../variables/cg/s_event-loop-processes_s.htm"><code>*event-loop-processes*</code></a>.
</p>



<hr><p id="13"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/e/event-loop.htm">8.1 version</a></td></tr></table></body></html>