<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>graph-layout</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">This page is new in 8.2.</a></small></td></tr></table><h2 id="2">graph-layout</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>nodes links selected-node</i> (<i>selected-node-steps</i> 8)<i> fixed-nodes links-reader node1-reader node2-reader center-x-reader center-y-reader width-reader height-reader center-writer linear-links-reader redisplay-function cancel-function animate redisplay-at-end pause canvas</i> (<i>canvas-left</i> 0) (<i>canvas-top</i> 0) (<i>canvas-right</i> 1000) (<i>canvas-bottom</i> 1000)<i> extended-canvas-left extended-canvas-top extended-canvas-right extended-canvas-bottom</i> (<i>canvas-center-x</i> (floor (+ canvas-left canvas-right) 2)) (<i>canvas-center-y</i> (floor (+ canvas-top canvas-bottom) 2)) (<i>min-node-to-node-spacing</i> 12) (<i>min-link-to-node-spacing</i> 12) (<i>max-iterations</i> 200) (<i>work-from-current-layout</i> t) (<i>spacing-increment-for-many-links</i> 15) (<i>long-path-spacing-increment</i> 15) (<i>long-path-max-spacing</i> 60) (<i>num-links-before-extra-spacing</i> 2) (<i>iterations-for-extra-spacing</i> 12) (<i>limit-outward-stretching</i> t) (<i>protect-tail-node-positions</i> t) (<i>consider-alternate-spots-by-linked-nodes</i> :after-crossed-links) (<i>number-of-alternate-positions</i> 3)<i> consider-additional-leaf-positions ignore-crossed-tails exclude-tail-nodes-from-home-positions compress-layout-at-end center-the-graph</i><i>
</i></p>

<p id="4">
This function performs a graph layout by determining the positions to
which a set of arbitrary user nodes (or vertices) should be moved to
make the graph relatively readable when drawn in some way. It does not
draw anything, but simply specifies where to move nodes. The drawing
(rendering) aspect could be done with the Common Graphics
nodes-and-links facility (see <a href="../../../classes/cg/node-pane-mixin.htm"><code>node-pane-mixin</code></a>) or with some other rendering
tool, either in Common Graphics or not.
</p>
<p id="5">
The layout algorithm specializes in cyclic graphs, where it is
non-trivial to arrange the nodes.  It attempts to arrange the nodes so
that nodes are near their neighbor nodes, but without any link lines
(edges) passing through nodes to which they aren't connected.
(Straight link lines between the centers of nodes are assumed.)  It
arrives at a solution incrementally by repeatedly moving individual
nodes to better niches.
</p>
<p id="6">
The algorithm will also lay out simple trees, though for trees it
would usually be better to use a different layout algorithm that
arranges things in a more regular directional pattern. This function
would likely fit more of a tree into a given area, though in a less
regular arrangement than a dedicated tree grapher.
</p>
<p id="7">
This function can work with any sort of user data, as long as there is
an object for each node (or vertex) and each link (or edge).  This
works by passing in accessor functions that return the current
position and size of an arbitrary node object, or the list of links
for a node or the two nodes for a link.  One other access function
that you pass in will be called repeatedly by this function to store a
new position for a node.  When this function returns, the calling
application can then read the node positions that this access function
stored somewhere, and then draw the graph in some way.
</p>
<p id="8">
<b>Three values are returned</b>: (1) <code>t</code> or
<code>nil</code> indicating whether the layout succeeded
(see just below), (2) the number of iterations that were done, and
(3) <code>t</code> or <code>nil</code>
indicating whether the user canceled.
</p>
<p id="9">
The term <i>succeeded</i> means
<i>reached a state where no further improvement could be made by moving
a single node</i>.
</p>
<p id="10">
There is an example in the <a href="../../../ide-menus-and-dialogs/navigator-dialog.htm">Navigator Dialog</a> that illustrates
using this function along with the nodes-and-links facility for
rendering.  The example is called <b>Custom Graphical Objects: A Nodes
and Links Editor</b>.
</p>
<p id="11">
See also the utility functions <a href="../g/graph-boundaries.htm"><b>graph-boundaries</b></a> (which calculates a rectangle
holding all nodes), <a href="../c/center-all-nodes.htm"><b>center-all-nodes</b></a> (which repositions nodes),
and <a href="../o/other-node.htm"><b>other-node</b></a> which returns
the node connected to a specified node by a link.
</p>

<h3 id="12">
Arguments
</h3>
<p id="13">
The many arguments to this function are grouped into four
categories: <a href="#main-arg">Main</a>, 
<a href="#accessor-function-arg">Accessor
Function</a>, <a href="#miscellaneous-arg">Miscellaneous</a>,
and <a href="#option-arg">Option</a>. 
</p>

<h3 id="14">
<a name="main-arg">Main Arguments</a>
</h3>

<ul>
<li id="15">
<b><i>nodes</i></b> is a list of some sort of node
objects. It can be <code>nil</code> if a list
of <i>links</i> is provided, in which case the accessor
functions that you provide will find the list of all nodes from the
links. Otherwise it should be a list to which the accessor functions
can be applied to return information about the nodes, and to which the
<i>center-writer</i> function can be applied to update a
node's current position.
</li>
<li id="16">
<b><i>links</i></b> is a list of some sort of link
objects. It can be <code>nil</code> if a list
of <i>nodes</i> is provided, in which case the accessor
functions that you provide will find the list of all links from the
nodes. Otherwise it should be a list to which the accessor functions
can be applied to return information about the links.
</li>
<li id="17">
<b><i>selected-node</i></b> may
be <code>nil</code> if no node is to be treated as the
special selected node. Otherwise it should be one of the nodes in the
graph. This node will have a fixed position during the layout if
<i>selected-node-steps</i>
is <code>nil</code>, or else will be moved gradually
during the layout to the center of the primary canvas.
</li>
<li id="18">
<b><i>selected-node-steps</i></b> is the number of
iterations that will be used to move
the <i>selected-node</i> (if any) to the center of the
canvas; if <code>nil</code>, then
the <i>selected-node</i> (if any) will stay fixed at its
current position.
</li>
<li id="19">
<b><i>fixed-nodes</i></b> is a list of some subset of
the nodes list. These nodes will not be moved at all during the
layout. The other nodes will arrange themselves around the fixed
nodes. This can be useful when changing the set of nodes that are
displayed, to keep some or all of the existing nodes in the same place
and arranging newer nodes around them, to retain context.
</li>
</ul>

<h3 id="20">
<a name="accessor-function-arg">Accessor Function Arguments</a>
</h3>

<ul>
<li id="21">  
<b><i>links-reader</i></b> should be a function that
accepts a node as a single argument and returns a list of that node's
links.
</li>
<li id="22">
<b><i>node1-reader</i></b> should be a function that
accepts a link as a single argument and returns the first of the
link's two nodes. This is generally the "subject" of a relation or
the "from" node of some sort.
</li>
<li id="23">
<b><i>node2-reader</i></b> should be a function that
accepts a link as a single argument and returns the second of the
link's two nodes.
</li>
<li id="24">
<b><i>center-x-reader</i></b> should be a function that
accepts a node as a single argument and returns an integer that
indicates the current horizontal position of the center of the node.
</li>
<li id="25">
<b><i>center-y-reader</i></b> should be a function that
accepts a node as a single argument and returns an integer that
indicates the current vertical position of the center of the node.
</li>
<li id="26">
<b><i>width-reader</i></b> should be a function that
accepts a node as a single argument and returns an integer that
indicates the current width of the node.
</li>
<li id="27">
<b><i>height-reader</i></b> should be a function that
accepts a node as a single argument and returns an integer that
indicates the current height of the node.
</li>
<li id="28">
<b><i>center-writer</i></b> should be a function that
accepts three arguments, namely a node, a center-x integer, and a
center-y integer.  It should update the current position of the node
so that the center-x-reader and center-y-reader functions will return
the x and y values when they are subsequently called on the node.
</li>
<li id="29">
<b><i>linear-links-reader</i></b> should
be <code>nil</code> if all link lines are allowed to point
in any direction. Otherwise it should be a function that accepts a
single argument, which will be one of the link objects that are passed
in the list for the links argument. The function should
return <code>nil</code> for a particular link if that link
is allowed to point in any direction. Otherwise it should return one
of the keyword
symbols <code>:upward</code>, <code>:downward</code>,
<code>:leftward</code>, or <code>:rightward</code> to
indicate the direction that the link should point. The
value <code>:upward</code>, for example, will force the node2 of
the link to be at least somewhat higher than the node1 of the link in
the layout.  So <code>:upward</code> really means "more upward
than downward" and the link line could, for example, point East by
Northeast.
</li>
<li id="30">
<b><i>redisplay-function</i></b> should be a function
that accepts a single argument for some sort of canvas on which the
layout will be drawn.  Typically the argument is a window, and the
function will simply invalidate the window so that it will redraw
itself.  It is then up to the window's usual redisplay function to
examine the set of nodes and links and to redraw everything according
to the node positions that have been established through calls to the
center-writer function.
</li>
</ul>

<h3 id="31">
<a name="miscellaneous-arg">Miscellaneous Arguments</a>
</h3>

<ul>
<li id="32">  
<b><i>animate</i></b> indicates whether the
redisplay-function function is called multiple times to draw the
layout as it is incrementally
updated. If <code>nil</code>, the redisplay-function
function is called only once at the end of the
layout. If <code>:node</code>, then the redisplay-function
function is called each time a node has moved. If any other true
value, then the redisplay-function function is called once each time
the entire set of nodes have had their positions updated. This last
option is generally the better style of animation.
</li>
<li id="33">
<b><i>redisplay-at-end</i></b> indicates whether the
redisplay-function is called after the layout has finished. This is
probably useful only when animate is <code>nil</code>, in
which case it could be used when another call to <a href="../g/graph-layout.htm"><b>graph-layout</b></a> is about to be made (typically with
different options), to suppress all redisplay until the final call to
<a href="../g/graph-layout.htm"><b>graph-layout</b></a>.
</li>
<li id="34">
<b><i>pause</i></b> indicates whether to pause each time
the redisplay-function function is called. It may
be <code>nil</code> for no pause, or a positive number
indicating the number of seconds to pause. This simply
calls <a href="../../../../ansicl/dictentr/sleep.htm"><b>sleep</b></a>.
</li>
<li id="35">
<b><i>canvas</i></b> should be some sort of object on
which the layout will be drawn, such as a window. This object will
simply be passed to the redisplay-function function and
cancel-function whenever they are called.
</li>
<li id="36">
<b><i>canvas-left</i></b>, 
<b><i>canvas-top</i></b>,
<b><i>canvas-right</i></b>,
and <b><i>canvas-bottom</i></b> should be integers that
indicate the extent of the primary canvas into which graph-layout will
attempt to fit everything. The units should be the same as those used
by the accessor functions such as the center-x-reader and the
center-writer.  These are typically the extents of the currently
visible part of a window, measured in pixels.
</li>
<li id="37">
<b><i>extended-canvas-left</i></b>, 
<b><i>extended-canvas-top</i></b>,
<b><i>extended-canvas-right</i></b>, and
<b><i>extended-canvas-bottom</i></b> may either
be <code>nil</code> to force everthing to fit onto the
primary canvas, or else integers to indicate the extent of a larger
canvas into which nodes will be moved when they cannot be fit
acceptably on the primary canvas. The values should encompass the
primary canvas extents.  These are typically the extents of the entire
canvas that can be scrolled into a window, measured in pixels. This
appears to be useful when the extended canvas is somewhat larger than
the primary canvas, but not when it is a lot larger. Therefore, if
the needed canvas size is a lot larger than the available visible area
of a window, it's probably best to pass ONLY a primary canvas range
and make it be the size that's needed for the entire graph that can
scrolled into a window.
</li>
<li id="38">
<b><i>canvas-center-x</i></b>
and <b><i>canvas-center-y</i></b> are integers that
indicate the position that will be regarded as the logical center of
the primary canvas, for such operations as moving the selected node to
the center.  When unspecified, they default to the actual center of
the primary canvas.
</li>
<li id="39">
<b><i>min-node-to-node-spacing</i></b> is an integer
indicating the minimum distance that will be maintained (when
feasible) between nodes.  When upspecified, it defaults to 12.
</li>
<li id="40">
<b><i>min-link-to-node-spacing</i></b> is an integer
indicating the minimum distance that will be maintained between any
link and any node to which it is not connected.  When unspecified, it
defaults to 12.
</li>
<li id="41">
<b><i>max-iterations</i></b> is the maximum number of
times that all nodes will be potentially moved to better locations.
Typically graph-layout will reach a stable state and return within a
couple of dozen iterations. If <i>max-iterations</i> is
reached before a stable state is reached, then <a href="../g/graph-layout.htm"><b>graph-layout</b></a> will stop iterating prematurely,
though the current state that it leaves might still be usable. If
explicitly passed as <code>nil</code>, it will default to
50.
</li>
</ul>
  
<h3 id="42">
<a name="option-arg">Option Arguments</a>
</h3>

<ul>
<li id="43">
<b><i>work-from-current-layout</i></b> indicates whether
to begin moving nodes incrementally from their current positions,
rather than beginning with all nodes in the center of the canvas.
True is useful for moving from one state to another interactively in
such a way that user may be able to follow nodes of interest to their
new locations.  <code>nil</code> typically creates a
cleaner layout, though, by removing any bias in the nodes' current
positions before beginning.
</li>
<li id="44">
<b><i>spacing-increment-for-many-links</i></b> is an
integer indicating how much space to reserve from the center of a node
for each link that it has beyond four links.  Other nodes and links
will avoid overlapping this extra space.  This prevents another node
from sitting close to a highly-linked node and blocking a large arc of
angles from which other link lines could emanate.
</li>
<li id="45">
<b><i>long-path-spacing-increment</i></b> indicates how
much additional space should be required between nodes when the
shortest path between the two nodes is relatively long.  This helps to
keep separate branches farther apart so that it's easier to tell that
they are distinct groups of nodes.  It may also decrease the amount of
tangling of unrelated branches of nodes.  This feature may slow down
the layout a little and makes it use up somewhat more space, but
usually results in a cleaner layout.
If <i>long-path-spacing-increment</i>
is <code>nil</code> or zero, then nothing is done.
Otherwise the specified value will be added to the required distance
between a node and another node or link for each link in the shortest
path between the two objects beyond the first
<i>num-links-before-extra-spacing</i> links.  For
example, if <i>num-links-before-extra-spacing</i> is 4,
<i>long-path-spacing-increment</i> is 15, and the
shortest path between two nodes is 7 links long,
then <a href="../g/graph-layout.htm"><b>graph-layout</b></a> will
add <code>(* 15 (- 7 4))</code> = 45 pixels to the usual
<i>min-node-to-node-spacing</i> value to determine how
far apart it will try to keep those two nodes.
</li>
<li id="46">
<b><i>num-links-before-extra-spacing</i></b> is the
number of links in the shortest path between two nodes (or a node and
a link) before the <i>long-path-spacing-increment</i>
will be added for each additionl link, when
<i>long-path-spacing-increment</i> is a positive number.
</li>
<li id="47">
<b><i>long-path-max-spacing</i></b> is the maximum
additional pixel distance that will be required between two nodes
whose connecting path is long. This is used only when
<i>long-path-spacing-increment</i> is a positive
integer.  If <i>long-path-max-spacing</i>
is <code>nil</code>, then no maximum is used.
</li>
<li id="48">
<b><i>iterations-for-extra-spacing</i></b> is the number
of iterations at the beginning of a full layout (when
<i>work-from-current-layout</i>
is <code>nil</code>) during
which <i>long-path-max-spacing</i> will be set to a
higher number than the argument that was passed. The first iteration
will set that parameter to a much larger value, and the increase will
be reduced on successive iterations until it is the argument value
after <i>iterations-for-extra-spacing</i> iterations.
If this argument is <code>nil</code> or zero then
<i>long-path-max-spacing</i> is not increased.  A
positive value here may get the layout off to a better start by
initially keeping distantly-linked nodes farther from each other than
they would otherwise be.  This can result in fewer crossed branches of
nodes.
</li>
<li id="49">
<b><i>limit-outward-stretching,</i></b> when true, will
avoid moving nodes toward the edges of the canvas as much, to prevent
stretching out the graph a lot more than necessary.
</li>
<li id="50">
<b><i>consider-alternate-spots-by-linked-nodes</i></b>
indicates whether to consider alternate positions than the usual ones
that extend from the linked nodes of a node that is being moved, on
some iterations.  When true, this may result in a better final layout,
but may take longer or be less smooth for an interactive update.  The
special value <code>:after-crossed-links</code>, which considers
alternate positions for a node only after an iteration where no spot
was found for the node without crossed links, might be a good general
compromise. It is the default.
</li>
<li id="51">
<b><i>number-of-alternate-positions</i></b> is the
number of extra positions to each side of a linked node to consider,
when <i>consider-alternate-spots-by-linked-nodes</i> is
true.
</li>
<li id="52">
<b><i>consider-additional-leaf-positions</i></b> will
look for places to move leaf nodes that extend orthoganally from each
of the nodes that are linked with the single node to which the leaf
node is linked; this takes longer but may result in a better graph.
</li>
<li id="53">
<b><i>protect-tail-node-positions</i></b> indicates
whether nodes in a tail are allowed to maintain their current
positions like any other node, rather than being moved to make room
for more highly-connected nodes.  True is better for interactive
layouts, to reach a final state sooner,
though <code>nil</code> may result in a better final
graph.
</li>
<li id="54">
<b><i>ignore-crossed-tails</i></b> indicates whether to
do nothing special about tail nodes whose links cross other links,
perhaps needlessly, rather than making a special effort to uncross
them.  True is faster for interactive graphs, but it does not appear
to take much time, so perhaps <code>nil</code> is always
best for this argument.
</li>
<li id="55">
<b><i>exclude-tail-nodes-from-home-positions</i></b>
might make a difference in the layout by not considering linked nodes
that are in tails when calculating the ideal position to which to move
a node.
</li>
<li id="56">
<b><i>compress-layout-at-end</i></b> indicates whether
to pull some nodes in closer to the center of the graph after the
layout has reached its otherwise final state.  The layout tends to
spread nodes throughout the available space on the primary canvas, as
part of the algorithm for a good layout, and doesn't know when it is
about to reach a stable state.  Passing this argument as true executes
an unrelated algorithm at the end to compress the nodes somewhat,
though some arrangements of nodes toward the outside will not be
pulled in at all.  This option is purely a matter of preference.
</li>
<li id="57">
<b><i>center-the-graph,</i></b> if true, causes the
entire graph (the block that encompasses all nodes) to be moved to the
center of the canvas at the end of the layout.  If the value is
<code>:after-each-iteration</code>, then it is also centered
after each iteration; this may improve the layout by maximizing the
minimum amount of margin that's available on any side of the graph
during the layout, but may make an animated layout jerk back and
forth.
</li>
</ul>


<hr><p id="58"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page is new in the  8.2 release.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">This page is new in 8.2.</a></small></td></tr></table></body></html>