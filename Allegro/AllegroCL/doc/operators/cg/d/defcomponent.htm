<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>defcomponent</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/d/defcomponent.htm">8.1 version</a></td></tr></table><h2 id="2">defcomponent</h2>

<p id="3"><b>Arguments: </b><i>
class-name superclass-names
            slot-specifiers 
</i> &amp;rest <i>class-options</i><i>
</i></p>

<p id="4">
7.0 release note: the option called <code>:editor-mode</code> in
earlier releases is now called <code>:editor-type</code>.
</p>

<p id="5">
Defines a class that has properties, so as to effectively combine a
<a href="../../../../ansicl/dictentr/defclass.htm"><b>defclass</b></a>
expression with an associated <a href="../d/defproperties.htm"><b>defproperties</b></a> expression. <a href="../d/defcomponent.htm"><b>defcomponent</b></a> is similar
to <a href="../../../../ansicl/dictentr/defclass.htm"><b>defclass</b></a>, except that a
:properties option may be specified as follows:
</p>
<pre id="6">
(defcomponent thing
  ((color ...)
   (size ...))
  (:default-initargs
   :color red
   :size 4)
  (:documentation "A silly class")
  (:properties
   (color
    :help-string "Color of the thing."
    :type rgb-or-nil
    :editor-type :color)
   (size
    :help-string "How big the thing is."
    :type positive-integer)
   ))
</pre>
<p id="7">
More examples are on the <a href="../d/defproperties.htm"><b>defproperties</b></a> page.
</p>
<p id="8">
The format of the properties option is similar to <a href="../d/defproperties.htm"><b>defproperties</b></a> except that the
symbol <code>define-property</code> is not needed at the
beginning of the list for each property.
</p>
<p id="9">
A property may define any of the following property facets, listed
here with the initarg that is used to specify each:
</p>
<ul>
<li id="10">
<code>:reader</code>: the name of a function for reading the
property value. Defaults to the property name. (Always naming the
property the same as the reader function is recommended.)
</li>
<li id="11">
<code>:writer</code>: the name of a function for writing the
property value. Defaults to the <a href="../../../../ansicl/dictentr/setfpset.htm"><b>setf</b></a> of the property name. (Using the <a href="../../../../ansicl/dictentr/setfpset.htm"><b>setf</b></a> of the reader function for the
writer is recommended.) If a separate writer function is provided, it
should be written to perform any side effects that are needed to keep
the object and its environment in a consistent state.
<p id="12">
Note on :reader and :writer: The name of the reader and writer
functions for a property default to the name of the property and the
setf of the name of the property respectively. But defining a property
does not actually create the reader and writer functions for the
property (regardless of whether the reader and writer names are
specified explicitly), so the application must define these functions
separately. Typically, a property is defined for a class and has the
same name as a slot of the class, and the accessor methods that are
created for the slot serve as the reader and writer of the property as
well. Otherwise the reader and writer functions must be defined
explicitly. See below for examples.
</p>
</li>
<li id="13">
<code>:type</code>: a lisp type that the property value must
satisfy. The inspector will prevent invalid values from being
used. Defaults to t, to allow any value.
</li>
<li id="14">
<code>:dependent-properties</code>: a list of the names of other
properties of the object whose values might be changed by the writer
function as side effects. The Inspector uses this to redisplay related
properties whenever the user changes a property value in the
inspector. (In general, the Inspector does not know automatically to
redisplay values that have changed once it has inspected an object,
and the Refresh Values command on the Inspector's right-button
shortcut menu may be used to ensure that the displayed values are
current.)
</li>
<li id="15">
<code>:initarg</code>: a keyword used by <a href="../r/recreation-code.htm"><b>recreation-code</b></a> to generate a lisp
expression for recreating an object that has this property. Defaults
to the keyword that has the same name as the property name symbol.
</li>
<li id="16">
<code>:help-string</code>: a short documentation string for the
property, or <code>nil</code>. Defaults to <code>nil</code>.
</li>
<li id="17">
<code>:editor-type</code>: a value specifying which kind of
extended editing will be used by the inspector for the property when
the user clicks on the small button to the right of the value. (In
releases prior to 7.0, this option was called
<code>:editor-mode</code>.) Options are:
<ul>
<li id="18">
<code>:long-expression</code>: pops up a multi-line text
editor. This is the default.
</li>
<li id="19">
<code>:multiple-choice</code>: drops a list of choices.
</li>
<li id="20">
<code>:toggle</code>: toggles between the choices when
clicked. The default choices for :toggle are t and <code>nil</code>.
</li>
<li id="21">
<code>:color</code>: pops up the color-selection dialog.
</li>
<li id="22">
<code>:font</code>: pops up the font selection dialog.
</li>
<li id="23">
<code>:path</code>: pops up the file selection dialog.
</li>
<li id="24">
<code>:menu</code>: pops up the menu editor dialog.
</li>
<li id="25">
<code>:function</code>: finds source code or generates skeleton code.
</li>
</ul>
</li>
<li id="26">
<code>:choices</code>: a list of possible values for use by the
inspector when the editor-type is <code>:multiple-choice</code>
or :toggle. Defaults to <code>nil</code>, unless the
editor-type is <code>:toggle</code>, in which case the default
is a list of t and <code>nil</code>.
</li>
<li id="27">
<code>:read-only</code>: a flag to prevent modification of the
property in the inspector. Defaults to <code>nil</code>.
</li>
<li id="28">
<code>:remake</code>: a flag to indicate that the object that
has this property should be recreated when this property is modified
in order to completely effect the change. Defaults to <code>nil</code>.
</li>
<li id="29">
<code>:hidden</code>: a flag to indicate that the inspector
should not show this property. Useful when a property is inherited but
is not useful on a particular subclass. Defaults to <code>nil</code>.
</li>
<li id="30">
<code>:repositioning</code> (for controls): a flag to indicate
that the control may be moved or resized when this property value is
modified. Used internally to update handles on forms when
needed. Defaults to <code>nil</code>.
</li>
</ul>
<p id="31">
Properties of CLOS classes inherit similarly to slots. Only those
facets that differ from the inherited property need be specified for a
given class, and properties that have no differing facets need not be
specified at all.
</p>
<p id="32">
Properties are shown on a separate tab of the inspector, and thus can
serve as a relatively high-level interface to the object by providing
a selected subset of the object's internal attributes, where each
property knows to either disallow modification or to cause appropriate
side effects upon modification in order to maintain a consistent
environment.
</p>

<hr><p id="33"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/d/defcomponent.htm">8.1 version</a></td></tr></table></body></html>