<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>post-funcall-in-cg-process</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/p/post-funcall-in-cg-process.htm">8.1 version</a></td></tr></table><h2 id="2">post-funcall-in-cg-process</h2>

<p id="3"><b>Arguments: </b><i>
function
</i>&amp;key <i>arguments</i> (<i>process</i> multiprocessing:*current-process*)<i> type delete-types unless-types</i><i>
</i></p>

<p id="4">
This function places a funcallable object to be called later onto a
"funcall queue" for the specified Common Graphics process. The
function call will be made only after all pending window messages in
that process have been handled completely, and after all function
calls that were already in the funcall queue for that process have
been called and have returned.
</p>
<p id="5">
The queued funcalls are called only by the main event-handling loop
inside the function event-loop, which is normally called by any Common Graphics
process. While calls to functions such as <a href="../../mp/process-wait.htm"><b>process-wait</b></a> or <a href="../p/process-pending-events.htm"><b>process-pending-events</b></a> will handle
window messages at that time, these calls will not process queued
funcalls.
</p>
<p id="6">
This function is typically useful when message-handling code calls
certain functions that block, which allows further messages to be
handled while the code that is running for the current message is
blocking. If further messages arrive during the blocking period, this
can cause message-handling code to be re-entered or otherwise run in
an order that is not expected, which may cause the application to get
into a confused or hung state.
</p>
<p id="7">
In particular, calls to <a href="../../mp/process-wait.htm"><b>process-wait</b></a>, <a href="../../mp/with-process-lock.htm"><b>with-process-lock</b></a>, <a href="../../../../ansicl/dictentr/sleep.htm"><b>sleep</b></a>, or <a href="../p/process-pending-events.htm"><b>process-pending-events</b></a> will cause
subsequent messages to be handled immediately (or when they occur
during the function's waiting period). Note that various Common
Graphics or other Allegro CL functions may call these functions
internally, and therefore will have the same potential problem; for
example, the AllegroStore macro <b>with-transaction</b> calls <a href="../../mp/with-process-lock.htm"><b>with-process-lock</b></a>, and so
Common Graphics message-handling code that calls
<b>with-transaction</b> may want to queue this call if it might cause
confusion when intervening messages all wait on the lock while the
same process is already using it.
</p>
<p id="8">
The arguments to <a href="../p/post-funcall-in-cg-process.htm"><b>post-funcall-in-cg-process</b></a> are:
</p>
<ul>
<li id="9">
<i>function</i> must be a funcallable object (a function
name or function object). The function will be called later when the
posted funcalls are processed. The function will be passed the
arguments that are in the list passed as the
<i>arguments</i> argument, if any.
</li>
<li id="10">
<i>arguments</i>: the value of this keyword argument
should be a list of arguments to pass to
<i>function</i>. An alternative to passing an argument
list here is to pass the <i>function</i> argument as a
closure that takes no arguments but instead closes over any variables
that need to be passed.  A closure form may be more elegant, but note
that the closed-over variables will be evaluated later when the
function is called, rather than when it is posted.  Passing an
argument list instead will evaluate the forms that produce the
arguments at posting time.
</li>
<li id="11">
<i>process</i>: the value of this keyword argument
should be the process that should call the function. It defaults to
the current process (the value <a href="../../../variables/system/s_current-process_s.htm"><code>*current-process*</code></a>). The queued function will
later be called only inside the process' main message-handling loop
inside the function event-loop; therefore, the process argument should
always be a Common Graphics process. (A Common Graphics process should
always call <a href="../e/event-loop.htm"><b>event-loop</b></a>; see <a href="../../../cgide.htm#cg-multithreading-1">About using multiple
windowing threads in a Common Graphics application</a> in
<a href="../../../cgide.htm">cgide.htm</a>.)
</li>
<li id="12">
<i>type</i>: the value of this keyword argument, if it
is specified, should be an arbitrary symbol to classify this queued
funcall. For example, if you are showing a message when the mouse
enters a widget, you might want to pass
<code>:mouse-in-message</code> to indicate that this is a queued
funcall for a mouse-in message. This value may be used by subsequent
queued funcalls that specify <i>delete-types</i> or
<i>unless-types</i> arguments. (This argument is not
otherwise used.)
</li>
<li id="13">
<i>delete-types</i>: the value of this keyword argument,
if it is specified, should be a list of symbols that may have been
passed as the value of the <i>type</i> argument to
earlier calls.  Any currently queued funcalls of those types will be
deleted from the queue when this function call is placed there.  As an
example, if you are now showing a status-bar message when the mouse
enters a widget, for efficiency you may want to remove any currently
queued funcalls for status-bar messages, since they would get
overwritten immediately anyway.
</li>
<li id="14">
<i>unless-types</i>: the value of this keyword argument,
if it is specified, should be a list of symbols that may have been
passed as the value of the <i>type</i> argument to
earlier calls. If there are any currently queued funcalls of any of
those types, then this funcall will not be added to the queue. This
could be useful for determining that a currently queued call is
already going to handle whatever this funcall was going to handle, and
so there is no need to queue this one in addition.
</li>
</ul>

<p id="15">
Note that the queued functions are always called asynchronously, and
so the caller of <a href="../p/post-funcall-in-cg-process.htm"><b>post-funcall-in-cg-process</b></a> cannot
wait for a returned value or an indication that the code has run. So
it is probably most useful to call <a href="../p/post-funcall-in-cg-process.htm"><b>post-funcall-in-cg-process</b></a> at the
very top of a message-handling method or function, so that everything
that would have been done by the event-handler is done instead by the
queued function call. (<a href="../../ide/eval-in-listener-thread.htm"><b>eval-in-listener-thread</b></a>, on the
other hand, can wait for completion, though it may be used only in the
IDE and not in a standalone application.)
</p>
<p id="16">
<a href="../../../cgide.htm#cg-event-driven-design-1">About design
considerations for event-driven applications</a> in
<a href="../../../cgide.htm">cgide.htm</a> for more information.
</p>

<h3 id="17">An Example</h3>

<p id="18">
Below is an example that causes each mouse-in event of a window to
print a string to the Debug Window (when the example is run in the
IDE) and then to wait two seconds. Because this action is queued by
calling <a href="../p/post-funcall-in-cg-process.htm"><b>post-funcall-in-cg-process</b></a> each
time, the messages will not print more often then every two seconds,
even if you rapidly move the mouse into and out of the window, because
each queued function will be called only after the preceding one has
returned. (Without the call to <a href="../p/post-funcall-in-cg-process.htm"><b>post-funcall-in-cg-process</b></a>, the
call to <a href="../../../../ansicl/dictentr/sleep.htm"><b>sleep</b></a>
would cause further messages to be handled, and each string would be
printed almost immediately when the event occurs.)
</p>
<p id="19">
Notice that the <a href="../m/mouse-moved.htm"><b>mouse-moved</b></a> method continues to
print coordinates immediately to the IDE status-bar, even as the
printing done by the <a href="../m/mouse-in.htm"><b>mouse-in</b></a> method is delayed by the
calls to <a href="../../../../ansicl/dictentr/sleep.htm"><b>sleep</b></a>. (In real
application code, the delay would more likely be done by a call to
<a href="../../mp/process-wait.htm"><b>process-wait</b></a> or
<a href="../../mp/with-process-lock.htm"><b>with-process-lock</b></a>
rather than a call to <a href="../../../../ansicl/dictentr/sleep.htm"><b>sleep</b></a>
like the one in this simple example.)
</p>

<pre id="20">
(in-package :cg-user)

(defclass my-win (frame-window)())

(defmethod mouse-moved ((window my-win) buttons pos)
  (declare (ignore buttons))
  (setq pos (copy-position pos))
  (ide:lisp-message "Mouse now at ~a   ~a"
    (position-x pos)(position-y pos)))

(defmethod mouse-in ((window my-win) buttons mouse-out-object)
  (declare (ignore buttons))
  
  (post-funcall-in-cg-process 
      (lambda ()
        (format t "~&Moved out of ~a into ~a~%"
          (name-string mouse-out-object)
          (name-string window))
        (sleep 2))
    :type :mouse-in-message)
  
  #|
  ;; This alternative uses an :arguments argument
  ;; rather than closing over variable bindings.  Note that this
  ;; causes the format arguments to be evaluated when this code
  ;; is posted rather than when it is run later.
  (post-funcall-in-cg-process
      (lambda (format-string &rest format-args)
        (apply #'format t format-string format-args)
        (sleep 2))
    :arguments (list "~&Moved out of ~a into ~a~%"
                     (name-string mouse-out-object)
                     (name-string window))
    :type :mouse-in-message
    
    ;; Adding this would prune out mouse-in messages that are
    ;; still queued when this later event is handled, so that only
    ;; one mouse-in message will print after the last mouse-in event.
    :delete-types '(:mouse-in-message))
  |#
  )

(make-window :my-win :class 'my-win)
</pre>

<hr><p id="21"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/p/post-funcall-in-cg-process.htm">8.1 version</a></td></tr></table></body></html>