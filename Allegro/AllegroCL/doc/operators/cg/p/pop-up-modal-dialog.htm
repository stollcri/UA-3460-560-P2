<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>pop-up-modal-dialog</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/p/pop-up-modal-dialog.htm">8.1 version</a></td></tr></table><h2 id="2">pop-up-modal-dialog</h2>

<p id="3"><b>Arguments: </b><i>
dialog </i>&amp;key <i>stream initial-focus bring-thread-to-front</i><i>
</i></p>

<p id="4">
Exposes and selects a dialog in a modal way, where the user must
interact with and exit that dialog before proceeding with anything
else.
</p>
<p id="5">
Specifically, the modal dialog will be displayed indefinitely until
some user action causes the call to <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> to return.
</p>
<p id="6">
While the modal dialog is present, all mouse events are disabled on
<i>stream</i> as well as on all of the child and owned
windows of <i>stream</i> (except for the modal dialog
itself). And no windows are disabled if <i>stream</i> is
the  screen, or if the value of <a href="../../../variables/cg/s_modal-dialogs-disable-owner_s.htm"><code>*modal-dialogs-disable-owner*</code></a> is
<code>nil</code>. This is done to force the user to
complete a response to the modal dialog before continuing to interact
with the rest of the application. The dialog can be said to be "modal
with respect to stream ". Typically <i>stream</i> should
be a top-level window, to establish modality with respect to its whole
window hierarchy.  <i>stream</i> can be the screen,
which is the value returned by <code>(screen
*system*)</code>. See <a href="../s/screen.htm"><b>screen</b></a> and <a href="../../../variables/cg/s_system_s.htm"><code>*system*</code></a>. <i>stream</i>
defaults to the uppermost parent of the modal dialog, as returned by
calling top-level-window on the dialog.
</p>
<p id="7">
If an application includes multiple top-level windows and it is
unsatisfactory for modal dialogs to be modal with respect to only one
of the top-level windows, then an invisible window can be added to the
application that serves as the owner of all of the top-level windows,
and that invisible owner window can be passed as the stream argument
to <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> to achieve
modality with respect to the entire set of the top-level windows. To
make an invisible window, simply call <a href="../m/make-window.htm"><b>make-window</b></a>, passing :state :shrunk
as one of the initargs. To create a top-level owned window on the
invisible window, call <a href="../m/make-window.htm"><b>make-window</b></a> again, passing the
invisible window as the <code>:owner</code> initarg and passing
the <code>:child-p</code> initarg as <code>nil</code> (which makes an owned window rather than a child
window).
</p>
<p id="8">
<i>initial-focus</i> may be one of the controls on the
dialog, in which case that control will have the keyboard focus when
the dialog appears. (This parameter exists because it does not work to
call <a href="../s/set-focus.htm"><b>set-focus</b></a> on
the control before the dialog is exposed, and it is too late to call
<a href="../s/set-focus.htm"><b>set-focus</b></a> once
<a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> has been called
to expose the dialog.) The value of this argument may be the
widget object or the widget name. See the example below where the name
is used.
</p>
<p id="9">
If <i>bring-thread-to-front</i> is true, then <a href="../s/set-foreground-window.htm"><b>set-foreground-window</b></a> is
called on the dialog to bring its application to the front if it was
not in front already. This may be useful for a particularly important
modal dialog to ensure that the user sees it.  This call to <a href="../s/set-foreground-window.htm"><b>set-foreground-window</b></a> is
always done if the owner of the dialog is the screen.
</p>
<p id="10">
A call to <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> will return
only in these cases:
</p>
<ul>
<li id="11">
The value of a control is changed by the user, resulting in the
<a href="../o/on-change.htm"><b>on-change</b></a>
event-handler for the control returning a true
second value. The control is returned from <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a>.
</li>
<li id="12">
<a href="../f/flag-modal-completion.htm"><b>flag-modal-completion</b></a> is called on
the dialog. The optional <i>value</i> argument to
<a href="../f/flag-modal-completion.htm"><b>flag-modal-completion</b></a> is returned
from <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a>.
</li>
<li id="13">
The user clicks a <a href="../../../classes/cg/default-button.htm"><code>default-button</code></a> or a <a href="../../../classes/cg/cancel-button.htm"><code>cancel-button</code></a> on the
dialog, and the button has its default <a href="../o/on-change.htm"><b>on-change</b></a> event handler of <a href="../r/return-t-from-pop-up-dialog.htm"><b>return-t-from-pop-up-dialog</b></a> or
<a href="../r/return-nil-from-pop-up-dialog.htm"><b>return-nil-from-pop-up-dialog</b></a>. (Each
of these functions actually just calls <a href="../f/flag-modal-completion.htm"><b>flag-modal-completion</b></a>, returning
<code>t</code> and <code>nil</code>
respectively.)
</li>
<li id="14">
<a href="../u/user-close.htm"><b>user-close</b></a> is
called on the dialog. (This happens when the user interactively closes
the window in one of the built-in ways such as by clicking the close
icon on the dialog's frame or pressing alt-F4.)  In this case, <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> may
still not exit if there is a cancel-button on the dialog whose <a href="../o/on-change.htm"><b>on-change</b></a> event handler
fails to exit the call by one of the other means. This functionality
is implemented as a <a href="../u/user-close.htm"><b>user-close</b></a> &nbsp;
<code>:around</code> method on <a href="../../../classes/cg/basic-pane.htm"><code>basic-pane</code></a>; this method generally
should not be overridden.
</li>
<li id="15">
The lisp process that called <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> throws to
<code>pop-up-dialog</code>. The value thrown will be returned by
<a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a>. This is a more
drastic option that is not recommended unless it turns out to be
necessary for some unforeseen reason.
</li>
</ul>

<p id="16">
<a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> should be
called only in the process that created the dialog. If called in
another process, an error is signaled. If a dialog needs to be used in
multiple processes, then a separate instance should be created for
each process. The Common Graphics utility dialogs that are invoked by
such functions as <a href="../a/ask-user-for-choice-from-list.htm"><b>ask-user-for-choice-from-list</b></a>
automatically create a separate instance for each process in which
they are used. The reason for this restriction is that each process
maintains an indpenedent stack of currently-invoked modal windows, and
so the process that is waiting in a call to <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> needs to be the
same as the creation-process that handles the events in the window.
</p>


<h2 id="17">
Example
</h2>

<p id="18">
Here is a simple example that creates a modal dialog and then displays
it by calling <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a>.  This example sets the
<a href="../p/pop-up.htm"><b>pop-up</b></a> property, which coerces
certain other properties to appropriate values for modal dialogs.  It
also uses the fact that its <a href="../../../classes/cg/default-button.htm"><code>default-button</code></a> and <a href="../../../classes/cg/cancel-button.htm"><code>cancel-button</code></a> have built-in <a href="../o/on-change.htm"><b>on-change</b></a> functions that will
call <a href="../f/flag-modal-completion.htm"><b>flag-modal-completion</b></a> with <code>t</code> and <code>nil</code> respectively --
that causes <a href="../p/pop-up-modal-dialog.htm"><b>pop-up-modal-dialog</b></a> to return true if
and only if the user does not cancel the dialog.
</p>
<p id="19">
The dialog is shown twice to illustrate the fact that dismissing a
modal dialog simply hides it until further use, rather than closing
it.
</p>
<pre id="20">
(let* ((margin 8)
       (spacing 6)
       (widget-height 24)
       (width 300)
       (inner-width (- width (* 2 margin)))
       (height (+ (* 2 margin)(* 3 widget-height)(* 2 spacing)))
       (button-top (- height margin widget-height))
       (button-width 60)
       (dialog (make-window :modal-dialog-test
                 :class 'dialog
                 :title "Enter Two Strings"
                 :pop-up t
                 :interior (make-box-relative 100 200 width height)
                 :dialog-items
                 (list
                  (make-instance 'editable-text
                    :name :string1
                    :value ""
                    :left margin :top margin
                    :width inner-width :height widget-height)
                  (make-instance 'editable-text
                    :name :string2
                    :value ""
                    :left margin :top (+ margin widget-height spacing)
                    :width inner-width :height widget-height)
                  (make-instance 'default-button
                    :name :ok
                    :title "~OK"
                    :left margin :top button-top
                    :width button-width :height widget-height)
                  (make-instance 'cancel-button
                    :name :cancel
                    :title "~Cancel"
                    :left (+ margin button-width spacing)
                    :top button-top
                    :width button-width :height widget-height))))
       first-answer second-answer)
  (when (pop-up-modal-dialog dialog :initial-focus :string1)
    (setq first-answer (list (dialog-field dialog :string1)
                             (dialog-field dialog :string2)))
    (setf (title dialog) "Enter Two MORE Strings")
    (set-dialog-fields dialog :string1 "" :string2 "")
    (when (pop-up-modal-dialog dialog :initial-focus :string1)
      (setq second-answer (list (dialog-field dialog :string1)
                                (dialog-field dialog :string2)))
      (list first-answer second-answer))))
</pre>



<hr><p id="21"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/p/pop-up-modal-dialog.htm">8.1 version</a></td></tr></table></body></html>