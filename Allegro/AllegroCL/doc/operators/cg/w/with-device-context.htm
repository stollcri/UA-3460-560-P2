<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>with-device-context</title><link rel="stylesheet" href="../../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/w/with-device-context.htm">8.1 version</a></td></tr></table><h2 id="2">with-device-context</h2>

<p id="3"><b>Arguments: </b><i>
(hdc-var window </i> &amp;optional <i>non-client-p</i><i>)
 </i> &amp;body <i>body</i><i>
</i></p>

<p id="4">
A macro that ensures that window has a <a href="../d/device-context.htm"><b>device-context</b></a> while body is
executed. While generic windows do have permanent device-contexts in
common graphics, controls that are implemented by the operating system
do not. If you need to draw on a window that might be a Windows
control, then you probably need to wrap the drawing code inside a
<a href="../w/with-device-context.htm"><b>with-device-context</b></a> call. If you
want to draw on the screen, over any windows that are displayed, you
need to wrap the drawing code in a <a href="../w/with-device-context.htm"><b>with-device-context</b></a> form as
well. See the information under `Drawing on the screen' below.
</p>
<p id="5">
If window does already have a device-context, then the hdc-var
variable is bound to that existing device-context and the body is
executed. If window has no device-context, then one is created for it
and stored as the <a href="../d/device-context.htm"><b>device-context</b></a> property of the
window while body is executed, then the device-context is removed from
the window and destroyed, leaving the device-context of window as
<code>nil</code>.
</p>
<p id="6">
If <i>non-client-p</i> is true,
then the hdc-var variable will be bound to a non-client device-context
(for drawing on the frame of the window) rather than a client-area
device-context as usual.  Also, if the window has a device-context
already, a fresh non-client device-context will always be used in
place of the existing client-area device-context of the window, which
will be returned to the window after the execution of body. So <a href="../w/with-device-context.htm"><b>with-device-context</b></a> is
still needed for drawing on a generic window that already has a device
context if the drawing is to be done on the frame (or border) of the
window.
</p>
<p id="7">
From the description of <a href="../d/device-context.htm"><b>device-context</b></a>:
</p>
<p id="8">
Returns an integer that identifies the device-context of window if it
has one, or <code>nil</code> otherwise.  A device-context
is a construct used in the Windows API to specify a set of parameters
that are used when drawing on a window. A common graphics application
does not normally need to deal with a window's device-context
directly, but if you need to pass the window to a winapi function that
calls for the window's device-context (or hDC), then you should pass
the integer returned by this function for that argument. 
<code>cg:handle</code>
returns the window's "handle".
</p>
<p id="9">
Every non-control window in common graphics (and every lisp-widget
window) is automatically assigned a device-context, which it keeps
until it is closed. Controls supplied by the OS (all controls except
lisp-widgets), on the other hand, are not automatically given
device-contexts in lisp since it is normally only the OS rather than
lisp that draws on the control. If you do want to draw directly on a
non-lisp control, then you must give the window of the control a
device-context while drawing on it. The easy way to do this is to wrap
a call to <a href="../w/with-device-context.htm"><b>with-device-context</b></a> around the code
that draws on the control.
</p>
<h3 id="10">
Drawing on the screen
</h3>
<p id="11">
A <a href="../w/with-device-context.htm"><b>with-device-context</b></a> form is also
needed in order to draw directly on the screen (over any windows that
happen to be where the drawing is done). Any current drawing
attributes such as <a href="../l/line-width.htm"><b>line-width</b></a> or <a href="../f/font.htm"><b>font</b></a> must also be set up within the
same <a href="../w/with-device-context.htm"><b>with-device-context</b></a> form as the
drawing that uses it.  If drawing is attempted on the screen without
setting up the device-context, an error dialog will appear noting that
<a href="../w/with-device-context.htm"><b>with-device-context</b></a> needs to be
used.
</p>
<p id="12">
In the past, the screen was internally given a permanent device
context as with regular windows, but the device context eventually
became invalid at some unpredictable time.
</p>
<p id="13">
The Common Graphics utility functions such as <a href="../g/get-line.htm"><b>get-line</b></a> and <a href="../g/get-shape-box.htm"><b>get-shape-box</b></a> are often used to
draw rubber-banding lines directly on the screen; these utilities set
up the needed device context for the screen internally.
</p>
<h3 id="14">
Example of drawing directly on the screen:
</h3>
<pre id="15">
(let* ((screen (screen *system*)))
  (with-positions (pos1 pos2) ;; to avoid consing
    (with-device-context (hdc screen)
      (with-foreground-color (screen blue)
        (dotimes (j 11)
          (draw-line screen (nmake-position pos1 100 200)
                     (nmake-position pos2 (+ 100 (* j 10)) 300))))
      (with-foreground-color (screen dark-green)
        (dotimes (j 11)
          (draw-line screen (nmake-position pos1 200 300)
                     (nmake-position pos2 (+ 100 (* j 10)) 200)))))))
</pre>





<hr><p id="16"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/cg/w/with-device-context.htm">8.1 version</a></td></tr></table></body></html>