<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>with-static-fobject</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ff</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ff/with-static-fobject.htm">8.1 version</a></td></tr></table><h2 id="2">with-static-fobject</h2>

<p id="3"><b>Arguments: </b><i>
(var type </i>&amp;key <i>allocation size</i><i>) </i> &amp;rest <i>body</i><i>
</i></p>

<p id="4">
This macro allocates a foreign object of the specified
<b><i>type</i></b>,
<b><i>allocation</i></b>, and <i>size</i>,
and binds it to <b><i>var</i></b> while evaluating
<b><i>body</i></b>.  The body is evaluated inside a
lexical binding of <i>var</i>.  Within the body, the
object may be accessed using <a href="fslot-value.htm"><b>fslot-value</b></a> with the same
allocation argument. The default allocation is
<code>:foreign</code>, which for this macro only is equivalent
to <code>:foreign-static-gc</code>. Under the right
circumstances (described below) the object may be allocated on the
stack.
</p>
<p id="5">
If the <i>type</i> and <i>allocation</i>
are compile-time constants, and the allocation is
<code>:foreign</code>, <code>:foreign-static-gc</code>,
<code>:lisp</code>, or <code>:lisp-short</code>, and the
<i>size</i> argument is not specified, and if the body
is compiled under suitable circumstances (dynamic-extent declarations
are trusted), then the object is allocated on the stack.  The object
will disappear after control leaves body; thus the program must not
maintain any pointers to the object past this point.
</p>
<p id="6">
Otherwise, the object is allocated as specified, and de-allocated
after the body exits.  Note that the de-allocation requires an
implicit <a href="../../../ansicl/dictentr/unwind-p.htm"><b>unwind-protect</b></a> form.
</p>
<p id="7">
The <b><i>size</i></b> argument forces a minimum size on
the allocated foreign object as in <a href="allocate-fobject.htm"><b>allocate-fobject</b></a>. If this keyword
is given, the stack allocation will fail, since this argument forces
extra dynamic requirements on a construct that wants to be statically
specified.
</p>
<p id="8">
If this form is evaluated by the interpreter, or is compiled under
circumstances that don't trust dynamic-extent declarations, the object
will be allocated as specified (the default is as a
<code>:foreign</code> object, which for this macro is equivalent
to <code>:foreign-static-gc</code>). Either value will allocate
the object in static space so the object that does not move during
garbage collection.
</p>
<p id="9">
In situations where the allocation style is critical to an
application, the compiled code may need to be inspected or
disassembled to verify how the foreign object is allocated. A run-time
check is also possible with <b>excl::stack-allocated-p</b>.
</p>
<p id="10">
<b>Warning</b>: The <i>var</i> argument is considered
dynamic-extent, and is always deallocated at the end of the form. No
indefinite-extent capture of the object should be done; the object is
freed regardless of whether there are any other pointers to it. Do
not, for example, make the value of <i>var</i> be the
value of a global variable for when the macro call completes, the
value of the global variable may be invalid.
</p>

<pre id="11">
(defvar *my-global* nil)
</pre>

<p id="12">
Multiple bindings can be done with <a href="with-static-fobjects.htm"><b>with-static-fobjects</b></a>.
</p>
<p id="13">
See also <a href="with-stack-fobject.htm"><b>with-stack-fobject</b></a>, a macro that
does not always de-allocate the object.
</p>
<p id="14">
See <a href="../../ftype.htm">ftype.htm</a> for
information on foreign types in Allegro CL and
<a href="../../foreign-functions.htm">foreign-functions.htm</a> for general
information on foreign functions in Allegro CL.
</p>

<hr><p id="15"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ff/with-static-fobject.htm">8.1 version</a></td></tr></table></body></html>