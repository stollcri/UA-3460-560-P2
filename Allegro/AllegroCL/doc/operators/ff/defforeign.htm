<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>defforeign</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: ff</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ff/defforeign.htm">8.1 version</a></td></tr></table><h2 id="2">defforeign</h2>

<p id="3"><b>Arguments: </b><i>
lispname </i>&amp;key <i>entry-point unconverted-entry-name arguments pass-types arg-checking prototype return-type language convert-symbol print address remember-address call-direct callback</i><i>
</i></p>

<p id="4">
This function is obsolete and maintained for backwards compatibility
only. It has been replaced by the macro <a href="def-foreign-call.htm"><b>def-foreign-call</b></a>. All new code
should use that macro.
</p>

<p id="5">This function defines the calling convention which allows Lisp to
call a foreign function correctly, passing arguments of the correct
type, and interpreting the returned value
correctly. <i>lisp-name</i> is the name (a symbol) by
which lisp will refer to the foreign function. </p>

<p id="6">If the entry point (either the value of
<i>entry-point</i> or determined by other arguments as
described below) does not exist, no error will be signaled when
<a href="defforeign.htm"><b>defforeign</b></a> is
called. Instead, the error will be signaled when the function defined
by <a href="defforeign.htm"><b>defforeign</b></a>
is called. This makes foreign functions more like Lisp functions -- if
you define <strong>foo</strong> to call the undefined function
<strong>bar</strong>, the error is signaled when <strong>foo</strong>
is called, not when <strong>foo</strong> is defined.</p>

<p id="7">The function <a href="defforeign.htm"><b>defforeign</b></a> creates a function
identified by <i>lisp-name</i>, which passes its
arguments through to the foreign code and returns the return-value of
the foreign function to Lisp. The default passing convention (which
can be overridden by using the <i>pass-types</i> keyword
argument to <a href="defforeign.htm"><b>defforeign</b></a>) depends on the type
of arguments and the language. For example, C normally expects its
arguments to be passed by value, Fortran expects arguments to be
passed by address. </p>

<p id="8"><a href="defforeign.htm"><b>defforeign</b></a> returns <code>t</code> if it successfully defines the
foreign function. It returns <code>nil</code> if it fails.</p>

<p id="9">You can test whether or not an entry point exists with the function
<a href="get-extern-code-address.htm"><b>get-extern-code-address</b></a>.</p>

<p id="10">The following are the keyword arguments to <a href="defforeign.htm"><b>defforeign</b></a>. </p>

<table border="1" width="76%">
  <tr>
    <td width="19%"><strong>Argument</strong></td>
    <td width="17%"><strong>Value</strong></td>
    <td width="64%"><strong>Description</strong></td>
  </tr>
  <tr>
    <td width="19%"><i>entry-point </i></td> 
    <td width="17%"><i>foreign-name</i></td> 
    <td width="64%">This keyword's value <i>foreign-name</i>
    is the name of the entry point as found in the loaded foreign
    namespace. If no value is specified, the default depends on other
    arguments. The determination of the entry-point need not happen
    until the <a href="defforeign.htm"><b>defforeign</b></a> form is loaded
    into (or evaluated within) Lisp and not when a file containing a
    <a href="defforeign.htm"><b>defforeign</b></a>
    form is compiled into a <i>fasl</i>
    file. If determination of the entry-point is delayed until a
    <i>fasl</i> file is loaded, the
    same <i>fasl</i> file can be used
    on different platforms despite different conventions for naming
    entry points (some platforms prepend a _, some append, and some do
    not add _'s). 
    <p id="11">The entry-point name is determined as
    follows:</p> 
    <p id="12">If <i>entry-point</i> is specified, it is used
    at compile time. </p> 
    <p id="13">If <i>entry-point</i> is not specified
    but <i>convert-symbol</i> is, </p>
        <p id="14">(convert-symbol lisp-name) </p>

    <p id="15">where <strong>convert-symbol</strong> is the conversion
    function given in the keyword argument
    <i>convert-symbol</i> described below, is used as
    the entry point at compile time.</p>

    <p id="16">If neither <i>entry-point</i> nor
    <i>convert-symbol</i> are specified,
    <i>unconverted-entry-name</i> is stored at compile
    time and converted (with <a href="convert-to-lang.htm"><b>convert-to-lang</b></a>) only when
    the resulting <i>fasl</i> file is
    loaded. This allows the same <i>fasl</i> files to be used on various
    platforms. <i>unconverted-entry-name</i> defaults to
    the symbol name of <i>lisp-name</i>.</p>

    <p id="17">Late conversion is the recommended behavior, so neither this
    argument nor <i>convert-symbol</i> should be
    specified. This argument and
    <i>unconverted-entry-name</i> should not both be
    specified.</p></td>

  </tr>
  <tr>
    <td width="19%"><i>unconverted-entry-name </i></td>
    <td width="17%"><i>unconverted-entry-name </i></td>

    <td width="64%"><i>unconverted-entry-name</i> should
    evaluate to a string. The method for determining the entry point
    name is given in the description of entry-point just
    above. If a value for this argument is specified, it is stored
    until the <a href="defforeign.htm"><b>defforeign</b></a> form defining the
    foreign function is loaded (or evaluated). At that time,
    <i>unconverted-entry-name</i> is converted with
    <a href="convert-to-lang.htm"><b>convert-to-lang</b></a> to produce
    the entry-point name.</td>

  </tr>
  <tr>
    <td width="19%"><i>arguments</i></td>
    <td width="17%"><em>(argument-type+) </em></td>

    <td width="64%">This specifies the types of arguments that will be
    passed to the foreign function. Its value must be a list of valid
    lisp types (e.g. the expressions integer, string, (simple-array
    double-float), etc.), or t, which converts arguments according to
    their type, whatever they are, or <code>nil</code>,
    which means no arguments. When unspecified, this argument defaults
    to t. 
    <p id="18">The special type <code>:lisp</code> is also accepted as
    an argument-type. Arguments specified <code>:lisp</code> are
    passed to foreign code unconverted. The format of Lisp objects is
    given in the <b>sys:;misc;lisp.h</b> file. Please be aware
    that if a Lisp object is modified inappropriately by foreign code,
    Lisp will likely fail unrecoverably. Also note that the Lisp
    object may be moved by the garbage collector so the reference may
    not be valid if it is stored by C for later processing.</p></td>

  </tr>
  <tr>
    <td width="19%"><i>pass-types</i></td>
    <td width="17%"><em>pass-convention+</em></td>

    <td width="64%">This keyword specifies the passing convention of
    each argument. The choices are :by-address, meaning pass by
    address (Fortran style) and :by-value, meaning pass by value (C
    style). The default is the style of the language specified, so
    users will rarely have to use this keyword. If the C code passes
    arguments by address, however, then this keyword should be used
    and its value should be a list of the same length as the argument
    list with elements :by-value if the corresponding argument is
    passed by value and :by-address if it is passed by address. 
    <p id="19">In
    addition to :by-value and :by-address, one can specify :normal and
    :non-array-by-address. :normal means to use the normal pass-type
    based on the value of the :language
    argument. :non-array-by-address means to pass the argument by
    address if the corresponding argument specified in the
    <i>arguments</i> list is not an array.</p></td>

  </tr>
  <tr>
    <td width="19%"><i>arg-checking</i></td>
    <td width="17%"><em>t-or-nil</em></td>

    <td width="64%">This argument defaults to t, in which case Lisp
    will check that the arguments passed through to the foreign
    function are of the types specified in
    <i>arguments</i>.  This argument is ignored if
    <i>arguments</i> is t. This argument must be <code>nil</code> if <i>call-direct</i> is
    specified <code>t</code> (otherwise the call will not
    be inlined).</td>

  </tr>
  <tr>
    <td width="19%"><i>prototype</i></td>
    <td width="17%"><em>proto</em></td>

    <td width="64%">This keyword is now effective on most
    platforms. This keyword supports argument passing for machines
    with ANSI C compilers which use function argument prototyping. C
    functions written with ANSI C prototyping expect arguments to be
    passed in a specific format. Before the advent of ANSI C
    prototyping, one did not know what format the callee function
    expected, so functions always passed in the largest value.
    <p id="20">The
    default is <code>nil</code>. If proto is <code>t</code>, then all arguments will be prototyped. If the
    arguments are only partially prototyped (e.g. only the first few
    are prototyped), then the value of the prototype argument should
    be a list containing t's in the prototyped positions.</p>

    <p id="21">For example:</p>
    <pre id="22">(ff:defforeign 'blarg 
      :arguments (integer single-float single-float)
     :prototype (t t))</pre>

    <p id="23">would say that the first two args are prototyped and the third
    is not.</p>

    <p id="24">To use <a href="defforeign.htm"><b>defforeign</b></a> on a function
    defined with a prototype, one must list the argument type with the
    <i>argument</i> keyword and have the
    <i>prototype</i> keyword argument
    true.</p>

    <p id="25">If one has argument checking enabled with the
    <i>arg-checking</i> keyword argument, then foreign
    function calling will be strict about getting the correct floating
    point type.</p></td>

  </tr>
  <tr>
    <td width="19%"><i>return-type</i></td>
    <td width="17%"><em>return-type</em></td>

    <td width="64%">The value of <i>return-type</i> must be one of the keywords <blockquote>
      <blockquote>
        <p id="26">:integer
        :fixnum 
        :single-float 
        :double-float 
        :character
        :lisp
        :boolean
        :void </p>
      </blockquote>
    </blockquote>
    <p id="27">:void indicates no value is returned; :lisp indicates a Lisp value is returned
    (normally used only if a C program returns a value accessed by the C routine
    lisp_value()). The other keywords indicate values of the type named by the keyword. If the
    value is :boolean, the function will return <code>t</code> or <code>nil</code> as the
    foreign code returned a non-zero or 0 value.</p>
    <p id="28">When unspecified, this argument defaults to :integer. </p></td>
  </tr>
  <tr>
    <td width="19%"><i>language</i></td>
    <td width="17%"><em>language-name</em></td>
    <td width="64%">The language-name must be either of the keywords :c, for C, or :fortran,
    for Fortran. When unspecified, this argument defaults to :c. This argument is ignored if <i>entry-point</i>
    is specified. </td>
  </tr>
  <tr>
    <td width="19%"><i>print</i></td>
    <td width="17%"><em>t-or-nil</em></td>
    <td width="64%">If t, information useful for debugging will be printed to *terminal-io*.
    This argument defaults to <code>nil</code>. </td>
  </tr>
  <tr>
    <td width="19%"><i>convert-symbol</i></td>
    <td width="17%"><em>con-function</em></td>
    
    <td width="64%">Note: specifying a value for this argument is not
    recommended. See the description of
    <i>entry-point</i> above for information on how Lisp
    determines the entry-point name for a foreign function. If a value
    for this argument is specified (and no value is specified for
    <i>entry-point</i> or
    <i>unconverted-entry-name</i>), the entry-point name
    will be determined at compile time by applying the function which
    is the value of this argument to lisp-name. The benefits of
    determining the entry point only when the fasl file containing the
    <a href="defforeign.htm"><b>defforeign</b></a>
    form is loaded (which allows for portability) is lost.
    <p id="29">This
    keyword's value <em>con-function</em> is the name of the function
    that does the conversion of the Lisp name to an entry-point
    name. The function must take as arguments a symbol and the keyword
    :language, and must return a string recognizable to the operating
    system as an entry-point name. </p></td>

  </tr>
  <tr>
    <td width="19%"><i>call-direct</i></td>
    <td width="17%"><em>t-or-nil</em></td>

    <td width="64%">The default value of this argument is <code>nil</code>. If this value is t, then the compiler will
    attempt to inline calls to the foreign function being defined by
    this call to <a href="defforeign.htm"><b>defforeign</b></a>. If the value of
    :call-direct is <code>t</code> then the :arguments
    keyword argument must be a list of arguments rather than <code>t</code> and <i>arg-checking</i> must be
    <code>nil</code> (otherwise :call-direct's value will
    be ignored). :callback may be <code>t</code> or
    <code>nil</code> but if it is t, extra code must be
    included to allow for the callback so the inlined call is
    slower.
    <p id="30">A :call-direct foreign function will return the type
    specified by :return-type. In earlier releases, a double-float was
    sometimes returned when :return-type was :single-float. because
    the C routine returned a double and Lisp did not convert
    it. Starting in 4.3, Lisp converts the value returned by C if
    necessary.</p></td>

  </tr>
  <tr>
    <td width="19%"><i>callback</i></td>
    <td width="17%"><em>callback</em></td>
    
    <td width="64%">Because Allegro CL uses (on some platforms) the
    <strong>:os-threads</strong> model of multiprocessing, it is not
    possible to guarantee that Lisp code will not run while a foreign
    function defined to Lisp with <a href="defforeign.htm"><b>defforeign</b></a> is running
    (essentially what :callback nil did in earlier relases on
    Unix). Therefore, whatever is specified for this argument, <code>t</code> is the value used. See the
    <i>release-heap</i> keyword argument of
    <a href="def-foreign-call.htm"><b>def-foreign-call</b></a>.</td>

  </tr>
  <tr>
    <td width="14%"><i>method-index</i></td>
    <td width="35%"><code>nil</code> (the default) or an index into C++ table, as described at
    right.</td>
    <td width="51%">This argument allows for calling of C++ style member-methods. The value,
    if specified, must be an integer index into the virtual table of the C++ class. Symbolic
    index specifications are not directly supported. </td>
  </tr>
</table>

<p id="31">
See <a href="../../ftype.htm">ftype.htm</a> for
information on foreign types in Allegro CL and
<a href="../../foreign-functions.htm">foreign-functions.htm</a> for general
information on foreign functions in Allegro CL.
</p>

<hr><p id="32"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/ff/defforeign.htm">8.1 version</a></td></tr></table></body></html>