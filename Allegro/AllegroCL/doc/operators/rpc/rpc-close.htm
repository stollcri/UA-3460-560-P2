<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>rpc-close</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Generic Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: net.rpc</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/rpc/rpc-close.htm">8.1 version</a></td></tr></table><h2 id="2">rpc-close</h2>

<p id="3"><b>Arguments: </b><i>
(port &lt;type-of-port&gt;) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="4">
There are several methods specialized on the <i>port</i>
argument. The behavior of the function and meaning of the arguments
varies with the type of the <i>port</i> argument.
</p>
<p id="5">
The <b><i>wait</i></b> argument specifies whether to
wait for the operation or operations to complete; it can also specify
how long to wait.  A value of <code>nil</code> causes one
or more operations to be initiated but control returns almost
immediately to the caller.  If the value is a positive number, it is
the number of seconds to wait.  Any other non-<code>nil</code> value specifies an indefinite wait.
</p>

<h3 id="6">
For (port rpc-socket-server)
</h3>

<p id="7"><b>Arguments: </b><i>
(port rpc-socket-server) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="8">
If the <b><i>all</i></b> argument is non-<code>nil</code>, then <a href="rpc-close.htm"><b>rpc-close</b></a> is called on each port opened by
this server.  The <i>flush</i>,
<i>abort</i> and <i>final</i> arguments
are passed down to each port call.
</p>
<p id="9">
If the <b><i>stop</i></b> argument is the keyword
<code>:final</code>, then stop advertising and discard the
server entirely. To cause a clean shutdown, the
<i>all</i> and <i>wait</i> arguments
should be non-<code>nil</code>; if
<i>all</i> is <code>nil</code>, then any
open ports are shut down unilaterally and any activity is aborted; if
<i>wait</i> is <code>nil</code>, then it is
also possible to cause open ports to be shut down unilaterally.
</p>
<p id="10">
If the <i>stop</i> argument is any other non-<code>nil</code> value, then simply stop advertising. If a
listener process is running, then stop the listener process as well. A
call to <a href="rpc-open-server.htm"><b>rpc-open-server</b></a>
or <a href="rpc-open-listener.htm"><b>rpc-open-listener</b></a> will
resume advertising.
</p>
<p id="11">
If the <i>wait</i> argument is non-<code>nil</code>, then the outermost call to <a href="rpc-close.htm"><b>rpc-close</b></a>, and any implicit calls to
<a href="rpc-close.htm"><b>rpc-close</b></a>, will return
only after each operation is completed. When the abort argument is
non-<code>nil</code>, the remote process may still be
closing down the connection.
</p>
<p id="12">
A port is finally closed, when a call to <a href="rpc-open-p.htm"><b>rpc-open-p</b></a> returns one of the
keywords <code>:idle</code> or <code>:closed</code>.
</p>


<h3 id="13">
For (port  rpc-port)
</h3>

<p id="14"><b>Arguments: </b><i>
(port rpc-port) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="15">
Close an <a href="../../classes/rpc/rpc-port.htm"><code>rpc-port</code></a>. If
<i>abort</i> is non-<code>nil</code>, shut
down the port without attempting any further communication.
</p>
<p id="16">
If <b><i>flush</i></b> argument determines what to do
with pending messages and active worker threads. The value of flush
can be <code>:kill</code>, <code>:runout</code>, <code>nil</code> or any other non-<code>nil</code>
value.
</p>
<p id="17">
If the value of <i>flush</i> is
<code>:kill</code>, then any active threads are killed and any
pending messages are discarded.  If the value is
<code>:runout</code>, then active threads are allowed to run to
completion, but the close operation does not wait for the threads to
finish (even if <i>wait</i> is non-<code>nil</code>), and the threads do not attempt to send the
result to the remote caller.
</p>
<p id="18">
If the value is <code>nil</code>, then the port is closed
only after all pending messages are handled and all active threads
terminate.
</p>
<p id="19">
If the value is any other non-<code>nil</code> value,
pending messages are discarded, but active threads are left running.
Note that when the call in an active thread ends, it will signal an
error since the result cannot be sent back through a closed port --
this error is ignored unless one of the debug options is enabled.
</p>
<p id="20">
If <i>abort</i> and <i>flush</i> are <code>nil</code>, close the port by sending a disconnect message
after all pending messages are sent. When the disconnect message is
acknowledged, close the port. 
</p>
<p id="21">
If the re-connect option of the port is non-<code>nil</code>, the port may be re-connected later, but if the
option is <code>nil</code> or if
<i>final</i> is non-<code>nil</code>, the
port is closed with no more connections allowed.
</p>
<p id="22">
If <i>stop</i> is non-<code>nil</code>, call
<a href="rpc-close.htm"><b>rpc-close</b></a> on the
server from which the port was derived.
</p>
<p id="23">
If <i>all</i> is non-<code>nil</code>, call
<a href="rpc-close.htm"><b>rpc-close</b></a> for all
ports derived from the same server as this one.
</p>

<p id="24">
As with the method on <a href="../../classes/rpc/rpc-socket-server.htm"><code>rpc-socket-server</code></a>, if the
<i>wait</i> argument is true, the call to <a href="rpc-close.htm"><b>rpc-close</b></a> should not return until
the close operation is completed.  Note that with a slow connection
even when <a href="rpc-close.htm"><b>rpc-close</b></a>
returns, the remote host may still be in the process of closing
down. If the <i>wait</i> argument is <code>nil</code>, the call returns while the closing takes
place. The port is finally closed when a call to <a href="rpc-open-p.htm"><b>rpc-open-p</b></a> returns one of the keywords
<code>:idle</code> or <code>:closed</code>.
</p>

<h3 id="25">
For (port  rpc-datagram-server)
</h3>
<p id="26"><b>Arguments: </b><i>
(port rpc-datagram-server) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="27">
When called with the <i>stop</i> argument non-nil, this
method stops the listener. Otherwise, this method has no effect.
</p>

<h3 id="28">
For (port  rpc-datagram-port)
</h3>
<p id="29"><b>Arguments: </b><i>
(port rpc-datagram-port) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="30">
Since a datagram port is closed after each RPC message, this method is
effectively a no-op.
</p>

<h3 id="31">
For (port  (eql :all))
</h3>
<p id="32"><b>Arguments: </b><i>
(port (eql :all)) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="33">
Call <a href="rpc-close.htm"><b>rpc-close</b></a> for all
known servers. The keyword arguments are passed down in each call. The
<i>wait</i> argument, when non-nil, specifies that the
call to <a href="rpc-close.htm"><b>rpc-close</b></a> should
not return until the close operation is completed.  Note that with a
slow connection even when <a href="rpc-close.htm"><b>rpc-close</b></a> returns, the remote host may
still be in the process of closing down. If the wait argument is nil,
the call returns while the closing takes place. The port is finally
closed when a call to <a href="rpc-open-p.htm"><b>rpc-open-p</b></a> returns one of the keywords
<code>:idle</code> or <code>:closed</code>.
</p>


<h3 id="34">
For (port  (eql :reset))
</h3>
<p id="35"><b>Arguments: </b><i>
(port (eql :reset)) </i>&amp;key <i>flush abort all stop final wait</i><i>
</i></p>

<p id="36">
This closes all RPC activity in a Lisp image. It is equivalent to 
</p>
<pre id="37">
(rpc-close :all :flush t :abort t :all t :stop t :final t :wait t).
</pre>

<h3 id="38">Programming Note</h3>

<p id="39">
How to close an ACLRPC connection gracefully:
</p>
<ol>
<li id="40">
One side makes a remote call to the other to notify the other side
that the connection is closing, and then calls 
<pre id="41">
(rpc-close port :wait t)
</pre>
</li>
<li id="42">
When the other side receives the notification, it calls
<pre id="43">
(rpc-close port :wait t)
</pre>
</li>
</ol>
<p id="44">
The notification must be adapted to the needs and style of the
application.  Some possibilites are setting a special variable,
opening a Lisp gate, modifying some data structure.
</p>
<p id="45">
To close the server and all connections gracefully:
</p>
<pre id="46">
(rpc-close server :stop :final :all t :wait t)
</pre>



<p id="47">
See also <a href="../../rpc.htm">rpc.htm</a> for general information on the
Remote Procedure Call utility in Allegro CL.
</p>

<hr><p id="48"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/rpc/rpc-close.htm">8.1 version</a></td></tr></table></body></html>