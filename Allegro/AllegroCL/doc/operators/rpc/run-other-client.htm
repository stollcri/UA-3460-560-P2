<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>run-other-client</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: net.rpc</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/rpc/run-other-client.htm">8.1 version</a></td></tr></table><h2 id="2">run-other-client</h2>

<p id="3"><b>Arguments: </b><i>
</i>&amp;key <i>start lisp remote-host remote-command prefix suffix flags infile opts args vecp env class verbose name line-limit host data log nanny</i><i>
</i></p>


<p id="4">
This function starts a new Allegro CL Lisp image in a new operating
system process, and possibly on a separate remote host machine. The
calling Lisp image and the new one can communicate through rpc
calls. This function returns a client-lisp instance which is used as
an argument in subsequent calls to manipulate or query the new image
(this is the only way to create such an instance). The first time
<a href="run-other-client.htm"><b>run-other-client</b></a> is
called, a server process is started.
</p>
<p id="5">
The <b><i>start</i></b> argument may be a string or
symbol that denotes a function in the client Allegro CL image, or a
list beginning with such a string or symbol. The entire list is sent
to the client image when it connects to the server and the function is
applied to the rest of the list. If and when the start function
returns in the client image, the client image continues in an idle
loop. On Windows, the console window is active in the Initial Listener
process. On Unix, the top-level is never started. The start function
may initiate the activity of the client image, or the client image may
be activated by subsequent calls to <a href="client-funcall.htm"><b>client-funcall</b></a> in the control image.
</p>
<p id="6">
The <b><i>lisp</i></b> argument specifies a command that
will start a Lisp process in the destination host. The argument may be
a string or a list of strings; the elements in the list will be
separated by spaces in the operating system command.  If this argument
is omitted or <code>nil</code>, the command that started
the calling Lisp process is used.
</p>
<p id="7">
The <b><i>remote-host</i></b> argument specifies the
host where the new Lisp process will run.  The default is to run on
the same host as the caller.  If a remote-host is specified, the
<i>lisp</i> argument must specify a command that is
meaningful in the remote host.
</p>
<p id="8">
The <b><i>remote-command</i></b>,
<b><i>prefix</i></b>,
<b><i>suffix</i></b>, <b><i>flags</i></b>,
<b><i>infile</i></b>, <b><i>opts</i></b>,
and <b><i>args</i></b> arguments specify the components
of the command that will be used to start the client Lisp process.
The arguments are used to construct an operating system command string
from three main components.  Each of the items in each component may
be a single string or a list of strings. Each string is passed as a
separate argument in the OS command. Thus, if an item consists of
several OS tokens, they should be presented as a list of strings;
otherwise, they will not be recognized as separate arguments.  The
components are concatenated into a single command that is invoked with
<a href="../excl/run-shell-command.htm"><b>run-shell-command</b></a>.
</p>
<ol>
<li id="9">
The first component is present only if the remote-host argument is
specified. It is constructed as:
<pre id="10">
&lt;remote-command&gt; &lt;prefix&gt; &lt;remote-host&gt; &lt;suffix&gt;
</pre>
<p id="11">
The default for remote-command is <b>"rsh"</b>. If
<i>remote-host</i> is <code>nil</code>, the
<i>remote-command</i>, <i>prefix</i>, and
<i>suffix</i> arguments are ignored.
</p>
</li>
<li id="12">
The second component is always present and specifies the command that
starts a Lisp image. The default is to use the value returned by
<a href="../system/command-line-arguments.htm"><b>sys:command-line-arguments</b></a> for the current
Lisp image. This value is reasonable if the client image is to run in
the same machine and not calling from an IDE image.
<p id="13">
If the calling image is an IDE image, it is unlikely that the client
image should be an IDE image; therefore it is necessary to specify
this argument explicitly.
</p>
<pre id="14">
&lt;lisp-command&gt;
</pre>
</li>
<li id="15">
The third component is the argument list to the lisp-command component.
<pre id="16">
&lt;flags&gt; &lt;-I image&gt; &lt;-d log&gt; &lt;-L infile&gt; ... &lt;genopts&gt; &lt;opts&gt; &lt; -- &lt;genargs&gt; &lt;args&gt;
</pre>
<p id="17">
If the <i>image</i> argument is not specified, the &lt;-I
image&gt; part is omitted.
</p>
<p id="18">
If the <i>infile</i> argument is not specified, the
&lt;-L infile&gt; part is omitted. If the <i>infile</i>
argument is a list, then multiple &lt;-L&gt; parts are inserted.
</p>
<p id="19">
The &lt;genopts&gt; component is always present and consists of the tokens
</p>
<pre id="20">
      "-e" "(net.rpc.internal::other-restart)"
</pre>
<p id="21">
The &lt;genargs&gt; component is always present and consists of the tokens
</p>
<pre id="22">
      &quot;-key&quot; &lt;key&gt; &quot;-port&quot; &lt;port&gt; &quot;-pass&quot; &lt;pass&gt; [&quot;-host&quot; &lt;host&gt;]
</pre>
<p id="23">
&lt;key&gt; is a generated integer key that identifies the client
image in the control process.
</p>
<p id="24">
&lt;port&gt; is the port number where the control process is listening. 
</p>
<p id="25">
&lt;host&gt; is the hostname where the control process is listening. 
</p>
<p id="26">
&lt;pass&gt; is a generated passcode integer that allows access to the
control process listener. The control process rpc listener is a
sub-class of <code>rpc-socket-server-with-enabler</code> and
thus requires a passcode for client access.
</p>
</li>
</ol>
<p id="27">
The <b><i>host</i></b> argument is needed only if the
client image is to run on a separate host machine and the value of
<a href="../../../ansicl/dictentr/short-si.htm"><b>short-site-name</b></a> is not usable
to reach the host where this function is called. The default value is
the value returned by <a href="../../../ansicl/dictentr/short-si.htm"><b>short-site-name</b></a>.
</p>
<p id="28">
The <b><i>nanny</i></b> argument is used only in the
first call to <a href="run-other-client.htm"><b>run-other-client</b></a>. The
<i>nanny</i> argument, if non-<code>nil</code>, starts a process that monitors the client
images. If the <i>nanny</i> argument is a positive
integer, it is the number of seconds between client checks. The
default is 60 seconds. If the <i>nanny</i> argument is a
symbol naming a function or a function, this function is called with
one argument, the queried client, at each query interval. The nanny
process exits when the control server exits. The function is called
with the argument <code>nil</code> when the nanny process
exits. If the <i>nanny</i> argument is a list, the first
element is an interval and the second is a function.
</p>
<p id="29">
The <b><i>verbose</i></b> argument, if non-<code>nil</code>, causes progress and status messages on the
control process console. If the <i>verbose</i> argument
is <code>:output</code>, then the output of the client processes
is collected and printed on the control process standard output when
each client is terminated.
</p>
<p id="30">
The <b><i>name</i></b> argument specifies a name that
will be shown in verbose messages pertaining to this client image.
</p>
<p id="31">
The <b><i>data</i></b> argument is saved in the
client-lisp-data slot which contains data relevant to the application.
</p>
<p id="32">
The <b><i>class</i></b> argument is the name of the
class for the client instance. It must be a sub-class of
<code>client-lisp</code>.
</p>
<p id="33">
The <b><i>line-limit</i></b> argument specifies how the
output of client images should be handled. Its value can be an
integer, a string, <code>nil</code>, or a list of a single
integer.
</p>
<ul>
<li id="34">
An integer specifies how many lines should be saved. Output lines from
the client Lisp are collected by a background thread in the control
Lisp image. The lines are displayed when <a href="client-exit.htm"><b>client-exit</b></a> is called if
<i>verbose</i> was specified with the value
<code>:output</code>. This is the default on Unix with a value
of 500.
</li>
<li id="35">
A string specifies a file where the background thread saves all the
lines of output from the client Lisp. The most recent 20 lines are
also saved in the heap.
</li>
<li id="36">
A value of <code>nil</code> suppresses any client output
handling. This is the default on Windows where the output does not
accumulate in the stream. On Unix, this value may cause the client
process to block when the system buffer for the pipe is filled.
</li>
<li id="37">
A value of a list of one integer suppresses the background thread. The
collected output is saved up to the integer line limit. Lines are
collected from the client Lisp when <a href="client-ready-p.htm"><b>client-ready-p</b></a> is called. This option is
not recommended unless the output of the client Lisp is known to be
very small.
</li>
</ul>
<p id="38">
The file <b>examples/aclrpc/rpc-otherex.cl</b> contains some simple
programs that use run-other-client to manage several Lisp images.
</p>
<p id="39">
When a client Lisp image is started, it will most likely start in the
caller's home directory.  It may be desirable to change the directory
before making any other calls to the client image.
</p>
<p id="40">
The following examples show two ways to do this:
</p>
<p id="41">
If the client image contains the top-level module
</p>
<pre id="42">
    (client-funcall c "tpl:do-command" :cd root)
</pre>
<p id="43">
or a more primitive way
</p>
<pre id="44">
   (let* ((x (client-funcall c "excl.osi:chdir" root))
          (y (client-funcall c "cl:pathname" x)))
     (client-funcall c (client-funcall c "cl:set" '*default-pathname-defaults* y)))
</pre>
<p id="45">
See <a href="../../rpc.htm#several-images-1">Running several
communicating Allegro CL images</a> in
<a href="../../rpc.htm">rpc.htm</a> for information on running several Lisp
images.
</p>

<hr><p id="46"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/rpc/run-other-client.htm">8.1 version</a></td></tr></table></body></html>