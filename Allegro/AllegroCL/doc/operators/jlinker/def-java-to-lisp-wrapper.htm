<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>def-java-to-lisp-wrapper</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Macro</b></td><td align="left" bgcolor="#00FFFF"><b>Package: javatools.jlinker</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/jlinker/def-java-to-lisp-wrapper.htm">8.1 version</a></td></tr></table><h2 id="2">def-java-to-lisp-wrapper</h2>

<p id="3"><b>Arguments: </b><i>
class-name 
(</i>&amp;key <i>lisp-supers static-slots java-slots lisp-slots java-file if-exists verbose connector</i><i>) </i> &amp;rest <i>java-methods</i><i>
</i></p>

<p id="4">
 Evaluate <code>(require :jlinkent)</code> to load this
functionality. 
</p>
<p id="5">
This macro generates an output file with Java code that defines a Java
class. This macro also generates Lisp code corresponding to the Java
class. See <em>examples/jlinker/javabean/bean1gen.cl</em>.
</p>

<p id="6">
The arguments are:
</p>
<ul>
<li id="7">
<i>class-name</i>: a symbol or a list:
<ul>
<li id="8">
<code>name</code>
</li>
<li id="9">
<code>(name name () :public)</code>
<pre id="10">
(lisp-name java-name 
           (java-super java-interface ... )
           java-flag ... )
</pre>
</li>
</ul>
</li>
<li id="11">
<i>lisp-supers</i>: <code>(lisp-superclass ... )</code>
</li>
<li id="12">
<i>static-slots</i>: a symbol or a list:
<ul>
<li id="13">
<code>name</code>
</li>
<li id="14">
<code>((name name :type :int :flags (:public :static)))</code>
</li>
<li id="15">
<code>(slot-name accessor ... )</code>
</li>
</ul>
</li>
<li id="16">
<i>java-slots</i>: a symbol or a list:
<ul>
<li id="17">
<code>name</code>
</li>
<li id="18">
<code>((name name :type :int :flags (:public)))</code>
</li>
<li id="19">
<code>(slot-name accessor ... )</code>
</li>
</ul>
</li>
<li id="20">
<i>slot-name</i>:	
<code>(lisp-name java-name JiL-slot-def... )</code>
</li>
<li id="21">
<i>lisp-slots</i>:	
<code>(clos-slot-def ... )</code>
</li>
<li id="22">
<i>java-file</i>:	
<code>path-string  OR  T  OR :none</code>
</li>
<li id="23">
<i>if-exists</i>:	
<code>:supersede  OR  :append  OR nil</code>
</li>
<li id="24">
<i>connector</i>:	
<code>a JiL expression to test connection to Lisp.
Default: ("LispConnector.go" |false| |null|)</code>
</li>
<li id="25">
<i>java-methods</i>: <code>java-method</code> ....
See below.
</li>
</ul>

<p id="26">
A <code>java-method</code> is either a
<code>lisp-and-java-name</code> or a list with the following
elements:
</p>
<pre id="27">
(method-name
 ([java-arg-type] ... )
 [java-return-type [java-flag] ... [result-modifier]])
</pre>
<p id="28">
The elements are:
</p>
<ul>
<li id="29">
<i>method-name</i>: a list <code>(lisp-name
java-name)</code> or a <code>lisp-and-java-name</code>.
</li>
<li id="30">
<i>java-flag</i>: <code>:public</code> | <code>:static</code> | <code>:synchronized</code>
</li>
<li id="31">
<i>result-modifier</i>: <code>:copy</code> | <code>:ref</code> | <code>:oneway</code> | <code>:ignore</code>
</li>
<li id="32">
<i>java-return-type</i>:
<i>java-arg-type</i> | "void"
</li>
<li id="33">
<i>java-arg-type</i>: "int" | ... | class-name
</li>
</ul>

<p id="34">
This macro defines a Java method that calls the Lisp function. 
The Lisp function must be separately defined by the programmer.
</p>
<p id="35">
When a <i>method-name</i> is specified as a list, the
lisp-name should be a symbol and the java-name may be a symbol or a
string.  When <i>method-name</i> is specified as
lisp-and-java-name, and lisp-and-java-name is a symbol, then the
symbol-name string is used as the Java name. This is likely to be the
correct Java name only in a Modern (case-sensitive) Allegro CL images
(see <a href="../../case.htm">case.htm</a>).
</p>
<p id="36">
When lisp-and-java-name is a string, the Lisp symbol is taken to be
the result of <a href="../../../ansicl/dictentr/read-fro.htm"><b>read-from-string</b></a>
from a string of the form "ppp::sss" where <code>ppp</code> is
the name of the current package and <code>sss</code> is the name
string.
</p>


<p id="37">
When a <a href="def-java-to-lisp-wrapper.htm"><b>def-java-to-lisp-wrapper</b></a> form is
compiled (or evaluated) we write Java code definitions in the
specified files. These definitions create Java classes where each
method calls the corresponding Lisp function or method
</p>
<p id="38">
In the Lisp environment, we create a Lisp class with
<a href="def-java-class.htm"><b>def-java-class</b></a>
to represent the Java class.
</p>
<p id="39">
The Lisp functions or methods must be separately defined by the
programmer. See the file
<i>examples/jlinker/javabean/bean1.cl</i>.
</p>

<p id="40">
See <a href="../../jlinker.htm">jlinker.htm</a> for more information on the
jLinker facility.
</p>

<hr><p id="41"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/jlinker/def-java-to-lisp-wrapper.htm">8.1 version</a></td></tr></table></body></html>