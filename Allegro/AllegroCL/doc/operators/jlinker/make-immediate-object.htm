<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>make-immediate-object</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: javatools.jlinker</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/jlinker/make-immediate-object.htm">8.1 version</a></td></tr></table><h2 id="2">make-immediate-object</h2>

<p id="3"><b>Arguments: </b><i>x 
</i> &amp;optional <i>type</i> (<i>symcase</i> :read) (<i>pkcase</i> symcase)<i>
</i></p>

<p id="4">
The purpose of this function is to create a transfer object that will
transmit the value of the Lisp arguement to Java.  If the Lisp object
cannot be transmitted by value, the function returns <code>nil</code>.  The function <a href="make-dist-object.htm"><b>make-dist-object</b></a> always creates a
transfer object - when the Lisp object cannot be transmitted by value,
<a href="make-dist-object.htm"><b>make-dist-object</b></a> creates a remote
reference.
</p>
<p id="5">
If the second (<i>type</i>)argument to <a href="make-immediate-object.htm"><b>make-immediate-object</b></a> is omitted
or <code>nil</code>, the conversion is done following the
default conversion rules described in the <a href="../../jlinker.htm#data=types-conversions-3">Data Types and Conversions</a>
section of <a href="../../jlinker.htm">jlinker.htm</a>.  If the
<i>type</i> argument is not <code>nil</code>, then it must be a keyword that constrains how
the Lisp value should be transmitted to Java. The table below shows
how the Lisp type of the first argument, <i>x</i>, and
the second argument, <i>type</i>, combine to control the
resulting Java type:
</p>

<table border="1" width="90%">

  <tr>
    <td width="16%"><strong>Lisp Type of x</strong></td>
    <td width="17%"><strong>type is :ref</strong></td>
    <td width="17%"><strong>type is :boolean</strong></td>
    <td width="16%"><strong>type is :byte</strong></td>
    <td width="17%"><strong>type is :short</strong></td>
    <td width="17%"><strong>type is :int</strong></td>
  </tr>
  <tr>
    <td width="16%"><code>bignum</code></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>byte</code></td>
    <td width="17%"><code>short</code></td>
    <td width="17%"><code>int</code></td>
  </tr>
  <tr>
    <td width="16%"><code>integer</code></td>
    <td width="17%"><code>int</code></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>byte</code></td>
    <td width="17%"><code>short</code></td>
    <td width="17%"><code>int</code></td>
  </tr>
  <tr>
    <td width="16%"><code>real</code></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>double</code></td>
    <td width="17%"><code>double</code></td>
    <td width="17%"><code>double</code></td>
  </tr>
  <tr>
    <td width="16%"><code>string</code></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>String</code></td>
    <td width="17%"><code>String</code></td>
    <td width="17%"><code>String</code></td>
  </tr>
  <tr>
    <td width="16%"><code>character</code></td>
    <td width="17%"><code>char</code></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>char</code></td>
    <td width="17%"><code>char</code></td>
    <td width="17%"><code>char</code></td>
  </tr>
  <tr>
    <td width="16%"><code>(array (signed-byte 32) (*))</code></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>byte[]</code></td>
    <td width="17%"><code>short[]</code></td>
    <td width="17%"><code>int[]</code></td>
  </tr>
  <tr>
    <td width="16%"><code>(array double-float (*))</code></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>double[]</code></td>
    <td width="17%"><code>double[]</code></td>
    <td width="17%"><code>double[]</code></td>
  </tr>
  <tr>
    <td width="16%"><code>null</code></td>
    <td width="17%"><code>null</code></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>byte[]</code></td>
    <td width="17%"><code>short[]</code></td>
    <td width="17%"><code>int[]</code></td>
  </tr>
  <tr>
    <td width="16%"><code>symbol</code>
     See <a href="#tab-note-3">Note 3</a></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
  </tr>
  <tr>
    <td width="16%"><code>cons</code>
    See <a href="#tab-note-2">Note 2</a></td>
    <td width="17%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="17%"><code>boolean</code></td>
    <td width="16%"><code>byte[]</code></td>
    <td width="17%"><code>short[]</code></td>
    <td width="17%"><code>int[]</code></td>
  </tr>
</table>

<table border="1" width="90%">

  <tr>
    <td width="20%"><strong>Lisp Type of x</strong></td>
    <td width="20%"><strong>type is :long</strong></td>
    <td width="20%"><strong>type is :single</strong></td>
    <td width="20%"><strong>type is :double</strong></td>
    <td width="20%"><strong>type is :string</strong></td>
  </tr>
  <tr>
    <td width="20%"><code>bignum</code></td>
    <td width="20%"><code>long</code></td>
    <td width="20%"><code>int</code></td>
    <td width="20%"><code>int</code></td>
    <td width="20%"><code>int</code></td>
  </tr>
  <tr>
    <td width="20%"><code>integer</code></td>
    <td width="20%"><code>long</code></td>
    <td width="20%"><code>int</code></td>
    <td width="20%"><code>int</code></td>
    <td width="20%"><code>int</code></td>
  </tr>
  <tr>
    <td width="20%"><code>real</code></td>
    <td width="20%"><code>double</code></td>
    <td width="20%"><code>float</code></td>
    <td width="20%"><code>double</code></td>
    <td width="20%"><code>double</code></td>
  </tr>
  <tr>
    <td width="20%"><code>string</code></td>
    <td width="20%"><code>String</code></td>
    <td width="20%"><code>String</code></td>
    <td width="20%"><code>String</code></td>
    <td width="20%"><code>String</code></td>
  </tr>
  <tr>
    <td width="20%"><code>character</code></td>
    <td width="20%"><code>char</code></td>
    <td width="20%"><code>char</code></td>
    <td width="20%"><code>char</code></td>
    <td width="20%"><code>char</code></td>
  </tr>
  <tr>
    <td width="20%"><code>(array (signed-byte 32) (*))</code></td>
    <td width="20%"><code>int[]</code></td>
    <td width="20%"><code>int[]</code></td>
    <td width="20%"><code>int[]</code></td>
    <td width="20%"><code>int[]</code></td>
  </tr>
  <tr>
    <td width="20%"><code>(array double-float (*))</code></td>
    <td width="20%"><code>double[]</code></td>
    <td width="20%"><code>float[]</code></td>
    <td width="20%"><code>double[]</code></td>
    <td width="20%"><code>double[]</code></td>
  </tr>
  <tr>
    <td width="20%"><code>null</code></td>
    <td width="20%"><code>null</code></td>
    <td width="20%"><code>float[]</code></td>
    <td width="20%"><code>double[]</code></td>
    <td width="20%"><code>String[]</code></td>
  </tr>
  <tr>
    <td width="20%"><code>symbol</code>
     See <a href="#tab-note-3">Note 3</a></td>
    <td width="20%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="20%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="20%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="20%">See <a href="#tab-note-1">Note 1</a></td>
  </tr>
  <tr>
    <td width="20%"><code>cons</code>
     See <a href="#tab-note-2">Note 2</a></td>
    <td width="20%">See <a href="#tab-note-1">Note 1</a></td>
    <td width="20%"><code>float[]</code></td>
    <td width="20%"><code>double[]</code></td>
    <td width="20%"><code>String[]</code></td>
  </tr>

</table>


<h3 id="6">Notes</h3>

<ol>
<li id="7">
<a name="tab-note-1"></a> In this case, <a href="make-immediate-object.htm"><b>make-immediate-object</b></a> returns 
<code>nil</code>
because the Lisp object may not be passed by value in this way and a
remote reference must be created.
</li>
<li id="8">
<a name="tab-note-2"></a> When a type is specified and the argument
<i>x</i> is a <code>cons</code>, we attempt to
make a Java array of the specified type. If an unsuitable value is
found in the list, an error is signaled. Integer values must be in the
Java <code>int</code> range and get truncated to byte or short
if appropriate.
<p id="9">
The Lisp list <code>(1 2 3)</code> is passed to Java as a remote
reference in the default conversion case.
</p>
<p id="10">
The form <code>(make-immediate-object '(1 2 3) :int)</code> will
pass to Java an array of int values.
</p>
</li>
<li id="11">
<a name="tab-note-3"></a> When the argument <i>x</i> is
a symbol, the <i>type</i> argument may be one of the
Lisp symbols <code>symbol-value</code>,
<code>symbol-function</code>, or class to transmit a remote
reference to the corresponding Lisp value.
</li>
</ol>


<p id="12">
It may seem less than useful to transmit Lisp symbols to a Java
program since symbols are not a useful Java data type.  Symbol
references are useful to the Java program as values that may be passed
back to the Lisp application.  Once the symbol reference has been
passed to Java it may be returned to Lisp many times with little
overhead and yields the same <a href="../../../ansicl/dictentr/eq.htm"><b>eq</b></a> symbol in Lisp every time.  It
is also possible for the Java program to create symbol references with
the <code>newDistSym()</code> method.
</p>
<p id="13">
A reference to a symbol is composed of the symbol name and the name of
the package bound to <a href="../../../ansicl/dictentr/package.htm"><code>*package*</code></a> at the time <a href="make-immediate-object.htm"><b>make-immediate-object</b></a> is
called. The <i>symcase</i> and
<i>pkcase</i> arguments apply only to symbol references
and determine how the symbol name will be transmitted in the remote
reference. This will determine how the symbol will be resolved when
the remote reference returns from the Java program. The values of
those arguments can be:
</p>

<ul>
<li id="14">
<code>:intern</code>:
pass the symbol name and/or package name as a 
string to be interpreted literally.
</li>
<li id="15">
<code>:find</code>: pass the symbol name and/or package name as
a string.  A package name is resolved by searching the list of
existing package names and nicknames matching with <a href="../../../ansicl/dictentr/equalp.htm"><b>equalp</b></a>.  A symbol name is resolved
by searching the visible symbols in the specified package.
</li>
<li id="16">
<code>:read</code>: pass the symbol name and/or package name as
a string created with the ~S format directive.  A package name is
resolved by reading the package name string with <a href="../../../ansicl/dictentr/package.htm"><code>*package*</code></a> bound to the keyword
package.
<p id="17">
A symbol name is resolved by reading the symbol name string with
<a href="../../../ansicl/dictentr/package.htm"><code>*package*</code></a> bound to the
specified package.
</p>
</li>
</ul>

<p id="18">
See <a href="../../jlinker.htm">jlinker.htm</a> for more information on the
jLinker facility.
</p>

<hr><p id="19"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/jlinker/make-immediate-object.htm">8.1 version</a></td></tr></table></body></html>