<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>memref-int</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Function</b></td><td align="left" bgcolor="#00FFFF"><b>Package: system</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/system/memref-int.htm">8.1 version</a></td></tr></table><h2 id="2">memref-int</h2>

<p id="3"><b>Arguments: </b><i>address offset pos type 
</i> &amp;optional <i>coerce</i></p>

<p id="4">
This function and the related function <a href="memref.htm"><b>memref</b></a> calculate an address in memory
and performs a read from that address. This function takes an address
as an argument while <a href="memref.htm"><b>memref</b></a> takes a Lisp object.
</p>
<p id="5">
The width and style of the read depends upon the
<i>type</i>. The possible values for the
<i>type</i> argument are shown in a table below.
</p>
<p id="6">
<a href="memref-int.htm"><b>memref-int</b></a> always
returns a number.  The type of the number is also determined by the
<i>type</i> argument.  This function is <a href="../../../ansicl/dictentr/setfpset.htm"><b>setf</b></a>'able. The setf function writes to
the addressed memory instead of reading from it.
</p>
<p id="7">
The <i>address</i> argument must be an integer and the
<i>offset</i> and <i>pos</i> arguments
must be fixnum values. The sum of the three arguments is treated as
an address in memory from which data is fetched, or to which data is
stored.
</p>
<p id="8">
When the <i>coerce</i> argument is non-<code>nil</code> some checking is done in the setf form.  The
value to be stored is coerced to the required type.
</p>
<p id="9">
This function provides low-level memory access in Allegro
CL. However, even though the name is exported and 
documented, we recommend against using this function in user code. Instead, we
recommend using higher-level functions, such as those linked to
below. However, the function is useful in the development cycle for
debugging purposes.
</p>
<p id="10">
<b>WARNING about setf</b>: except when the <i>type</i>
is <code>:lisp</code>, the setf function does not do any
setf-protection. If it is used to store non-Lisp values into a memory
location that was intended to hold a Lisp value, then a
non-recoverable error is very likely to occur during the next GC.
</p>
<p id="11">
The access-types (possible values of <i>type</i>)
that are available are as follows: 
</p>
<pre id="12">
:unsigned-byte, :signed-byte (1-byte access, 1-byte integer result)  
:unsigned-word, :signed-word (2-byte access, 2-byte integer result)  
:unsigned-long, :signed-long 
  ;; 4-byte access, 4-byte integer result in 32-bit lisps
  ;; undetermined (4-byte or 8-byte) in 64-bit lisps
:unsigned-long32 (4-byte access, 4-byte integer result)
:unsigned-long64 (8-byte access, 8-byte integer result on 64-bit
                  Lisps and Compaq Alpha and SGI32-bit Lisps
                  but 4-byte access, 4-byte integer result
                  on all others)
:fixnum (4-byte access, fixnum result [top bits lost on overflow])  
:lisp (4-byte access, lisp result [careful, could confuse gc])  
:single-float (or single-float) (4-byte access, 4-byte single-float result)  
:double-float (or double-float) (8-byte access, 8-byte double-float result) 
:signed-natural 
:unsigned-natural
  ;; For these last two, in 32-bit lisps, these will 
  ;; construct 32-bit values, and in 64-bit lisps, it will construct 
  ;; 64-bit values
:nybble (4-bit -- half-byte -- value)
</pre>

<p id="13">
Be aware that though the access types might look similar to C types,
they are not actually identical.
</p>
<p id="14">
For more information on <code>:signed-natural</code> and
<code>:unsigned-natural</code>, see <a href="../../implementation.htm#app-64bit-2">64 bit Allegro CL
Implementations</a> in <a href="../../implementation.htm">implementation.htm</a>.
</p>


<h3 id="15">Programming Notes</h3>

<ol>
<li id="16">
The function <a href="memref-int.htm"><b>memref-int</b></a> is
very similar to the <a href="memref.htm"><b>memref</b></a> function, but because the
base address determination is significantly different the descriptions
are different in several subtle but important ways.
</li>
<li id="17">
In place of using <a href="memref-int.htm"><b>memref-int</b></a> and <a href="memref.htm"><b>memref</b></a>, operators like <a href="../excl/single-float-to-shorts.htm"><b>single-float-to-shorts</b></a>, <a href="../excl/double-float-to-shorts.htm"><b>double-float-to-shorts</b></a>, <a href="../excl/shorts-to-single-float.htm"><b>shorts-to-single-float</b></a>, <a href="../excl/shorts-to-double-float.htm"><b>shorts-to-double-float</b></a> may be used for
accessing/creating floats. A foreign type can be defined (see
<a href="../../ftype.htm">ftype.htm</a>) to access arbitrary memory areas. See
also <a href="../excl/write-vector.htm"><b>write-vector</b></a>.
</li>
<li id="18">
When optimization is declared at a sufficient level, the call to 
<a href="memref-int.htm"><b>memref-int</b></a>
and to its setf form, is compiled in line and is thus very efficient.
Note that when the optional <i>coerce</i>
argument is supplied, then the call is not
open-coded when compiled.
</li>
<li id="19">
When the <i>coerce</i> argument is non-nil some checking
is done in the setf form. The value to be stored is coerced to the
required type. This is especially useful when the argument is a float
value, but of the wrong type, as in
<pre id="20">
(setf (sys:memref-int array-address 0 0 :double-float :coerce) 1.0s0)
</pre>
</li>
<li id="21">
The <i>offset</i> and <i>pos</i> arguments
are equivalent and interchangeable. They are both added as
byte-offsets to the base address to determine the final memory
address.  Usually, the <i>offset</i> is some constant
that adjusts for the start of the data in some object being
accessed. Some of the offsets for lisp objects are described in
<i>[Allegro directory]/misc/lisp.h</i> in the Allegro CL
distribution. In an earlier version of this documentation, it was
stated that the offsets are available in Lisp itself by calling
certain otherwise undocumented functions. That statement was
incorrect. The offsets are not reliably available with Lisp.
</li>
<li id="22">
One application of <a href="memref-int.htm"><b>memref-int</b></a> is to access large blocks of
memory (larger than <a href="../../../ansicl/dictentr/array-to.htm"><code>array-total-size-limit</code></a>).
<p id="23">
For example, if the variable <code>addr</code> holds the foreign
address of a large block of memory with a length stored in the
<code>size</code> variable, the following loop could be used to
extract bytes from the block:
</p>
<pre id="24">
(dotimes (i size) (memref-int (+ addr i) 0 0 :byte))
</pre>
<p id="25">
Note how the address arithmetic is performed before the call to
<a href="memref-int.htm"><b>memref-int</b></a>.  If the index
were passed as the <i>offset</i> or the
<i>pos</i> argument, it would be subject to the fixnum
limitation.
</p>
<p id="26">
To avoid bignum boxing in this iteration, memref with a fixnum
argument may be used to keep all numbers in the fixnum range.  See the
description of <a href="memref.htm"><b>memref</b></a> for a detailed analysis of
this technique.
</p>
</li>
</ol>

<hr><p id="27"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/operators/system/memref-int.htm">8.1 version</a></td></tr></table></body></html>