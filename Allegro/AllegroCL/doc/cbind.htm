<!DOCTYPE HTML PUBLIC>
<html>

<head>
<title>Allegro C Binder</title>
<!--  $Id: cbind.htm,v 1.3 2009/04/20 18:59:01 layer Exp $  */  -->
</head>

<body>

<hr>

<h1>A Software Tool to Bind Allegro CL to C Libraries</h1>

<hr>

<h4>Draft History:</h4>
<i>

<p><br>
2000Oct31 Update to version 1.6.1 - ACL 6.0 <br>
2004Jun12 Update to 1.6.3 - ACL 7.0 and 8.0</i></p>

<hr>

<h3>Contents</h3>

<ul>
<!--
<LI><A HREF="#hhh222">Header 2</A></LI>
    <UL>
    <LI><A HREF="#hhh333">Header 3</A></LI>
    </UL>
-->
  <li><a HREF="#intro">Introduction</a></li>
  <li><a HREF="#using">Using the Tool</a></li>
  <ul>
    <li><a HREF="#usingfn">The Main Conversion Function</a></li>
    <li><a HREF="#usinglout4">Generated Lisp Output </a></li>
    <li><a HREF="#usingcout4">Generated C Output</a></li>
    <li><a HREF="#usingcust">Customizing Lisp Output</a></li>
    <li><a HREF="#usingwarn">Warnings and Notes in Generated Output</a></li>
    <ul>
      <li><a HREF="#varargs">C Functions with Varying Number of Arguments</a> </li>
    </ul>
    <li><a HREF="#usingprob">Reporting Problems</a></li>
  </ul>
  <li><a HREF="#tech">Technical Details</a></li>
  <ul>
    <li><a HREF="#techgram">The C Grammar</a></li>
    <li><a HREF="#techmac">C Macros</a></li>
  </ul>
  <li><a HREF="#install">Installing the Tool</a></li>
</ul>

<hr>

<h2><a NAME="intro">Introduction</a></h2>

<p>The purpose of this tool is to facilitate the creation of an interface between Allegro
CL and a library of C functions and subprograms. </p>

<p>The C library is typically defined by one or more header files that declare the
functions and variables that make up the interface and define named constants significant
at the interface. This tool parses the header files and generates appropriate Lisp and C
code to create the interface. In some cases, warning messages are generated to point out
areas that may need additional programmer intervention. </p>

<p>The Binder tools assume that the (header file) input is a complete and accurate
representation of the _interface_ to an application library. </p>

<p>The Binder tools are not designed to examine a complete application and to somehow
abstract out the interface definition. We assume that this abstraction step has already
been taken by the time the input is presented to the tools. </p>

<p>In the case of third party libraries, this is typically the case. The library is
defined by a set of header files that are needed to write correct C code that calls these
libraries. The same headers are necessary and usually sufficient to generate the Lisp
interface to the library. </p>

<p>In the case of user written applications or libraries, it is necessary for the user to
create appropriate header files defining the interface. The binder tools will fail
miserably if simply presented with the application code files. For example, the body of
function definitions is entirely skipped by the source code analyzer; thus, if some type
declaration occurs only in the scope of a function definition, it will never be seen. </p>

<h2><a NAME="using">Using the Tool</a></h2>

<h3><a NAME="usingfn">The Main Conversion Function</a></h3>

<p>The binding process is normally invoked with the function <code><b>ff:build-c-binding</b></code>
with the following arguments: </p>

<pre>
<b>ff:build-c-binding</b> <i>c-or-h-file</i>             <b><i>Function</i></b>
                          <b>&amp;key</b> (<i>c-args</i> &quot;&quot;)
                               (<i>lisp-out</i> t)
                               (<i>c-out</i> t)

                               <i>include</i>
                               <i>exclude</i>

                               (<i>package</i> nil)

                               (<i>case</i> <b>ff:*decode-intern-case*</b>)
                               (<i>hyphen</i> <b>ff:*decode-intern-hyphen*</b>)
                               (<i>dash</i> <b>ff:*decode-intern-dash*</b>)
                               (<i>res</i> <b>ff:*decode-intern-res*</b>)

                               (<i>verbose</i> <b>nil</b>)

</pre>

<p>The first and only required argument, <code><i>c-or-h-file</i></code>, is the pathname
to a file of C code. This file, and any files that it includes, will be parsed in order to
determine what interface components need to be generated. This is normally a header file (<code>.h</code>
file type or extension), but may also be a C source file. </p>

<p>The keyword argument <code><i>c-args</i></code> is very important to the correct
functioning of the interface generator. It is a string containing all the <code>-D</code>
and <code>-I</code> switches required for a complete and correct compilation of the file
specified in the <code><i>c-or-h-file</i></code> argument. <b>If this argument is missing
or incorrect, the effect is usually to print many pre-processor and parser warnings and
error messages; but it may also silently result in an incorrect interface definition. </b><i>

<ul>
  <li>When the pre-processor, parser and binder are run on a particular machine and operating
    system the default assumption is that the header files and compiler options are the ones
    appropriate for ordinary C compilations on that machine and operating system. </li>
  <li>Since the Lisp/C binder is a purely symbolic process, these assumptions do not need to
    hold. Thus, the pre-processor and parser could be run on an SGI/Irix machine, to process
    header files appropriate to Windows NT. The Lisp image could itself be running on an AIX
    machine. </li>
  <li>This process will yield the correct result as long as the pre-processor and parser see
    the appropriate sequence of header files and the appropriate definitions of C macros. This
    is most easily achieved in the native environment, but careful analysis of include
    statements and system macros should allow the correct environment to be created in an
    unrelated machine. </li>
</ul>
</i>

<p>The keyword argument <code><i>lisp-out</i></code> is the pathname of a file where the
generated Lisp code is placed. If this argument is NIL, nothing is generated. If this
argument is t, the output is printed to the current value of <code><b>*standard-output*</b></code>.
</p>

<p>The keyword argument <code><i>c-out</i></code> is the pathname of a file where the
generated C code is placed. If this argument is NIL, nothing is generated. If this
argument is t, the output is printed to the current value of <code><b>*standard-output*</b></code>.
C program text is generated when wrapper functions are needed to transmit data correctly
between Lisp and C; one situation is when we need to pass structure arguments by value
between Lisp and C. </p>

<p>The keyword arguments <code><i>include</i></code> and <code><i>exclude</i></code>
determine which C files are used to generate Lisp interface components. Only one of these
arguments may be used in any call to <code><b>ff:build-c-binding</b></code>. When
specified, the value must be a pathname or a list of pathnames. The effect of the <code><i>include</i></code>
keyword is to generate Lisp interface components only from the specified file or files;
any other C files included in the compilation are ignored by the Lisp binder but may be
essential to the C parsing stage of the process. The effect of the <code><i>exclude</i></code>
keyword is to ignore the specified files in the Lisp binder. For large libraries using
complex collections of include files, it may be necessary to make several passes through
the binding process in order to sort out the files needed in the Lisp interface. The file
selection arguments apply only to interface components generated from C statements. The
current implementation cannot determine the origin of a C macro and therefore all constant
definitions are always included in the generated output. </p>

<p>The keyword arguments <code><i>case</i></code>, <code><i>hyphen</i></code>, <code><i>dash</i></code>,
and <code><i>res</i></code> control how foreign symbol strings are translated into Lisp
symbols. The default values are taken from corresponding special variables described in
the sections on Lisp output and customization. The default behavior is to convert foreign
name strings according to the current readtable case and to signal an error if a conflict
occurs. A conflict occurs when two different foreign strings map to the same Lisp symbol
or when the Lisp symbol is already bound or defined as a function or macro. </p>

<p>The keyword argument <code><i>package</i></code> is the name of a package where foreign
symbols are interned. The default is NIL. The effect is to use the value of the global
variable <code><b>ff:*default-foreign-symbol-package*</b></code>. If the value of this
variable is NIL, the effect is to use a package defined as follows </p>

<pre>
(defpackage &quot;C&quot; (:use common-lisp foreign-functions))
</pre>

<p>It is a good idea to place all the foreign symbols in a Lisp package that does not use
any other Lisp packages. This is the only definitive way to avoid symbol name conflicts. </p>

<p>The keyword argument <code><i>verbose</i></code> controls the amount of information
printed when a parse or translation error is encountered. When T, a fragment of the parse
tree is printed. </p>

<h3><a NAME="usinglout4">Generated Lisp Output</a></h3>

<p>The generated Lisp output consists of 

<ul>
  <li><code><b>ff:bind-c-function</b></code> or <code><b>ff:bind-c-alternate</b></code> forms
    for declared C functions </li>
  <li><code><b>ff:bind-c-type</b></code> or <code><b>ff:bind-c-typedef</b></code> forms for
    declared C types </li>
  <li><code><b>ff:bind-c-constant</b></code> forms for C constants defined with <code><b>#define</b></code>
  </li>
</ul>

<p>The pupose of these macros is to emit an <code><b>ff:bind-c-export</b></code> form to
cause the conditional export of Lisp symbols corresponding to foreign identifiers, and to
allow further customization of the generated code when so desired by the user. </p>

<p>When the C file contains a function declaration, a Lisp form such as the one below is
generated: </p>

<pre>
<!-- c-ex01.h:7 -->
;; c-ex01.h:7 <2> 
;; struct hostent* gethostbyname( const char*, struct hostent*, char*, int,
;;              int* h_errnop);
(bind-c-function gethostbyname
     :unconverted-entry-name &quot;gethostbyname&quot;
     :c-return-type (&quot;struct&quot; &quot;hostent&quot; &quot;*&quot;)
     :return-type (* hostent)
     :c-arg-types ((&quot;const&quot; &quot;char&quot; &quot;*&quot;) (&quot;struct&quot; &quot;hostent&quot; &quot;*&quot;) (&quot;char&quot; &quot;*&quot;)
                   (&quot;int&quot;) (&quot;int&quot; &quot;*&quot;))
     :c-arg-names (Arg0 Arg1 Arg2 Arg3 h_errnop)
     :arguments ((* :char) (* hostent) (* :char) :int (* :int))
     :prototype t
     )
</pre>

<p>When compiled, this form macroexpands into a suitable <code><b>ff:defforeign</b></code>
form. </p>

<p>The leading comment identifies the C statement number in the source file and shows a
reconstruction of the original C source declaration. The Lisp type specified for each
argument in the :arguments list is the most specific Lisp type that includes all the
possible Lisp argument types. </p>

<p>When the C file contains a struct declaration or a typedef, a corresponding <code><b>ff:bind-c-type</b></code>
or <code><b>ff:bind-c-typedef</b></code> form is generated: </p>

<pre>
<!-- c-ex01.h:10 -->
;; c-ex01.h:10 <3> 
;; struct servent {
;;         char* s_name; char** s_aliases; int s_port; char* s_proto; };
(bind-c-type servent (:struct
  (s_name (* :char))   ;; char* s_name
  (s_aliases (* :char))   ;; char** s_aliases
  (s_port :int)   ;; int s_port
  (s_proto (* :char))   ;; char* s_proto
  ))   ;; bind-c-type servent

;; c-ex01.h:17 <4> typedef unsigned long ulong;
(bind-c-type ulong :unsigned-long)  

</pre>

<p>Constants defined in the C source files are translated to <code><b>ff:bind-c-constant</b></code>
forms. </p>

<pre>
;; #define BAR 17 
(BIND-C-CONSTANT BAR 17)     ;; 0x11  
;; #define XST_DATARCVD 6 
(BIND-C-CONSTANT XST_DATARCVD 6)     ;; 0x6  

;; #define SETRGBSTRINGA &quot;commdlg_SetRGBColor&quot; 
(BIND-C-CONSTANT SETRGBSTRINGA &quot;commdlg_SetRGBColor&quot;)     

;; #define WM_DDE_FIRST 992 
(bind-c-constant WM_DDE_FIRST 992)     ;; 0x3e0  
(bind-c-constant WM_DDE_TERMINATE (+ WM_DDE_FIRST 1))     
(bind-c-constant WM_DDE_ADVISE (+ WM_DDE_FIRST 2))     

</pre>

<p>When the C file contains a macro definition that defines an alternate name for a
declared function, the additional names appear in a <code><b>:all-names</b></code> keyword
argument in the <code><b>ff:bind-c-function</b></code> form. The value is an alist of a
symbol and foreign string pair for each name of the foreign function. </p>

<p>By default this list is sorted on the length of the foreign string. The first item in
the list is used for the name of the primary lisp function defined by defforeign. The
other names are used to define alternate macros with a bind-c-alternate form such as </p>

<pre>
;; #define AddAtom AddAtomA
(BIND-C-ALTERNATE ADDATOMA (&amp;rest args) `(ADDATOM ,@args))
</pre>

<h3><a NAME="usingcout4">Generated C Output</a></h3>

<p>When a C function is declared to receive a struct by value, we need to generate some
new C program code because ACL only allows struct pointers as arguments. We create an
intermediate C function that receives a pointer argument and passes the dereferenced
pointer to the intended function. When this situation is encountered in the C source file,
the following comment and definition are generated. </p>

<pre>
<!-- c-ex02.h:7 -->
;; c-ex02.h:7 <5> void passHostEnt( struct hostent x);

;;NOTE: C wrapper needed to pass structure or union type
;;   hostent
;;   as argument.

(bind-c-function passHostEnt
     :unconverted-entry-name &quot;ACL_passHostEnt&quot;
     :c-return-type (&quot;void&quot;)
     :return-type :void
     :c-arg-types ((&quot;struct&quot; &quot;hostent&quot; &quot;*&quot;))
     :c-arg-names (x)
     :arguments ((* hostent))
     :prototype t
     )

</pre>

<p>Note how the foreign name in this case is not identical to the Lisp name of the C
function. </p>

<p>The additional C definition is generated in the C output file as follows: </p>

<pre>
<!-- c-ex02.h:7 -->
/* Wrapper function to dereference pointers to structure arguments. */
void  ACL_passHostEnt(  struct hostent * x)
{
  passHostEnt(*x);
}
</pre>

<p>When a C function returns a struct by value, a similar wrapper is generated to return a
pointer to the structure in freshly allocated malloc memory. </p>

<pre>
<!-- c-ex02.h:9 -->
;; c-ex02.h:9 <6> struct hostent ReturnHostEnt( int);

;;NOTE: C wrapper needed to return structure or union type
;;   hostent.

(bind-c-function ReturnHostEnt
     :unconverted-entry-name &quot;ACL_ReturnHostEnt&quot;
     :c-return-type (&quot;struct&quot; &quot;hostent&quot; &quot;*&quot;)
     :return-type (* hostent)
     :c-arg-types ((&quot;int&quot;))
     :c-arg-names (Arg0)
     :arguments (:int)
     :prototype t
     )

</pre>

<p>Generated C wrapper: </p>

<pre>
<!-- c-ex02.h:9 -->
/* Wrapper function to return pointer to structure. */
int  ACL_ReturnHostEnt(  int Arg0)
{
  int ptr = (int)malloc(sizeof(struct hostent ));
  *((struct hostent *)ptr) = ReturnHostEnt(Arg0);
  return(ptr);
}
</pre>

<p>When the C function returns an unsigned value, we generate a Lisp wrapper to extract
the value correctly. </p>

<h3><a NAME="usingcust">Customizing Lisp Output</a></h3>

<p>The macros <code><b>ff:bind-c-function</b></code> and friends are generated in the Lisp
output file in order to allow convenient user customization of the actual foreign
interface. The built-in definition in file <code>cdbind.cl</code> emits a <code><b>ff:defforeign</b></code>
form formed by simply selecting the appropriate components of the <code><b>ff:def-c-binding</b></code>
form. Users with their own foreign type layer may use other components of that form to
generate a more specific foreign interface call. </p>

<p>The function <code><b>ff::decode-intern</b></code> is used exclusively to convert
strings to symbols in the binder. It is a function of one argument, a string or symbol. If
the argument is a symbol, the function assumes it is already converted and does nothing. </p>

<p>If the argument is a string, this function uses the following special variables
(re-bound by build-c-binding) to determine how the conversion is done: </p>

<pre>

*decode-intern-hyphen*

   NIL - no effect
    T  - Insert a hyphen at every lower-to-upper transition and every
         case-sensitive-to-insensitive transition:

	MenuItemFromPoint  ==&gt;  Menu-Item-From-Point
        Menu3              ==&gt;  Menu-3
         
*decode-intern-dash*

   NIL - no effect
    T  - translate underscore characters to hyphens


*decode-intern-case*
   
   a readtable   - use the value of readtable-case for that readtable
   :READER       - use the value of readtable-case for *readtable*
   :PRESERVE     - keep the case of the string unchanged
   :DOWNCASE     - convert the string to lowercase letters
   :UPCASE       - convert the string to uppercase letters
   :INVERT       - if all the case-sensitive letters are of one case
                   switch them all to the other case, otherwise leave it be


*decode-intern-res*

   :error - signal an error if a name conflict occurs
   :index - try adding 0, 1, 2, ... to the end of the string until 
            the conflict is resolved
   a list - take suffix strings in order from the list and append 
            to the foreign until the conflict is resolved.  If the
            list runs out, signal an error.

</pre>

<p>If a different name translation scheme is desired, the function decode-intern must be
redefined as required. </p>

<h3><a NAME="usingwarn">Warnings and Notes in Generated Output</a></h3>

<p>Messages of the form </p>

<pre>
 ... ;;WARNING: ... 
</pre>

<p>are emitted when the binder detects a situation where the generated code may function
incorrectly or when the binder is unable to generate any correct code at all. </p>

<p>Messages of the form </p>

<pre>
 ... ;;NOTE: ... 
</pre>

<p>are emitted when the binder generates additional Lisp or C code that may be needed to
use the interface effectively. </p>

<p>In many cases, inspection of the generated code and specific application knowledge will
reveal that the generated code is adequate. In some cases it may be necessary to modify
the generated code. </p>

<p>The binder generates possibly incorrect code with a warning to prevent a possible
cascade of subsequent warnings that might be caused by generating nothing. This might be
the case if a type cannot be generated correctly </p>

<pre>
(ff:bind-c-constant &quot;<i>foo</i>&quot; &quot;<i>StrData</i>&quot;)  ;;WARNING: C code expects wide string&quot;
</pre>

<p>This warning is emitted when the C string is defined with the <code>L</code> modifier. </p>

<pre>
<!-- c-ex03.h:6 -->
;; c-ex03.h:6 <7> typedef long long LongLong;

;;WARNING:  'long long' is implemented as a struct of 2 long!
(bind-c-type LongLong long-long)  

</pre>

<p>The binder defines and emits the following 64 and 128-bit types: </p>

<pre>
<i>long long</i>              -&gt; <b>FF:LONG-LONG</b>
<i>unsigned long long</i>     -&gt; <b>FF:UNSIGNED-LONG-LONG</b>
<i>long double</i>            -&gt; <b>FF:LONG-DOUBLE</b>
</pre>

<p>These are defines as structs of two long or two double values. This definition has the
correct storage size but may or may not have the correct alignment. In addition, none of
these definitions have a numeric equivalent in ACL, and thus do not behave as numbers in
Lisp code. </p>

<pre>
;;WARNING: Eval of above Lisp form resulted in error:
;;   <i>Lisp error condition</i>
</pre>

<p>This message is usually emitted following a foreign type definition. This result is
likely to produce a cascade of subsequent error messages. </p>

<h4><a NAME="varargs">C Functions with Varying Number of Arguments</a></h4>

<pre>
<!-- c-ex04.h:7 -->
;; c-ex04.h:7 <9> extern int exec1( const char*, const char*, ELLIPSIS);

;;NOTE: Lisp args to this function will get default conversions only.
(bind-c-function exec1
     :unconverted-entry-name &quot;exec1&quot;
     :c-return-type (&quot;int&quot;)
     :return-type :int
     :c-arg-types ((&quot;const&quot; &quot;char&quot; &quot;*&quot;) (&quot;const&quot; &quot;char&quot; &quot;*&quot;) &quot;...&quot;)
     :c-arg-names (Arg0 Arg1)
     :arguments nil
     )
</pre>

<p>This foreign function may be called with any number of arguments, but all the necessary
type conversions must be implicit in the Lisp type of each argument. </p>

<p>When the C function requires a wrapper, only a fixed number of arguments may be passed
through the wrapper. In that case we generate the warning of the form </p>

<pre>
<!-- c-ex04.h:9 -->
;; c-ex04.h:9 <10> extern int exec2( LongLong, const char*, ELLIPSIS);

;;NOTE: C wrapper needed to pass structure or union type
;;   LongLong
;;   as argument.

/* Wrapper function to dereference pointers to structure arguments. */
int  ACL_exec2(  LongLong * Arg0, const char * Arg1)
{
  return(exec2(*Arg0, Arg1));
}


;;WARNING: This wrapper function will only pass exactly 2 arguments
(bind-c-function exec2
     :unconverted-entry-name &quot;ACL_exec2&quot;
     :c-return-type (&quot;int&quot;)
     :return-type :int
     :c-arg-types ((&quot;LongLong&quot; &quot;*&quot;) (&quot;const&quot; &quot;char&quot; &quot;*&quot;))
     :c-arg-names (Arg0 Arg1)
     :arguments ((* LongLong) (* :char))
     :prototype t
     )
</pre>

<h3><a NAME="usingprob">Reporting Problems</a></h3>

<p>The C parser and parse-tree decoder we use is far from complete from the point of view
of C language semantics. We have attempted to handle a large collection of commonly found
cases, but many others are still possible. The structure of the parse-tree decoder is
modular and extensible so that new cases may be added easily when necessary. </p>

<p>When a new unhandled case is encountered, and the :verbose argument to build-c-binding
is T, we print a warning message of the form </p>

<pre>
;;WARNING Unknown STATEMENT
#|
:tag1
<i>parse-tree-dump-1</i>
:tag2
<i>parse-tree-dump-2</i>
...
|#
</pre>

<p>and continue. In most cases, if you send us 

<ul>
  <li>the warning message. </li>
  <li>the C statement that caused the message, </li>
  <li>any context needed to compile the C statement, </li>
</ul>

<p>we may be able to create an extension to the parse-tree decoder in short order. </p>

<h2><a NAME="tech">Technical Details</a></h2>

<h3><a NAME="techgram">The C Grammar</a></h3>

<p>The parser used in this tool is derived from the GNU C compiler. It uses the Bison
grammar for C included with the distribution of GCC. The specific version of the grammar
and parser can be obtained in the usual manner by calling our modified version of <code>cpp</code>
with the <code>-version</code> switch. </p>

<h3><a NAME="techmac">C Macros</a></h3>

<p>C macros are processed from the output of the GNU C pre-processor called with the <code>-dM</code>
switch. This produces a list of <code>#define</code> lines that does not reflect the input
order of the definitions. When dependencies between definitions can be determined, we
order the corresponding Lisp definitions accordingly. Otherwise, the Lisp definitions are
ordered alphabetically by name. </p>

<p>Macro definitions are parsed by our own <i>ad hoc</i> parser that recognizes the
following patterns: 

<ul>
  <li>macros with arguments <br>
    These are flagged with the warning message: <pre>
;;WARNING: (args)  #define funmac(x) foo(x) 
</pre>
  </li>
  <li>macros that define a numeric or string constant explicitly <br>
    These are converted to Lisp constant definitions. <br>
    We accept numbers of the form <pre>
    123   123L   0x1a3   0x1a3L   -num   (num)    
    </pre>
    <p>and many expressions consisting entirely of explicit constants such as </p>
    <pre>
    (1<<12) (3+5) (2+3+4+5) (3*100) </pre>
</pre>
  </li>
  <li>macros that define a numeric constant as an expression <ul>
      <li>Simple expressions of the form <br>
        <code>( <i>ident</i> + <i>const</i> )</code> <br>
        are converted to the corresponding Lisp expression. </li>
      <li>Other expressions are flagged with the warning message: <pre>
;;WARNING: (expr)  #define WM_DDE_UNDEF1 (17+WM_DDE_FIRST)  

;;WARNING: (expr)  #define WM_DDE_UNDEF2 WM_DDE_FIRST+11  

</pre>
      </li>
      <li>When the right-hand-side expression contains an undefined identifier, it is flagged with
        the warning: <pre>
;;WARNING: Undefined base constant UNDEF
(bind-c-constant FOO1 (+ UNDEF 1))     

</pre>
      </li>
    </ul>
  </li>
  <li>macros that define an equivalent symbol <ul>
      <li>If the target symbol is defined as a numeric or string constant, the definition is
        converted to a Lisp equivalence. </li>
      <li>If the target symbol is a declared function, we add the name to the list of :all-names
        in the bind-c-function form. </li>
      <li>If the target symbol is a defined type, we emit a corresponding bind-c-typedef form. </li>
      <li>All other cases are flagged with a warning message: <pre>
;;WARNING: (undef) ...
</pre>
      </li>
    </ul>
  </li>
</ul>

<p>Some other possible error messages are: </p>

<pre>
;;WARNING: Multiple definitions of symbol

;;WARNING: Ill-formed macro

;;WARNING: SysValErr: <i>sys-info-dump</i>
</pre>

<h2><a NAME="install">Installing the Tool</a></h2>

<p>The tool consists of two Unix executable files and 3 Lisp source files. The Lisp files
are loaded in the following sequence: </p>

<pre>
   :ld loadcb
</pre>

<pre>All three Lisp files are required in order to run the Binder.
Only one file, <code>cdbind</code>, is needed to compile and/or load
the output of the binder.  This file may also need to be modified 
if the output of the binder needs to be customized.
</pre>

<p>The following two variables must be initialized in <code>loadcb.cl</code> to the
correct pathname for the two Unix executables: </p>

<pre>
<code><b>ff:*c-parser-cpp*</b></code>
<code><b>ff:*c-parser-cc1*</b></code>
</pre>

<p>Other variables: </p>

<pre>
<code><b>ff:*default-foreign-symbol-package*</b></code>
</pre>

<pre>The setting of this variable is discussed above.
</pre>

<pre>
<code><b>ff:*export-foreign-symbols*</b></code>
</pre>

<pre>When this variable is set to a non-NIL value, all symbols created in the 
above package are exported.  When this variable is non-NIL, foreign
symbols are referenced with single-colon notation from other Lisp
packages.  When this variable is set to NIL, double-colon notation 
must be used for all symbols in the foreign-symbol package.
</pre>

<p>NOTE: in the current implementation, only symbols passed to <code><b>ff:bind-c-export</b></code>
are exported. </p>

<pre>
<code><b>ff:*c-compiler-macro-names*</b></code>
</pre>

<pre>The value of this variable is a list of strings naming variables
that should be ignored by the interface generator.  These are typically
state variables for the compilation and do not affect the usage of the 
interface.


</pre>
</body>
</html>
