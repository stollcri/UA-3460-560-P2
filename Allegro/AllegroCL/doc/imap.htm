<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>The Allegro CL imap and pop interface</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/imap.htm">8.1 version</a></td></tr></table><h1 id="2">The Allegro CL imap and pop interface</h1><p id="3">This document contains the following sections:</p><a href="#imap-interface-1">1.0 The IMAP interface</a><br>&nbsp;&nbsp;&nbsp;<a href="#package-2">1.1 IMAP facility package</a><br>&nbsp;&nbsp;&nbsp;<a href="#mailboxes-2">1.2 Mailboxes</a><br>&nbsp;&nbsp;&nbsp;<a href="#messages=2">1.3 Messages</a><br>&nbsp;&nbsp;&nbsp;<a href="#flags-2">1.4 Flags</a><br>&nbsp;&nbsp;&nbsp;<a href="#connecting-2">1.5 Connecting to the server</a><br>&nbsp;&nbsp;&nbsp;<a href="#mailbox-manipulation-2">1.6 Mailbox manipulation</a><br>&nbsp;&nbsp;&nbsp;<a href="#message-manipulation-2">1.7 Message manipulation</a><br>&nbsp;&nbsp;&nbsp;<a href="#mailbox-accessors-2">1.8 Mailbox Accessors</a><br>&nbsp;&nbsp;&nbsp;<a href="#letter-fetching-2">1.9 Fetching a Letter</a><br>&nbsp;&nbsp;&nbsp;<a href="#message-search-2">1.10 Searching for Messages</a><br>&nbsp;&nbsp;&nbsp;<a href="#examples-2">1.11 Examples</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#example-connect-3">1.11.1 Connect to the imap server on the machine holding the email</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#example-select-3">1.11.2 Select the inbox, that's where the incoming mail arrives</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#example-cehck-messages-3">1.11.3 Check how many messages are in the mailbox</a><br><a href="#pop-interface-1">2.0 The Pop interface</a><br><a href="#conditions-1">3.0 Conditions signaled by the IMAP and Pop interfaces</a><br><a href="#mime-1">4.0 MIME support</a><br><a href="#smtp-1">5.0 The SMTP interface (used for sending mail)</a><br><a href="#net-mail-1">6.0 The net.mail interface for parsing and validating email addresses</a><br><p id="4">
<strong>imap</strong> is a client-server protocol for processing
electronic mail boxes. <strong>imap</strong> is the successor to the
<strong>pop</strong> protocol. It is <strong>not</strong>
an upward compatible successor. The main
focus of this document is the <strong>imap</strong>
protocol. Only one small section describes the
functions in the <strong>pop</strong> interface.</p><hr><hr><h2 id="5"><a name="imap-interface-1">1.0 The IMAP interface</a></h2>

<p id="6">
The imap interface is based on the Imap4rev1 protocol described in
rfc2060. Where this document is describing the actions of the imap
commands it should be considered a secondary source of information
about those commands and rfc2060 should be considered the primary
source. (We have not given a link to rfc2060 or other rfc's mentioned
in this document because such links tend to become stale. To see them,
use a web search site such as Google (tm).)
</p>

<p id="7">
The advantages of <strong>imap</strong> over <strong>pop</strong> are:
</p>

<ol>
<li id="8">
<strong>imap</strong> can work with multiple mailboxes (<strong>pop
</strong>works with a single mailbox)
</li>
<li id="9">
<strong>imap</strong> typically allows mail to be read from any
machine while <strong>pop</strong> typically allows mail to be read on
one machine only. With <strong>imap</strong> you're encouraged to
leave mail in mailboxes on the server machine, thus it can be read
from any machine on the network. With <strong>pop</strong> you're
encouraged to download the mail to the client machine's disk, and it
thus becomes inaccessible to all other client machines.
</li>
<li id="10">
<strong>imap</strong> parses the headers of messages thus allowing
easier analysis of mail messages by the client program.
</li>
<li id="11">
<strong>imap</strong> supports searching messages for data and sorting
by date.
</li>
<li id="12"><strong>imap</strong> supports annotating messages with flags,
thus making subsequent searching easier.
</li>
</ol>

<hr><h2 id="13"><a name="package-2">1.1 IMAP facility package</a></h2>


<p id="14">
The symbols defining operators and other objects in this interface are
in the <strong>net.post-office</strong> package. The functionality is
in various modules. The IMAP/POP message retrieval functionality is in
the <b>:imap</b> module. The functionality for sending messages is in
the <b>:smtp</b> module. MIME support is in the <b>:mime</b>
module. Symbols in the net.mail package are in the
<code>:rfc2822</code> module. The <b>:mime</b> module is loaded
automatically when the
<b>:smtp</b> module is loaded. (Note it is not an error to require a
module that is already loaded.) Sample requires are:
</p>
<pre id="15">
(require :imap)    ;; For message retrieval
(require :smtp)    ;; for sending messages. MIME module is
                   ;; loaded as well
(require :mime)    ;; for MIME functionality (does not load :smtp)
(require :rfc2822) ;; for net.mail symbols
</pre>


<p id="16">
The <b>net.mail</b> package and associated symbols are loaded by the
<b>:rfc2822</b> module (load with <b>(require
:rfc2822)</b>).  It is described in section
<a href="#net-mail-1">Section 6.0 The net.mail interface for parsing and validating email addresses</a>.
</p>



<hr><h2 id="17"><a name="mailboxes-2">1.2 Mailboxes</a></h2>

<p id="18">
Mailboxes are repositories for messages. Mailboxes are named by Lisp
strings. The mailbox "inbox" always exists and it is the
mailbox in which new messages are stored. New mailboxes can be
created. They can have simple names, like "foo" or they can
have hierarchical names (like
"clients/california/widgetco"). After connecting to an imap
server you can determine what string of characters you must use
between simple names to create a hierarchical name (in this example
"/" was the separator character).
</p>

<p id="19">
Each mailbox has an associated unique number called its
<strong>uidvalidity</strong>. This number won't change as long as
<strong>imap</strong> is the only program used to manipulate the
mailbox. In fact if you see that the number has changed then that
means that some other program has done something to the mailbox that
destroyed the information that <strong>imap</strong> had been keeping
about the mailbox. In particular you can't now retrieve messages by
their unique ids that you had used before.
</p>



<hr><h2 id="20"><a name="messages=2">1.3 Messages</a></h2>

<p id="21">
Messages in a mailbox can be denoted in one of two ways: message
sequence number or unique id.
</p>

<p id="22">
The <em>message sequence number</em> is the normal way. The messages
in a mailbox are numbered from 1 to N where N is the number of
messages in the mailbox. There are never any gaps in the sequence
numbers. If you tell <strong>imap</strong> to delete messages 3, 4, and
5 then it will return a value telling you that it has deleted messages
3, 3, and 3. This is because when you deleted message 3, message 4
became the new message 3 just before it was deleted and then message 5
became message 3 just before it was deleted.
</p>

<p id="23">
A <em>unique id</em> of a message is a number associated with a
message that is unique only within a mailbox. As long as the
uidvalidity value of a mailbox doesn't change, the unique ids used in
deleted messages will never be reused for new messages.
</p>



<hr><h2 id="24"><a name="flags-2">1.4 Flags</a></h2>

<p id="25">
A flag is a symbol denoting that a message or mailbox has a certain
property. We use keywords in Lisp to denote flags. There are two kinds
of flags - System and User flags. System flags begin with the
backslash character, which is an unfortunate design decision since
that means that in Lisp we have to remember to use two backslashes
(e.g. <strong>:\\deleted</strong>). A subset of the flags can be
stored permanently in the mailbox with the messages. When a connection
is made to an <strong>imap</strong> server it will return the list of
flags and permanent flags (and these are stored in the mailbox server
object returned for access by the program). If the list of permanent
flags includes <strong>:\\*</strong> then the program can create its
own flag names (not beginning with a backslash) and can store them
permanently in messages.
</p>

<p id="26">
Some of the important system flags are:
</p>

<ul>
<li id="27">
<strong>:\\seen</strong> - this means that the message has been read
(a <a href="operators/post-office/fetch-letter.htm"><b>fetch-letter</b></a> has been done
that includes the content of the message, not just its headers)
</li>
<li id="28">
<strong>:\\deleted </strong>- the message will be deleted the next
time an <a href="operators/post-office/expunge-mailbox.htm"><b>expunge-mailbox</b></a> or
<a href="operators/post-office/close-mailbox.htm"><b>close-mailbox</b></a> is done.
</li>
<li id="29"><strong>:\\recent </strong>- this is the first session to have
been notified about this message being present in the mailbox.
</li>
</ul>




<hr><h2 id="30"><a name="connecting-2">1.5 Connecting to the server</a></h2>

<p id="31">
Use the function <a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a> to connect to
the imap server of a host machine. <a href="operators/post-office/close-connection.htm"><b>close-connection</b></a> closes the
connection. <a href="operators/post-office/with-imap-connection.htm"><b>with-imap-connection</b></a> is a macro
that connects and then closes the connection after executing body
forms.
</p>






<hr><h2 id="32"><a name="mailbox-manipulation-2">1.6 Mailbox manipulation</a></h2>

<p id="33">
These functions work on mailboxes as a whole. The
<strong>mailbox</strong> argument to the functions is the object
returned by <a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a>. If a
return value isn't specified for a function then the return value
isn't important - if something goes wrong an error will be signaled.
</p>

<p id="34">
The functions are <a href="operators/post-office/select-mailbox.htm"><b>select-mailbox</b></a>, <a href="operators/post-office/create-mailbox.htm"><b>create-mailbox</b></a>, <a href="operators/post-office/delete-mailbox.htm"><b>delete-mailbox</b></a>, and
<a href="operators/post-office/rename-mailbox.htm"><b>rename-mailbox</b></a>.
</p>
<p id="35">
The function <a href="operators/post-office/mailbox-list.htm"><b>mailbox-list</b></a> returns information
about a mailbox.
</p>






<hr><h2 id="36"><a name="message-manipulation-2">1.7 Message manipulation</a></h2>

<p id="37">
The following functions work with the messages in the currently
selected mailbox. The <strong>mailbox</strong> argument is the object
returned by <a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a>. The
<strong>messages</strong> argument is either a number (denoting a
single message), or is the list <strong>(:seq N M)</strong> denoting
messages <strong>N</strong> through <strong>M</strong>, or is a list
of numbers and <strong>:seq</strong> forms denoting the messages
specified in the list.
</p>

<ul>
<li id="38">
<a href="operators/post-office/alter-flags.htm"><b>alter-flags</b></a>
</li>
<li id="39">
<a href="operators/post-office/close-mailbox.htm"><b>close-mailbox</b></a>
</li>
<li id="40">
<a href="operators/post-office/copy-to-mailbox.htm"><b>copy-to-mailbox</b></a>
</li>
<li id="41">
<a href="operators/post-office/delete-letter.htm"><b>delete-letter</b></a>
</li>
<li id="42">
<a href="operators/post-office/expunge-mailbox.htm"><b>expunge-mailbox</b></a>
</li>
<li id="43">
<a href="operators/post-office/fetch-field.htm"><b>fetch-field</b></a>
</li>
<li id="44">
<a href="operators/post-office/fetch-letter.htm"><b>fetch-letter</b></a>
</li>
<li id="45">
<a href="operators/post-office/fetch-parts.htm"><b>fetch-parts</b></a>
</li>
<li id="46">
<a href="operators/post-office/noop.htm"><b>noop</b></a>
</li>
<li id="47">
<a href="operators/post-office/search-mailbox.htm"><b>search-mailbox</b></a>
</li>
</ul>




<hr><h2 id="48"><a name="mailbox-accessors-2">1.8 Mailbox Accessors</a></h2>

<p id="49">
The mailbox object contains information about the
<strong>imap</strong> server it's connected to as well as the
currently selected mailbox. This information can potentially be
updated each time a request is made to the <strong>imap</strong>
server. The following functions access values from the mailbox object.
</p>

<ul>
<li id="50">
<a href="operators/post-office/mailbox-flags.htm"><b>mailbox-flags</b></a>
</li>
<li id="51">
<a href="operators/post-office/mailbox-permanent-flags.htm"><b>mailbox-permanent-flags</b></a>
</li>
<li id="52">
<a href="operators/post-office/mailbox-message-count.htm"><b>mailbox-message-count</b></a>
</li>
<li id="53">
<a href="operators/post-office/mailbox-recent-messages.htm"><b>mailbox-recent-messages</b></a>
</li>
<li id="54">
<a href="operators/post-office/mailbox-separator.htm"><b>mailbox-separator</b></a>
</li>
<li id="55">
<a href="operators/post-office/mailbox-uidnext.htm"><b>mailbox-uidnext</b></a>
</li>
<li id="56">
<a href="operators/post-office/mailbox-uidvalidity.htm"><b>mailbox-uidvalidity</b></a>
</li>
</ul>



<hr><h2 id="57"><a name="letter-fetching-2">1.9 Fetching a Letter</a></h2>

<p id="58">
When using <a href="operators/post-office/fetch-parts.htm"><b>fetch-parts</b></a> to access letters, you must
specify the parts of the messages in which you are interested. There
are a wide variety of specifiers, some redundant and overlapping,
described in the imap specification in rfc2060. We will describe the
most common ones here. The specification is always a string. It may
specify more than one thing by the use of parentheses in the
string, e.g. "(flags envelope)".
</p>

<p id="59">
The most common specifiers are:
</p>

<ul>
<li id="60">
<strong>body[]</strong> - this returns the full message: headers and
body. You can use <a href="operators/post-office/fetch-letter.htm"><b>fetch-letter</b></a> if you only want this
part and you want to avoid having to call <a href="operators/post-office/fetch-field.htm"><b>fetch-field</b></a>.
</li>
<li id="61">
<strong>body[text]</strong> - this returns just the the text of the body
of the message, not the header.
</li>
<li id="62">
<strong>body</strong> - this returns a list describing the structure
of the message.
</li>
<li id="63">
<strong>envelope</strong> - this parses the header and returns a list
of information in it. We've defined a set of accessors (like
<strong>envelope-xxx</strong>, listed in the description of <a href="operators/post-office/fetch-parts.htm"><b>fetch-parts</b></a>) that allow
you to retrieve the envelope information easily.
</li>
<li id="64">
<strong>flags</strong> - return a list of the flags in the message
</li>
<li id="65">
<strong>uid</strong> - the unique identifier of the message
</li>
</ul>


<p id="66">
The result of a <a href="operators/post-office/fetch-parts.htm"><b>fetch-parts</b></a> is a data structure
containing all of the requested information. The <a href="operators/post-office/fetch-field.htm"><b>fetch-field</b></a> function is then used
to extract the particular information for the particular message.
</p>



<hr><h2 id="67"><a name="message-search-2">1.10 Searching for Messages</a></h2>

<p id="68">
The <strong>imap</strong> server is able, using <a href="operators/post-office/search-mailbox.htm"><b>search-mailbox</b></a>, to search for
messages matching a search expression. A search-expression is a
predicate (described below), or one of these forms:
</p>

<ul>
<li id="69">(<strong>and</strong> search-expression ...)
</li>
<li id="70">
(<strong>or</strong> search-expression ...)
</li>
<li id="71">
(<strong>not</strong> search-expression)
</li>
</ul>

<p id="72">
A predicate is
</p>

<ul>
<li id="73">
a number in which case the predicate is true for that message number
only.
</li>
<li id="74">
a <strong>(:seq N M)</strong> expression that is true for messages
with numbers N through M.
</li>
<li id="75">
<strong>:all</strong> - this predicate is always true
</li>
<li id="76">
<strong>:answered</strong> - true if the message has the
<strong>:\\answered</strong> flag
</li>
<li id="77">
<strong>(:bcc "string")</strong> - true if the envelope
structure's bcc field contains this "string".
</li>
<li id="78">
<strong>(:before date)</strong> - true if the messages internal date
is before this date. The date can either be a string in the rfc822
form (e.g.  "7-Mar-1999") or a lisp universal time. (We have
not given a link to rfc822 or other rfc's mentioned in this document
because such links tend to become stale. To see them, use a web search
site such as Google (tm).)
</li>
<li id="79">
<strong>(:body "string")</strong> - true if the body of the
message contains "string"
</li>
<li id="80">
<strong>(:cc "string")</strong> - true if the envelope
structure's cc field contains this "string".
</li>
<li id="81">
<strong>:deleted</strong> - true if the <strong>:\\deleted</strong> flag
is set for this message
</li>
<li id="82">
<strong>:draft</strong> - true if the <strong>:\\draft </strong>flag is
set for this message
</li>
<li id="83">
<strong>:flagged</strong> - true if the <strong>:\\flagged</strong> flag
is set for this message
</li>
<li id="84">
<strong>(:from "string")</strong> - true if the envelope
structure's from field contains this "string".
</li>
<li id="85">
<strong>(:header "field" "string")</strong> - true
if the message contains a header named "field" and its value contains
"string".
</li>
<li id="86">
<strong>(:keyword flag)</strong> - true if the specified flag is set for
this message
</li>
<li id="87">
<strong>(:larger N)</strong> - true if the rfc822 size of the message is
larger than N.
</li>
<li id="88">
<strong>:new</strong> - true if the message has the <strong>:\\recent</strong>
flag set but not the <strong>:\\seen </strong>flag.
</li>
<li id="89">
<strong>:seen </strong>- true if the message has the <strong>:\\seen
</strong>flag set.
</li>
<li id="90">
<strong>(:sentbefore date)</strong> - true if the message's Date
header is earlier than the given date. See the description of :before
for the format of dates.
</li>
<li id="91">
<strong>(:senton date)</strong> - true if the message's Date header is
within the specified date.
</li>
<li id="92">
<strong>(:sentsince date)</strong> - true if the message's Date header
is within or since the given date.
</li>
<li id="93">
<strong>(:smaller N)</strong> - true if the rfc822 size of the message
is smaller than N
</li>
<li id="94">
<strong>(:subject "string")</strong> - true if the Subject
header line of the message contains "string"
</li>
<li id="95">
<strong>(:text "string")</strong> - true if the message's
header or body contains the specified "string"
</li>
<li id="96">
<strong>(:to "string")</strong> - true if the envelope
structure's to field contains this "string".
</li>
<li id="97">
<strong>(:uid message-set)</strong> - true if the message is one of
the messages denoted by the message set, where the message set
describes messages by unique id.
</li>
<li id="98">
<strong>:unanswered</strong> - true if the message does not have the
<strong>:\\answered</strong> flag set
</li>
<li id="99">
<strong>:undeleted</strong> - true if the message does not have the
<strong>:\\deleted</strong> flag set
</li>
<li id="100">
<strong>:undraft </strong>- true if the message does not have the
<strong>:\\draft </strong>flag set.
</li>
<li id="101">
<strong>:unflagged </strong>- true if the message does not have the
<strong>:\\flagged</strong> flag set.
</li>
<li id="102">
<strong>(:unkeyword flag)</strong> - true if the message does not have
the specified flag set.
</li>
<li id="103">
<strong>:unseen </strong>- true if the message does not have the
<strong>:\\seen </strong>flag set.
</li>
</ul>



<hr><h2 id="104"><a name="examples-2">1.11 Examples</a></h2>

<p id="105">
We show an example of using this interface.
</p>

<hr><h2 id="106"><a name="example-connect-3">1.11.1 Connect to the imap server on the machine holding the email</a></h2>

<p id="107">
The mailbox object, the value of <code>mb</code>, will be used
in subsequent examples.
</p>

<pre id="108">
user(2): (setq mb (make-imap-connection &quot;mailmachine.franz.com&quot; 
                            :user &quot;myacct&quot; 
                            :password &quot;mypasswd&quot;))
#&lt;mailbox::imap-mailbox @ #x2064ca4a&gt;
</pre>



<hr><h2 id="109"><a name="example-select-3">1.11.2 Select the inbox, that's where the incoming mail arrives</a></h2>

<p id="110">
The value of <code>mb</code> is the mailbox object returned by
<a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a> in
<a href="#example-connect-3">Section 1.11.1 Connect to the imap server on the machine holding the email</a>.
</p>

<pre id="111">
user(3): (select-mailbox mb "inbox")
t
</pre>



<hr><h2 id="112"><a name="example-cehck-messages-3">1.11.3 Check how many messages are in the mailbox</a></h2>

<p id="113">
The value of <code>mb</code> is the mailbox object returned by
<a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a> in
<a href="#example-connect-3">Section 1.11.1 Connect to the imap server on the machine holding the email</a>.
</p>

<pre id="114">

user(4): (mailbox-message-count mb)

7
</pre>

<p id="115">
There are seven messages at the moment. Fetch the whole 4th
message. We could evaluate <code>(fetch-letter mb 4)</code> here
(see <a href="operators/post-office/fetch-letter.htm"><b>fetch-letter</b></a>)
instead and then not have to call <a href="operators/post-office/fetch-field.htm"><b>fetch-field</b></a> later.
</p>

<pre id="116">
user(5): (setq body (fetch-parts mb 4 &quot;body[]&quot;))

((4
 (&quot;BODY[]&quot; &quot;Return-Path: &lt;jkfmail@tiger.franz.com&gt;
  Received: from tiger.franz.com (jkf@tiger [192.132.95.103])
    by tiger.franz.com (8.8.7/8.8.7) with SMTP id LAA20261
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 11:36:26 -0700
  Date: Mon, 13 Sep 1999 11:36:26 -0700
  From: jkf mail tester &lt;jkfmail@tiger.franz.com&gt;
  Message-Id: &lt;199909131836.LAA20261@tiger.franz.com&gt;

  message number 5
  &quot;)))
</pre>

<p id="117">
The value was returned inside a data structure designed to hold
information about one or more messages. In order to extract the particular
information we want we use <a href="operators/post-office/fetch-field.htm"><b>fetch-field</b></a>:
</p>


<pre id="118">
user(6): (fetch-field 4 &quot;body[]&quot; body)

 &quot;Return-Path: &lt;jkfmail@tiger.franz.com&gt;
 Received: from tiger.franz.com (jkf@tiger [192.132.95.103])
    by tiger.franz.com (8.8.7/8.8.7) with SMTP id LAA20261
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 11:36:26 -0700
 Date: Mon, 13 Sep 1999 11:36:26 -0700
 From: jkf mail tester &lt;jkfmail@tiger.franz.com&gt;
 Message-Id: &lt;199909131836.LAA20261@tiger.franz.com&gt;

 message number 5
 &quot;
</pre>


<p id="119">
We use the search function to find all the messages containing the
word <em>blitzfig</em>. It turns out there is only one. We then
extract the contents of that message.
</p>

<pre id="120">
user(7): (search-mailbox mb '(:text &quot;blitzfig&quot;))
(7)
user(8): (fetch-field 7 &quot;body[]&quot; 
           (fetch-letter mb 7 &quot;body[]&quot;))
&quot;Return-Path: &lt;jkf@verada.com&gt;
Received: from main.verada.com (main.verada.com [208.164.216.3])
    by tiger.franz.com (8.8.7/8.8.7) with ESMTP id NAA20541
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 13:37:24 -0700
Received: from main.verada.com (IDENT:jkf@localhost [127.0.0.1])
    by main.verada.com (8.9.3/8.9.3) with ESMTP id NAA06121
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 13:36:54 -0700
Message-Id: &lt;199909132036.NAA06121@main.verada.com&gt;
To: jkfmail@tiger.franz.com
Subject: s test
Date: Mon, 13 Sep 1999 13:36:54 -0700
From: jkf &lt;jkf@verada.com&gt;
secret word: blitzfig

ok?

&quot;
</pre>


<p id="121">
We've been using message sequence numbers up to now. They are the
simplest to use but if you're concerned with keeping track of messages
when deletions are being done then using unique id's is useful. Here
we do the above search example using uids:
</p>


<pre id="122">
user(9): (search-mailbox mb '(:text &quot;blitzfig&quot;) :uid t)
(68)
user(10): (fetch-field 68 &quot;body[]&quot; 
            (fetch-letter mb 68 &quot;body[]&quot; :uid t) :uid t)
&quot;Return-Path: &lt;jkf@verada.com&gt;
Received: from main.verada.com (main.verada.com [208.164.216.3])
    by tiger.franz.com (8.8.7/8.8.7) with ESMTP id NAA20541
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 13:37:24 -0700
Received: from main.verada.com (IDENT:jkf@localhost [127.0.0.1])
    by main.verada.com (8.9.3/8.9.3) with ESMTP id NAA06121
    for &lt;jkfmail@tiger.franz.com&gt;; Mon, 13 Sep 1999 13:36:54 -0700
Message-Id: &lt;199909132036.NAA06121@main.verada.com&gt;
To: jkfmail@tiger.franz.com
Subject: s test
Date: Mon, 13 Sep 1999 13:36:54 -0700
From: jkf &lt;jkf@verada.com&gt;

secret word: blitzfig
ok?
&quot;
</pre>


<p id="123">We'll delete that letter with the secret word. Note that after we
have deleted that one, only six messages are left in the mailbox.
</p>

<pre id="124">
user(11): (delete-letter mb 68 :uid t)
(7)
user(12): (mailbox-message-count mb)
6
</pre>

<p id="125">
Now we assume that a bit of time has passed and we want to see
if any new messages have been delivered into the mailbox. In order to
find out we have to send a command to the imap server since it will
only notify us of new messages when it responds to a command. Since we
have nothing to ask the imap server to do we issue the noop command,
which does nothing on the server.
</p>

<pre id="126">
user(13): (noop mb)
nil
user(14): (mailbox-message-count mb)
7
</pre>

<p id="127">
The server told us that there are now 7 messages in the inbox, one
more than before. Next we create a new mailbox, copy the messages from
the inbox to the new mailbox and then delete them from the inbox. Note
how we use the :seq form to specify a sequence of
messages.
</p>


<pre id="128">
user(15): (create-mailbox mb "tempbox")
t
user(18): (let ((count (mailbox-message-count mb)))
(copy-to-mailbox mb `(:seq 1 ,count) "tempbox")
(delete-letter mb `(:seq 1 ,count)))
(1 1 1 1 1 1 1)
user(19): (mailbox-message-count mb)
0
</pre>

<p id="129">
When we're done there are 0 messages in the currently selected
mailbox, which is inbox. We now select the maibox we just created and
see that the messages are there.
</p>

<pre id="130">
user(22): (select-mailbox mb "tempbox")
t
user(23): (mailbox-message-count mb)
7
</pre>


<p id="131">
Finally we shut down the connection. Note that imap servers will
automatically shut down a connection that's been idle for too long
(usually around 10 minutes). When that happens, the next time the
client tries to use an imap function to access the mailbox an error
will occur. There is nothing that can be done to revive the connection
however it is important to call close-imap-connection on the lisp side
in order to free up the resources still in use for the now dead
connection.
</p>

<pre id="132">
user(24): (close-connection mb)
t
</pre>





<hr><hr><h2 id="133"><a name="pop-interface-1">2.0 The Pop interface</a></h2>

<p id="134">
The <strong>pop</strong> protocol is a very simple means for
retrieving messages from a single mailbox. The functions in the
interface are:
</p>
<ul>
<li id="135">
<a href="operators/post-office/make-pop-connection.htm"><b>make-pop-connection</b></a>
</li>
<li id="136">
<a href="operators/post-office/close-connection.htm"><b>close-connection</b></a>
</li>
<li id="137">
<a href="operators/post-office/delete-letter.htm"><b>delete-letter</b></a>
</li>
<li id="138">
<a href="operators/post-office/fetch-letter.htm"><b>fetch-letter</b></a>
</li>
<li id="139">
<a href="operators/post-office/noop.htm"><b>noop</b></a>
</li>
<li id="140">
<a href="operators/post-office/make-envelope-from-text.htm"><b>make-envelope-from-text</b></a>
</li>
<li id="141">
<a href="operators/post-office/parse-mail-header.htm"><b>parse-mail-header</b></a>
</li>
<li id="142">
<a href="operators/post-office/top-lines.htm"><b>top-lines</b></a>
</li>
<li id="143">
<a href="operators/post-office/unique-id.htm"><b>unique-id</b></a>
</li>
<li id="144">
<a href="operators/post-office/with-pop-connection.htm"><b>with-pop-connection</b></a>
</li>
<li id="145">
<a href="operators/post-office/with-fetch-letter-sequence.htm"><b>with-fetch-letter-sequence</b></a>
</li>
<li id="146">
<a href="operators/post-office/fetch-letter-sequence.htm"><b>fetch-letter-sequence</b></a>
</li>
<li id="147">
<a href="operators/post-office/end-of-letter-p.htm"><b>end-of-letter-p</b></a>
</li>
<li id="148">
<a href="operators/post-office/reset-mailbox.htm"><b>reset-mailbox</b></a>
</li>
<li id="149">
<a href="operators/post-office/mailbox-message-count.htm"><b>mailbox-message-count</b></a>
</li>
</ul>



<hr><hr><h2 id="150"><a name="conditions-1">3.0 Conditions signaled by the IMAP and Pop interfaces</a></h2>

<p id="151">
When an unexpected event occurs a condition is signaled. This
applies to both the <strong>imap</strong> and <strong>pop</strong>
interfaces. There are two classes of conditions signaled by this
package:
</p>

<ul>
<li id="152">
<strong>po-condition</strong> - this class denotes conditions that
need not and in fact should not interrupt program flow. When the
mailbox server is responding to a command it sometimes sends
informational warning messages and we turn them into conditions. It is
important for all messages from the server to be read and processed
otherwise the next command issued will see messages in response to the
previous command. Therefore the user code should never do a
non-local-transfer in response to a <strong>po-condition</strong>.
</li>
<li id="153">
<strong>po-error</strong> - this class denotes conditions that will
prevent execution from continuing. If one of these errors is not
caught, the interactive debugger will be entered.
</li>
</ul>

<p id="154">
Instances of both of these condition classes have these slots in
addition to the standard condition slots:
</p>

<table border="1" width="100%">
  <tr>
    <td width="16%">Name</td>
    <td width="24%">Accessor</td>
    <td width="60%">Value</td>
  </tr>
  <tr>
    <td width="16%">identifier</td>
    <td width="24%">po-condition-identifier</td>
    <td width="60%">keyword describing the kind of condition being signaled. See the
    table below for the possible values.</td>
  </tr>
  <tr>
    <td width="16%">server-string</td>
    <td width="24%">po-condition-server-string</td>
    <td width="60%">If the condition was created because of a message
    sent from the mailbox server then this is that message.</td>
  </tr>
</table>

<p id="155">The meaning of the identifier value is as follows</p>

<table border="1" width="100%">
  <tr>
    <td width="11%"><strong>Identifier</strong></td>
    <td width="13%">Kind</td>
    <td width="76%">Meaning</td>
  </tr>
  <tr>
    <td width="11%"><strong>:problem</strong></td>
    <td width="13%">po-condition</td>
    <td width="76%">The server has responded with a warning message. The most
    likely warning is that the mailbox can only be opened in 
    read-only mode because another process is using it.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:unknown-ok</strong></td>
    <td width="13%">po-condition</td>
    <td width="76%">The server has sent an informative message that we don't understand.
    It's probably safe to ignore this.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:unknown-untagged</strong></td>
    <td width="13%">po-condition</td>
    <td width="76%">The server has sent an informative message that we don't understand.
    It's probably safe to ignore this.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:error-response</strong></td>
    <td width="13%">po-error</td>
    <td width="76%">The server cannot execute the requested command.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:syntax-error</strong></td>
    <td width="13%">po-error</td>
    <td width="76%">The arguments to a function in this package are malformed.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:unexpected</strong></td>
    <td width="13%">po-error</td>
    <td width="76%">The server has responded in a way 
    we don't understand and which prevents us
    from continuing</td>
  </tr>
  <tr>
    <td width="11%"><strong>:server-shutdown-connection</strong></td>
    <td width="13%">po-error</td>
    <td width="76%">The connection to the server has been broken. 
    This usually occurs
    when the connection has been idle for too long and the server 
    intentionally disconnects.
    Just before this condition is signaled we close down the 
    socket connection to
    free up the socket resource on our side. When this condition is 
    signaled the user
    program should not use the mailbox object again 
    (even to call <strong>close-connection</strong>
    on it).</td>
  </tr>
  <tr>
    <td width="11%"><strong>:timeout</strong></td> <td width="13%">po-error</td> <td width="76%">The server did not
    respond quickly enough. The timeout value is set in the call to
    <a href="operators/post-office/make-imap-connection.htm"><b>make-imap-connection</b></a>.</td>
  </tr>
  <tr>
    <td width="11%"><strong>:response-too-large</strong></td> <td width="13%">po-error</td> <td width="76%">The value returned by a 
    command is too large to fit in a lisp array.
    When this occurs you should close
    the connection and reopen it since
    the imap/pop interface code
    has gotten out of sync with the
    imap/pop server.</td>
  </tr>
</table>

<hr><hr><h2 id="156"><a name="mime-1">4.0 MIME support</a></h2>




<p id="157">
Allegro CL supports constructing MIME (Multipurpose Internet Mail
Extensions) compliant email messages. The Allegro CL MIME API,
combined with the <a href="operators/post-office/send-letter.htm"><b>send-letter</b></a> and/or <a href="operators/post-office/send-smtp.htm"><b>send-smtp</b></a> functions make
it easy to construct simple or complex MIME messages.
</p>
<p id="158">
A full explanation of MIME is beyond the scope of this documention.
MIME is defined and specified in RFC 2045
(<a href="http://www.faqs.org/rfcs/rfc2045.html">http://www.faqs.org/rfcs/rfc2045.html</a>).  However, some of the basic
concepts are described here to facilitate immediate experimentation
and use.
</p>
<p id="159">
If you want a simplified interface for sending emails with
attachments, please see <a href="operators/post-office/send-letter.htm"><b>send-letter</b></a>.
</p>
<h4 id="160">
The MIME module
</h4>
<p id="161">
MIME functionality is in the <b>:mime</b> module. The <b>:mime</b>
module is loaded automatically when the <b>:smtp</b> module is loaded
(the <b>:smtp</b> module has functionality for sending messages). Use
one of these <a href="../ansicl/dictentr/provider.htm"><b>require</b></a> forms to
load the MIME module:
</p>
<pre id="162">
(require :mime)  ;; for MIME functionality (does not load :smtp)
(require :smtp)  ;; for sending messages. MIME module is
                 ;; loaded as well
</pre>
<h2 id="163">
MIME concepts
</h2>

<p id="164">
MIME messages can be composed of multiple pieces.  In Allegro CL,
these pieces are referred to as <i><b>parts</b></i>.  Messages have at
least one part.  Messages that contain more than one part are called
<i>multipart messages</i>.
</p>
<p id="165">
There are two types of parts, <i><b>multipart-parts</b></i> and
<i><b>non-multipart parts</b></i>:
</p>
<ul>
<li id="166">
<b>Non-multipart parts</b> have an associated piece of information
called the Content Type. The content type tells the receiver what
type of information is contained in the part.  Content type
information is composed of a type and a subtype.  The most common
content type is "text/plain".  The second most common is probably
"text/html", for HTML emails.  Another common content type is
"application/octet-stream" which is a generic type that is used to
indicate that information is binary data of some sort (like a program
or a binary data file).  RFC 2046 defines some standard content types
and there are many others that are well known.
</li>
<li id="167">
<b>Multipart parts</b> have a content type that begins with
"multipart". This indicates that the part exists solely to contain
other parts. The subtype usually describes the relationship of the
subparts.  "multipart/mixed" is the most common multipart content
type.  It indicates that the subparts are simply different types of
information, one after the other.  This is typically used when a
message has one or more file attachments.  "multipart/alternative" is
another common multipart content type that indicates that the subparts
convey the same meaning but they may convey it by different means.
The most common use of "multipart/alternative" is when an HTML
(text/html) email message also contains a plain text (text/plain)
version of the email to allow for recipients that aren't using an
HTML-enabled email program.  Multipart parts can contain any number
and type of subparts, including other multipart parts.  This allows
for the construction of complex MIME messages.
</li>
</ul>

<h3 id="168">
The Allegro CL MIME API
</h3>

<p id="169">
The interface contains the following classes and associated operators:
</p>

<ul>
<li id="170">
<a href="classes/post-office/mime-part.htm"><code>mime-part</code></a>: the
superclass of mime part objects. (Currently, the only user-visible
subclass is <a href="classes/post-office/mime-part-constructed.htm"><code>mime-part-constructed</code></a>.)
</li>
<li id="171">
<a href="classes/post-office/mime-part-constructed.htm"><code>mime-part-constructed</code></a>: the class of
user-visible mime parts.
</li>
<li id="172">
<a href="operators/post-office/make-mime-part.htm"><b>make-mime-part</b></a>:
creates a MIME part (a <a href="classes/post-office/mime-part-constructed.htm"><code>mime-part-constructed</code></a> object).
</li>
<li id="173">
<a href="operators/post-office/mime-part-writer.htm"><b>mime-part-writer</b></a>
</li>
<li id="174">
<a href="operators/post-office/mime-part-p.htm"><b>mime-part-p</b></a>
</li>
<li id="175">
<a href="operators/post-office/mime-part-constructed-p.htm"><b>mime-part-constructed-p</b></a>
</li>
<li id="176">
<a href="operators/post-office/with-mime-part-constructed-stream.htm"><b>with-mime-part-constructed-stream</b></a>
</li>
<li id="177">
<a href="operators/post-office/mime-part-type.htm"><b>mime-part-type</b></a>: mime-part/mime-part-constructed slot accessor.
</li>
<li id="178">
<a href="operators/post-office/mime-part-subtype.htm"><b>mime-part-subtype</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="179">
<a href="operators/post-office/mime-part-parameters.htm"><b>mime-part-parameters</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="180">
<a href="operators/post-office/mime-part-id.htm"><b>mime-part-id</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="181">
<a href="operators/post-office/mime-part-description.htm"><b>mime-part-description</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="182">
<a href="operators/post-office/mime-part-encoding.htm"><b>mime-part-encoding</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="183">
<a href="operators/post-office/mime-part-headers.htm"><b>mime-part-headers</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="184">
<a href="operators/post-office/mime-part-parts.htm"><b>mime-part-parts</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
<li id="185">
<a href="operators/post-office/mime-part-boundary.htm"><b>mime-part-boundary</b></a>:
mime-part/mime-part-constructed slot accessor.
</li>
</ul>

<h3 id="186">
MIME examples
</h3>

<pre id="187">
(require :smtp)  ;; Note: this loads the :mime module as well
(use-package :net.post-office)

;; Construct a simple part.
cl-user(168): (setf p1 (make-mime-part :text "This is a simple
single-part message with text contents"))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c849f2&gt;

;; Let's see what it looks like when rendered

cl-user(169): (mime-part-writer p1)
MIME-Version: 1.0
Content-Type: text/plain;
    charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit

This is a simple single-part message
with text contents
<b>RETURNS</b> nil

;; As you can see, the headers contain only information specified by
;; the MIME specification.  If you want to make a top level part with
;; fuller headers, you can do something like the following:

cl-user(170): (setf p1 (make-mime-part 
               :text &quot;This is a simple message with more headers.&quot; 
	       :headers '((&quot;From&quot; . &quot;Test User &lt;joe@example.com&gt;&quot;)
			  (&quot;To&quot; . &quot;Recipient &lt;jimmy@yahoo.com&gt;&quot;)
			  (&quot;Subject&quot; . &quot;This is a test email&quot;))))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c87ab2&gt;
cl-user(171): (mime-part-writer p1)
MIME-Version: 1.0
From: Test User &lt;joe@example.com&gt;
To: Recipient &lt;jimmy@yahoo.com&gt;
Subject: This is a test email
Content-Type: text/plain;
    charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit

This is a simple message with more headers.
<b>RETURNS</b> nil

;; Or you can use send-letter which will add in these headers for you
;; using a simpler interface.  

cl-user(172): (setf p1 (make-mime-part :text "Simple again"))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c89d9a&gt;

;; send-letter will accept a mime-part as the message data and it will
;; fill in the headers based on the arguments you supply.
;; Replace &quot;mail-server&quot; and the sender/recipient addresses with ones
;; suitable for your environment.
cl-user(173): (send-letter &quot;mail-server&quot; 
                           &quot;joe@example.com&quot; &quot;jimmy@yahoo.com&quot; p1
                            :subject &quot;Just testing&quot;)


;; You can specify the content-type if the default is not suitable.
cl-user(176): (setf p1 (make-mime-part :text &quot;&lt;html&gt;&lt;h3&gt;Hello!&lt;/h3&gt;&lt;/html&gt;&quot;
				       :content-type &quot;text/html&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c9671a&gt;
cl-user(177): (mime-part-writer p1)
MIME-Version: 1.0
Content-Type: text/html;
    charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit

&lt;html&gt;&lt;h3&gt;Hello!&lt;/h3&gt;&lt;/html&gt;
nil



;; Now let's construct a simple multipart message.  The first part
;; will be introductory text and the second part will be a file
;; attachment.

;; Make the text part
cl-user(178): (setf p1 (make-mime-part :text &quot;Here is the file you requested&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c989f2&gt;
;; Make the file attachment part, specifying the file we want to use.
;; You should use a small file for testing purposes.
cl-user(179): (setf p2 (make-mime-part :file &quot;/tmp/quickref.pdf&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c9a38a&gt;
;; And finally we need a top level part to contain these two
;; individual parts
cl-user(180): (setf p0 (make-mime-part :subparts (list p1 p2)))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71c9e34a&gt;
;; Let's see what that gives us.  If the size of the file attachment
;; is large, then you will generate a large amount of data.  
cl-user(181): (mime-part-writer p0)
MIME-Version: 1.0
Content-Type: multipart/mixed;
    boundary=&quot;----------_4299707ac57b86bae36a01272cde43d0&quot;

This is a multi-part message in MIME format.

- ------------_4299707ac57b86bae36a01272cde43d0
Content-Type: text/plain;
    charset=&quot;utf-8&quot;
Content-Transfer-Encoding: 7bit

Here is the file you requested
- ------------_4299707ac57b86bae36a01272cde43d0
Content-Type: application/pdf
Content-Transfer-Encoding: base64
Content-Disposition: attachment;
    filename=&quot;quickref.pdf&quot;

JVBERi0xLjIKJcfsj6IKNiAwIG9iago8PC9MZW5ndGggNyAwIFIvRmlsdGVyIC9GbGF0ZURl
[ ... many lines deleted ... ]
NzMgL1Jvb3QgMSAwIFIgL0luZm8gMiAwIFIKPj4Kc3RhcnR4cmVmCjY5MTMzCiUlRU9GCg==

- ------------_4299707ac57b86bae36a01272cde43d0--
<b>RETURNS</b> nil

;; When looking at the rendered output (above), you can see that you
;; generated a multipart/mixed message.  You can also see that the
;; content-type of the second part was determined to be
;; &quot;application/pdf&quot;.  This was based on the filename (which ended
;; with .pdf).  If no suitable guess can be made,
;; &quot;application/octet-stream&quot; will be used.  
;; You can also see that base64 encoding was used.  Base64 encoding is 
;; always used for file attachments unless the content-type is
;; specified as a text-type.

;; Here is a more complex multipart message structured like so:
;;  top-level   (multipart/mixed):
;;    part1:    (multipart/alternative)
;;      part1:  (text/html)
;;      part2:  (text/plain)
;;    part2:    (application/pdf)
;;
;; This is a common arrangement for a message that includes both html
;; and plain text versions of the message text (so that both HTML and
;; non-HTML email clients can show whichever version works best).  The
;; message also contains a file attachment.

cl-user(187): (setf html (make-mime-part 
      :text &quot;&lt;html&gt;&lt;font color=red&gt;You have won big prizes!&lt;/font&gt;&lt;html&gt;&quot;
      :content-type &quot;text/html&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71cbc4da&gt;
cl-user(188): (setf plain (make-mime-part :text &quot;You have won big prizes!&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71cbde1a&gt;
cl-user(191): (setf file (make-mime-part :file &quot;/tmp/quickref.pdf&quot;))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71cc0a5a&gt;
cl-user(192): (setf alternatives-container 
                 (make-mime-part :content-type &quot;multipart/alternative&quot; 
                                 :subparts (list html plain)))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71cc5d5a&gt;
cl-user(193): (setf top 
                 (make-mime-part :subparts (list alternatives-container file)))
<b>RETURNS</b> #&lt;net.post-office::mime-part-constructed @ #x71cc7e92&gt;

;; Fill in the To, From and Subject headers and send it off.
cl-user(194): (send-letter &quot;mail-server&quot; 
                           &quot;joe@example.com&quot; &quot;jimmy@yahoo.com&quot; top
                           :subject &quot;Test email&quot;)
</pre>


<hr><hr><h2 id="188"><a name="smtp-1">5.0 The SMTP interface (used for sending mail)</a></h2>

<p id="189">
With the SMTP interface, a Lisp program can contact a mail server and
send electronic mail. 
</p>
<p id="190">
The <code>smtp</code> module is not loaded automatically when
the <code>imap</code> is. To load SMTP functionality into a
running image, evaluate:
</p>
<pre id="191">
(require :smtp)
</pre>

<p id="192">
The interface contains these functions:
</p>
<ul>
<li id="193">
<a href="operators/post-office/send-letter.htm"><b>send-letter</b></a>
</li>
<li id="194">
<a href="operators/post-office/send-smtp.htm"><b>send-smtp</b></a>
</li>
<li id="195">
<a href="operators/post-office/send-smtp-auth.htm"><b>send-smtp-auth</b></a>
</li>
<li id="196">
<a href="operators/post-office/test-email-address.htm"><b>test-email-address</b></a>
</li>
</ul>

<hr><hr><h2 id="197"><a name="net-mail-1">6.0 The net.mail interface for parsing and validating email addresses</a></h2>




<p id="198">

The <b>net.mail</b> interface allows parsing and cursory validation of
portions of email addresses. Symbols in the interface are in the
<b>net.mail</b> package. The interface is loaded with the
<b>:rfc2822</b> module with <code>(require :rfc2822)</code>. The
interface implements part of <a href="http://www.ietf.org/rfc/rfc2822.txt">RFC2822</a> (that link is
to a URL outside the Allegro CL documentation).
</p>
<p id="199">
The <a href="imap.htm#parse-email-address-op-bookmarkxx"><b>parse-email-address</b></a> function parses an
email address string. The <a href="imap.htm#valid-email-domain-p-op-bookmarkxx"><b>valid-email-domain-p</b></a> function provides
information on whether a string naming a domain appears valid (this
function is most useful in identifying obviously invalid strings since
seemingly valid strings may still fail to accept email for any number
of reasons).  <a href="imap.htm#extract-email-addresses-op-bookmarkxx"><b>extract-email-addresses</b></a> parses a string
representing an email header and returns information about the email
addresses found.
</p>
<p id="200">
An email address consists of a username part, followed by <em>@</em>,
followed by a domain name.</p>

<hr><h3 id="201"><a name="parse-email-address-op-bookmarkxx"></a>parse-email-address</h3><h3 id="202">Function</h3><h4 id="203">Package: net.mail</h4>

<p id="204"><b>Arguments: </b><i>
string </i>&amp;key <i>require-domain require-dotted-domain</i><i>
</i></p>

<p id="205">
Parses an email address string and, if the address has valid syntax,
returns two values: the username part of the address and the domain
part of the address.  If address is invalid, the single value <code>nil</code> is returned. The keyword arguments provide some
control over what is or is not considered invalid.
</p>
<p id="206">
The parser is <a href="http://www.ietf.org/rfc/rfc2822.txt">RFC2822</a> compliant
except:
</p>
<ul>
<li id="207">
It optionally allows for domain-less addresses.
</li>
<li id="208">
By default, it requires the domain part to have two components.
</li>
<li id="209">
It does not allow domain literals (e.g., "joe-user@[192.132.95.23]")
</li>
<li id="210">
It does not allow quoted strings.
</li>
</ul>


<h4 id="211">Keyword arguments</h4>

<p id="212">
<i>require-domain</i>, which defaults to <code>t</code>, controls whether or not domainless email addresses
(i.e., addresses without the @domain part) are accepted.
</p>

<i>require-dotted-domain</i>, which defaults to <code>t</code>, controls whether or not non-dotted domain parts
will be accepted. When <code>nil</code>, a
single-component domain part will be accepted (e.g., "com"). If true,
then the domain part of the email address must have at least two
dotted components (e.g., "franz.com" or "mymachine.franz.com"), else
<code>nil</code> is returned.

<h3 id="213">
Examples
</h3>

<pre id="214">
(require :rfc2822)
(use-package :net.mail)
(parse-email-address "support@franz.com") 
<b>returns</b>
"support"
"franz.com"

(parse-email-address "david;m@franz.com") 
<b>returns</b>
nil              ;; ';' is not allowed in email addresses.

(parse-email-address "support") 
<b>returns</b>
nil

(parse-email-address "support" :require-domain nil) 
<b>returns</b>
"support"
nil
</pre>

<hr>

<hr><h3 id="215"><a name="valid-email-domain-p-op-bookmarkxx"></a>valid-email-domain-p</h3><h3 id="216">Function</h3><h4 id="217">Package: net.mail</h4>

<p id="218"><b>Arguments: </b><i>
domain
</i></p>

<p id="219">
<b><i>domain</i></b> should be a string (such as the
second return value of <a href="imap.htm#parse-email-address-op-bookmarkxx"><b>parse-email-address</b></a>). This function
returns information on whether or not the DNS configuration for
<i>domain</i> is configured properly for
Internet email reception.
</p>
<p id="220">
The possible return values are:
</p>
<ul>
<li id="221">
<b><code>nil</code></b>: this means that the DNS records
for <i>domain</i> are not properly configured for
Internet email.
</li>
<li id="222">
<b><code>:unknown</code></b>: this means that no information 
was successfully collected. No conclusion can be drawn.
</li>
<li id="223">
<b><code>t</code></b>: this means that
<i>domain</i> has DNS records that are suitable for
Internet email reception.  However, this does not necessarily mean
that email delivery will succeed (it could fail for reasons unrelated
to the validity of the domain).
</li>
</ul>

<h3 id="224">
Note
</h3>

<p id="225">
This function is more useful for its negative response (<code>nil</code>) than any other response. If it returns <code>nil</code>, it means that no standard mail transfer agent
would be able to locate the mail server for the domain. As noted
above, a non-<code>nil</code> value does not guarantee
that the mail will be delivered.
</p>

<h3 id="226">
Examples
</h3>

<pre id="227">
(require :rfc2822)
(use-package :net.mail)
(valid-email-domain-p "franz.com")
<b>returns</b>
t             ;; Under normal circumstances

(valid-email-domain-p "xnosuchdomainx.com")
<b>returns</b>
nil           ;; at least when this document was written as
              ;; "xnosuchdomainx.com" is a currently nonexistent 
              ;; domain name. 

(valid-email-domain-p "nosuchdomain.com")
<b>returns</b>
t             ;; under normal circumstances as at the time 
              ;; this document was written, "nosuchdomain.com" 
              ;; does exist and has a DNS MX record.
</pre>


<hr>


<hr><h3 id="228"><a name="extract-email-addresses-op-bookmarkxx"></a>extract-email-addresses</h3><h3 id="229">Function</h3><h4 id="230">Package: net.mail</h4>

<p id="231"><b>Arguments: </b><i>
string </i>&amp;key <i>start end require-domain errorp compact</i><i>
</i></p>


<p id="232">
<a href="imap.htm#extract-email-addresses-op-bookmarkxx"><b>extract-email-addresses</b></a>
parses <b><i>string</i></b> and returns a list of
entries describing the email addresses and display names found.  This
function is suitable for use on RFC2822-compliant email headers such
as the <em>To:</em>, <em>From:</em>, and <em>Cc:</em> headers.
Compliant folded lines are acceptable.
</p>

<h4 id="233">Keyword arguments</h4>

<p id="234">
<b><i>start</i></b> and <b><i>end</i></b>
specify the subsequence of <i>string</i> to operate
on. <i>start</i> defaults to 0 and
<i>end</i> defaults to the length of the string.
</p>

<p id="235">
<b><i>require-domain</i></b>, which defaults
to <code>t</code>, controls whether or not domainless
email addresses (i.e., addresses without the @domain part) are
accepted.
</p>

<p id="236">
<b><i>errorp</i></b>, which defaults
to <code>t</code>, controls whether or not to signal an
error if there is a syntax error or other problem during parsing.  If
<i>errorp</i> is <code>nil</code>, then
<code>nil</code> is returned if there is a problem during
parsing.
</p>
<p id="237">
<b><i>compact</i></b>: when true,
causes <a href="imap.htm#extract-email-addresses-op-bookmarkxx"><b>extract-email-addresses</b></a> to return its
results as a list of <code>user@domain</code> strings (the
<code>@domain</code> part may not exist if
the <i>require-domain</i> keyword arg
was <code>nil</code>).
</p>

<h4 id="238">Return value:</h4>

<p id="239">
extract-email-addresses returns a list of <code>mailbox</code>
and/or <code>group</code> lists, depending on the contents of
<i>string</i>.
</p>

<p id="240">
A <code>mailbox</code> list has the following form:
</p>

<blockquote>
<pre id="241">(:mailbox display-name user-part domain-part)</pre>
</blockquote>

<p id="242">
<code>display-name</code> may be <code>nil</code> if
no display name was found. If <code>require-domain</code> is
<code>nil</code>, <code>domain-part</code> may be
<code>nil</code> if no domain part was found.
</p>

<p id="243">
A <code>group</code> list has the following form:
</p>

<blockquote>
<pre id="244">(:group display-name mailbox-list)</pre>
</blockquote>

<p id="245">
<code>mailbox-list</code> will be a list of
<code>mailbox</code> lists. If no mailboxes were supplied,
<code>mailbox-list</code> may be <code>nil</code>.
</p>

<h3 id="246">Examples:</h3>

<pre id="247">
;; Simple folded list of addresses which display names.
cl-user(186): (extract-email-addresses &quot;Tech Support &lt;support@franz.com&gt;,
                                        Sales Department &lt;sales@franz.com&gt;&quot;)
<b>returns</b>
((:mailbox "Tech Support" "support" "franz.com")
 (:mailbox "Sales Department" "sales" "franz.com"))

;; A group commonly seen in emails.  There are no mailboxes in the group.
cl-user(187): (extract-email-addresses "Undisclosed Recipients:;")
<b>returns</b>
((:group &quot;Undisclosed Recipients&quot; nil))

;; A variety of legal formats:
cl-user(188): (extract-email-addresses &quot;root@example.com (Cron Daemon), 
Mailing List: Bill Johnson &lt;customer1@example.com&gt;, customer2@example.com ;&quot;)
<b>returns</b>
((:mailbox &quot;Cron Daemon&quot; &quot;root&quot; &quot;example.com&quot;)
 (:group &quot;Mailing List&quot;
  ((:mailbox &quot;Bill Johnson&quot; &quot;customer1&quot; &quot;example.com&quot;)
   (:mailbox nil &quot;customer2&quot; &quot;example.com&quot;))))

;; Use of the COMPACT keyword argument:
cl-user(13): (extract-email-addresses &quot;root@example.com (Cron Daemon),
Mailing List: Bill Johnson &lt;customer1@example.com&gt;,
customer2@example.com ;&quot; 
              :compact t)
<b>returns</b>
("root@example.com" "customer1@example.com" "customer2@example.com")

cl-user(11): (extract-email-addresses "Undisclosed Recipients:;" :compact t)

<b>returns</b>
nil
</pre>

<hr>


</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/imap.htm">8.1 version</a></td></tr></table></html>