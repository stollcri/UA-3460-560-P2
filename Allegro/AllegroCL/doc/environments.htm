<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Environments support in Allegro Common Lisp</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/environments.htm">8.1 version</a></td></tr></table><h1 id="2">Environments support in Allegro Common Lisp</h1><p id="3">This document contains the following sections:</p><a href="#environments-intro-1">1.0 Environments introduction</a><br><a href="#envir-general-1">2.0 General information about environments in Allegro CL</a><br>&nbsp;&nbsp;&nbsp;<a href="#enviro-kinds-2">2.1 Kinds of environments</a><br><a href="#environments-api-1">3.0 Environments functionality</a><br><a href="#environments-in-acl-1">4.0 Environments in Allegro CL</a><br><hr><hr><h2 id="4"><a name="environments-intro-1">1.0 Environments introduction</a></h2>

<p id="5">
An environment in Common Lisp is a Lisp object that contains, in some
fashion, a set of bindings and also information about operators,
variables, symbols, and so on. This information can be useful in
various ways, particularly during evaluation, compilation and macro
expansion. The macroexpand operator takes an optional environment
argument, whose value is either <code>nil</code> or an
environment object.
</p>
<p id="6">
The actual nature of an environment object is implementation
dependent. In standard Common Lisp, there is no way for programmers to
access or modify environment objects. In the proposed Common Lisp
standard specified by Guy Steele et. al. in the second edition of
<i>Common Lisp: the Language</i>, an interface to
environment objects was proposed (in Section 8.5, pp 207-214), but the
ANSI J13 committee decided not to include this in the ANS.
</p>
<p id="7">
Allegro CL now has implemented much of the CLtL-2 environments
proposal, with some differences that we describe. We recommend that
users read that section of CLtL-2, although this document is complete
in itself.
</p>

<hr><hr><h2 id="8"><a name="envir-general-1">2.0 General information about environments in Allegro CL</a></h2>

<p id="9">
Environments can be thought of as being specified in CLtL-2, Section
8.5, pp 207-214, with a number of differences. In the following
points, we describe the differences between our implementation and the
CLtL-2 specification.
</p>

<h3 id="10">
Environments
</h3>



<ul>
<li id="11">
Environments are immutable, as stated in CLtL2, with one exception:
The locative cons returned by the *-information functions (<a href="operators/system/block-information.htm"><b>block-information</b></a>, <a href="operators/system/declaration-information.htm"><b>declaration-information</b></a>, <a href="operators/system/function-information.htm"><b>function-information</b></a>, <a href="operators/system/tag-information.htm"><b>tag-information</b></a>, and <a href="operators/system/variable-information.htm"><b>variable-information</b></a>) are mutable,
and usually contain values or structures.
</li>
<li id="12">
Environment objects are divided into several kinds, although all have
the same type/class. These kinds are identified by the
<code>augmentable-environment-kind</code> slot:
<code>:evaluation</code>, <code>:interpreter</code>,
<code>:compiler</code>
(previously <code>:compilation</code>),
<code>:compilation</code>
(previously <code>:compilation-walking</code>), and
<code>:macros-only</code>. These kinds are described in detail
in <a href="#enviro-kinds-2">Section 2.1 Kinds of environments</a>. Note that
<code>:compilation</code>
assists in distinguishing between the compilation process, which wants
to expand macros, and the walking process, which does
not. <code>:macros-only</code> allows the creation of an
environment which is appropriate for a macrolet lexical closure.
</li>
<li id="13">
The function namespace might have one or more of four different
bindings for a name. In order for the compiler to know all of the
possibilities, up to three calls to <a href="operators/system/function-information.htm"><b>function-information</b></a> are needed: one with
<i>special-operators</i> argument true (which might
return <code>:special-operator</code>), one call with a
<code>:compiler</code>
or <code>:compilation</code> environment (which might
return :compiler-macro) and one with a <code>:evaluation</code>
environment in order to see if there is a real functional definition
(<code>:function</code> or <code>:macro</code>).
</li>
<li id="14">
The environment base objects (which all related environments share)
contain property tables for storing environment-oriented properties
(accessible with <a href="operators/system/ce-get.htm"><b>ce-get</b></a>).
Both <a href="operators/system/ce-get.htm"><b>ce-get</b></a> and <a href="operators/system/ce-putprop.htm"><b>ce-putprop</b></a> are now exported.
</li>
</ul>

<h3 id="15">
Interface Functions
</h3>

<ul>
<li id="16">
All interface functions are exported from the
<code>system</code> package.
</li>
<li id="17">
CLtL-2 called for three namespaces: variable, function, and
declaration. Allegro CL implements two additional ones: block and tag.
These have <a href="operators/system/block-information.htm"><b>block-information</b></a> and <a href="operators/system/tag-information.htm"><b>tag-information</b></a> accessors, respectively, and
corresponding keyword arguments to <a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>.
</li>
<li id="18">
The second return value for all *-information functions except for
<a href="operators/system/declaration-information.htm"><b>declaration-information</b></a>
has been moved to the fourth value (since it is seldom used) and
instead the second value returned is usually a locative cons (a cons
whose car and/or cdr may be used as a mutable value). This locative
cons is used to provide the local binding of the value (for
:evaluation environments) or local compiler structure information (for
the two compilation environments). To reduce consing at critical
points in the environments implementation, there are a few exceptions
where the second value is not a cons representing a locative: 
<ol>
<li id="19">
When
the first return value from variable-information is :constant, then
the second value returned is an actual value, and not a value housed
within a locative.  This ensures that the value is not changed by
replacing it in the (non-existent) locative.
</li>
<li id="20">
When the first return value from <a href="operators/system/variable-information.htm"><b>variable-information</b></a> is
<code>:special</code>, then the second value is <code>nil</code>, because the value is dynamic and can be best
accessed via <a href="../ansicl/dictentr/symbol-v.htm"><b>symbol-value</b></a>.
</li>
<li id="21">
When the first return value from <a href="operators/system/function-information.htm"><b>function-information</b></a> is
<code>:special-operator</code>, then the second value is <code>nil</code>, because the value of a special operator is opaque
to the programmer (companion-macros are mandated by the spec in order
for a non-compiler to "see" into special-operators, and so a
functional value doesn't make sense).
</li>
</ol>
</li>
<li id="22">
When the first return value from <a href="operators/system/function-information.htm"><b>function-information</b></a> is either
<code>:function</code> or <code>:macro</code>, and the
definition is in fact dynamic and thus accessible via <a href="../ansicl/dictentr/fdefinit.htm"><b>fdefinition</b></a> or <a href="../ansicl/dictentr/macro-fu.htm"><b>macro-function</b></a>, respectively, then the second
returned value is <code>nil</code>, unless the third
argument to <a href="operators/system/function-information.htm"><b>function-information</b></a> is non-<code>nil</code>, indicating that consing definitions and
declarations is ok.
</li>
<li id="23">
All of <a href="operators/system/variable-information.htm"><b>variable-information</b></a>, <a href="operators/system/function-information.htm"><b>function-information</b></a>, and <a href="operators/system/declaration-information.htm"><b>declaration-information</b></a> accept a null
environment argument, which may mean to look in the global
environment. The global environment is the environment of the running
lisp, possibly shadowed by the <a href="variables/system/s_compilation-unit-environment_s.htm"><code>*compilation-unit-environment*</code></a>.
</li>
<li id="24">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a> allows
some very limited augmentation of the global environment (either the
null lexical environment or compile-file-environments) when only one
name-to-value mapping is being added, or when only declarations are
being added.  Rules for this augmentation are not solid yet, and in
certain cases may require use of the <code>:reuse</code>
argument described below.
</li>
<li id="25">
Both <a href="operators/system/variable-information.htm"><b>variable-information</b></a>
and <a href="operators/system/function-information.htm"><b>function-information</b></a>
may receive an optional third argument, a boolean which requests a
building of all declarations out of previous declarations of the same
name, including the global environment.  This argument being
non-<code>nil</code> also results in a non-<code>nil</code> second return value (the definition housed in a
locative), although these return values are likely to be consed on the
fly. This switch is added so that the interpreter, which almost never
looks at declarations, doesn't need to cons as much for no good
reason.
</li>
<li id="26">
<a href="operators/system/function-information.htm"><b>function-information</b></a>
receives an optional fourth argument controlling information returned
for special-operators. See
<a href="#enviro-kinds-2">Section 2.1 Kinds of environments</a> or the description of
<a href="operators/system/function-information.htm"><b>function-information</b></a> for
more details.
</li>
<li id="27">
<a href="operators/system/function-information.htm"><b>function-information</b></a> might
return as its first value <code>:special-operator</code>, not
<code>:special-form</code>.
</li>
<li id="28">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>
accepts the additional keywords <i>special-operator</i>,
<i>block</i>, <i>tag</i>,
<i>compiler-macro</i>, <i>constant</i>,
and <i>flavor-iv</i> (i.e. flavor instance variable),
which contribute to the function, block, tag, compiler-macro,
variable, and variable namespaces, respectively.
</li>
<li id="29">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>
accepts a single name for each keyword except
<code>:declare</code>, in order to reduce consing.  In this
case, the locative (if present) is sought in the
<code>:locative</code> argument (see below)
</li>
<li id="30">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>
accepts the additional keyword argument <i>reuse</i>.
It is not necessary to create a new augmentable-environment object
whenever adding to the environment, but it is only useful to cons a
new environment object when entering a new contour (both in the
compiler and in an interpreter).  When <i>reuse</i> is
<code>nil</code> (the default) a new environment object is
consed, i.e. the environment object returned is not <a href="../ansicl/dictentr/eq.htm"><b>eq</b></a> to the one given.  But when
<i>reuse</i> is non-<code>nil</code>, then
the old environment object is returned, and any additions to the
environment are added at the same level, as if they had been all added
in the same call to augment-environment which created this environment
object.
</li>
<li id="31">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>
accepts the additional keyword argument <i>locative</i>.
Usually, the locative is <code>nil</code> or a cons cell,
and can be used efficiently when only one name is being added to the
environment. When a :constant is being augmented, the locative
argument is the actual value of the constant. The locative argument
becomes the value which is returned as the second value from the
*-information functions. For augmentation with many names at a time, a
locative can be specified for each name, where instead of a list of
names for each keyword, the list may be an alist, each element of
which specifies the name in the car and the locative in the cdr.  The
car of a non-<code>nil</code> locative cons is always
mutable, unless it represents a :constant value. See also the function
<a href="operators/system/constant-value.htm"><b>system:constant-value</b></a>.
</li>
<li id="32">
<a href="operators/system/define-declaration.htm"><b>define-declaration</b></a> is
implemented, but the lambda-list called for in its definition in
CLtL-2 is ambiguous as to whether it applies to some kind of syntax
for the declaration specifiers, or the arglist of the two-argument
function this macro is supposed to define. Therefore the lambda-list
is chosen to specify the syntax of the declaration, and the arglist
for functionality of the declaration is given either implicitly or via
a lambda form. The lambda-list for <a href="operators/system/define-declaration.htm"><b>define-declaration</b></a> is different from that
specified in CLtL-2, with additional required arguments
<i>prop</i> and <i>kind</i>.
<p id="33">
The functions that are described as being defined by the macro are in
fact implemented, and work as specified, except that it may return as
its first value one of <code>:function</code>,
<code>:variable</code>, <code>:both</code> (meaning
<code>:function</code> and <code>:variable</code>), or
<code>:declare</code>.
</p>
</li>

<li id="34">
<a href="operators/system/ensure-portable-walking-environment.htm"><b>ensure-portable-walking-environment</b></a>: this
function returns an environment suitable for portable code walkers
to use entirely within the ANSI Specification of Common Lisp.
</li>

</ul>

<hr><h2 id="35"><a name="enviro-kinds-2">2.1 Kinds of environments</a></h2>

<p id="36">
The kind slot of an augmentable-environment object determines what
behaviors the accessors have on it.  Usually, accessors will return
similar information, but for several reasons including performance
and the fact that namespaces are not pure mappings, the kind does play
a part, along with optional arguments, in returning different levels
of information.
</p>
<p id="37">
An environment object can be "modified" to become a different kind
simply by performing a null augmentation on the original environment
and by storing into the kind slot:
</p>
<pre id="38">
(setq e2 (sys:augment-environment e1))
(setf (sys::augmentable-environment-kind e2) :evaluation)
</pre>
<p id="39">
which results in an evaluation environment in e2, which has exactly
the same information as e1 (which might be any kind of environment,
but which in practice is probably a
<code>:compiler</code>
environment).
</p>

<p id="40">
The environment kinds are:
</p>
<ul>
<li id="41">
<code>:interpreter</code>: for a lisp with an interpreter, such
as Allegro CL, an interpreter environment can form the basis and
implementation for the interpreter.  Accesses on it will tend to
generate no declaration information (with the special-case of the
special declaration), and global values will be left up to the caller
to retrieve, rather than to cons up a locative for each call.  The
by-words for an interpreter environment are speed and cons-free
operation.
</li>
<li id="42">
<code>:compiler</code>:
a compiler environment is the normal
environment which the compiler uses to establish contours and contexts
for the compilation process. The by-word for a compilation environment
is as much information as possible. (Prior to version 8.0,
<code>:compiler</code> environments were called
<code>:compilation</code> environments.)
<p id="43">
A compiler environment might also
have a global component, suitable for storing definitions temporarily
during a compile-file If so, it is generally stored into <a href="variables/system/s_compilation-unit-environment_s.htm"><code>*compilation-unit-environment*</code></a>, and
any definitions it contains will shadow any global definitions stored
directly in the lisp.  When the <a href="variables/system/s_compilation-unit-environment_s.htm"><code>*compilation-unit-environment*</code></a> is
removed, then the shadowing is stopped, and the original definitions
appear again.
</p>
</li>
<li id="44">
<code>:evaluation</code>: an evaluation environment is a
compilation environment posing as an interpreter environment.  It has
many of the same characteristics of a compilation environment, and in
fact is created with the <a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>/<a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> technique described above.
</li>
<li id="45">
<code>:compilation</code>:
a compilation environment is
also similar to a compiler
environment, except that macros and compiler-macros can recognize one
and macroexpand differently.  Note: it is a goal to eventually remove
this kind of environment; the distinction should not be as useful as
it currently is. (Prior to version 8.0,
<code>:compilation</code> environments were called
<code>:compilation-walking</code> environments.)
</li>
<li id="46">
<code>:macros-only</code>: this environment kind serves a
special-purpose when making a lexical-closure for a macrolet.  Because
macrolet makes macro-functions in its own lexical environment, but
because referencing a local variable within this environment is
undefined, it is necessary that only macro definitions be copied when
the lexical-closure is created.
</li>
</ul>

<h3 id="47">
Special Handling of function-information returns
</h3>

<p id="48">
If one considers a namespace to be a one-to-one mapping of a name to a
binding, then the function namespace is not a pure namespace in Common
Lisp; consider that a name can simultaneously name both a
special-operator and either a macro or a compiler-macro, or it can
name a macro or function and a compiler-macro simultaneously.  Of
course, any lexical definition created for that name (such as an
<a href="../ansicl/dictentr/fletlabe.htm"><b>flet</b></a>, <a href="../ansicl/dictentr/fletlabe.htm"><b>labels</b></a>, or <a href="../ansicl/dictentr/fletlabe.htm"><b>macrolet</b></a>) will shadow all of these potential
combinations, but if no such shadowing occurs, there is a necessity
for <a href="operators/system/function-information.htm"><b>function-information</b></a>
to be able to make the distinctions between the various combinations
of definition that are possible.
</p>
<p id="49">
If the fourth argument (the <i>special-operators</i>
argument) to <a href="operators/system/function-information.htm"><b>function-information</b></a> is true, and if the
name is a non-shadowed special-operator, then
<code>:special-operator</code> is returned, even if it has a
macro or a compiler-macro definition as well. If the argument is
<code>nil</code>, then for a special-operator which also
has a compiler-macro, <code>:compiler-macro</code> is returned
only for 
<code>:compiler</code> and
<code>:compilation</code> environments (otherwise
<code>:special-operator</code> is returned), and for a
special-operator which also has a macro definition,
<code>:macro</code> is returned only for
<code>:interpreter</code> and <code>:evaluation</code>
environments (otherwise <code>:special-operator</code> is
returned).
</p>
<p id="50">
We do not define what occurs if a special-operator has both a macro
and a compiler-macro definition, because Allegro CL has none of these
situations.  There should be a normalized behavior for such a
situation.
</p>
<p id="51">
If a name defines a compiler-macro as well as either a macro or a
function, then which is returned depends on the environment kind: a
 <code>:compiler</code> or
<code>:compilation</code> environment will cause the
<code>:compiler-macro</code> to be returned, and an
<code>:interpreter</code> or an <code>:evaluation</code>
environment will result in the <code>:function</code> or
<code>:macro</code> being returned.
</p>




<hr><hr><h2 id="52"><a name="environments-api-1">3.0 Environments functionality</a></h2>

<p id="53">
The following functions and variables are defined in our environments
implementation:
</p>

<ul>
<li id="54">
<a href="operators/system/augment-environment.htm"><b>augment-environment</b></a>
</li>
<li id="55">
<a href="operators/system/block-information.htm"><b>block-information</b></a>
</li>
<li id="56">
<a href="operators/system/ce-get.htm"><b>ce-get</b></a>
</li>
<li id="57">
<a href="operators/system/ce-putprop.htm"><b>ce-putprop</b></a>
</li>
<li id="58">
<a href="operators/system/declaration-information.htm"><b>declaration-information</b></a>
</li>
<li id="59">
<a href="operators/system/define-declaration.htm"><b>define-declaration</b></a>
</li>
<li id="60">
<a href="operators/system/function-information.htm"><b>function-information</b></a>
</li>
<li id="61">
<a href="operators/system/make-compile-file-environment.htm"><b>make-compile-file-environment</b></a>
</li>
<li id="62">
<a href="operators/system/tag-information.htm"><b>tag-information</b></a>
</li>
<li id="63">
<a href="operators/system/variable-information.htm"><b>variable-information</b></a>
</li>
<li id="64">
<a href="variables/system/s_compile-file-environment_s.htm"><code>*compile-file-environment*</code></a> (now
deprecated, use <a href="variables/system/s_compilation-unit-environment_s.htm"><code>*compilation-unit-environment*</code></a>
instead)
</li>

<li id="65">
<a href="variables/system/s_compilation-unit-environment_s.htm"><code>*compilation-unit-environment*</code></a> (8.0 replacement for
<code>*compile-file-environment*</code>)
</li>

<li id="66">
<a href="variables/system/s_interpreter-environment_s.htm"><code>*interpreter-environment*</code></a>
</li>
<li id="67">
<a href="variables/system/s_evaluation-environment_s.htm"><code>*evaluation-environment*</code></a>
</li>
</ul>

<hr><hr><h2 id="68"><a name="environments-in-acl-1">4.0 Environments in Allegro CL</a></h2>

<p id="69">
The optimize qualities (safety, space, speed, debug) are no longer
repesented by variables in the excl package
(e.g. <code>excl::.speed.</code>) Also, the compilation-speed
quality is added to the set, because it is specified by ANS.  These 5
qualities are now accessed by <code>(sys:declaration-information
'optimize &lt;env&gt;)</code> which returns an alist which will
always include at least one of each of these qualities.  This return
value is constant -- <b>never</b> modify its contents.  Also, there
may be more than one entry for a quality; the first one encountered is
the correct value for the specified environment.
</p>
<p id="70">
The optimize declaration is defined by
</p>
<pre id="71">
(sys:define-declaration optimize (declaration env)
  .optimize.
  :declare
  &lt;body&gt;)
</pre>
<p id="72">
This means, for debugging purposes, that
<code>sys::.optimize.</code> is used as the holder of the global
optimization quality list.
</p>
<p id="73">
The <a href="operators/system/declaration-information.htm"><b>declaration-information</b></a> function will return
this list, possibly shadowed by local lexical optimize declarations,
depending on the environment object passed to it.
</p>
<h3 id="74">
Example 1
</h3>
<pre id="75">
cl-user(1): (sys:declaration-information 'optimize nil)
((safety 1) (space 1) (speed 1) (compilation-speed 1) (debug 2))
cl-user(2): 
</pre>

<h3 id="76">
Example 2
</h3>
<pre id="77">
cl-user(1): (setq e1 (sys::make-augmentable-environment-boa :compilation))
#&lt;Augmentable compilation environment @ #x71b0941a&gt;
cl-user(2): (setq e2 (sys:augment-environment e1 :declare '((optimize speed (safety 0)))))
#&lt;Augmentable compilation environment 1 @ #x71b0992a&gt;
cl-user(3): (sys:declaration-information 'optimize e1)
((safety 1) (space 1) (speed 1) (compilation-speed 1) (debug 2))
cl-user(4): (sys:declaration-information 'optimize e2)
((speed 3) (safety 0) (safety 1) (space 1) (speed 1)
 (compilation-speed 1) (debug 2))
cl-user(5): 
</pre>

<h3 id="78">
Inline, notinline declarations
</h3>

<p id="79">
This is an example of a mutually exclusive declaration; one can declare
the same symbol binding both inline and notinline, but not at the same
time.  Therefore, these two declarations are combined into a single
declaration class called inline.
</p>
<p id="80">
The entire definition for these two declarations is
</p>

<pre id="81">
(sys:define-declaration (inline inline notinline) (declaration env)
  .inline.
  :function)
</pre>
<p id="82">
The first inline in the namespace is the class, and each of the two
further names in the namespace are the declaration instances.  The kind
of declaration is :function, and the body is null and thus takes on the
default action.
</p>
<p id="83">
Thus, function information for a function name that has been declared
either inline or notinline will include as its third returned value an
entry of the form (inline &lt;value&gt;), where value is one of
inline, notinline, or <code>nil</code> (but this might
usually be left off).
</p>
<h3 id="84">
Example 1
</h3>
<pre id="85">
cl-user(1): (setq e1 (sys::make-augmentable-environment-boa :compilation))
#&lt;Augmentable compilation environment @ #x71b0941a&gt;
cl-user(2): (setq e2 (sys:augment-environment e1 :function 'foo
                       :locative (list #'(lambda (x) (1+ x)))
                       :declare '((notinline foo))))
#&lt;Augmentable compilation environment 1 @ #x71b09c62&gt;
cl-user(3): (setq e3 (sys:augment-environment e2 :declare '((inline foo))))
#&lt;Augmentable compilation environment 1 1 @ #x71b09eba&gt;
cl-user(4): (sys:function-information 'foo e1)
nil
cl-user(5): (sys:function-information 'foo e2)
:function
(#&lt;Interpreted Function (unnamed) @ #x71b09c32&gt;)
((inline notinline))
t
cl-user(6): (sys:function-information 'foo e3)
:function
(#&lt;Interpreted Function (unnamed) @ #x71b09c32&gt;)
((inline inline) (inline notinline))
t
cl-user(7): 
</pre>

<h3 id="86">
Example 2
</h3>
<pre id="87">
cl-user(1): (sys:function-information 'bar nil)
nil
cl-user(2): (sys:augment-environment nil :declare '((notinline bar)) :reuse t)
nil
cl-user(3): (sys:function-information 'bar nil)
nil
cl-user(4): (sys:function-information 'bar nil t)
:free
(nil)
((inline notinline))
cl-user(5): (setq e1 (sys::make-augmentable-environment-boa :compilation))
#&lt;Augmentable compilation environment @ #x71b09bd2&gt;
cl-user(6): (setq e2 (sys:augment-environment e1 :declare '((inline bar))))
#&lt;Augmentable compilation environment 1 @ #x71b09fba&gt;
cl-user(7): (sys:function-information 'bar e1)
nil
cl-user(8): (sys:function-information 'bar e1 t)
:free
(nil)
((inline notinline))
cl-user(9): (sys:function-information 'bar e2 t)
:free
(nil)
((inline notinline) (inline inline) (inline notinline))
nil
cl-user(10): 
</pre>

<h3 id="88">
Ignore, ignorable, excl::ignore-if-unused declarations
</h3>

<p id="89">
Like inline and notinline, these declarations are mutually exclusive.
excl::ignore-if-unused is the archaic form for ignorable.  The
declaration class is called ignore, and will have a value of ignore,
ignorable, or excl::ignore-if-unused (though the archaic form only
shows up in a compilerless lisp, where it is never used anyway).
</p>
<p id="90">
The initial definition of these declarations is:
</p>
<pre id="91">
(sys:define-declaration (ignore ignore ignorable excl::ignore-if-unused)
    (declaration env)
  .ignore.
  :variable)
</pre>

<p id="92">
However, when the compiler is loaded, it overwrites this definiton
with one which will
</p>
<ul>
<li id="93">
do some error checking
</li>
<li id="94">
fold excl::ignore-if-unused into ignorable
</li>
<li id="95">
annotate the value in the locative (which is currently a varrec structure)
</li>
</ul>



<p id="96">
It doesn't make sense to ignore a variable which hasn't been bound,
but no error is generated when such a situation occurs.
</p>
<h3 id="97">
Example 1
</h3>
<pre id="98">
cl-user(1): (setq e1 (sys::make-augmentable-environment-boa :compilation))
#&lt;Augmentable compilation environment @ #x71b0941a&gt;
cl-user(2): (setq e2 (sys:augment-environment e1 :variable 'foo
                        :locative (list (comp::make-varrec-boa 'foo))
                        :declare '((ignore foo))))
#&lt;Augmentable compilation environment 1 @ #x71b09ab2&gt;
cl-user(3): (multiple-value-list (sys:variable-information 'foo e2))
(:lexical
 (#&lt;compiler::varrec foo DynamicExtent: maybe Used: ignore
    unknown-type&gt;)
 ((ignore ignore)) t)
cl-user(4): (comp::varrec-used (caadr *))
ignore
cl-user(5): 
</pre>

<p id="99">
Example of maintenance of definitions in compile-file-environment,
as opposed to the global-environment:
</p>
<p id="100">
Note that the two definitions of foo given here are maintained in
different locations; one in the global environment, and one in
the lexical environment:
</p>
<pre id="101">
cl-user(1): (fboundp 'foo)
nil
cl-user(2): (sys:augment-environment nil :function 'foo
              :locative (list (compile nil (lambda (x y)
                                             (+ x y)))))
nil
cl-user(3): (sys:function-information 'foo)
:function
nil
nil
cl-user(4): (fdefinition 'foo)
#&lt;Function (:anonymous-lambda 9) @ #x71b0ae42&gt;
cl-user(5): (funcall * 10 20)
30
cl-user(6): (setq e1 (sys:make-compile-file-environment))
#&lt;Augmentable compilation environment @ #x71b0e7b2&gt;
cl-user(7): (setq e2 (sys:augment-environment e1 :function 'foo
                     :locative (list (compile nil (lambda (x y)
                                                    (- x y))))))
#&lt;Augmentable compilation environment 1 @ #x71b11d62&gt;
cl-user(8): (sys:function-information 'foo)
:function
nil
nil
cl-user(9): (fdefinition 'foo)
#&lt;Function (:anonymous-lambda 9) @ #x71b0ae42&gt;
cl-user(10): (sys:function-information 'foo e2)
:function
(#&lt;Function (:anonymous-lambda 10) @ #x71b10bda&gt;)
nil
t
cl-user(11): (multiple-value-bind (ignore locative)
                 (sys:function-information 'foo e2)
               (funcall (car locative) 10 20))
-10
cl-user(12): 
</pre>


</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/environments.htm">8.1 version</a></td></tr></table></html>