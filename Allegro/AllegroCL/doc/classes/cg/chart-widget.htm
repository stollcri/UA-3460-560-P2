<html><head><meta http-equiv="content-type" name="description" content="text/html; charset=UTF-8"> <title>chart-widget</title><link rel="stylesheet" href="../../acldoc-styles.css" type="text/css"></head><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><b>Class</b></td><td align="left" bgcolor="#00FFFF"><b>Package: cg</b></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/classes/cg/chart-widget.htm">8.1 version</a></td></tr></table><h2 id="2">chart-widget</h2>


<p id="3">
The class of the <a href="chart-widget.htm"><code>chart-widget</code></a>.
</p>

<p id="4">
The <a href="chart-widget.htm"><code>chart-widget</code></a> is a
versatile facility for creating two-dimensional line graphs and bar
charts. (To plot X/Y coordinate pairs instead, see
the <a href="plot-widget.htm"><code>plot-widget</code></a> class.)
</p>
<p id="5">
The chart widget could be used to present static information or to
dynamically monitor information as it changes. The widget will
automatically lay out its axes and other parts (according to style
properties that you can modify) and can also autocompute a rounded
value range that encloses all of the data values.  A long sequence of
data items can be scrolled into view by dragging the mouse or using
the usual scrolling keys.
</p>

<h3 id="6">
Chart subobjects
</h3>

<p id="7">
The following classes are used to create secondary objects that
are used by a chart-widget:
</p>

<ul>
<li id="8">
<a href="chart-axis.htm"><code>chart-axis</code></a>
</li>
<li id="9">
<a href="item-axis.htm"><code>item-axis</code></a>
</li>
<li id="10">
<a href="value-axis.htm"><code>value-axis</code></a>
</li>
<li id="11">
<a href="bar-chart-view.htm"><code>bar-chart-view</code></a>
</li>
<li id="12">
<a href="line-graph-view.htm"><code>line-graph-view</code></a>
</li>
<li id="13">
<a href="chart-legend.htm"><code>chart-legend</code></a>
</li>
</ul>

<p id="14">
Each of these classes has its own properties (that is, slots and accessors).
</p>

<h3 id="15">
Properties of the chart-widget class
</h3>

<p id="16">
These properties are unique to the <a href="chart-widget.htm"><code>chart-widget</code></a> class. 
</p>

<ul>
<li id="17">
<a href="../../operators/cg/b/bar-chart-view.htm"><b>bar-chart-view</b></a>
</li>
<li id="18">
<a href="../../operators/cg/c/chart-item-id-equality-test.htm"><b>chart-item-id-equality-test</b></a>
</li>
<li id="19">
<a href="../../operators/cg/c/chart-items.htm"><b>chart-items</b></a>
</li>
<li id="20">
<a href="../../operators/cg/c/chart-items-length.htm"><b>chart-items-length</b></a>
</li>
<li id="21">
<a href="../../operators/cg/c/chart-items-limit.htm"><b>chart-items-limit</b></a>
</li>
<li id="22">
<a href="../../operators/cg/c/chart-items-max-index.htm"><b>chart-items-max-index</b></a>
</li>
<li id="23">
<a href="../../operators/cg/c/chart-items-min-index.htm"><b>chart-items-min-index</b></a>
</li>
<li id="24">
<a href="../../operators/cg/c/chart-items-pushed-off.htm"><b>chart-items-pushed-off</b></a>
</li>
<li id="25">
<a href="../../operators/cg/c/chart-orientation.htm"><b>chart-orientation</b></a>
</li>
<li id="26">
<a href="../../operators/cg/c/chart-value-returner.htm"><b>chart-value-returner</b></a>
</li>
<li id="27">
<a href="../../operators/cg/c/chart-view.htm"><b>chart-view</b></a>
</li>
<li id="28">
<a href="../../operators/cg/f/fit-chart-items.htm"><b>fit-chart-items</b></a>
</li>
<li id="29">
<a href="../../operators/cg/i/item-axis.htm"><b>item-axis</b></a>
</li>
<li id="30">
<a href="../../operators/cg/l/line-graph-view.htm"><b>line-graph-view</b></a>
</li>
<li id="31">
<a href="../../operators/cg/m/margin-above-legend.htm"><b>margin-above-legend</b></a>
</li>
<li id="32">
<a href="../../operators/cg/s/scroll-line-items.htm"><b>scroll-line-items</b></a>
</li>
<li id="33">
<a href="../../operators/cg/s/scroll-on-drag.htm"><b>scroll-on-drag</b></a>
</li>
<li id="34">
<a href="../../operators/cg/s/scroll-on-drag-factor.htm"><b>scroll-on-drag-factor</b></a>
</li>
<li id="35">
<a href="../../operators/cg/s/scroll-page-portion.htm"><b>scroll-page-portion</b></a>
</li>
<li id="36">
<a href="../../operators/cg/s/scroll-position.htm"><b>scroll-position</b></a>
</li>
<li id="37">
<a href="../../operators/cg/s/scrolled-to-end.htm"><b>scrolled-to-end</b></a>
</li>
<li id="38">
<a href="../../operators/cg/s/scrolled-to-end-maintained.htm"><b>scrolled-to-end-maintained</b></a>
</li>
<li id="39">
<a href="../../operators/cg/v/value-axis.htm"><b>value-axis</b></a>
</li>
<li id="40">
<a href="../../operators/cg/v/value-axis-2.htm"><b>value-axis-2</b></a>
</li>
</ul>

<p id="41">
Additional <a href="chart-widget.htm"><code>chart-widget</code></a>
properties are provided by the <a href="chart-or-plot.htm"><code>chart-or-plot</code></a> superclass. 
</p>

<h3 id="42">
chart-widget example
</h3>

<p id="43">
Below is a quick <a href="chart-widget.htm"><code>chart-widget</code></a> example.  See the chart-widget
tutorial (<a href="../../cg/cg-chart-widget.htm">cg-chart-widget.htm</a>) for more
examples with more extensive explanations.  The tutorial is probably
the best way to learn the widget.  There is also an example in the
IDE's <a href="../../ide-menus-and-dialogs/navigator-dialog.htm">Navigator
Dialog</a> that generates random charts to show off the variety
of its styles.
</p>
<p id="44">
The following example code demonstrates the two main alternate
techniques for supplying the data for a chart: (1) calling <a href="../../operators/cg/s/set-chart-value.htm"><b>set-chart-value</b></a> once for each datum,
and (2) supplying a <a href="../../operators/cg/c/chart-value-returner.htm"><b>chart-value-returner</b></a> function that will be
called as needed to return each value.
</p>
<p id="45">
For both techniques we will use the following sample data.  Each of
the entries in this list will become one "chart item" for a bowling
event, and each person that is mentioned in the plists of bowling
scores will become one "chart object".
</p>

<pre id="46">
(defparameter *scores*
  '(((2005 dec 12) :doris 164 :tal 152)
    ((2006 feb 3) :doris 168 :tal 145 :hubert 103)
    ((2006 feb 18) :doris 160 :tal 173 :hubert 110 :myrtle 124)
    ((2006 jun 17) :doris 172 :tal 160 :myrtle 142)
    ((2006 aug 31) :tal 170 :myrtle 135)))
</pre>

<p id="47">
The first version of the example code uses the approach of calling
<a href="../../operators/cg/s/set-chart-value.htm"><b>set-chart-value</b></a> for each
datum, after creating the <a href="chart-widget.htm"><code>chart-widget</code></a>.
</p>

<pre id="48">
(let* ((width 300)
       (height 400)
       (chart-widget
        (make-instance 'chart-widget
          :title "Bowling Scores"
          :chart-view :line
          :fit-chart-items t
          :item-axis (make-instance 'item-axis
                       :on-print-major-label
                       (lambda (date)
                         (format nil "~:(~a~) ~a ~a"
                           (second date)(third date)(first date))))
          :chart-legend (make-instance 'chart-legend
                          :on-print-chart-object 'capitalize-object)
          :right-attachment :right
          :bottom-attachment :bottom
          :left 0 :top 0 :width width :height height))
       (dialog (make-window :bowling-scores
                 :class 'dialog
                 :title "Bowling Scores"
                 :scrollbars nil
                 :interior (make-box-relative 40 40 width height)
                 :dialog-items (list chart-widget)))
       item-id)
  (dolist (item *scores*)
    (setq item-id (pop item))
    (loop (unless item (return))
          (set-chart-value
           chart-widget
           :item-id item-id
           :object-id (first item)
           :value (second item))
          (setq item (cddr item))))
  dialog)
</pre>

<p id="49">
The second version builds the same chart by supplying a <a href="../../operators/cg/c/chart-value-returner.htm"><b>chart-value-returner</b></a> function rather
than by calling <a href="../../operators/cg/s/set-chart-value.htm"><b>set-chart-value</b></a> in a loop.  When using a <a href="../../operators/cg/c/chart-value-returner.htm"><b>chart-value-returner</b></a>, you generally
need to supply a list of chart-objects and a <a href="../../operators/cg/c/chart-items-max-index.htm"><b>chart-items-max-index</b></a> to tell the widget the
range of items and objects for which it should query values.
</p>

<pre id="50">
(let* ((width 300)
       (height 400)
       (chart-widget
        (make-instance 'chart-widget
          :title "Bowling Scores"
          :chart-view :line
          :fit-chart-items t
          :item-axis (make-instance 'item-axis
                       :on-print-major-label
                       (lambda (date)
                         (format nil "~:(~a~) ~a ~a"
                           (second date)(third date)(first date))))
          :chart-legend (make-instance 'chart-legend
                          :on-print-chart-object 'capitalize-object)
          :chart-objects '((:id :doris)(:id :hubert)(:id :myrtle)(:id :tal))
          :chart-items-max-index (1- (length *scores*))
          :chart-value-returner
          (lambda (chart-widget value-type item-index
                                object-index object-id)
            (declare (ignore chart-widget object-index))
            (let* ((item (nth item-index *scores*)))
              (case value-type
                (:id (first item))
                (:value (getf (rest item) object-id)))))
          :right-attachment :right
          :bottom-attachment :bottom
          :left 0 :top 0 :width width :height height)))
  (make-window :bowling-scores
    :class 'dialog
    :title "Bowling Scores"
    :scrollbars nil
    :interior (make-box-relative 40 40 width height)
    :dialog-items (list chart-widget)))
</pre>


<p id="51">
See <a href="../../cg/cg-chart-widget.htm">cg-chart-widget.htm</a>.
</p>

<hr><p id="52"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"></td><td align="left" bgcolor="#00FFFF"></td><td align="center" bgcolor="#00FFFF"><a href="../../contents.htm"><b>ToC</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../introduction.htm"><b>DocOverview</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../cgide.htm"><b>CGDoc</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../release-notes.htm"><b>RelNotes</b></a></td><td align="center" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../index.htm"><b>Index</b></a></td><td align="center" bgcolor="#00FFFF"><a href="../../permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="../../introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/classes/cg/chart-widget.htm">8.1 version</a></td></tr></table></body></html>