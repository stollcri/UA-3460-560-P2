<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Source File Recording</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/source-file-recording.htm">8.1 version</a></td></tr></table><h1 id="2">Source File Recording</h1><p id="3">This document contains the following sections:</p><a href="#source-file-recording-intro-1">1.0 Source-file recording Introduction</a><br>&nbsp;&nbsp;&nbsp;<a href="#source-file-functionality-2">1.1 Functions that implement source file recording</a><br><a href="#redefinition-warnings-1">2.0 Redefinition warnings</a><br>&nbsp;&nbsp;&nbsp;<a href="#pathname-comparison-2">2.1 Pathname comparison</a><br><hr><hr><h2 id="4"><a name="source-file-recording-intro-1">1.0 Source-file recording Introduction</a></h2>

<p id="5">
Allegro CL provides the ability to associate with an object the
location of the source used to define the object to Lisp. That
location can be:
</p>

<ul>
<li id="6">
A Lisp source file (for objects defined by loading a file into Lisp).
</li>
<li id="7">
An Emacs buffer open to a file (for objects defined by Lisp source in
an Emacs buffer open to a file and dispatched to Lisp via the
Emacs-Lisp interface).</li> <li id="8">The top-level (for objects defined
with definitions typed directly to the top-level).
</li>
</ul>

<p id="9">
Allegro CL can record the source of functions and macros which are
defined by the user.  Whether or not such information is recorded and
loaded depends on the values of the variables <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> and <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a>.  If
you want source file information recorded, you should set both
variables to be true. If you do not want source file information
recorded, you should set both variables to be <code>nil</code>.
</p>

<p id="10">
A side effect of recording this information is that warnings are
printed when a function or macro is redefined by a source other than
the original source (see the next section). The variable <a href="variables/excl/s_source-pathname_s.htm"><code>*source-pathname*</code></a> is recorded
as the place of definition of an object (like a function, macro) or
setting (like a variable). The variable is bound during loading.
</p>

<p id="11">
The variables <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> and <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a>
control whether source file information is recorded. If <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> is
true, source file information will be recorded:
</p>

<ul>
<li id="12">
Whenever an object is defined at the top-level (i.e. the definition is
typed directly to Lisp).
</li>
<li id="13">
Whenever a Lisp source file is loaded.
</li>
</ul>

<p id="14">
Further, if a Lisp source file is compiled, the resulting
<i>fasl</i> file will be annotated to include the source file
information that should be recorded if the file is loaded.
</p>

<p id="15">
If a <i>fasl</i> file was compiled with <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> true, then the
information stored in the file is loaded only if <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a> is
true when the fasl file is loaded.
</p>

<p id="16">
There are two variables for the following reason. Because defining
forms (<a href="../ansicl/dictentr/defun.htm"><b>defun</b></a>, <a href="../ansicl/dictentr/defparam.htm"><b>defvar</b></a>, etc.) are typically macros, it
is not possible to identify defining forms in a <i>fasl</i> file
because the macros will be macroexpanded away. For that reason, source
file information must be added to the <i>fasl</i> file at compile time
if it is to be available at load time. However, that information does
increase the size of the <i>fasl</i> file (typically about 10 to
15%). Users who do not wish to pay the cost of increased <em>fasl</em>
file size can suppress recording of information in the <i>fasl</i>
file by having <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> be <code>nil</code> when the file is compiled. 
</p>

<p id="17">
If a <i>fasl</i> file contains source file information, <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a> can be
used to control whether or not the information is loaded along with
the <i>fasl</i> file. The two variables give users maximum flexibility
in deciding whether source file information is recorded at all and
whether it is loaded into a particular image.
</p>

<hr><h2 id="18"><a name="source-file-functionality-2">1.1 Functions that implement source file recording</a></h2>

<p id="19">
The function <a href="operators/excl/record-source-file.htm"><b>record-source-file</b></a> stores
information about an object being defined. This function is not
typically called directly. It is called automatically when source file
recording is enabled when standard definition macros (defun, defvar,
etc.) are called. It is exported so that it can be added to
programmer-defined definition macros if desired.
</p>

<p id="20">
The function <a href="operators/excl/source-file.htm"><b>source-file</b></a>
returns the source file of a specified type (function, macro,
operator, variable), if it is known, for the argument object. <code>nil</code> is returned if the argument object is of the
specified type but no source file information is known. An error is
signaled if the argument object is not of the specified type.
</p>


<p id="21">
The function <a href="operators/excl/discard-all-source-file-info.htm"><b>discard-all-source-file-info</b></a> can be
used to discard all recorded information (so after it is called, it is
as if no information was ever gathered).
</p>




<hr><hr><h2 id="22"><a name="redefinition-warnings-1">2.0 Redefinition warnings</a></h2>

<p id="23">
Redefinition warnings are useful because code is sometimes
unintentionally redefined, perhaps because the user forgot that a
symbol was already used or because a symbol name was mistyped. Allegro
CL will print a warning message informing the user that functions and
macros have been redefined if the variable <a href="variables/excl/s_redefinition-warnings_s.htm"><code>*redefinition-warnings*</code></a> is
true and the conditions specified in the variable
description and just below are met.
</p>

<p id="24">
The following information pertains to redefinition warnings. 
</p>

<ul>
<li id="25">
Warnings are guaranteed to be printed only if the variables
<a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a>, <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a>, and
<a href="variables/excl/s_redefinition-warnings_s.htm"><code>*redefinition-warnings*</code></a> are
true. These variables are assumed to be
true in the discussion below.
</li>
<li id="26">
If a macro is defined with the same name as an existing function or a
function with the same name as an existing macro, a warning will be
printed regardless of whether source file information exists for
either the function or macro.
</li>
<li id="27">
If source file information exists for an object, and it is redefined
either in a file or at the top-level, a warning will be printed. The
exception occurs when the redefinition is in the file recorded as the
source file. Thus repetitive loads or compile-files of the same file
will not generate warnings. However, a warning will be printed when an
object is defined twice in the same file. Note too the comments under
the heading <a href="#pathname-comparison-2">Section 2.1 Pathname comparison</a>
below.
</li>
<li id="28">
Since source file information is not stored for functions already
defined in Allegro CL, redefining such functions will not generate
warnings unless a macro is defined with an existing function name or
vice versa. In particular, redefining standard Common Lisp functions
will not generate warnings. However, most such definitions will
trigger package-lock errors. See <a href="packages.htm">packages.htm</a> for
more information.
</li>
<li id="29">
There are cases where redefinition warnings are printed when <a href="variables/excl/s_redefinition-warnings_s.htm"><code>*redefinition-warnings*</code></a> is
true but one or both of <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a> or <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> are
<code>nil</code>. The only way to guarantee that warnings
are not printed is to set <a href="variables/excl/s_redefinition-warnings_s.htm"><code>*redefinition-warnings*</code></a> to be <code>nil</code>.
</li>
<li id="30">
Wrapping definition code with the <a href="operators/excl/without-redefinition-warnings.htm"><b>without-redefinition-warnings</b></a> macro
will suppress redefinition warnings.
</li>
</ul>

<hr><h2 id="31"><a name="pathname-comparison-2">2.1 Pathname comparison</a></h2>

<p id="32">
A problem with source file recording in a network environment is
that source file pathnames are not well-defined. Suppose you load a
file in an image (and source file information is recorded for objects
in the file) and then you dump the image out with <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a>. You then restart the image on
another machine and load the same file. You may get redefinition
warnings because the system thinks the file is different even though
it is in fact the same. The difference typically comes from additional
directories put on the front of the pathname. Thus, a local file on
machine <i>franz</i> may have the pathname <i>/usr/jones/foo.fasl</i>
but on another machine the pathname may be
<i>/net/franz/usr/jones/foo.fasl</i>.</p>

<p id="33">
Another problem can occur when you are running Emacs on one machine
and executing Lisp (as a subprocess of Emacs) on another
machine. Emacs and Lisp may have different ideas about the pathname of
a file.
</p>

<p id="34">
To handle these annoyances, we provide the variables <a href="variables/excl/s_redefinition-pathname-comparison-hook_s.htm"><code>*redefinition-pathname-comparison-hook*</code></a>,
<a href="variables/system/s_source-file-frobbers_s.htm"><code>*source-file-frobbers*</code></a> and function <a href="operators/system/tmp-mnt-frobber.htm"><b>tmp-mnt-frobber</b></a>.
</p>





</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/source-file-recording.htm">8.1 version</a></td></tr></table></html>