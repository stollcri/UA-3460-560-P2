<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>An XML-RPC API for Allegro Common Lisp</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/xml-rpc.htm">8.1 version</a></td></tr></table><h1 id="2">An XML-RPC API for Allegro Common Lisp</h1><p id="3">This document contains the following sections:</p><a href="#xml-rpc-intro-1">1.0 XML-RPC in Allegro CL introduction</a><br><a href="#xml-rpc-util-1">2.0 Various utility objects in XML-RPC</a><br><a href="#xml-rpc-client-api-1">3.0 XML-RPC client api</a><br><a href="#xml-rpc-data-api-1">4.0 XML-RPC data api</a><br><a href="#xml-rpc-server-api-1">5.0 XML-RPC server api</a><br><a href="#xml-rpc-examples-1">6.0 XML-RPC examples</a><br><a href="#xml-rpc-index-1">7.0 Index</a><br><hr><hr><h2 id="4"><a name="xml-rpc-intro-1">1.0 XML-RPC in Allegro CL introduction</a></h2>

<p id="5">
The xml-rpc module implements classes and functions to support the
XML-RPC protocol for remote function calls through HTTP connections.
The protocol is described in detail on the XML-RPC Home Page at <a href="http://xmlrpc.com/">http://xmlrpc.com/</a>.  The XML-RPC Home
Page also lists public XML-RPC servers and many community links.
</p>
<p id="6">
The xml-rpc module was available in release 6.2. It was documented by
a <i>readme.txt</i> and other files in the (now removed)
<i>xmlrpc/</i> directory. This document replaces that
<i>readme.txt</i> file and associated files.
</p>
<p id="7">
All symbols in this module are exported from the
<code>net.xml-rpc</code> package.  The module is named
<code>xml-rpc</code>. It requires the AllegroServe
(<code>aserve</code>) and the XML Utilities
(<code>xmlutils</code>) modules. You load the
<code>xml-rpc</code> module with a form like:
</p>
<pre id="8">
(require :xml-rpc)
</pre>
<p id="9">
This implementation of XML-RPC is separate and independent from the
Lisp RPC implememtation in the <code>aclrpc</code> module (see
<a href="rpc.htm">rpc.htm</a>).  The Lisp RPC module is more appropriate
for closely coupled applications on one processor or on a local area
network.  XML-RPC is more appropriate for occasional contact between
applications separated by large distances and by firewalls.
</p>
<p id="10">
The key features (both positive and negative) of the XML-RPC protocol
are as follows. First the positive features:
</p>
<ul>
<li id="11">
It is a published protocol implemented in a variety of languages and
operating systems.
</li>
<li id="12">
It allows communication between applications implemented in different
languages.
</li>
<li id="13">
It allows communication with established public servers.
</li>
<li id="14">
A Lisp application can be setup as a public server.
</li>
<li id="15">
It allows communication over the internet and through firewalls.
</li>
</ul>
<p id="16">
Now the negative features:
</p>
<ul>
<li id="17">
It is not intended for time-critical communications, or for the
transmission of large volumes of data.
</li>
<li id="18">
It is an asymmetrical protocol allowing calls from the client to the
server but not callbacks from the server to the client. (It is however
possible for an application to implement both client and server
functions in one program to allow some two-way communication.)
</li>
</ul>

<hr><hr><h2 id="19"><a name="xml-rpc-util-1">2.0 Various utility objects in XML-RPC</a></h2>

<p id="20">
The following variables, conditions, and methods are useful when using
XML-RPC.
</p>

<hr><h3 id="21"><a name="s_xml-rpc-version_s-var-bookmarkxx"></a>*xml-rpc-version*</h3><h3 id="22">Variable</h3><h4 id="23">Package: net.xml-rpc</h4>

<p id="24">
A list of three integers that describe the XML-RPC version.
</p>

<hr>

<hr><h3 id="25"><a name="xml-rpc-version-op-bookmarkxx"></a>xml-rpc-version</h3><h3 id="26">Function</h3><h4 id="27">Package: net.xml-rpc</h4>

<p id="28"><b>Arguments: </b><i>
</i> &amp;optional <i>stream</i><i>
</i></p>

<p id="29">
If <i>stream</i> is <code>nil</code>, return
a string with a formatted version message.
</p>
<p id="30">
If <i>stream</i> is a stream, write the formatted
version message to the stream.
</p>
<p id="31">
If <i>stream</i> is the keyword
<code>:number</code>, return an integer of the form
<code>aabbcc</code> where <code>aa</code>,
<code>bb</code>, and <code>cc</code> are the version
number components.
</p>
<p id="32">
Otherwise, return the value of <a href="xml-rpc.htm#s_xml-rpc-version_s-var-bookmarkxx"><code>*xml-rpc-version*</code></a>, a list of three
version numbers.
</p>

<hr>

<hr><h3 id="33"><a name="xml-rpc-condition-class-bookmarkxx"></a>xml-rpc-condition</h3><h3 id="34">Class</h3><h4 id="35">Package: net.xml-rpc</h4>

<p id="36">
The superclass of conditions associated with xml-rpc.
</p>

<hr>

<hr><h3 id="37"><a name="xml-rpc-fault-class-bookmarkxx"></a>xml-rpc-fault</h3><h3 id="38">Class</h3><h4 id="39">Package: net.xml-rpc</h4>

<p id="40">
A condition associated with xml-rpc.
</p>

<hr>

<hr><h3 id="41"><a name="xml-rpc-error-class-bookmarkxx"></a>xml-rpc-error</h3><h3 id="42">Class</h3><h4 id="43">Package: net.xml-rpc</h4>

<p id="44">
A condition associated with xml-rpc.
</p>

<hr>

<hr><h3 id="45"><a name="xml-rpc-response-error-class-bookmarkxx"></a>xml-rpc-response-error</h3><h3 id="46">Class</h3><h4 id="47">Package: net.xml-rpc</h4>

<p id="48">
A condition associated with xml-rpc.
</p>

<hr>

<hr><h3 id="49"><a name="xml-rpc-argument-error-class-bookmarkxx"></a>xml-rpc-argument-error</h3><h3 id="50">Class</h3><h4 id="51">Package: net.xml-rpc</h4>

<p id="52">
A condition associated with xml-rpc.
</p>

<hr>


<hr><h3 id="53"><a name="xml-rpc-fault-code-op-bookmarkxx"></a>xml-rpc-fault-code</h3><h3 id="54">Generic Function</h3><h4 id="55">Package: net.xml-rpc</h4>

<p id="56"><b>Arguments: </b><i>
xml-rpc-fault
</i></p>

<p id="57">
Accesses the code slot of an <a href="xml-rpc.htm#xml-rpc-fault-class-bookmarkxx"><code>xml-rpc-fault</code></a>.
</p>

<hr>

<hr><h3 id="58"><a name="xml-rpc-fault-string-op-bookmarkxx"></a>xml-rpc-fault-string</h3><h3 id="59">Generic Function</h3><h4 id="60">Package: net.xml-rpc</h4>

<p id="61"><b>Arguments: </b><i>
xml-rpc-fault
</i></p>

<p id="62">
Accesses the string slot of an <a href="xml-rpc.htm#xml-rpc-fault-class-bookmarkxx"><code>xml-rpc-fault</code></a>.
</p>

<hr>


<hr><h3 id="63"><a name="xml-rpc-error-place-op-bookmarkxx"></a>xml-rpc-error-place</h3><h3 id="64">Generic Function</h3><h4 id="65">Package: net.xml-rpc</h4>

<p id="66"><b>Arguments: </b><i>
xml-rpc-error
</i></p>

<p id="67">
Accesses the place slot of an <a href="xml-rpc.htm#xml-rpc-error-class-bookmarkxx"><code>xml-rpc-error</code></a>.
</p>

<hr>

<hr><h3 id="68"><a name="xml-rpc-error-data-op-bookmarkxx"></a>xml-rpc-error-data</h3><h3 id="69">Generic Function</h3><h4 id="70">Package: net.xml-rpc</h4>

<p id="71"><b>Arguments: </b><i>
xml-rpc-error
</i></p>

<p id="72">
Accesses the data slot of an <a href="xml-rpc.htm#xml-rpc-error-class-bookmarkxx"><code>xml-rpc-error</code></a>.
</p>

<hr>

<hr><hr><h2 id="73"><a name="xml-rpc-client-api-1">3.0 XML-RPC client api</a></h2>

<p id="74">
The Client API allows a Lisp application to call any XML-RPC server.
</p>
<p id="75">
In a client call:
</p>

<ol>
<li id="76">
Lisp arguments are converted and encoded to satisfy the requirements
of the protocol,
</li>
<li id="77">
The remote method is called by sending the encoded message to the
server.
</li>
<li id="78">
The result of the call is received from the server, decoded and mapped
to a Lisp value.
</li>
</ol>

<hr><h3 id="79"><a name="encode-xml-rpc-call-op-bookmarkxx"></a>encode-xml-rpc-call</h3><h3 id="80">Function</h3><h4 id="81">Package: net.xml-rpc</h4>

<p id="82"><b>Arguments: </b><i>
name </i> &amp;rest <i>args</i><i>
</i></p>

<p id="83">
The purpose of this function is to encode a client call into a string
ready to be transmitted to a server.
</p>
<p id="84">
The <i>name</i> argument is a symbol or string that
names a method available at the server.
</p>
<p id="85">
The remaining arguments are Lisp values that are encoded into suitable
protocol items.  Default encoding rules are defined for many Lisp data
types.  Some arguments must be explicitly encoded by calling <a href="xml-rpc.htm#make-xml-rpc-encoding-op-bookmarkxx"><b>make-xml-rpc-encoding</b></a> described later.
</p>
<p id="86">
If the same call needs to be made several times, there is some
efficiency gained in encoding the call once, and reusing the string.
</p>
<p id="87">
The XML-RPC protocol requires that each http request includes a length
and that the length is accurate.
</p>

<hr>

<hr><h3 id="88"><a name="call-xml-rpc-server-op-bookmarkxx"></a>call-xml-rpc-server</h3><h3 id="89">Function</h3><h4 id="90">Package: net.xml-rpc</h4>

<p id="91"><b>Arguments: </b><i>
server name </i> &amp;rest <i>args</i><i>
</i></p>

<p id="92">
The purpose of this function is to call the remote method and to
decode the result.
</p>
<p id="93">
The first argument is a list of keyword value pairs describing the
desired XML-RPC server.
</p>
<p id="94">
The second argument is the name of a remote method and the remaining
arguments are arguments passed to the remote methods.
</p>
<p id="95">
The value returned by the function is the decoded value returned by
the remote method.
</p>
<p id="96">
If the call results in an XML-RPC Fault, then a Lisp error of type
<a href="xml-rpc.htm#xml-rpc-fault-class-bookmarkxx"><code>xml-rpc-fault</code></a> is signaled.
</p>
<p id="97">
The keyword arguments that may appear in the server list are
<code>:url</code>, <code>:agent</code>, and
<code>:host</code>.
</p>
<p id="98">
The <i>url</i> argument specifies the URL of the remote
server.  The default value is taken from the variable <a href="xml-rpc.htm#s_xml-rpc-url_s-var-bookmarkxx"><code>*xml-rpc-url*</code></a>.
</p>
<p id="99">
The <i>agent</i> argument may be a string that is passed
to the server as the :user-agent header element.  The default value is
<code>:aserve</code>; this value sends the AllegroServe version
string.
</p>
<p id="100">
The <i>host</i> argument may be a string that is passed
to the server as the <code>:host</code> header element.  When
this argument is <code>nil</code>, the
<code>:host</code> header element is omitted.
</p>

<hr>

<hr><h3 id="101"><a name="xml-rpc-call-op-bookmarkxx"></a>xml-rpc-call</h3><h3 id="102">Function</h3><h4 id="103">Package: net.xml-rpc</h4>

<p id="104"><b>Arguments: </b><i>
encoded </i>&amp;key <i>url agent host</i><i>
</i></p>

<p id="105">
The purpose of this function is to call the remote method and to
decode the result.
</p>
<p id="106">
The first argument is a string produced by the <a href="xml-rpc.htm#encode-xml-rpc-call-op-bookmarkxx"><b>encode-xml-rpc-call</b></a> function.  It is
the encoded version of the method name and argument values.
</p>
<p id="107">
The value returned by the function is the decoded value returned by
the remote method.
</p>
<p id="108">
If the call results in an XML-RPC Fault, then a Lisp error of type
<a href="xml-rpc.htm#xml-rpc-fault-class-bookmarkxx"><code>xml-rpc-fault</code></a> is signalled.
</p>
<p id="109">
The <i>url</i> argument specifies the URL of the remote
server.  The default value is taken from the variable <a href="xml-rpc.htm#s_xml-rpc-url_s-var-bookmarkxx"><code>*xml-rpc-url*</code></a>.
</p>
<p id="110">
The <i>agent</i> argument may be a string that is passed
to the server as the :user-agent header element.  The default value is
<code>:aserve</code>; this value sends the AllegroServe version
string.
</p>
<p id="111">
The <i>host</i> argument may be a string that is passed
to the server as the <code>:host</code> header element.  When
this argument is <code>nil</code>, the
<code>:host</code> header element is omitted.
</p>


<hr>

<hr><h3 id="112"><a name="s_xml-rpc-url_s-var-bookmarkxx"></a>*xml-rpc-url*</h3><h3 id="113">Variable</h3><h4 id="114">Package: net.xml-rpc</h4>

<p id="115">
The value of this variable is the default URL used to make a client
call.  If many calls to the same server are made in some context, the
setting of this variable may be used to provide the correct default
URL.
</p>

<hr>

<hr><hr><h2 id="116"><a name="xml-rpc-data-api-1">4.0 XML-RPC data api</a></h2>

<p id="117">
We provide classes and functions that give the programmer control over 
the encoding and decoding of Lisp values.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>Lisp Data Type</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>Default Encoding</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Default Decoding</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">integer</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;int&gt; or &lt;i4&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">integer</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">float</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;double&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">float</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">string</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;string&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">string</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">list</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;array&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">list</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">xml-rpc-struct</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;struct&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">xml-rpc-struct</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">xml-rpc-struct</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;boolean&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">t  or  nil</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">xml-rpc-struct</td>
    <td WIDTH="33%" VALIGN="TOP">&lt;base64&gt;</td>
    <td WIDTH="34%" VALIGN="TOP">string</td>
  </tr>

</table>

<p id="118">
Some XML-RPC data types must be explicitly created by the application
since it is not possible to infer them from the Lisp data type.
</p>

<hr><h3 id="119"><a name="xml-rpc-struct-class-bookmarkxx"></a>xml-rpc-struct</h3><h3 id="120">Class</h3><h4 id="121">Package: net.xml-rpc</h4>

<p id="122">
The purpose of this class is to represent the XML-RPC &lt;struct&gt;
data type.
</p>
<hr>

<hr><h3 id="123"><a name="xml-rpc-struct-members-op-bookmarkxx"></a>xml-rpc-struct-members</h3><h3 id="124">Generic Function</h3><h4 id="125">Package: net.xml-rpc</h4>

<p id="126"><b>Arguments: </b><i>
xml-rpc-struct 
</i></p>

<p id="127">
The default method returns a list of members defined in the
&lt;struct&gt;. Each item in the list is an instance of the <a href="xml-rpc.htm#xml-rpc-member-class-bookmarkxx"><code>xml-rpc-member</code></a> class.
</p>

<hr>

<hr><h3 id="128"><a name="xml-rpc-member-class-bookmarkxx"></a>xml-rpc-member</h3><h3 id="129">Class</h3><h4 id="130">Package: net.xml-rpc</h4>

<p id="131">
The purpose of this class is to represent the members defined in a
&lt;struct&gt;.
</p>

<hr>

<hr><h3 id="132"><a name="xml-rpc-member-name-op-bookmarkxx"></a>xml-rpc-member-name</h3><h3 id="133">Generic Function</h3><h4 id="134">Package: net.xml-rpc</h4>

<p id="135"><b>Arguments: </b><i>
xml-rpc-member
</i></p>

<p id="136">
The deafult method returns a string that represents the name of the
&lt;struct&gt; member.
</p>


<hr>

<hr><h3 id="137"><a name="xml-rpc-member-value-op-bookmarkxx"></a>xml-rpc-member-value</h3><h3 id="138">Generic Function</h3><h4 id="139">Package: net.xml-rpc</h4>

<p id="140"><b>Arguments: </b><i>
xml-rpc-member
</i></p>

<p id="141">
The default method returns the Lisp value of the &lt;struct&gt;
member.
</p>

<hr>

<hr><h3 id="142"><a name="xml-rpc-encoding-class-bookmarkxx"></a>xml-rpc-encoding</h3><h3 id="143">Class</h3><h4 id="144">Package: net.xml-rpc</h4>

<p id="145">
The purpose of this class is to represent an explicit encoding of a
Lisp value into an XML-RPC protocol value.  Instances of this class
are created when a default encoding cannot be used to create the
desired encoding.
</p>

<hr>

<hr><h3 id="146"><a name="xml-rpc-slot-value-op-bookmarkxx"></a>xml-rpc-slot-value</h3><h3 id="147">Generic Function</h3><h4 id="148">Package: net.xml-rpc</h4>

<p id="149"><b>Arguments: </b><i>
xml-rpc-struct slot-name
</i></p>

<p id="150">
The purpose of this function is to access the value of a member in a
&lt;struct&gt; instance.
</p>
<p id="151">
The <i>slot-name</i> argument is string or symbol that
is <a href="../ansicl/dictentr/stringst.htm"><b>string-equal</b></a> to
the desired member name.
</p>
<p id="152">
The value returned is the current Lisp value of the member.
</p>
<p id="153">
The <b>setf</b> of this generic function is called as follows:
</p>
<pre id="154">
((setf xml-rpc-slot-value) new-value xml-rpc-struct slot-name)
</pre>
<p id="155">
It may be used to store a new value as the Lisp value of the member.
</p>

<hr>

<hr><h3 id="156"><a name="make-xml-rpc-struct-op-bookmarkxx"></a>make-xml-rpc-struct</h3><h3 id="157">Function</h3><h4 id="158">Package: net.xml-rpc</h4>

<p id="159"><b>Arguments: </b><i>
</i> &amp;rest <i>name-value-sequence</i><i>
</i></p>

<p id="160">
This function creates an object from which an XML-RPC &lt;struct&gt;
instance can be encoded.  The arguments are an alternating sequence of
name and value arguments.  The name argument names a member of the
&lt;struct&gt;, the value argument is a Lisp value to be encoded as the
value component of the member.
</p>
<p id="161">
Each name argument may be a string or symbol or a list. A name or
symbol specifies the name of the member and a default encoding for the
Lisp value.  A list consists of a name for the member and a keyword
that specifies the desired XML-RPC encoding.  All the encoding
keywords are described with the <a href="xml-rpc.htm#encode-xml-rpc-value-op-bookmarkxx"><b>encode-xml-rpc-value</b></a> function.  A
third element in the list may be <code>t</code> or <code>nil</code> to specify whether the encoding for the Lisp
value should be cached in the member object.
</p>

<hr>

<hr><h3 id="162"><a name="make-xml-rpc-encoding-op-bookmarkxx"></a>make-xml-rpc-encoding</h3><h3 id="163">Function</h3><h4 id="164">Package: net.xml-rpc</h4>

<p id="165"><b>Arguments: </b><i>
data </i> &amp;optional <i>type</i><i>
</i> &amp;rest <i>more</i><i>
</i></p>

<p id="166">
The purpose of this function is to make an explicit encoding of a Lisp
value to create an encoded value that cannot be obtained from a
default encoding.
</p>
<p id="167">
If the type argument is omitted or <code>nil</code>, then
the data argument value is encoded by default rules:
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="50%" VALIGN="TOP"><b>Lisp Data Type</b></td>
    <td WIDTH="50%" VALIGN="TOP"><b>Default Encoding</b></td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">integer</td>
    <td WIDTH="50%" VALIGN="TOP">&lt;i4&gt;</td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">float</td>
    <td WIDTH="50%" VALIGN="TOP">&lt;double&gt;</td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">string</td>
    <td WIDTH="50%" VALIGN="TOP">&lt;string&gt;</td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">sequence</td>
    <td WIDTH="50%" VALIGN="TOP">&lt;array&gt;</td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">xml-rpc-encoding</td>
    <td WIDTH="50%" VALIGN="TOP">the encoding stored in the object</td>
  </tr>
  <tr>
    <td WIDTH="50%" VALIGN="TOP">xml-rpc-struct</td>
    <td WIDTH="50%" VALIGN="TOP">&lt;struct&gt;</td>
 </tr>

</table>

<p id="168">
The <i>type</i> argument may be a keyword to ensure a
specific encoding:
</p>
<ul>
<li id="169">
<code>:int</code>: The data argument is truncated to an
integer. Encoded value is &lt;i4&gt;.
</li>
<li id="170">
<code>:truncate</code>: The data argument is truncated to an
integer. Encoded value is &lt;i4&gt;.
</li>
<li id="171">
<code>:round</code>: The data argument is rounded to an
integer. Encoded value is &lt;i4&gt;.
</li>
<li id="172">
<code>:string</code>: The data argument is converted to a string
with a ~A format directive. Encoded value is &lt;string&gt;.
</li>
<li id="173">
<code>:double</code>: The data argument is coerced to a
double-float. Encoded value is &lt;double&gt;.
</li>
<li id="174">
:boolean: The data argument may be nil(false) or non-<code>nil</code> (true). Encoded value is
&lt;boolean&gt;.
</li>
<li id="175">
<code>:date</code>: The data argument may be an integer treated
as a CL universal time number or a list of (second minute hour day
month year). In the second form, the year is treated literally - not
as in the CL definition, to allow dates before 1900. Encoded value is
&lt;dateTime.iso8601&gt;.
</li>
<li id="176">
<code>:base64</code>: The data argument is converted to a string
with a ~A format directive.  The string is encoded as a base64
string. Encoded value is &lt;base64&gt;.
</li>
<li id="177">
:struct: If the data argument is an <a href="xml-rpc.htm#xml-rpc-struct-class-bookmarkxx"><code>xml-rpc-struct</code></a>
instance, then the data argument is encoded as in the default case.
<p id="178">
Otherwise, the data argument is ignored and the more argument must be
a list of items of the form (name value [type] ...) where name denotes
a member name, value is the Lisp value of the member and the remainder
of the list is used in a recursive call to encode the Lisp value.
</p>
<p id="179">
This second form allows a &lt;struct&gt; argument to be encoded
without creating an xml-rpc-struct instance.
</p>
<p id="180">
Encoded value is a &lt;struct&gt;.
</p>
</li>
<li id="181">
:encoded: The data argument must be a string that contains a correct
XML-RPC value encoding.
</li>
</ul>

<p id="182">
If an encoded value cannot be created, a Lisp error of type <a href="xml-rpc.htm#xml-rpc-argument-error-class-bookmarkxx"><code>xml-rpc-argument-error</code></a> is signaled.
</p>

<hr>

<hr><h3 id="183"><a name="encode-xml-rpc-value-op-bookmarkxx"></a>encode-xml-rpc-value</h3><h3 id="184">Function</h3><h4 id="185">Package: net.xml-rpc</h4>

<p id="186"><b>Arguments: </b><i>
data
</i> &amp;optional <i>type</i><i>
</i> &amp;rest <i>more</i><i>
</i></p>

<p id="187">
This function is very similar to make-xml-rpc-encoding, but the value
returned is a string that contains an XML-RPC value encoding. Since
the resulting string must be stored in an xml-rpc-encoding instance to
be recognized in an argument conversion, this function is only useful
in some circumstances where creating the xml-rpc-encoding instance
must be delayed.  An instance is created with the form
</p>
<pre id="188">
(make-xml-rpc-encoding (encode-xml-rpc-value ...) :encoded)
</pre>

<hr>

<hr><hr><h2 id="189"><a name="xml-rpc-server-api-1">5.0 XML-RPC server api</a></h2>

<p id="190">
The server API allows a Lisp application to act as an XML-RPC server
on the internet.  Other applications, possibly written in other languages 
such as Java and Perl, may then call the methods exported by the server.
</p>

<hr><h3 id="191"><a name="xml-rpc-server-class-bookmarkxx"></a>xml-rpc-server</h3><h3 id="192">Class</h3><h4 id="193">Package: net.xml-rpc</h4>

<hr>

<hr><h3 id="194"><a name="xml-rpc-export-class-bookmarkxx"></a>xml-rpc-export</h3><h3 id="195">Class</h3><h4 id="196">Package: net.xml-rpc</h4>

<hr>

<hr><h3 id="197"><a name="xml-rpc-server-name-op-bookmarkxx"></a>xml-rpc-server-name</h3><h3 id="198">Generic Function</h3><h4 id="199">Package: net.xml-rpc</h4>

<p id="200"><b>Arguments: </b><i>
xml-rpc-server
</i></p>

<p id="201">
The default method accesses the name of an <a href="xml-rpc.htm#xml-rpc-server-class-bookmarkxx"><code>xml-rpc-server</code></a>.
</p>

<hr>

<hr><h3 id="202"><a name="s_xml-rpc-server_s-var-bookmarkxx"></a>*xml-rpc-server*</h3><h3 id="203">Variable</h3><h4 id="204">Package: net.xml-rpc</h4>

<hr>

<hr><h3 id="205"><a name="make-xml-rpc-server-op-bookmarkxx"></a>make-xml-rpc-server</h3><h3 id="206">Function</h3><h4 id="207">Package: net.xml-rpc</h4>

<p id="208"><b>Arguments: </b><i>
</i>&amp;key <i>start enable publish class name introspect</i><i>
</i></p>

<p id="209">
This function creates an instance of the <a href="xml-rpc.htm#xml-rpc-server-class-bookmarkxx"><code>xml-rpc-server</code></a>
class to hold the definitions of a set of exported functions.
</p>
<p id="210">
The <i>publish</i> argument defines how the server is
seen from the client side.  It is the list of arguments passed to the
<b>aserve:publish</b> function.  If the <code>:path</code>
argument is missing, the value "/RPC2" is supplied.  If
<code>:function</code> or <code>:content-type</code> are
specified, an error is signaled.
</p>
<p id="211">
If the <i>start</i> argument is non-<code>nil</code>, then the function <b>aserve:start</b> is called.
If the <i>start</i> argument is a list, this list is
used as the argument list to <b>aserve:start</b>, otherwise
<b>aserve:start</b> is called with all default arguments.
</p>
<p id="212">
If the <i>enable</i> argument is non-<code>nil</code>, then the server is enabled. If the enable
argument is non-<code>nil</code>, but the
<i>start</i> argument is <code>nil</code>,
then AllegroServe must already be running when <a href="xml-rpc.htm#make-xml-rpc-server-op-bookmarkxx"><b>make-xml-rpc-server</b></a> is called.
</p>
<p id="213">
The <i>name</i> argument is returned to clients as the
:server header entry. The default name is "AllegroServe/x.x.x(Allegro
Common Lisp)".
</p>
<p id="214">
The <i>class</i> argument can specify the name of a
sub-class of <a href="xml-rpc.htm#xml-rpc-server-class-bookmarkxx"><code>xml-rpc-server</code></a>. This feature allows
applications to add slots or methods to the server object.  This
object is bound to <a href="xml-rpc.htm#s_xml-rpc-server_s-var-bookmarkxx"><code>*xml-rpc-server*</code></a> when an exported
function is called.
</p>
<p id="215">
If the <i>introspect</i> argument is non-<code>nil</code>, the standard introspection methods are exported
automatically (see <a href="xml-rpc.htm#export-standard-xml-rpc-methods-op-bookmarkxx"><b>export-standard-xml-rpc-methods</b></a>).
</p>

<hr>

<hr><h3 id="216"><a name="enable-xml-rpc-server-op-bookmarkxx"></a>enable-xml-rpc-server</h3><h3 id="217">Generic Function</h3><h4 id="218">Package: net.xml-rpc</h4>

<p id="219"><b>Arguments: </b><i>
server </i> &amp;optional <i>enable-exports</i><i>
</i></p>

<p id="220">
This function enables a server and optionally enables any exported methods.
</p>
<p id="221">
A method is available to a client only if all three conditions are met:
</p>
<ul>
<li id="222">
AllegroServe is running
</li>
<li id="223">
the XML-RPC server is enabled
</li>
<li id="224">
the particular method is enabled
</li>
</ul>
<p id="225">
If many methods need to be exported, the normal sequence of events
is to make a disabled server, define and enable all the methods, and
finally enable the server.  In this way all the methods become
available simultaneously.
</p>

<hr>

<hr><h3 id="226"><a name="disable-xml-rpc-server-op-bookmarkxx"></a>disable-xml-rpc-server</h3><h3 id="227">Generic Function</h3><h4 id="228">Package: net.xml-rpc</h4>

<p id="229"><b>Arguments: </b><i>
server
</i></p>

<p id="230">
This function disables the server and makes all the methods unavailable.
</p>

<hr>

<hr><h3 id="231"><a name="export-xml-rpc-method-op-bookmarkxx"></a>export-xml-rpc-method</h3><h3 id="232">Generic Function</h3><h4 id="233">Package: net.xml-rpc</h4>

<p id="234"><b>Arguments: </b><i>
server name-spec result-spec
</i> &amp;rest <i>arg-specs</i><i>
</i></p>

<p id="235">
This function makes a method available to XML-RPC client applications.
</p>
<p id="236">
The <i>server</i> argument must be an <a href="xml-rpc.htm#xml-rpc-server-class-bookmarkxx"><code>xml-rpc-server</code></a> instance.
</p>
<p id="237">
The <i>name-spec</i> argument may be a symbol or a
list. When <i>name-spec</i> is a list, the first element
must be a string or symbol that names the exported method - this is
the name that a client uses to call the remote method.  The second
element of the list is the name of the Lisp function that will be
called as the exported method.  If the second element in the list is
omitted or <code>nil</code>, then the first element must
be a symbol that is also the name of the Lisp function to be
called. The third element in the list is <code>nil</code>
or non-<code>nil</code>; non-<code>nil</code>
specifies that the method is enabled immediately; if <code>nil</code> is specified, then the method must be enabled
explicitly by calling <a href="xml-rpc.htm#enable-xml-rpc-method-op-bookmarkxx"><b>enable-xml-rpc-method</b></a>; if the third
element is omitted, <code>t</code> is assumed and the
method is enabled.  The fourth element in the list may be a string
containing a description of the method. When
<i>name-spec</i> is a symbol, it is equivalent to
<code>(symbol nil t)</code>.
</p>
<p id="238">
The <i>result-spec</i> argument must be one of the
keywords that represent XML-RPC data types.  It is the type of the
result returned to the caller. The available keywords are
<code>:int</code>, <code>:double</code>,
<code>:string</code>, <code>:array</code>,
<code>:struct</code>, and <code>:base64</code>.
</p>
<p id="239">
The remaining arguments are a list of XML-RPC data type keywords that
describe the method signature.
</p>
<p id="240">
Several methods, with different argument signatures, may be exported
under the same method name.
</p>
<p id="241">
The Lisp function is called with the decoded arguments of the remote
call. The value returned by the Lisp function is encoded using the
data type of the value and the result-spec.  If the function returns
an instance of the class xml-rpc-encoding then the result-spec is
ignored and the encoding stored in the instance is used.
</p>

<hr>

<hr><h3 id="242"><a name="xml-rpc-method-help-op-bookmarkxx"></a>xml-rpc-method-help</h3><h3 id="243">Generic Function</h3><h4 id="244">Package: net.xml-rpc</h4>

<p id="245"><b>Arguments: </b><i>
server name 
</i></p>

<p id="246">
This function returns the help string associated with an exported
method name.  All the methods with one name share the same help
string.
</p>
<p id="247">
The setf of this generic function is called as follows:
</p>
<pre id="248">
((setf xml-rpc-method-help) new-string server name)
</pre>
<p id="249">
It may be used to store a new help string.
</p>

<hr>

<hr><h3 id="250"><a name="export-standard-xml-rpc-methods-op-bookmarkxx"></a>export-standard-xml-rpc-methods</h3><h3 id="251">Generic Function</h3><h4 id="252">Package: net.xml-rpc</h4>

<p id="253"><b>Arguments: </b><i>
server </i> &amp;optional <i>enable</i><i>
</i></p>

<p id="254">
This function exports three introspection methods frequently provided
by XML-RPC servers.  The <i>enable</i> argument may be
<code>nil</code> to suppress automatic enabling of these
methods.
</p>
<p id="255">
The methods are:
</p>
<ul>
<li id="256">
<b>system.listMethods()</b>, returns &lt;array&gt;.
</li>
<li id="257">
<b>system.methodSignature(&lt;string&gt;)</b>, returns &lt;array&gt;.
</li>
<li id="258">
<b>system.methodHelp((&lt;string&gt;)</b>, returns &lt;string&gt;.
</li>
</ul>

<hr>

<hr><h3 id="259"><a name="enable-xml-rpc-method-op-bookmarkxx"></a>enable-xml-rpc-method</h3><h3 id="260">Generic Function</h3><h4 id="261">Package: net.xml-rpc</h4>

<p id="262"><b>Arguments: </b><i>
server name
</i> &amp;rest <i>arg-specs</i><i>
</i></p>

<p id="263">
This function enables an individual exported method, or all the
methods with the same name.
</p>
<p id="264">
If the <i>arg-specs</i> argument is a list of the single
keyword <code>:all</code>, then all the methods with the
specified name are enabled.
</p>
<p id="265">
Otherwise, arg-specs must be a list of keywords that represent XML-RPC data types.  The method with the matching argument signature is enabled.
</p>

<hr>

<hr><h3 id="266"><a name="disable-xml-rpc-method-op-bookmarkxx"></a>disable-xml-rpc-method</h3><h3 id="267">Generic Function</h3><h4 id="268">Package: net.xml-rpc</h4>

<p id="269"><b>Arguments: </b><i>
server name
</i> &amp;rest <i>arg-specs</i><i>
</i></p>

<p id="270">
This function disables an individual exported method, or all the
methods with the same name.
</p>
<p id="271">
If the <i>arg-specs</i> argument is a list of the single
keyword <code>:all</code>, then all the methods with the
specified name are disabled.
</p>
<p id="272">
Otherwise, <i>arg-specs</i> must be a list of keywords
that represent XML-RPC data types.  The method with the matching
argument signature is disabled.
</p>

<hr>

<hr><hr><h2 id="273"><a name="xml-rpc-examples-1">6.0 XML-RPC examples</a></h2>

<p id="274">
A simple client call:
</p>
<pre id="275">
(xml-rpc-call
  (encode-xml-rpc-call "currentTime.getCurrentTime")
  :url "http://time.xmlrpc.com:80/RPC2"
  )
</pre>

<p id="276">
A client call with an argument:
</p>
<pre id="277">
(xml-rpc-call 
  (encode-xml-rpc-call "system.methodSignature" "meerkat.getCategories")
  :url "http://www.oreillynet.com/meerkat/xml-rpc/server.php"
  )
</pre>

<p id="278">
The validation server:
</p>
<pre id="279">
(defun make-validator1-server (&optional (port 8080))
  (let ((s (make-xml-rpc-server 
	      :start nil :enable t
	      :publish '(:path "/ACL-XML-RPC2"))))

      (export-xml-rpc-method s 
	 '("validator1.arrayOfStructsTest" validator1-array-of-struct)
	 :int :array)

      (export-xml-rpc-method s 
	 '("validator1.countTheEntities" validator1-count)
	 :struct :string)

      ...

      (start :port port)
      (enable-xml-rpc-server s)
      s))
</pre>

<p id="280">
and one of the validator functions:
</p>
<pre id="281">

(defun validator1-count (string)
   ;; validator1.countTheEntities   -- returns :struct
   ;; 
   ;; This handler takes a single parameter, a string, 
   ;;  that contains any number of predefined entities,
   ;;  namely &lt;, &gt;, &amp;, ' and &quot;.
   ;; Your handler must return a struct that contains five fields, 
   ;;  all numbers: ctLeftAngleBrackets,  ctRightAngleBrackets, 
   ;;               ctAmpersands, ctApostrophes, ctQuotes. 

  (make-xml-rpc-struct
       &quot;ctLeftAngleBrackets&quot;  (count #\&lt; string)
       &quot;ctRightAngleBrackets&quot; (count #\&gt; string)
       &quot;ctAmpersands&quot;         (count #\&amp; string)
       &quot;ctApostrophes&quot;        (count #\' string)
       &quot;ctQuotes&quot;             (count #\&quot; string)))
</pre>

<hr><hr><h2 id="282"><a name="xml-rpc-index-1">7.0 Index</a></h2>

<ul>
<li id="283">
<a href="xml-rpc.htm#call-xml-rpc-server-op-bookmarkxx"><b>call-xml-rpc-server</b></a>
</li>
<li id="284">
<a href="xml-rpc.htm#disable-xml-rpc-method-op-bookmarkxx"><b>disable-xml-rpc-method</b></a>
</li>
<li id="285">
<a href="xml-rpc.htm#disable-xml-rpc-server-op-bookmarkxx"><b>disable-xml-rpc-server</b></a>
</li>
<li id="286">
<a href="xml-rpc.htm#enable-xml-rpc-method-op-bookmarkxx"><b>enable-xml-rpc-method</b></a>
</li>
<li id="287">
<a href="xml-rpc.htm#enable-xml-rpc-server-op-bookmarkxx"><b>enable-xml-rpc-server</b></a> 
</li>
<li id="288">
<a href="xml-rpc.htm#encode-xml-rpc-call-op-bookmarkxx"><b>encode-xml-rpc-call</b></a>
</li>
<li id="289">
<a href="xml-rpc.htm#encode-xml-rpc-value-op-bookmarkxx"><b>encode-xml-rpc-value</b></a>
</li>
<li id="290">
<a href="xml-rpc.htm#export-standard-xml-rpc-methods-op-bookmarkxx"><b>export-standard-xml-rpc-methods</b></a>
</li>
<li id="291">
<a href="xml-rpc.htm#export-xml-rpc-method-op-bookmarkxx"><b>export-xml-rpc-method</b></a>
</li>
<li id="292">
<a href="xml-rpc.htm#make-xml-rpc-encoding-op-bookmarkxx"><b>make-xml-rpc-encoding</b></a>
</li>
<li id="293">
<a href="xml-rpc.htm#make-xml-rpc-server-op-bookmarkxx"><b>make-xml-rpc-server</b></a>
</li>
<li id="294">
<a href="xml-rpc.htm#make-xml-rpc-struct-op-bookmarkxx"><b>make-xml-rpc-struct</b></a>
</li>
<li id="295">
<a href="xml-rpc.htm#xml-rpc-argument-error-class-bookmarkxx"><code>xml-rpc-argument-error</code></a>
</li>
<li id="296">
<a href="xml-rpc.htm#xml-rpc-call-op-bookmarkxx"><b>xml-rpc-call</b></a>
</li>
<li id="297">
<a href="xml-rpc.htm#xml-rpc-condition-class-bookmarkxx"><code>xml-rpc-condition</code></a>
</li>
<li id="298">
<a href="xml-rpc.htm#xml-rpc-encoding-class-bookmarkxx"><code>xml-rpc-encoding</code></a>
</li>
<li id="299">
<a href="xml-rpc.htm#xml-rpc-error-data-op-bookmarkxx"><b>xml-rpc-error-data</b></a>
</li>
<li id="300">
<a href="xml-rpc.htm#xml-rpc-error-place-op-bookmarkxx"><b>xml-rpc-error-place</b></a>
</li>
<li id="301">
<a href="xml-rpc.htm#xml-rpc-error-class-bookmarkxx"><code>xml-rpc-error</code></a>
</li>
<li id="302">
<a href="xml-rpc.htm#xml-rpc-export-class-bookmarkxx"><code>xml-rpc-export</code></a>
</li>
<li id="303">
<a href="xml-rpc.htm#xml-rpc-fault-code-op-bookmarkxx"><b>xml-rpc-fault-code</b></a> 
</li>
<li id="304">
<a href="xml-rpc.htm#xml-rpc-fault-string-op-bookmarkxx"><b>xml-rpc-fault-string</b></a>
</li>
<li id="305">
<a href="xml-rpc.htm#xml-rpc-fault-class-bookmarkxx"><code>xml-rpc-fault</code></a>
</li>
<li id="306">
<a href="xml-rpc.htm#xml-rpc-member-name-op-bookmarkxx"><b>xml-rpc-member-name</b></a>
</li>
<li id="307">
<a href="xml-rpc.htm#xml-rpc-member-value-op-bookmarkxx"><b>xml-rpc-member-value</b></a>
</li>
<li id="308">
<a href="xml-rpc.htm#xml-rpc-member-class-bookmarkxx"><code>xml-rpc-member</code></a>
</li>
<li id="309">
<a href="xml-rpc.htm#xml-rpc-method-help-op-bookmarkxx"><b>xml-rpc-method-help</b></a>
</li>
<li id="310">
<a href="xml-rpc.htm#xml-rpc-response-error-class-bookmarkxx"><code>xml-rpc-response-error</code></a>
</li>
<li id="311">
<a href="xml-rpc.htm#xml-rpc-server-name-op-bookmarkxx"><b>xml-rpc-server-name</b></a>
</li>
<li id="312">
<a href="xml-rpc.htm#xml-rpc-server-class-bookmarkxx"><code>xml-rpc-server</code></a>
</li>
<li id="313">
<a href="xml-rpc.htm#s_xml-rpc-server_s-var-bookmarkxx"><code>*xml-rpc-server*</code></a>
</li>
<li id="314">
<a href="xml-rpc.htm#xml-rpc-slot-value-op-bookmarkxx"><b>xml-rpc-slot-value</b></a>
</li>
<li id="315">
<a href="xml-rpc.htm#xml-rpc-struct-members-op-bookmarkxx"><b>xml-rpc-struct-members</b></a>
</li>
<li id="316">
<a href="xml-rpc.htm#xml-rpc-struct-class-bookmarkxx"><code>xml-rpc-struct</code></a>
</li>
<li id="317">
<a href="xml-rpc.htm#s_xml-rpc-url_s-var-bookmarkxx"><code>*xml-rpc-url*</code></a>
</li>
<li id="318">
<a href="xml-rpc.htm#xml-rpc-version-op-bookmarkxx"><b>xml-rpc-version</b></a>
</li>
<li id="319">
<a href="xml-rpc.htm#s_xml-rpc-version_s-var-bookmarkxx"><code>*xml-rpc-version*</code></a>
</li>
</ul>



</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/xml-rpc.htm">8.1 version</a></td></tr></table></html>