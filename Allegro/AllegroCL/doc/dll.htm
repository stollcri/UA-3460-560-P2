<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Building and Using an Allegro Common Lisp Based DLL</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dll.htm">8.1 version</a></td></tr></table><h1 id="2">Building and Using an Allegro Common Lisp Based DLL</h1><p id="3">This document contains the following sections:</p><a href="#example-fact-1">1.0 Using An Example Allegro CL Based DLL: fact.dll</a><br><a href="#build-dll-1">2.0 Building the Example DLL: fact.dll</a><br><a href="#build-dxl-1">3.0 Building the Companion DXL File: fact.dxl</a><br><a href="#build-your-dll-1">4.0 Building Your Own Lisp Based DLL</a><br><a href="#deplay-1">5.0 Deploying Your Lisp Based DLL</a><br><a href="#exported-routines-1">6.0 LNKACL DLL Exported Routines</a><br><p id="4">
Allegro CL supports building shared libraries that can be used by
C/C++ programs in the same manner as they use any other function
libraries. On Windows, the library files are DLL files. This document
describes how to create such DLL's. See
<a href="unix-shared-library.htm">unix-shared-library.htm</a> for information on creating
similar files on UNIX machines.
</p><p id="5">
Below is an example that illustrates the steps necessary to construct
and deploy an Allegro CL based DLL. The files associated with this example
are in the <i>examples/dll/</i> subdirectory of the
Allegro directory.
</p><p id="6">
You must have at least an Entrerprise Allegro CL license, because the
example uses <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> (and only
Enterprise and above customers have access to that function).
</p><hr><hr><h2 id="7"><a name="example-fact-1">1.0 Using An Example Allegro CL Based DLL: fact.dll</a></h2>

<p id="8">
The basic instructions for this example are as follows:
</p>

<pre id="9">
1.  Update your PATH environment variable to include 
    [Allegro directory]/examples/dll/

2.  Bring up a DOS Window/Command Prompt

3.  Change to the directory [Allegro directory]/examples/dll/

4.  Clean out the files from any previous build attempts by
    executing

    del *.fasl
    del *.ilk
    del *.exe
    del *.pdb
    del *.obj
    del fact.dll
    rd fact /s /q

5.  Compile the file ftest.c by executing

   cl -nologo -Od -c -Zi -I -W3 -G3 -MT ftest.c -Foftest.obj

6.  Compile the file fact.c by executing

   cl -nologo -Od -c -Zi -I -W3 -G3 -MT fact.c -Fofact.obj

7.  Copy linkacl.lib from the Allegro directory to example/dll/

8.  Create fact.dll by executing

   link -nologo -dll -debug -out:fact.dll fact.obj lnkacl.lib

8.  Create the ftest executable by executing

   link -nologo -debug -out:ftest.exe ftest.obj fact.lib

10. Compile and build the ACL components by executing ([runacl]
    means the command to run Allegro CL in a DOS box, something like
    `[Allegro directory\\mlisp')

   [runacl] -L dist.cl -kill

    If instead you start Allegro CL from the Start menu, change the
    current directory to examples/dll/ by evaluating

    ;; Assuming the current directory is presently the Allegro directory
    (chdir "examples/dll/")
</pre>
  

<p id="10">
The <i>fact.dll</i> example provides a function that
computes a factorial (1 x 2 x 3 x ... x (n-1) x n). Since Lisp
supports bignum arithmetic, it is easy to write such a factorial
function in Lisp. Without Lisp, a C/C++ programmer must address
integer overflow for larger input arguments.
</p>

<p id="11">
The example fact library exports two functions:
</p>

<ol>
<li id="12">
<code><b>int initialize_factorial()</b></code>
<ul>
<li id="13">
<b>Parameters</b>: none
</li>
<li id="14">
<b>Return Value</b>: 1 if initialization is successful, 0 if
initialization fails
</li>
</ul>
</li>
<li id="15">
<code><b>int factorial ( unsigned int x, char *result, int string_size )</b></code>
<ul>
<li id="16">
<b>Parameters</b>:
<ul>
<li id="17">
<i>x</i>: the factorial argument
</li>
<li id="18">
<i>result</i>: a string buffer large enough to hold the result
</li>
<li id="19">
<i>string_size</i>: the string buffer size
</li>
</ul>
</li>
<li id="20">
<b>Remarks</b>:
The factorial() function returns the answer as a string to avoid C integer overflow problems.
</li>
</ul>
</li>
</ol>


<p id="21">
Here is a file called <i>examples/dll/ftest.c</i> that
uses the fact library. Note that it is a console application; you
could use the same functionality in a Windows application:
</p>
<pre id="22">
#include &lt;stdio.h&gt;

void usage();

main( int argc, char *argv[] )
{
   int i, n, ret;
   char result_string[4096];

   if (argc != 2)
   {
      usage();
      exit( 1 );
   }
   if (strlen( argv[1] ) &gt; 3 )
   {
      usage();
      exit( 1 );
   }
   for (i = 0; *(argv[1] + i); i++)
   {
      if (!isdigit( *(argv[1] + i) ))
      {
         usage();
         exit( 1 );
      }
   }
   sscanf( argv[1], &quot;%d&quot;, &amp;n );
   if (initialize_factorial() != 1)
   {
      fprintf(stderr, &quot;factorial startup error&quot; );
      exit( 1 );
   }
   if ((ret = factorial( n, result_string, 4096 )) != 1)
   {
      fprintf(stderr, &quot;factorial internal error&quot; );
      exit( 1 );
   }
   printf( &quot;%s&quot;, result_string );
   exit( 0 );
}

void
usage()
{
   fprintf( stderr, &quot;usage: ftest n, where n is an integer between 0 and 999&quot; );
}
</pre>

<p id="23">
Here is the compilation, linking, and a sample run:
</p>

<pre id="24">
cl -nologo -Od -c -Zi -I -W3 -G3 -MT ftest.c -Foftest.obj
link -nologo -debug -out:ftest.exe ftest.obj fact.lib

ftest 123
12146304367025329675766243241881295855454217088483382315328918161829235892362167
66883115696061264020217073583522129404778259109157041165147218602951990626164673
0733907419814952960000000000000000000000000000
</pre>

<hr><hr><h2 id="25"><a name="build-dll-1">2.0 Building the Example DLL: fact.dll</a></h2>

<p id="26">
Here is the <i>examples/dll/fact.c</i> file containing
the source code for the fact DLL. The functions <b>InitializeLisp</b>
and <b>RemoteCommand</b> are documented in
<a href="#exported-routines-1">Section 6.0 LNKACL DLL Exported Routines</a>.
</p>

<pre id="27">
#include &lt;windows.h&gt;
#include &lt;string.h&gt;

#define Dllexport _declspec(dllexport)

int lisp_initialized = 0;

int (*lisp_factorial)(int, char *, int) = 0;

/* returns 0 if lisp previously initialized
returns 1 if initialization successful
returns -1 if initialization failed
*/
Dllexport int initialize_factorial()
{
   if (!lisp_initialized) 
   {
      if (InitializeLisp( &quot;fact.dxl&quot;, 0, 0 ) == 0) 
      {
         return -1;
      }

/* don't return until lisp can process commands */

      if (RemoteCommand( &quot;(initialize-factorial)&quot;, 1 ) != 1)
         return -1;
      lisp_initialized = 1;
      return 1;
   }  else 
   {
      return 0;
   }
}

/* Lisp calls this to set factorial callback address */
Dllexport void set_factorial_callback( int (*fcb) (int, char *, int) )
{
   lisp_factorial = fcb;
}

/* users of the factorial library call this */
/* returns 1 if successful; 0 otherwise */
Dllexport int factorial ( unsigned int x, char *result, int string_size )
{
   if (!lisp_initialized || !lisp_factorial) {
      return -1;
   }
   switch ( (*lisp_factorial) ( x, result, string_size ))
   {
      case 1:
         return 1;
      case 0:
      default:
         *result = '\0';
         return 0;
   }
}

/* Lisp calls this to fill result string */
int Dllexport
copy_factorial_result( char *str1, char *str2, int n )
{
   strncpy( str1, str2, n - 1 );
   *(str2 + n) = '\0';
}
</pre>

<p id="28">
To repeat the note above,
the above code uses two functions exported by the lnkacl library
provided by Franz for building Lisp base DLL's. The relevant source
code lines are:
</p>

<pre id="29">
if (InitializeLisp( "fact.dxl", 0, 0 ) == 0) 
</pre>

<p id="30">
and
</p>

<pre id="31">
if (RemoteCommand( "(initialize-factorial)", 1 ) != 1)
</pre>

<p id="32">
<b>InitializeLisp</b> and <b>RemoteCommand</b>
are documented in <a href="#exported-routines-1">Section 6.0 LNKACL DLL Exported Routines</a>.
</p>

<p id="33">
Here are the compilation and linking commands:
</p>

<pre id="34">
cl -nologo -Od -c -Zi -I -W3 -G3 -MT fact.c -Fofact.obj
link -nologo -dll -debug -out:fact.dll fact.obj ..\..\lnkacl.lib
</pre>

<p id="35">
Note that <i>lnkacl.lib</i> file (provided by Franz)
must be either in the current directory or in a directory named in the
"lib" environmental variable. It is easiest to copy it to
<i>examples/dll/</i> from the Allegro directory.
</p>

<hr><hr><h2 id="36"><a name="build-dxl-1">3.0 Building the Companion DXL File: fact.dxl</a></h2>

<p id="37">
You should update your PATH environment variable to include
<i>[Allegro directory]/examples/dll/</i>.  You should
also either run Allegro CL from a DOS box/Command Prompt where the
current directory is <i>[Allegro
directory]/examples/dll/</i> or you should change the current
directory in the running Lisp to <i>[Allegro
directory]/examples/dll/</i> before loading
<i>examples/dll/dist.cl</i>.  You change the directory
by evaluating:
</p>
<pre id="38">
;; Assuming the current directory is presently the Allegro directory
(chdir "examples/dll/")
</pre>
<p id="39">
A <i>dxl</i> file is an Allegro CL image file.  It is
created by <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> from Lisp source
files. The call to <a href="operators/excl/generate-application.htm"><b>generate-application</b></a> is in the file
<i>examples/dll/dist.cl</i> and will be described
below. Here is the <i>examples/dll/fact.cl</i> Lisp
source file containing code needed for <i>fact.dxl</i>:
</p>

<pre id="40">
(in-package :user)

(defun factorial (x)            ; assumes caller will trap errors
   (cond
     ((= x 0) 1)
     (t (* x (factorial (1- x))))))

(eval-when (load eval)
   (load "fact.dll"))

(ff:def-foreign-call set_factorial_callback (address))

(ff:def-foreign-call copy_factorial_result 
   ((str1 :unsigned-long) (str2 (* :char)) (n :int)))

(ff:defun-c-callable (factorial-callback :c)
     ((arg :unsigned-long) (string :unsigned-long) (length :unsigned-long))
   :long
   (handler-case
       (progn
           (copy_factorial_result string
               (format nil "~s" (factorial arg))
               length)
           1) ;; return 1 if successful
       (serious-condition (condition)
           0)) ;; return 0 if unsuccessful
   )

(defun initialize-factorial ()
   (mp:start-customs "Factorial")
   (set_factorial_callback (ff:register-function #'factorial-callback nil t)))
</pre>

<p id="41">
The <i>examples/dll/dist.cl</i> file can be loaded into
Allegro CL to generate a distribution directory
<i>examples/dll/fact/</i> (under the Allegro CL
installation directory) containing the <i>fact.dxl</i>
and associated files. Before loading
<i>examples/dll/dist.cl</i>, remove
<i>examples/dll/fact/</i>, if it exists.  See
<i>examples/dll/dist.cl</i> contents for more
information. This file assumes you have the
<em>generate-application</em> functionality enabled in your Allegro
CL. Also, as noted in the file, you must first generate the
<i>fact.dll</i> and <i>ftest.exe</i>
modules as described below.
</p>

<hr><hr><h2 id="42"><a name="build-your-dll-1">4.0 Building Your Own Lisp Based DLL</a></h2>

<p id="43">
Your C/C++ code and Lisp code should perform or do the following:
</p>

<ol>
<li id="44">
Your C/C++ code must initialize Lisp by calling <b>InitializeLisp()</b>
(see <a href="#exported-routines-1">Section 6.0 LNKACL DLL Exported Routines</a>).
<p id="45">
You can do this with an exported initialization function as in the
above example, or you can transparently wrap the initialization steps
within your DLL's exported functions.
</p>

</li>
<li id="46">
Your C/C++ code must call a custom Lisp initialization function.
<p id="47">
After calling <b>InitializeLisp()</b>, but before calling any of your
other Lisp code, you must call a custom initialization Lisp function
using <b>RemoteCommand()</b> (again, see
<a href="#exported-routines-1">Section 6.0 LNKACL DLL Exported Routines</a>). The custom
initialization function is described in steps 6 and 7 below.
</p>

</li>
<li id="48">
Your C/C++ code must provide at least one exported function to 
setup entry points.
<p id="49">
Your Lisp initialization function calls this routine to fill in 
addresses at runtime that your C/C++ code uses to invoke Lisp 
based functionality. In the example above, the set_factorial_callback() 
function provided this functionality.
</p>

</li>
<li id="50">
Provide C/C++ wrappers for the Lisp functionality you wish to export.
<p id="51">
The factorial() function in the above example illustrates how to do this.
</p>

</li>
<li id="52">
You must load the <em>lnk.fasl</em> file into your custom Lisp image.
<em>Ink.fasl</em> comes from compiling the provided file
<em>examples/dll/Ink.cl</em>.
<p id="53">
Remember to name the image so it matches your <b>InitializeLisp()</b>
argument.
</p>

</li>
<li id="54">
Your custom Lisp initialization code must initiate a Lisp process 
that waits for remote callback invocation.
<p id="55">
Here is example code (it is similar to the factorial example, above,
and like it uses <a href="operators/mp/start-customs.htm"><b>start-customs</b></a>):
</p>
<pre id="56">
(mp:start-customs "Factorial")
</pre>
</li>
<li id="57">
Your custom Lisp initialization code must call the exported 
function described in
step 3 to setup callback entry points.
<p id="58">
You will use <a href="../ansicl/dictentr/load.htm"><b>load</b></a> to load your
DLL, <a href="operators/ff/def-foreign-call.htm"><b>def-foreign-call</b></a> to make the
exported function available, <a href="operators/ff/defun-c-callable.htm"><b>defun-c-callable</b></a> to define your
exportable Lisp functionality, and <a href="operators/ff/register-function.htm"><b>register-function</b></a> to generate an
address to provide to the function defined in step 3.
</p>
<p id="59">
If your C/C++ code process returns values, you will most likely want to
use the <a href="operators/ff/register-function.htm"><b>register-function</b></a>
<i>convert</i> optional argument.
</p>
</li>
<li id="60">
The Lisp functions defined by defun-c-callable and called from 
    C programs should handle all Lisp errors and throws and return some 
    success/failure indication to the C caller (see the factorial
    function for an example).  Any Lisp throw past the point of call
    from C is likely to produce unpredictable results.
</li>
<li id="61">
Output to the stream bound to <a href="variables/excl/s_initial-terminal-io_s.htm"><code>*initial-terminal-io*</code></a> goes to the console
window. Even if <b>InitializeLisp()</b> is called with
<i>make_console</i>=0 then the console window will pop
up when output is written.
<p id="62">
Input from the stream bound to <a href="variables/excl/s_initial-terminal-io_s.htm"><code>*initial-terminal-io*</code></a> will never return to the
caller. All input to this stream is sent to the initial Lisp listener
in the console window.
</p>
</li>
</ol>


<hr><hr><h2 id="63"><a name="deplay-1">5.0 Deploying Your Lisp Based DLL</a></h2>



<p id="64">
To allow building an application that uses a custom Lisp based DLL,
you must provide the <em>.lib</em> file generated when you built your DLL.
</p>

<p id="65">
The file must reside in a directory included in the LIB environmental
variable, or it must reside in the directory where the build
occurs. Remember that you must export any functions you wish to make
available to applications using your DLL.
</p>

<p id="66">
To allow a generated application to run, you must provide
<em>lnkacl.dll</em> (provided by Franz), your custom DLL, your custom
Lisp image file, and the Allegro CL license file. These files can
reside in any of the following directories:
</p>

<ol>
<li id="67">

The <code>sys:</code> directory as determined by the application
(that is, the result of <code>(translate-logical-pathname
"sys:")</code>). This will be the <b>sys_dir</b> argument to
InitializeLisp, or if 0, the application's working directory.
(Earlier versions of this document incorrectly said "the directory
from which the calling application loaded". That directory may not be
known and will not be searched unless it is also the directory
described in the corrected text.)

</li>
<li id="68">The current directory</li>
<li id="69">The windows system directory</li>
<li id="70">The windows directory</li>
<li id="71">One of the PATH environmental variable directories</li>
</ol>

<p id="72">
In addition, you may have to provide any DLL's required by your C/C++
compiler.
</p>

<hr><hr><h2 id="73"><a name="exported-routines-1">6.0 LNKACL DLL Exported Routines</a></h2>

<p id="74">
In this section, we describe the functions <b>InitializeLisp()</b>,
<b>RemoteCommand()</b>, <b>TerminateLisp()</b>, and <b>GetLispThread()</b>.
</p>

<h3 id="75">InitializeLisp</h3>

<code>
</code><code><b>int InitializeLisp( char *image_file_name, char *sys_dir, int make_console )</b></code><code>
</code>

<ul>
<li id="76">
<b>Parameters</b>:
<ul>
<li id="77">
<code>image_file_name</code>:
Lisp image filename
</li>
<li id="78">
<code>sys_dir</code>:
directory Lisp will use as sys: for logical pathnames
(if 0, the application's working directory will be used)
</li>
<li id="79">
<code>make_console</code>: if 1, open debugging console, if 0,
don't open debugging console. NOTE: this flag is only advisory. If
the application writes to the stream bound to *initial-terminal-io*
then the console window will pop up whether make_console was 0 or 1.
</li>
</ul>
</li>
<li id="80">
<b>Return Value</b>:
1 if found image file,<br>
0 if couldn't find image file
</li>
<li id="81">
<b>See Also: TerminateLisp()</b>
</li>
<li id="82">
<b>Remarks</b>:

<ul>
<li id="83">
The image file can be a complete path or just a file name. 
If just a file name, the following directories are searched, in order: 
<ol>
<li id="84">The directory from which the calling application loaded </li>
<li id="85">The current directory </li>
<li id="86">The windows system directory </li>
<li id="87">The windows directory </li>
<li id="88">The PATH environmental variable directories </li>
</ol>
</li>
<li id="89">
The debugging console is useful during development - you can view
initialization messages, enter Lisp expressions, and manage Lisp
debugging activities.
</li>
<li id="90">
Note that this routine returns asynchronously. The Lisp initialization
takes some time to complete. Use a subsequent synchronous
<b>RemoteCommand()</b> call if you desire a synchronous startup
procedure or if you wish to verify that the Lisp startup procedure has
completed successfully.
</li>
</ul>
</li>
</ul>

<h3 id="91">RemoteCommand</h3>

<code>
</code><code><b>int RemoteCommand( char *command_buf, int wait_for_message )</b></code><code>
</code>

<ul>
<li id="92">
<b>Parameters</b>:
<ul>
<li id="93">
<code>command_buf</code>:
string to be processed by eval in Lisp thread
</li>
<li id="94">
<code>wait_for_message</code>:
0, return asynchronously<br>
1, wait for completion before returning
</li>
</ul>
</li>
<li id="95">
<b>Return Value</b>: 1, wait_for_message = 0 or successful completion,<br>
0, Lisp error occurred during command,<br>
-1, Lisp thread no longer alive
</li>
<li id="96">
<b>Remarks</b>: Note that Windows messages are processed while waiting
for successful command completion.
</li>
</ul>

<h3 id="97">TerminateLisp()</h3>



<code>
</code><code><b>void TerminateLisp()</b></code><code>
</code>

<ul>
<li id="98">
<b>Remarks</b>:
<ul>
<li id="99">
Terminates Lisp environment and closes debugging console if necessary.
</li>
<li id="100">
<b>Problem with restarting Lisp after calling TerminateLisp()</b>:
because of a design flaw, <b>InitializeLisp()</b> may not be called to
restart the Lisp environment after <b>TerminateLisp()</b> has been
called. The problem is that <b>TerminateLisp()</b> takes time to
actually kill the Lisp thread, but (essentially) reports that it has
succeeded too early, and the initialization routines rely on this
false report and fail when the report differs from the reality.
</li>
</ul>
</li>
</ul>

<h3 id="101">GetLispThread()</h3>



<code>
</code><code><b>unsigned int GetLispThread()</b></code><code>
</code>

<ul>
<li id="102">
<b>Return Value</b>: 
The Lisp thread handle is returned.
</li>
</ul>


</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dll.htm">8.1 version</a></td></tr></table></html>