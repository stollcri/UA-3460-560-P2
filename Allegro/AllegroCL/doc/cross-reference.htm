<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Cross Reference Facility</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cross-reference.htm">8.1 version</a></td></tr></table><h1 id="2">Cross Reference Facility</h1><p id="3">This document contains the following sections:</p><a href="#xref-intro-1">1.0 Cross reference introduction</a><br>&nbsp;&nbsp;&nbsp;<a href="#xref-package-2">1.1 The cross-reference package</a><br>&nbsp;&nbsp;&nbsp;<a href="#xref-database-2">1.2 The cross-reference database</a><br>&nbsp;&nbsp;&nbsp;<a href="#when-generated-2">1.3 When is the cross-reference information generated?</a><br>&nbsp;&nbsp;&nbsp;<a href="#when-added-2">1.4 When is xref information in a fasl file added to the database?</a><br>&nbsp;&nbsp;&nbsp;<a href="#notes-2">1.5 Things to note about the compiler and macros</a><br><a href="#xref-database-1">2.0 What is in and how to access the xref database</a><br>&nbsp;&nbsp;&nbsp;<a href="#clearing-database-2">2.1 Clearing the database</a><br>&nbsp;&nbsp;&nbsp;<a href="#query-functions-2">2.2 General description of query functions and commands</a><br>&nbsp;&nbsp;&nbsp;<a href="#function-name-arg-2">2.3 The function-name and object arguments</a><br>&nbsp;&nbsp;&nbsp;<a href="#file-info-2">2.4 File information and the :in-files keyword argument</a><br>&nbsp;&nbsp;&nbsp;<a href="#in-functions-arg-2">2.5 The :in-functions keyword argument</a><br>&nbsp;&nbsp;&nbsp;<a href="#inverse-arg-2">2.6 The :inverse keyword argument</a><br><a href="#xref-example-1">3.0 A cross-referencer example</a><br><hr><hr><h2 id="4"><a name="xref-intro-1">1.0 Cross reference introduction</a></h2>

<p id="5">The cross-reference facility provides the ability to analyze
compiled code, finding out information such as which functions call
which other functions and what global variables are used. The
cross-referencer maintains a database of cross-reference information
which can be queried by the user to provide answers to questions like
`who calls function foo?'</p>

<hr><h2 id="6"><a name="xref-package-2">1.1 The cross-reference package</a></h2>

<p id="7">
The cross-referencer functions are in the
<code>cross-reference</code> package (nicknamed
<code>xref</code>). Unless otherwise indicated, all the symbols
defined in this chapter are exported from the
<code>cross-reference</code> package. Users must either use the
qualifier <code>xref:</code> on most symbols naming xref functionality
or evaluate <code>(use-package :xref)</code> to make exported symbols
accessible without the package qualifier.
</p>

<p id="8">
The code for the cross-referencer is not contained in the basic
Allegro CL image. It is loaded only when needed. Executing any of the
user-visible cross-reference functions will cause the correct module
to be loaded, but you can ensure that the code is loaded by evaluating
the following form: <code>(require :xref)</code>.
</p>



<hr><h2 id="9"><a name="xref-database-2">1.2 The cross-reference database</a></h2>

<p id="10">Lisp contains a database of cross-reference information. This
database can be queried with the functions and commands described in
<a href="#query-functions-2">Section 2.2 General description of query functions and commands</a>. The
next several headings describe how information is added and removed
from the database. <a href="#xref-database-1">Section 2.0 What is in and how to access the xref database</a> below
describes what information is available and how it can be
accessed.</p>



<hr><h2 id="11"><a name="when-generated-2">1.3 When is the cross-reference information generated?</a></h2>

<p id="12">
Cross reference information is only generated by the compiler. For
that reason, no cross reference information is available for
interpreted functions and loading a <em>fasl</em> (compiled lisp) file
which does not contain cross reference information does not add
information to the cross reference database. (To get cross-reference
information, therefore, compile or recompile the source file
appropriately, as described next, and load the new <em>fasl</em>
file.)
</p>

<p id="13">
The general rule is that the information is generated when the
value of the variable <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> is
true.  However, in certain cases the specific
value of that variable can be overridden locally as we describe next.
</p>

<ul>
<li id="14">
<strong>At the top-level</strong>: for functions and macros compiled at the top-level,
cross reference information will be generated and immediately stored in the cross
reference database if the value of <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a>
is true or if the compilation is done in the body of the macro <a href="operators/xref/with-xref.htm"><b>with-xref</b></a>.
</li>
<li id="15">
<strong>In an Emacs buffer</strong>: compilations done by forms
transmitted to Lisp from an Emacs buffer via the Emacs-Lisp interface
are like top-level forms with respect to generation of cross-reference
information.
</li>
<li id="16">
<strong>In a file</strong>: when a Lisp source
file is compiled, cross-reference information is generated if the
value of the <code>:xref</code> keyword argument to <a href="../ansicl/dictentr/compile-.htm"><b>compile-file</b></a> is
true. The default value of the variable is the
value of <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a> but you may override that
value when calling <a href="../ansicl/dictentr/compile-.htm"><b>compile-file</b></a> by explicitly specifying a value
for the <code>:xref</code> keyword argument (or also by calling
<a href="../ansicl/dictentr/compile-.htm"><b>compile-file</b></a> within the body
of the <a href="operators/xref/with-xref.htm"><b>xref:with-xref</b></a> macro). Note that
the <a href="tpl-commands/cf.htm"><b>:cf</b></a> and <a href="tpl-commands/cload.htm"><b>:cload</b></a> top-level commands do not accept
keyword arguments so whether or not cross-reference information is
generated is controlled by <a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a>.  The cross-reference
information generated for a file is stored in the resulting
<em>fasl</em> (compiled lisp) file and cannot be added to the database
until the file is loaded.
</li>
</ul>



<hr><h2 id="17"><a name="when-added-2">1.4 When is xref information in a fasl file added to the database?</a></h2>

<p id="18">Even if cross-reference information is generated when a file is
compiled, it is never added to the cross-reference database until the
file is loaded. Further the cross-reference information is loaded only
if the value of <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> is non-nil or the load is
done within the body of the macro <a href="operators/xref/with-xref.htm"><b>xref:with-xref</b></a>.</p>

<p id="19">Note that there is no argument to load that specifies whether
cross-reference information should or should not be loaded. The
command analogs to <a href="../ansicl/dictentr/load.htm"><b>load</b></a>
(<a href="tpl-commands/ld.htm"><b>:ld</b></a> and <a href="tpl-commands/cload.htm"><b>:cload</b></a>) also load or do not load xref
information as <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> is true or false.</p>

<p id="20">Of course, if you have a <em>fasl</em> file with xref info and you
load it with <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> &nbsp;
<code>nil</code>,
you can load it again with that variable true and the xref information
will be added to the database.</p>

<p id="21">When you change and recompile a file for which cross-reference
information exists in the database, you should be sure to load the
revised compiled file with <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a> true in order to update the
database. Warning: if you do change a file for which xref information
exists in the database, you must compile it so that xref information
is generated and load it so that xref information is loaded or the
database will become out of date.</p>



<hr><h2 id="22"><a name="notes-2">1.5 Things to note about the compiler and macros</a></h2>

<p id="23">Since macros are expanded by the compiler, the function calls into
which a macro form is expanded appear even though they are not evident
in the source. Further, because the compiler will transform certain
functions into macros (using either the public facility <a href="../ansicl/dictentr/define-2.htm"><b>define-compiler-macro</b></a> or internal
Allegro CL-specific functionality), some calls that you expect to be
function calls turn out to be macro calls. </p>

<p id="24">Here is a simple example using the utilities in this chapter. Note
that the function <strong>bar</strong> calls the function <a href="operators/excl/record-source-file.htm"><b>record-source-file</b></a>.  Look what
happens when <strong>bar</strong> is compiled.</p> 

<pre id="25">
USER(10): (xref:start-xref)
T
USER(11): (defun bar ()
 
          (excl:record-source-file 'foo
:type :operator))
BAR
USER(12): (compile 'bar)
BAR
NIL
NIL
USER(13): (xref:who-calls 'bar :inverse t)
BAR directly calls:
EXCL::RECORD-SOURCE-FILE-1
 No indirect callees of BAR were found in the database
 
BAR calls as a macro:
RECORD-SOURCE-FILE
USER(14):
</pre>

<p id="26"><a href="operators/excl/record-source-file.htm"><b>record-source-file</b></a> was
converted by the compiler to a macro call that expanded to forms that
included a call to the internal function
<strong>:record-source-file-1</strong>. This behavior is intended
since real (rather than apparent) cross-reference information is being
reported.  However, you may be surprised by this behavior the first
time you see it.</p>



<hr><hr><h2 id="27"><a name="xref-database-1">2.0 What is in and how to access the xref database</a></h2>

<p id="28">
The cross-reference database contains information about the relations
between different parts of code. There is a single database that holds
all information. This database itself does not store file information:
that means that after a <em>fasl</em> file and its associated xref
information is loaded, the fact that the information came from that
<em>fasl</em> file is forgotten. However, if source file information
is collected and stored (as described in
<a href="source-file-recording.htm">source-file-recording.htm</a>), that information can be
used to provide file-specific cross-reference data, as we describe
below.
</p>

<p id="29">
The information stored deals with which operators (functions or
macros) call or are called by what other operators and which operators
use (in a fashion we will describe) global variables and which global
variables are used by operators.</p>

<p id="30">Specifically, the set of relations between program parts that the
cross-referencer records contains the following information: </p>

<ul>
  <li id="31"><code>:direct-calls</code> - this is true if one function directly calls another. Thus <strong>foo</strong>
    directly calls <strong>bar</strong> in the following case:</li>
</ul>

<pre id="32">
(defun foo () (bar))
</pre>

<ul>
  <li id="33"><code>:indirect-calls</code> - this is true if one function
    contains an indirect reference to another, by, for example,
    referring to its function object. Thus <strong>foo</strong>
    indirectly calls <strong>bar</strong> in the following case:</li>
</ul>

<pre id="34">
(defun foo (x) (apply #'bar x))
</pre>

<ul>
  <li id="35"><code>:macro-calls</code> - this is true if a function calls a macro. </li>
  <li id="36"><code>:calls</code> - this is true if any of <code>:direct-calls</code>, <code>:indirect-calls</code>,
    or <code>:macro-calls</code> are true.</li>
  <li id="37"><code>:references</code> - this is true when a function makes reference to a global
    variable.</li>
  <li id="38"><code>:binds</code> - this is true when a function binds a global variable.</li>
  <li id="39"><code>:sets</code> - this is true when a function sets the value of a global variable.</li>
  <li id="40"><code>:uses</code> - this is true when a function :references, :binds, or :sets a global
    variable.</li>
</ul>

<p id="41">Information in the database can be retrieved with a number of
functions and top-level commands. Many functions have top-level
analogs. In addition, the function <a href="operators/xref/get-relation.htm"><b>xref:get-relation</b></a> is available for
programmatic querying of the database.</p>

<hr><h2 id="42"><a name="clearing-database-2">2.1 Clearing the database</a></h2>

<p id="43">The function <a href="operators/xref/discard-all-xref-info.htm"><b>xref:discard-all-xref-info</b></a> clears
all stored information in the database.</p>



<hr><h2 id="44"><a name="query-functions-2">2.2 General description of query functions and commands</a></h2>

<p id="45">There are query functions, query top-level commands, and a
programmatic function (that returns rather than prints information and
so can be used within a program). We list them here.</p>

<p id="46">The following functions ask specific questions to the database (all
are named by symbols in the <code>xref</code> package but we suppress
the package qualifier in the list for clarity). We have divided the
functions into two groups: the calls group (which asks who calls
functions and macros) and the uses group (which ask who uses global
variables).  We give the top-level command equivalent where it
exists.</p>

<blockquote>
  <p id="47">Calls group:</p>
  <blockquote>
    <p id="48"><a href="operators/xref/who-directly-calls.htm"><b>who-directly-calls</b></a>
    <a href="operators/xref/who-indirectly-calls.htm"><b>who-indirectly-calls</b></a>
    <a href="operators/xref/macros-called-by.htm"><b>macros-called-by</b></a>
    <a href="operators/xref/who-calls.htm"><b>who-calls</b></a> (and <a href="tpl-commands/who-calls.htm"><b>:who-calls</b></a>)</p>
  </blockquote>
  <p id="49">Uses group:</p>
  <blockquote>
    <p id="50"><a href="operators/xref/who-binds.htm"><b>who-binds</b></a> (and <a href="tpl-commands/who-binds.htm"><b>:who-binds</b></a>)
    <a href="operators/xref/who-references.htm"><b>who-references</b></a> (and <a href="tpl-commands/who-references.htm"><b>:who-references</b></a>)
    <a href="operators/xref/who-sets.htm"><b>who-sets</b></a> (and <a href="tpl-commands/who-sets.htm"><b>:who-sets</b></a>)
    <a href="operators/xref/who-uses.htm"><b>who-uses</b></a> (and <a href="tpl-commands/who-uses.htm"><b>:who-uses</b></a>)</p>
  </blockquote>
</blockquote>

<p id="51">Each of these functions (and equivalent top-level commands) takes
either a function name or an object as its first argument and also
accepts three keyword arguments: <code>:inverse</code>,
<code>:in-files</code>, and <code>:in-functions</code>. We describe
these arguments under the next series of headings.</p>

<p id="52">Note that the <a href="operators/xref/macros-called-by.htm"><b>macros-called-by</b></a> function asks its
question in the reverse way than the other calls questions: the rest
ask for all the functions that call a particular function. <a href="operators/xref/macros-called-by.htm"><b>macros-called-by</b></a> asks for
all macros called by a particular function. We have provided the
question that we believe will be most frequently asked in each
case. As we describe below, the sense of a question can be reversed by
the <code>:inverse</code> keyword argument.</p>

<p id="53">There are two other query functions: <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a> and <a href="operators/xref/get-relation.htm"><b>get-relation</b></a>. <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a> is a shorthand for
calling <a href="operators/xref/who-calls.htm"><b>who-calls</b></a>
and <a href="operators/xref/who-uses.htm"><b>who-uses</b></a>. <a href="operators/xref/get-relation.htm"><b>get-relation</b></a> returns the
information (either <code>nil</code> or a
true value or a list) about the relation between
specified objects. In contrast, the regular query functions print
information but do not return anything. <a href="operators/xref/get-relation.htm"><b>get-relation</b></a> is useful for programs
which wish to use cross reference data. </p>



<hr><h2 id="54"><a name="function-name-arg-2">2.3 The function-name and object arguments</a></h2>

<p id="55">In general, the first (required) argument to the query functions
(and commands) is a function name or an object (typically a global
variable) according to what would make sense if the function name and
the first argument were an English sentence. Thus, the <a href="operators/xref/who-calls.htm"><b>who-calls</b></a> function takes
a function name as its first argument since calling the function asks
the question `who calls [function]' while <a href="operators/xref/who-uses.htm"><b>who-uses</b></a> takes an object (typically
a global variable) since `who uses [variable]' is the question
asked by that function.</p>

<p id="56">The <code>:inverse</code> keyword argument acts (as we describe
below) to reverse the sense of the question. Thus who-calls with
<code>:inverse</code> true transforms the question to `who is called
by [function]'. In any of the call queries,
<code>:inverse</code> being true still requires a function name as the
first argument. In the uses queries, however, <code>:inverse</code>
true requires the first argument to be a function name. <a href="operators/xref/who-uses.htm"><b>who-uses</b></a> with
<code>:inverse</code> true asks the question `what is used by
[function]' while (as we said above) with <code>:inverse</code>
&nbsp;
<code>nil</code> it asks `who uses [object]'.</p>

<p id="57">A function name is either a symbol or a list. Note that when using
the top-level command equivalents of query functions, you do not put a
quote before the symbol or list naming the function.</p>

<p id="58">An object can be any Lisp object but is typically a global
variable. Cross reference information is only stored for global
variables so no information will be printed for other types of
objects. However, we permit other objects in order to avoid
unnecessary errors and to allow for easy extension in later
releases.</p>



<hr><h2 id="59"><a name="file-info-2">2.4 File information and the :in-files keyword argument</a></h2>

<p id="60">
File information is available with the cross referencer only if
source file information is recorded at the time files are compiled
(and cross reference information is generated).  In general, source
file information will be recorded when both <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a> and <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a> are
true. (See <a href="source-file-recording.htm">source-file-recording.htm</a>
for a complete description of source file information.)
</p>

<p id="61">The value of the <code>:in-files</code> argument should be either
<code>nil</code> (the default) or a list of files that
have been loaded into Lisp (the list may contain the keyword
<code>:top-level</code> for functions defined directly to the Lisp
top-level). If the value is <code>nil</code>, any
information in the database is provided. If the value is a list of
files (perhaps with <code>:top-level</code>), only functions defined
in those files are considered when the database is searched.</p>

<p id="62">For example, suppose we have the following files:</p>

<p id="63">File <em>foo.cl</em>:</p>

<pre id="64">
(defun foo () (bar))
</pre>

<p id="65">File <em>baz.cl:</em></p>

<pre id="66">
(defun baz () (bar))
</pre>

<p id="67">And we define at the top-level:</p>

<pre id="68">
(defun bar nil nil)
      (defun hoo () (bar))
</pre>

<p id="69">We compile and load all the files with <a href="variables/excl/s_record-source-file-info_s.htm"><code>*record-source-file-info*</code></a>, <a href="variables/excl/s_load-source-file-info_s.htm"><code>*load-source-file-info*</code></a>,
<a href="variables/excl/s_record-xref-info_s.htm"><code>*record-xref-info*</code></a>,
and <a href="variables/excl/s_load-xref-info_s.htm"><code>*load-xref-info*</code></a>
all true. We also compile the top-level functions. Then, the form</p>

<pre id="70">
(xref:who-calls 'bar)
</pre>

<p id="71">prints the information that <strong>foo</strong>,
<strong>baz</strong>, and <strong>hoo</strong> all call
<strong>bar</strong>. However,</p>

<pre id="72">
(xref:who-calls 'bar :in-files '("foo")
</pre>

<p id="73">prints only that <strong>foo</strong> calls bar while</p>

<pre id="74">
(xref:who-calls 'bar '("hoo" :top-level))
</pre>

<p id="75">prints that <strong>baz</strong> and <strong>hoo</strong> call
<strong>bar</strong>.</p>

<p id="76">The filenames should be specified in the usual way, that is they
can be strings, symbols, or pathname objects. The <em>cl</em> type
(extension) will be added by default if it is not supplied (as in our
example).</p>

<p id="77">All the query functions including <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a> and <a href="operators/xref/get-relation.htm"><b>get-relation</b></a> take this keyword
argument.</p>



<hr><h2 id="78"><a name="in-functions-arg-2">2.5 The :in-functions keyword argument</a></h2>

<p id="79">The value of <code>:in-functions</code> keyword argument should be
<code>nil</code> or a list of function names. If the value
is <code>nil</code>, the entire database is searched and
all information is printed. If the value is a list of functions, the
information from the database is intersected with the list of
functions and only those functions in the intersection are
printed.</p>

<p id="80">When you are asking for which global variables a function uses
(i.e. with <a href="operators/xref/who-uses.htm"><b>who-uses</b></a> and <code>:inverse</code>
true), the list which is the value of <code>:in-functions</code> can
contain the names of global variables and in that case, only the
global variables called and in the supplied list will be printed.</p>

<p id="81">For example, we define the following globals and functions:</p>

<pre id="82">
(defvar *var1* 10)
(defvar *var2* 20)
(defun foo (x) (+ x *var1*))
(defun bar () (+ *var1* *var2*))
</pre>

<p id="83">Now,</p>

<pre id="84">
(who-uses '*var1*)
</pre>

<p id="85">prints that <strong>foo</strong> and <strong>bar</strong> use
<code>*var1*</code>, while</p>

<pre id="86">
(who-uses '*var1* :in-functions '(foo))
</pre>

<p id="87">prints that <strong>foo</strong> uses <code>*var1*</code>. </p>

<pre id="88">
(who-uses 'bar :inverse t)
</pre>

<p id="89">prints the globals used by <strong>bar</strong>, that is
<code>*var1*</code> and <code>*var2*</code>.  However,</p>

<pre id="90">
(who-uses 'bar :inverse t :in-functions '(*var1*))
</pre>

<p id="91">prints that <strong>bar</strong> uses <code>*var1*</code> since the
list is restricted by the <code>:in-functions</code> keyword
argument.</p>

<p id="92">All the query functions including <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a> and <a href="operators/xref/get-relation.htm"><b>get-relation</b></a> take this keyword
argument.</p>



<hr><h2 id="93"><a name="inverse-arg-2">2.6 The :inverse keyword argument</a></h2>

<p id="94">This argument can be used to change the sense of the question asked
by the query function. In the case of the call queries, specifying
<code>:inverse</code> true changes the question from who calls to who
is called by. In the case of the use queries, specifying
<code>:inverse</code> true changes the question from who uses a global
variable to what global variables does a particular function use (and
thus changes the first argument from being an object - typically a
global variable - to being a function name).</p>

<p id="95">Here are the query functions and the question asked when
<code>:inverse</code> is t.</p>

<blockquote>
  <blockquote>
    <p id="96"><a href="operators/xref/who-directly-calls.htm"><b>who-directly-calls</b></a>:
    who
    is directly called by [arg]?<br>
    <a href="operators/xref/who-indirectly-calls.htm"><b>who-indirectly-calls</b></a>:
    who is indirectly called by [arg]?<br>
    <a href="operators/xref/macros-called-by.htm"><b>macros-called-by</b></a>:
    who
    macro calls [arg]<br>
    <a href="operators/xref/who-calls.htm"><b>who-calls</b></a> (and <a href="tpl-commands/who-calls.htm"><b>:who-calls</b></a>):
    who is called by
    [arg]?<br>
    <a href="operators/xref/who-binds.htm"><b>who-binds</b></a> (and <a href="tpl-commands/who-binds.htm"><b>:who-binds</b></a>): what is bound by
    [arg]?<br>
    <a href="operators/xref/who-references.htm"><b>who-references</b></a> (and <a href="tpl-commands/who-references.htm"><b>:who-references</b></a>): what is
    referenced by [arg]?<br>
    <a href="operators/xref/who-sets.htm"><b>who-sets</b></a> (and <a href="tpl-commands/who-sets.htm"><b>:who-sets</b></a>): what is set by
    [arg]?<br>
    <a href="operators/xref/who-uses.htm"><b>who-uses</b></a> (and <a href="tpl-commands/who-uses.htm"><b>:who-uses</b></a>): what is used by
    [arg]?<br>
    <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a>:
    what is called
    or used by [arg]?</p>
  </blockquote>
</blockquote>

<p id="97">Note that the <a href="operators/xref/macros-called-by.htm"><b>macros-called-by</b></a> function asks its
question in the reverse sense to the other functions. It asks directly
for all macros called by a function and for all functions which call a
macro when <code>:inverse</code> is true. We have chosen for the
direct call what we believe will be the most frequently asked
question.</p>

<p id="98">All query functions except <a href="operators/xref/get-relation.htm"><b>xref:get-relation</b></a> accept the
<code>:inverse</code> keyword argument. (In get-relation, the sense of
the question is determined by the order of the arguments and so the
sense can be reversed by reversing the order.)</p>



<hr><hr><h2 id="99"><a name="xref-example-1">3.0 A cross-referencer example</a></h2>

<p id="100">Let's say we have a file called <em>example.cl</em> containing the following:</p>

<pre id="101">
(defvar var1 3) 
(+ var1 3)
(defmacro addit (x) `(+ var1 ,x))
(defun calladdit (x y) (expt (addit x) y))
(defun call2 (a b) (calladdit a b))
(defclass fooclass ()
   ((name :initarg :name :reader foo-name)
   (barg :initarg :barg :accessor get-foo-barg)))
(defgeneric blarf (x)
    )
(defmethod blarf ((x t))
    (car x))
(defmethod blarf ((x fooclass))
    (get-foo-barg x)
    (foo-name x)
    (setf var1 3)
    var1)
</pre>


<p id="102">Then in Allegro CL, we enable the cross-referencer:</p>

<pre id="103">
user(4): (xref:start-xref)
t
</pre>

<p id="104">Then compile and load the example file (the compiler messages have
been deleted below):</p>

<pre id="105">
user(5): :cload example.cl
</pre>

<p id="106">Now we can examine the code with cross-referencer. The output is a
list of function-names of forms that reference
<code>var1</code>. The <code>(:top-level-form
"example.cl")</code> corresponds to the forms <code>(defvar var1
3)</code> and <code>(+ var1 3)</code> in the source file that
reference <code>var1</code>.</p>

<pre id="107">
user(6): (xref:who-references 'var1)
  var1 is referenced by:
   
  calladdit
   (:top-level-form "example.cl")
   (method blarf (fooclass))
</pre>

<p id="108">Now we try <a href="operators/xref/who-calls.htm"><b>who-calls</b></a>. Note that the call to
the <strong>addit</strong> macro has been expanded so we see that
<strong>calladdit</strong> calls <a href="../ansicl/dictentr/unnamed0.htm"><b>+</b></a>.</p>

<pre id="109">
user(12): (xref:who-calls '+)
   
  + is directly called by:
    calladdit
    (:top-level-form "example.cl")
   
  No indirect callers of + were found in the database
  No macro callers of + were found in the database
</pre>

<p id="110">Now let's look at the callers of <strong>calladdit</strong>.</p>

<pre id="111">
user(13): (xref:who-calls 'calladdit)
   
  calladdit is directly called by:
    call2
   
  No indirect callers of calladdit were found in the database
  No macro callers of calladdit were found in the database
</pre>

<p id="112">We can also see who <strong>calladdit</strong> calls by asking for
the inverse relation. Here we can see the macro invoked by
<strong>calladdit</strong>.</p>

<pre id="113">
user(14): (xref:who-calls 'calladdit :inverse t)
   
  calladdit directly calls:
  +
  expt
   
  No indirect callees of calladdit were found in the database
   calladdit calls as a macro:
   addit
</pre>

<p id="114">We can see all the relevant information about
<strong>calladdit</strong> at once with <a href="operators/xref/xref-describe.htm"><b>xref-describe</b></a>.</p>

<pre id="115">
user(15): (xref:xref-describe 'calladdit)
   calladdit is directly called by:
  
  call2
   
  No indirect callers of calladdit were found in the database
   No macro callers of calladdit were found in the database
   calladdit directly calls:
   
  +
   expt

  No indirect callees of calladdit were found in the database

 calladdit calls as a macro:
    addit
   
  calladdit references:
    var1
  
   No symbols bound by calladdit were found in the database
   No symbols set by calladdit were found in the database
</pre>

<p id="116">We can also use top-level commands to access cross-reference
information.</p>

<pre id="117">
user(9): :who-calls expt
  
  expt is directly called by:
  calladdit
  
   No indirect callers of expt were found in the database
   No macro callers of expt were found in the database
</pre>

<p id="118">Notice the use of a CLOS function-name to obtain information about
one of the methods defined for the generic function
<strong>blarf</strong>.</p>

<pre id="119">
user(22): :who-calls (method blarf (fooclass)) :inverse t
  
  (method blarf (fooclass)) directly calls:
    foo-name 
    get-foo-barg
  No indirect callees of (method blarf (fooclass)) were found in the database
  No macro callees of (method blarf (fooclass)) were found in the database
</pre>

<p id="120">The low-level programmer's interface to the cross-referencer is
through the function <a href="operators/xref/get-relation.htm"><b>get-relation</b></a>. It can take
<code>:wild</code> as a wildcard argument for queries of the
database. The next example returns a list of all forms that call
+.</p>

<pre id="121">
user(23): (xref:get-relation :calls :wild '+)
  (calladdit (:top-level-form "example.cl"))
</pre>

<p id="122"><a href="operators/xref/get-relation.htm"><b>get-relation</b></a>
can be called without a wildcard to determine the truth of a
relation. It returns true if the relation exists
in the database.</p>

<pre id="123">
user(27): (xref:get-relation :calls 'calladdit 'addit)
addit
user(28): (xref:get-relation :calls 'calladdit 'notaddit)
nil
</pre>



</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/cross-reference.htm">8.1 version</a></td></tr></table></html>