<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>DDE support in Allegro CL</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dde.htm">8.1 version</a></td></tr></table><h1 id="2">DDE support in Allegro CL</h1><p id="3">This document contains the following sections:</p><a href="#dde-introduction-1">1.0 DDE Introduction</a><br><a href="#dde-example-1">2.0 DDE Example</a><br><a href="#lisp-as-dde-client-1">3.0 Creating a port where Lisp is the DDE client</a><br><a href="#dde-functionality-1">4.0 DDE Functionality</a><br><a href="#windows-names-1">5.0 Correspondence between Windows commands and DDE function names</a><br><hr><hr><h2 id="4"><a name="dde-introduction-1">1.0 DDE Introduction</a></h2>

<p id="5">
DDE stands for Dynamic Data Exchange. Quoting from the Windows API
Bible (a standard reference for programming with Windows): "Dynamic
Data Exchange is a message protocol that allows Windows applications
to exchange data."
</p>
<p id="6">
Here we briefly describe the functionality available in Lisp for
DDE. Note that we do not describe DDE in much detail. We assume you
are familiar with using DDE between Windows applications. If you are
not, please refer to standard Windows programming manuals. Here are
some principles of using DDE in Lisp:
</p>
<ul>
<li id="7">
Creation and management of DDE "string handles" is done
automatically. You simply pass in Lisp strings or keyword symbols that
name applications, topics, and items without worrying about the string
handles.
</li>
<li id="8">
Rather than deal with the DDE callback function directly, you can
simply supply a few Lisp methods which are invoked automatically when
callbacks occur.
</li>
<li id="9">
Conversations with other tasks are implemented as CLOS instances
(called ports), so you don't need to deal with the conversation
handles directly.
</li>
<li id="10">
Lisp can act as either a client or server, and handle cold, warm, and
hot links. Currently the only clipboard data format supported is text.
</li>
</ul>



<p id="11">
DDE functionality is not part the common-graphics package or inculded
in the <code>:common-graphics</code> module. Its functionality
is in the dde package in a module named
<code>:dde</code>. It is not necessary to load Common Graphics
to use DDE functionality. DDE functionality is only available on
Windows.
</p>


<h2 id="12">
Loading the DDE module
</h2>

<p id="13">
Evaluating the form
</p>
<pre id="14">
(require :dde)
</pre>

<p id="15">
will cause the DDE module to be loaded if it is not already
present. It is not an error to evaluate this form when the DDE module
is already loaded (the form will return <code>nil</code>
in that case). 
</p>

<hr><hr><h2 id="16"><a name="dde-example-1">2.0 DDE Example</a></h2>

<p id="17">
There is a simple example illustrating the DDE functionality in
<i>examples\cg\dde-examples.cl</i>.
</p>

<hr><hr><h2 id="18"><a name="lisp-as-dde-client-1">3.0 Creating a port where Lisp is the DDE client</a></h2>

<p id="19">
Create a client-port instance by calling <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> on the <a href="classes/dde/client-port.htm"><code>client-port</code></a> class. Available
initargs are:
</p>
<ul>
<li id="20">
<i>name</i>:
an arbitrary object (typically a symbol) to name this port. Defaults
to :client-n, where n is an integer that is auto-generated to make the
name unique.
</li>
<li id="21">
<i>application</i>: 
the "service" name of the DDE server application that this port will
connect to. This is often the filename of the executable image that is
run, such as "progman" for the Program manager, but can be any
arbitrary string that that server chooses to use. This value can be
either the official DDE string or the keyword symbol whose print name
is that string.
</li>
<li id="22">
<i>topic</i>:
the particular topic of the application that this port will
address. (To address multiple topics of the same application, you must
create multiple port instances.) This value can be either a string or
a keyword symbol.
</li>
</ul>
<p id="23">
These attributes can be changed after the instance is created using
setf and the accessors <a href="operators/dde/port-name.htm"><b>port-name</b></a>, <a href="operators/dde/port-application.htm"><b>port-application</b></a>, and <a href="operators/dde/port-topic.htm"><b>port-topic</b></a> (all
are setf'able). The new values will be used if the port is closed and
re-opened.
</p>
<h3 id="24">
Example of creating a port:
</h3>
<pre id="25">
;; Create a port with the program manager acting as the DDE 
;; server
(setq port1 (make-instance 'client-port
              :application :progman
              :topic :progman))
</pre>
<h3 id="26">
DDE and Multithreading
</h3>
<p id="27">
Any single DDE port (either a client or server port) will work only 
within a single thread during the time that it is open,
and so all of the application code that uses a particular DDE port 
should run only in one thread. (A port could be opened and closed in 
one thread and then later opened and closed in another, but it would 
likely be tricky to ensure that the threads do not have the port 
open at the same time.)
</p>
<p id="28">
When a DDE port is opened in a thread, a <a href="classes/dde/dde-info.htm"><code>dde-info</code></a> instance is created for
that thread. The function <a href="operators/dde/dde-info.htm"><b>dde-info</b></a> applied to the process
associated with a thread returns that instance, which can be used as
the argument to various generic functions which provide information
about the port.
</p>
<p id="29">
The generic function can be used to poll and set values in a <a href="classes/dde/dde-info.htm"><code>dde-info</code></a> instance.
</p>
<p id="30">
Separate DDE ports 
work in separate threads. Allegro CL will continue to automatically 
initialize DDE as needed whenever a first port is opened, though now 
this is handled separately in each thread that begins to use DDE. 
</p>

<hr><hr><h2 id="31"><a name="dde-functionality-1">4.0 DDE Functionality</a></h2>

<ul>
<li id="32">
<a href="operators/dde/active-client-ports.htm"><b>active-client-ports</b></a>
</li>
<li id="33">
<a href="operators/dde/active-server-ports.htm"><b>active-server-ports</b></a>
</li>
<li id="34">
<a href="operators/dde/answer-request.htm"><b>answer-request</b></a>
</li>
<li id="35"> <a href="operators/dde/case-sensitive-dde.htm"><b>case-sensitive-dde</b></a> (which uses
<a href="variables/dde/s_case-sensitive-dde_s.htm"><code>*case-sensitive-dde*</code></a> for its
default)
</li>
<li id="36">
<a href="operators/dde/close-dde.htm"><b>close-dde</b></a>
</li>
<li id="37">
<a href="operators/dde/close-port.htm"><b>close-port</b></a>
</li>
<li id="38"> 
<a href="operators/dde/close-server.htm"><b>close-server</b></a>
</li>
<li id="39">
<a href="operators/dde/convert-returned-dde-buffer.htm"><b>convert-returned-dde-buffer</b></a>
</li>
<li id="40">
<a href="operators/dde/convert-returned-dde-string.htm"><b>convert-returned-dde-string</b></a>
</li>
<li id="41">
<a href="classes/dde/dde-info.htm"><code>dde-info</code></a> (the
class)
</li>
<li id="42">
<a href="operators/dde/dde-info.htm"><b>dde-info</b></a> (the
function)
</li>
<li id="43">
<a href="operators/dde/dde-message.htm"><b>dde-message</b></a>
</li>
<li id="44">
<a href="operators/dde/dword-list-from-dde-buffer.htm"><b>dword-list-from-dde-buffer</b></a>
</li>
<li id="45"> 
<a href="operators/dde/execute-command.htm"><b>execute-command</b></a>
</li>
<li id="46">
<a href="variables/dde/s_generate-dde-messages_s.htm"><code>*generate-dde-messages*</code></a>
</li>
<li id="47">
<a href="operators/dde/open-port.htm"><b>open-port</b></a>
</li>
<li id="48"> 
<a href="operators/dde/open-server.htm"><b>open-server</b></a>
</li>
<li id="49"> 
<a href="operators/dde/port-open-p.htm"><b>port-open-p</b></a>
</li>
<li id="50"> 
<a href="operators/dde/post-advice.htm"><b>post-advice</b></a>
</li>
<li id="51"> 
<a href="operators/dde/receive-advice.htm"><b>receive-advice</b></a>
</li>
<li id="52"> 
<a href="operators/dde/receive-value.htm"><b>receive-value</b></a>
</li>
<li id="53"> 
<a href="operators/dde/send-command.htm"><b>send-command</b></a>
</li>
<li id="54"> 
<a href="operators/dde/send-request.htm"><b>send-request</b></a>
</li>
<li id="55"> 
<a href="operators/dde/send-value.htm"><b>send-value</b></a>
</li>
<li id="56"> 
<a href="operators/dde/server-active-p.htm"><b>server-active-p</b></a>
</li>
<li id="57">
<a href="operators/dde/service-name.htm"><b>service-name</b></a>
(which uses <a href="variables/dde/s_service-name_s.htm"><code>*service-name*</code></a> for its
default)
</li>
<li id="58">
<a href="operators/dde/service-topics.htm"><b>service-topics</b></a>
(which uses <a href="variables/dde/s_service-topics_s.htm"><code>*service-topics*</code></a> for its default)
</li>
<li id="59">
<a href="operators/dde/string-from-dde-buffer.htm"><b>string-from-dde-buffer</b></a>
</li>
<li id="60">
sysitems (which uses <a href="variables/dde/s_sysitems_s.htm"><code>*sysitems*</code></a>
for its default)
</li>
</ul>

<hr><hr><h2 id="61"><a name="windows-names-1">5.0 Correspondence between Windows commands and DDE function names</a></h2>

<p id="62">
The Windows API offers the function <b>DdeClientTransaction</b>, where
the sixth argument is a constant that indicates the type of
transaction.  For those who are familiar with the Windows DDE API,
here is the mapping from those transaction types to the corresponding
client functions in Allegro's DDE facility.
</p>

<ul>
<li id="63">
<b>XTYP_REQUEST</b> -&gt; <a href="operators/dde/send-request.htm"><b>send-request</b></a> with a <code>:cold</code>
link
</li>
<li id="64">
<b>XTYP_ADVSTART</b> -&gt; <a href="operators/dde/send-request.htm"><b>send-request</b></a> with a <code>:warm</code> or
<code>:hot</code> link
</li>
<li id="65">
<b>XTYP_EXECUTE</b> -&gt; <a href="operators/dde/send-command.htm"><b>send-command</b></a>
</li>
<li id="66">
<b>XTYP_POKE</b> -&gt; <a href="operators/dde/send-value.htm"><b>send-value</b></a>
</li>
</ul>

<p id="67">
Similarly, a DDE server callback function receives transactions of
these same types. Here is the mapping from these types to the
corresponding generic functions on which methods may be written to
implement a DDE server in Allegro.
</p>
<ul>
<li id="68">
<b>XTYP_REQUEST</b> -&gt; <a href="operators/dde/answer-request.htm"><b>answer-request</b></a>
</li>
<li id="69">
<b>XTYP_ADVSTART</b> -&gt; <a href="operators/dde/answer-request.htm"><b>answer-request</b></a> (along with calling <a href="operators/dde/post-advice.htm"><b>post-advice</b></a>)
</li>
<li id="70">
<b>XTYP_EXECUTE</b> -&gt; <a href="operators/dde/execute-command.htm"><b>execute-command</b></a>
</li>
<li id="71">
<b>XTYP_POKE</b> -&gt; <a href="operators/dde/receive-value.htm"><b>receive-value</b></a>
</li>
</ul>

</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dde.htm">8.1 version</a></td></tr></table></html>