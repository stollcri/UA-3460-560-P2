<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>The shell module interface</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/shell-module.htm">8.1 version</a></td></tr></table><h1 id="2">The shell module interface</h1><p id="3">This document contains the following sections:</p><a href="#shell-intro-1">1.0 Introduction</a><br><a href="#shell-ref-1">2.0 Operators, variables, and classes in the Shell module</a><br><hr><hr><h2 id="4"><a name="shell-intro-1">1.0 Introduction</a></h2>

<p id="5">
The shell module is intended to provide UNIX shell-like commands,
such as you find on a modern UNIX system, and in addition shortcuts
for some common Perl idioms. 
</p>
<p id="6">
This module does not provide functionality to spawn a shell (as older
functions like <a href="operators/excl/run-shell-command.htm"><b>run-shell-command</b></a> and <a href="operators/excl/shell.htm"><b>shell</b></a> and newer ones like <a href="os-interface.htm#command-output-op-bookmarkxx"><b>command-output</b></a>
do). Instead, many commands that are available in a shell are
available in this module. These commands are available on UNIX and
Windows and work in a uniform fashion whatever the actual operating
system. No external programs are used to implement the functions in
this module, and as a result security issues associated with executing
external programs by spawning shells are finessed.
</p>
<p id="7">
The shell module's package, <code>:excl.shell</code>, is
autoloaded when referenced. The module name is
<code>shell</code>. The module can be loaded by evaluating
</p>
<pre id="8">
(require :shell)
</pre>

<p id="9">
See also <a href="os-interface.htm">os-interface.htm</a>, in particular <a href="os-interface.htm#osi-module-1">The Operating System
Interface (OSI) module</a> in that document, for other operators
releated to those described in this document.
</p>

<hr><hr><h2 id="10"><a name="shell-ref-1">2.0 Operators, variables, and classes in the Shell module</a></h2>

<h3 id="11">
Operators
</h3>

<ul>
<li id="12">
<a href="shell-module.htm#concat-op-bookmarkxx"><b>concat</b></a>
</li>
<li id="13">
<a href="shell-module.htm#cp-op-bookmarkxx"><b>cp</b></a>
</li>
<li id="14">
<a href="shell-module.htm#die-op-bookmarkxx"><b>die</b></a>
</li>
<li id="15">
<a href="shell-module.htm#glob-op-bookmarkxx"><b>glob</b></a>
</li>
<li id="16">
<a href="shell-module.htm#join-op-bookmarkxx"><b>join</b></a>
</li>
<li id="17">
<a href="shell-module.htm#ln-op-bookmarkxx"><b>ln</b></a>
</li>
<li id="18">
<a href="shell-module.htm#mv-op-bookmarkxx"><b>mv</b></a>
</li>
<li id="19">
<a href="shell-module.htm#rm-op-bookmarkxx"><b>rm</b></a>
</li>
<li id="20">
<a href="shell-module.htm#split-op-bookmarkxx"><b>split</b></a>
</li>
<li id="21">
<a href="shell-module.htm#touch-op-bookmarkxx"><b>touch</b></a>
</li>
<li id="22">
<a href="shell-module.htm#-d-op-bookmarkxx"><b>-d</b></a>
</li>
<li id="23">
<a href="shell-module.htm#-e-op-bookmarkxx"><b>-e</b></a>
</li>
<li id="24">
<a href="shell-module.htm#-f-op-bookmarkxx"><b>-f</b></a>
</li>
<li id="25">
<a href="shell-module.htm#-l-op-bookmarkxx"><b>-l</b></a>
</li>
<li id="26">
<a href="shell-module.htm#-r-op-bookmarkxx"><b>-r</b></a>
</li>
<li id="27">
<a href="shell-module.htm#-s-op-bookmarkxx"><b>-s</b></a>
</li>
<li id="28">
<a href="shell-module.htm#-w-op-bookmarkxx"><b>-w</b></a>
</li>
<li id="29">
<a href="shell-module.htm#-x-op-bookmarkxx"><b>-x</b></a>
</li>
<li id="30">
<a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>
</li>
</ul>

<h3 id="31">
Variables
</h3>

<ul>
<li id="32">
<a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>
</li>
<li id="33">
<a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>
</li>
<li id="34">
<a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>
</li>
<li id="35">
<a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>
</li>
<li id="36">
<a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>
</li>
<li id="37">
<a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>
</li>
<li id="38">
<a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>
</li>
<li id="39">
<a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>
</li>
<li id="40">
<a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>
</li>
</ul>
     
<h3 id="41">
Classes
</h3>

<ul>
<li id="42">
<a href="shell-module.htm#shell-not-supported-condition-class-bookmarkxx"><code>shell-not-supported-condition</code></a>
</li>
</ul>

<hr><h3 id="43"><a name="eq__t-op-bookmarkxx"></a>=~</h3><h3 id="44">Function</h3><h4 id="45">Package: excl.shell</h4>

<p id="46"><b>Arguments: </b><i>
regexp string </i> &amp;rest <i>keys</i><i> 
</i>&amp;key <i>  &amp;allow-other-keys
</i></p>

<p id="47">
Return <code>t</code> if the regular expression
<i>regexp</i> matches <i>string</i> As a
side-effect, set the <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>...<a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a> variables
to the corresponding group match. When there is no corresponding group
match, the associated variable is set to <code>nil</code>.
If <i>regexp</i> is a string, it is cached in case it is
used repeatedly -- it will only be compiled once for consecutive calls
to this function.
</p>
<p id="48">
See `compile-regexp' for details on compilation of regular expressions.
</p>
<p id="49">
The keywords accepted by <b>match-regexp</b> are accepted by this
function.
</p>
<p id="50">
For example:
</p>
<pre id="51">
(33): (excl.shell:=~ "\\([^.]+\\)\\.\\(.*\\)" "foo.bar")
t
cl-user(34): excl.shell:$1
"foo"
cl-user(35): excl.shell:$2
"bar"
cl-user(36): excl.shell:$3
nil
cl-user(37): 
</pre>

<hr>

<hr><h3 id="52"><a name="$1-var-bookmarkxx"></a>$1</h3><h3 id="53">Variable</h3><h4 id="54">Package: excl.shell</h4>

<p id="55">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="56">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="57"><a name="$2-var-bookmarkxx"></a>$2</h3><h3 id="58">Variable</h3><h4 id="59">Package: excl.shell</h4>

<p id="60">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="61">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="62"><a name="$3-var-bookmarkxx"></a>$3</h3><h3 id="63">Variable</h3><h4 id="64">Package: excl.shell</h4>

<p id="65">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="66">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="67"><a name="$4-var-bookmarkxx"></a>$4</h3><h3 id="68">Variable</h3><h4 id="69">Package: excl.shell</h4>

<p id="70">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="71">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="72"><a name="$5-var-bookmarkxx"></a>$5</h3><h3 id="73">Variable</h3><h4 id="74">Package: excl.shell</h4>

<p id="75">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="76">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="77"><a name="$6-var-bookmarkxx"></a>$6</h3><h3 id="78">Variable</h3><h4 id="79">Package: excl.shell</h4>

<p id="80">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="81">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="82"><a name="$7-var-bookmarkxx"></a>$7</h3><h3 id="83">Variable</h3><h4 id="84">Package: excl.shell</h4>

<p id="85">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="86">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>, and <a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="87"><a name="$8-var-bookmarkxx"></a>$8</h3><h3 id="88">Variable</h3><h4 id="89">Package: excl.shell</h4>

<p id="90">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="91">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is one. The other eight are: 
<a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, and
<a href="shell-module.htm#$9-var-bookmarkxx"><code>$9</code></a>.
</p>

<hr>

<hr><h3 id="92"><a name="$9-var-bookmarkxx"></a>$9</h3><h3 id="93">Variable</h3><h4 id="94">Package: excl.shell</h4>

<p id="95">
This variable is used by <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a> and is set to a group match by
that function (or to <code>nil</code> if there is no
corresponding group match).
</p>
<p id="96">
There are nine variables associated with <a href="shell-module.htm#eq__t-op-bookmarkxx"><b>=~</b></a>. This is
one. The other eight are: <a href="shell-module.htm#$1-var-bookmarkxx"><code>$1</code></a>, <a href="shell-module.htm#$2-var-bookmarkxx"><code>$2</code></a>, <a href="shell-module.htm#$3-var-bookmarkxx"><code>$3</code></a>, <a href="shell-module.htm#$4-var-bookmarkxx"><code>$4</code></a>, <a href="shell-module.htm#$5-var-bookmarkxx"><code>$5</code></a>, <a href="shell-module.htm#$6-var-bookmarkxx"><code>$6</code></a>, <a href="shell-module.htm#$7-var-bookmarkxx"><code>$7</code></a>, and <a href="shell-module.htm#$8-var-bookmarkxx"><code>$8</code></a>.
</p>

<hr>

<hr><h3 id="97"><a name="join-op-bookmarkxx"></a>join</h3><h3 id="98">Function</h3><h4 id="99">Package: excl.shell</h4>

<p id="100"><b>Arguments: </b><i>
delimiter list
</i></p>

<p id="101">
Join the elements of <i>list</i> together with
<i>delimiter</i>. This function is shorthand for
<code>(list-to-delimited-string list delimiter)</code> (see
<a href="operators/excl/list-to-delimited-string.htm"><b>list-to-delimited-string</b></a>).
</p>
<p id="102">
For example:
</p>
<pre id="103">
cl-user(37): (excl.shell:join #\, '(1 2 3 4))
"1,2,3,4"
cl-user(38): 
</pre>

<hr>

<hr><h3 id="104"><a name="split-op-bookmarkxx"></a>split</h3><h3 id="105">Function</h3><h4 id="106">Package: excl.shell</h4>

<p id="107"><b>Arguments: </b><i>
regexp string </i> &amp;rest <i>args</i><i> </i>&amp;key <i>  &amp;allow-other-keys
</i></p>

<p id="108">
<a href="shell-module.htm#split-op-bookmarkxx"><b>split</b></a> is a synonym for the
function <a href="operators/excl/split-regexp.htm"><b>split-regexp</b></a>.
</p>
<p id="109">
For example:
</p>
<pre id="110">
cl-user(38): (excl.shell:split "," "1,2,3,4")
("1" "2" "3" "4")
cl-user(39): 
</pre>

<hr>

<hr><h3 id="111"><a name="concat-op-bookmarkxx"></a>concat</h3><h3 id="112">Function</h3><h4 id="113">Package: excl.shell</h4>

<p id="114"><b>Arguments: </b><i>
</i> &amp;rest <i>things</i><i>
</i></p>

<p id="115">
Concatenate objects into a simple-string.  This function is similar to
<a href="../ansicl/dictentr/concate1.htm"><b>concatenate</b></a>, except that
conversion of pathnames, numbers and symbols is done automatically
into a string. The conversion of these three types is done with
<a href="../ansicl/dictentr/write-to.htm"><b>princ-to-string</b></a>.  For example:
<code>(concat 1 2 3)</code> will yield
<code>"123"</code>, whereas <code>(concatenate
'simple-string 1 2 3)</code> will signal an error.
</p>

<hr>

<hr><h3 id="116"><a name="glob-op-bookmarkxx"></a>glob</h3><h3 id="117">Function</h3><h4 id="118">Package: excl.shell</h4>

<p id="119"><b>Arguments: </b><i>
string-or-pathname </i>&amp;key <i>  &amp;allow-other-keys
</i></p>

<p id="120">
Expand <i>string-or-pathname</i>, a pathname or string,
into a list of files matching the pattern in the argument. The call is
equivalent to calling <a href="../ansicl/dictentr/director.htm"><b>common-lisp:directory</b></a> on
<i>string-or-pathname</i> and signalling an error if it
returns <code>nil</code>.
</p>
<p id="121">
This function accepts the same keywords as <a href="../ansicl/dictentr/director.htm"><b>common-lisp:directory</b></a> and
merely passes them onto directory.
</p>

<p id="122">
See <a href="pathnames.htm#wildcards-1">Pathname wildcard
syntax</a> in <a href="pathnames.htm">pathnames.htm</a> for information
on how wildcard characters (like <b>*</b> and <b>?</b>) are handled.
</p>

<p id="123">
For example:
</p>
<pre id="124">
cl-user(39): (excl.shell:glob "*.cl") 
(#p"/stuff1/acl/acl70/src/boot70.cl" #p"/stuff1/acl/acl70/src/foo.cl"
 #p"/stuff1/acl/acl70/src/eol.cl" #p"/stuff1/acl/acl70/src/npacl.cl"
 #p"/stuff1/acl/acl70/src/concat.cl" #p"/stuff1/acl/acl70/src/doit.cl"
 #p"/stuff1/acl/acl70/src/constants.cl" #p"/stuff1/acl/acl70/src/xx.cl"
 #p"/stuff1/acl/acl70/src/develenv.cl" #p"/stuff1/acl/acl70/src/gdbm.cl" ...)
cl-user(40): (mapcar #'enough-pathname (glob "*.cl"))
(#p"boot70.cl" #p"foo.cl" #p"eol.cl" #p"npacl.cl" #p"concat.cl" #p"doit.cl"
 #p"constants.cl" #p"xx.cl" #p"develenv.cl" #p"gdbm.cl" ...)
cl-user(41): 
</pre>

<hr>

<hr><h3 id="125"><a name="-r-op-bookmarkxx"></a>-r</h3><h3 id="126">Function</h3><h4 id="127">Package: excl.shell</h4>

<p id="128"><b>Arguments: </b><i>
filespec
</i></p>

<p id="129">
Return a non-<code>nil</code> value if file <i>filespec</i> exists and is readable.
A <i>filespec</i> must be a string or pathname.
</p>
<p id="130">
For example:
</p>
<pre id="131">
cl-user(42): (excl.shell:-r "makefile")
t
cl-user(43): (excl.shell:-r "this-file-does-not-exist")
nil
cl-user(44): 
</pre>

<hr>

<hr><h3 id="132"><a name="-w-op-bookmarkxx"></a>-w</h3><h3 id="133">Function</h3><h4 id="134">Package: excl.shell</h4>

<p id="135"><b>Arguments: </b><i>
filespec
</i></p>

<p id="136">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and is writable.  A
<i>filespec</i> must be a string or pathname.
</p>

<hr>

<hr><h3 id="137"><a name="-x-op-bookmarkxx"></a>-x</h3><h3 id="138">Function</h3><h4 id="139">Package: excl.shell</h4>

<p id="140"><b>Arguments: </b><i>
filespec
</i></p>

<p id="141">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and is executable.
<i>filespec</i> must be a string or pathname. On
Windows this function always returns <code>t</code> if
<i>filespec</i> exists.
</p>


<hr>

<hr><h3 id="142"><a name="-e-op-bookmarkxx"></a>-e</h3><h3 id="143">Function</h3><h4 id="144">Package: excl.shell</h4>

<p id="145"><b>Arguments: </b><i>
filespec
</i></p>

<p id="146">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists.  A <i>filespec</i>
must be a string or pathname.
</p>

<hr>

<hr><h3 id="147"><a name="-f-op-bookmarkxx"></a>-f</h3><h3 id="148">Function</h3><h4 id="149">Package: excl.shell</h4>

<p id="150"><b>Arguments: </b><i>
filespe
</i></p>

<p id="151">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and is a regular file.
<i>filespec</i> must be a string or pathname.  Note,
<a href="shell-module.htm#-f-op-bookmarkxx"><b>-f</b></a> will return true if given an
existing file that is not a directory, including, for example, a
symbolic link. This may be unintuituve (you might expect <a href="shell-module.htm#-f-op-bookmarkxx"><b>-f</b></a> to return true only when given
an actual file), but it is how the <b>test</b> program works on UNIX.
</p>

<hr>

<hr><h3 id="152"><a name="-d-op-bookmarkxx"></a>-d</h3><h3 id="153">Function</h3><h4 id="154">Package: excl.shell</h4>

<p id="155"><b>Arguments: </b><i>
filespec
</i></p>

<p id="156">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and is a directory.
<i>filespec</i> must be a string or pathname.
</p>

<hr>

<hr><h3 id="157"><a name="-l-op-bookmarkxx"></a>-l</h3><h3 id="158">Function</h3><h4 id="159">Package: excl.shell</h4>

<p id="160"><b>Arguments: </b><i>
filespec
</i></p>

<p id="161">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and is a symbolic link.
<i>filespec</i> must be a string or pathname.  Always
returns <code>nil</code> on Windows.
</p>

<hr>

<hr><h3 id="162"><a name="-s-op-bookmarkxx"></a>-s</h3><h3 id="163">Function</h3><h4 id="164">Package: excl.shell</h4>

<p id="165"><b>Arguments: </b><i>
filespec
</i></p>

<p id="166">
Return a non-<code>nil</code> value if file
<i>filespec</i> exists and has a size greater than zero.
<i>filespec</i> must be a string or pathname.
</p>

<hr>

<hr><h3 id="167"><a name="touch-op-bookmarkxx"></a>touch</h3><h3 id="168">Function</h3><h4 id="169">Package: excl.shell</h4>

<p id="170"><b>Arguments: </b><i>
filespec </i>&amp;key  (<i>if-does-not-exist</i> :create)<i> atime mtime time reference-file</i><i>
</i></p>



<p id="171">
Update the access and modification times of
<i>filespec</i> to the current time.  The various
keyword arguments augment this behavior:
</p>
<ul>
<li id="172">
<i>if-does-not-exist</i>: <code>:create</code> is
the default value, and other values are <code>:error</code> or
<code>:ignore</code>. <code>:error</code> causes <a href="shell-module.htm#touch-op-bookmarkxx"><b>touch</b></a> to signal an error if the
file does not already exist. <code>:ignore</code> causes
<a href="shell-module.htm#touch-op-bookmarkxx"><b>touch</b></a> to do nothing if the file
does not already exist.
</li>
<li id="173">
<i>atime</i>: set the access time to the given universal
time.
</li>
<li id="174">
<i>mtime</i>: set the modification time to the given
universal time.
</li>
<li id="175">
<i>time</i>: set the access and modification times to
the given universal time.
</li>
<li id="176">
<i>reference-file</i>: set the access and modification
times to the corresponding times on the file given by the value of
this keyword.
</li>
</ul>

<p id="177">
If a file does not exists and <i>if-does-not-exist</i>
is <code>:ignore</code>, <a href="shell-module.htm#touch-op-bookmarkxx"><b>touch</b></a> returns
<code>nil</code>. Otherwise, <a href="shell-module.htm#touch-op-bookmarkxx"><b>touch</b></a> returns
<code>t</code> if successful, or signals an error.
</p>

<hr>

<hr><h3 id="178"><a name="rm-op-bookmarkxx"></a>rm</h3><h3 id="179">Function</h3><h4 id="180">Package: excl.shell</h4>

<p id="181"><b>Arguments: </b><i>
filespec </i>&amp;key <i>force recurse verbose no-execute</i><i>
</i></p>



<p id="182">
Remove <i>filespec</i> from the file system.  By default
it does not remove directories. The keyword arguments to <a href="shell-module.htm#rm-op-bookmarkxx"><b>rm</b></a> are:
</p>
<ul>
<li id="183">
<i>force</i>: ignore non-existent files
</li>
<li id="184">
<i>recurse</i>: remove the contents of the directory recursively
</li>
<li id="185">
<i>verbose</i>: explain what is being done as it happens
</li>

<li id="186">

<i>no-execute</i>: when true, do not execute any
actions; just print information on what would be done.

</li>

</ul>

<p id="187">
If successful <code>t</code> is returned, otherwise an
error is signaled.
</p>

<hr>

<hr><h3 id="188"><a name="cp-op-bookmarkxx"></a>cp</h3><h3 id="189">Function</h3><h4 id="190">Package: excl.shell</h4>

<p id="191"><b>Arguments: </b><i>
from to
</i>&amp;key <i>make-links make-symbolic-links sync update to-execute force remove-destination ignore-files one-filesystem preserve-symbolic-links preserve-times preserve-ownership prune-directories recurse verbose</i><i>
</i></p>

<p id="192">
This function copies the file specified by <i>from</i>
to a file specified by <i>to</i>. If
<i>from</i> is a directory and the
<i>recurse</i> keyword argument is is <code>nil</code>, or <i>from</i> and
<i>to</i> are the same file, then an error is signaled.
Other situations can also result in an error: they are described
below. <i>from</i> and <i>to</i> should be
objects accepted by <a href="../ansicl/dictentr/pathnam3.htm"><b>pathname</b></a>
(such as pathnames and strings).
</p>
<p id="193">
The large number of keyword arguments allows for support of the modes
described next and support for fine tuning exactly how the copying is
done. Simply copying one file to another can be done with specifying
values for any keyword arguments.
</p>
<p id="194">
This function has five modes:
</p>

<ol>
<li id="195">
<b>link</b>: this is the mode when the <i>make-links</i>
keyword argument is given a non-<code>nil</code> value. In
this mode, <a href="shell-module.htm#cp-op-bookmarkxx"><b>cp</b></a> makes hard links instead of
copying files. Windows does not support links, so this mode is not
supported on Windows.
</li>
<li id="196">
<b>symlink</b>: this is the mode when the
<i>make-symbolic-links</i> keyword argument is given a
non-<code>nil</code> value. In this mode, <a href="shell-module.htm#cp-op-bookmarkxx"><b>cp</b></a> makes symbolic links instead of
copying files.  If the value is `:relative', then relative symlinks
are created instead of absolute ones. Windows does not support links,
so this mode is not supported on Windows.
</li>
<li id="197">
<b>update</b>: this is the mode when the <i>update</i>
keyword argument is given a non-<code>nil</code> value. In
this mode, <a href="shell-module.htm#cp-op-bookmarkxx"><b>cp</b></a> only copies a file when the
source file (<i>from</i>) is newer than the destination
file (<i>to</i>), or when the destination file is
missing, or when the destination file is a different size.
</li>
<li id="198">
<b>sync</b>: this is the mode when the <i>sync</i>
keyword argument is given a non-<code>nil</code>
value. This mode is like <b>update</b> mode, except when directories
are involved delete files which are in the destination
(<i>to</i>) but not in the source
(<i>from</i>).
</li>
<li id="199">
<b>normal</b>: this is the mode when the none of the above keywords
(<i>make-links</i>,
<i>make-symbolic-links</i>, <i>update</i>,
and <i>sync</i>) have a non-<code>nil</code>
value. Plain vanilla copying of files is done
</li>
</ol>

<p id="200">
It is an error if more than one of <i>make-links</i>,
<i>make-symbolic-links</i>, <i>update</i>,
and <i>sync</i> is non-<code>nil</code>.
</p>
<p id="201">
The following options control how the copy is done, aside from the modes
given above.
</p>

<ul>
<li id="202">
<i>force</i>: when specified true, if an existing
destination file (<i>to</i>) cannot be opened, remove it
and try again.
</li>
<li id="203">
<i>remove-destination</i>: when specified true, remove
each destination file before copying.
</li>
<li id="204">
<i>ignore-files</i>: if non-<code>nil</code>, the value should be a string which is a regular
expression, or the keyword <code>:backup</code>, or a list of
such strings with or without <code>:backup</code>. When
non-<code>nil</code>, ignore files that match the provided
regular expression, or any regular expression in the provided list of
regular expressions. <code>:backup</code> is shorthand for a
regular expression that matches GNU Emacs backup files (files that
start with <b>#</b> or end with
<b>~</b>). <i>ignore-files</i> is only applied to files
in subdirectories found when recursing.
</li>
<li id="205">
<i>one-filesystem</i>: when true, skip subdirectories
that are on different filesystems from the one that the copy started
on.
</li>
<li id="206">
<i>preserve-symbolic-links</i>: if non-<code>nil</code>, then symbolic links themselves are copied,
instead of the files or directories they reference. If <code>nil</code>, symbolic links which point to directories will
be followed, if the <i>recurse</i> keyword is given and
non-<code>nil</code>. Windows does not support links, so
this argument is not supported on Windows.
</li>
<li id="207">
<i>preserve-times</i>: when true, preserve file creation
and modification times, if possible.
</li>
<li id="208">
<i>preserve-ownership</i>: when true, preserve file
ownership (user and group, must be <b>root</b>).
</li>
<li id="209">
<i>recurse</i>: when true, descend into directories when
copying.
</li>
<li id="210">
<i>prune-directories</i>: when given an appropriate
non-<code>nil</code>, allow copy to abort descent into
certain directories. The value of this keyword has the same meaning as
the value of the keyword of the same name to the function <a href="operators/excl/map-over-directory.htm"><b>map-over-directory</b></a>.
</li>
<li id="211">
<i>no-execute</i>: when true, do not execute any
actions, just print information on what would be done.
</li>
<li id="212">
<i>verbose</i>: when true, print information about what
is being copied. The value can be a function which should expect
arguments: <i>what</i> (which will be one of the
following keywords: <code>:skipping</code>, <code>:unlink</code>,
<code>:creating-directories</code>, <code>:link</code>,
<code>:symlink</code> or <code>:copy</code>),
<i>file1</i>, a filename, and an optional
<i>file2</i>, a second filename. Specifying <code>t</code> is roughly equivalent to this functional value:
<pre id="213">
  (lambda (what file1 &optional file2)
    (if* file2
      then (format t ";; ~a ~a to ~a~%" what file1 file2)
      else (format t ";; ~a ~a~%" what file)))
</pre>
<p id="214">
<i>what</i> will vary depending on the mode.
</p>
</li>
</ul>

<p id="215">
The type of the arguments (i.e. whether a file has a bearing on the
operation in each mode. The meaningful combinations are given in the
table below.
</p>
<p id="216">
In the <b>Comments</b> column of the table the following notation is used:
</p>
<ul>
<li id="217">
<b>@</b> means a symbolic link is dereferenced (the file to which the
symlink points to is what is used instead of the argument itself), and
if the file is not a symbolic link then the @ can be ignored.
</li>
<li id="218">
<b>a -&gt; b</b> means <b>a is copied to b</b>
</li>
<li id="219">
<b>[<i>n</i>]</b>: refer to note <i>n</i> after the table.
</li>
</ul>

<p id="220">
The first two sections of this table are the default behavior, without
any keyword arguments (i.e., `normal' mode) specified non-<code>nil</code>.  The first shows what happens when neither file
argument is a link. The second (which applies to UNIX only since
Windows does not support links) shows what happens when one or both of
the file arguments is a link. The third section of the table
represents non-default behavior using a non-<code>nil</code> value of
<i>preserve-symbolic-links</i>.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error [1]</td>
  </tr>
</table>

<p id="221">
In this second section, one or both of the file arguments is a
link. Again, all keyword arguments are assumed to be <code>nil</code>. In particular
<i>preserve-symbolic-links</i> is <code>nil</code> so links are dereferenced. Windows does not
support links so this section of the table applies to UNIX only.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; @b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; @b [3]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error [1]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error [1]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error [1]</td>
  </tr>
</table>

<p id="222">
In this third section, one or both of the file arguments is a
link. Again, all keyword arguments are assumed to be <code>nil</code>. In particular
<i>preserve-symbolic-links</i> is <code>t</code> so links are not dereferenced. Windows does not
support links so this section of the table applies to UNIX only.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; @b [3]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b [2]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error [1]</td>
  </tr>
</table>

<h3 id="223">
Notes:
</h3>

<ol>
<li id="224">
only an error in the default case, where
<i>remove-destination</i> is <code>nil</code>.
</li>
<li id="225">
destination file is overwritten if permissions and ownership allow,
and if they do not an error is signalled -- if the
<i>force</i> keyword value is non-<code>nil</code>, then the destination is forcibly removed before
the copy.
</li>
<li id="226">
similiar to <b>2</b> except the file to which the destination symbolic
link points is the object of the operation.
</li>
</ol>
<h3 id="227">
cp return value
</h3>
<p id="228">
If successful the return value (an integer specifying a number of
files) for each mode is given by the following table, otherwise an
error is signaled:
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="30" VALIGN="TOP"><b>mode</b></td>
    <td WIDTH="30" VALIGN="TOP"><b># of files</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">link</td>
    <td WIDTH="33%" VALIGN="TOP">linked</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">symlink</td>
    <td WIDTH="33%" VALIGN="TOP">symlinked</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">update</td>
    <td WIDTH="33%" VALIGN="TOP">copied</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">sync</td>
    <td WIDTH="33%" VALIGN="TOP">copied and removed</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">normal</td>
    <td WIDTH="33%" VALIGN="TOP">copied</td>
  </tr>
</table>

<hr>

<hr><h3 id="229"><a name="mv-op-bookmarkxx"></a>mv</h3><h3 id="230">Function</h3><h4 id="231">Package: excl.shell</h4>

<p id="232"><b>Arguments: </b><i>
from to
</i>&amp;key <i>force verbose no-execute dereference-source-directory</i><i>
</i></p>

<p id="233">
Move file <i>from</i> to <i>to</i>. If a
directory is moved across filesystem boundaries, then it is copied and
then the original is removed.
</p>
<p id="234">
The keyword arguments are as follows:
</p>
<ul>
<li id="235">
<i>force</i>: when non-<code>nil</code>, the destination is forcibly removed before the
move.
</li>
<li id="236">
<i>dereference-source-directory</i>: when non-<code>nil</code> and the source directory is a symbolic link, then
instead of moving the symbolic link, the file it points to is moved.
A non-<code>nil</code> value is the same as a trailing
slash on a source argument to GNU
<b>mv</b>.
</li>
<li id="237">
<i>no-execute</i>: when non-<code>nil</code>, do not execute any actions, just print out what
would be done.
</li>
<li id="238">
<i>verbose</i>: when true, print information about what
is being copied. The value can be a function which should expect
arguments: <i>what</i> (which will be one of the
following keywords: <code>:remove</code>, <code>:move</code>,
or <code>:copy</code>),
<i>file1</i>, a filename, and an optional
<i>file2</i>, a second filename. Specifying <code>t</code> is roughly equivalent to this functional value:
<pre id="239">
  (lambda (what file1 &optional file2)
    (if* file2
      then (format t ";; ~a ~a to ~a~%" what file1 file2)
      else (format t ";; ~a ~a~%" what file)))
</pre>
<p id="240">
<i>what</i> will vary depending on whether a directory
is being moved to another filesystem.
</p>
</li>
</ul>

<p id="241">
The type of the file arguments (<i>from</i> and
<i>to</i>) has a bearing on the operation of <a href="shell-module.htm#mv-op-bookmarkxx"><b>mv</b></a>. The meaningful combinations
are given in the table below.
</p>
<p id="242">
In the <b>Comments</b> column of the table the following notation is used:
</p>
<ul>
<li id="243">
<b>@</b> means a symbolic link is dereferenced (the file to which the
symlink points to is what is used instead of the argument itself), and
if the file is not a symbolic link then the @ can be ignored.
</li>
<li id="244">
<b>a -&gt; b</b> means <b>a is moved to b</b>
</li>
<li id="245">
<b>rm b</b> means <b>b</b> is removed before the move.
</li>
<li id="246">
<b>[<i>n</i>]</b>: refer to note <i>n</i> after the table.
</li>
</ul>

<p id="247">
The first two sections of this table are the default behavior, without
any keyword arguments specified non-<code>nil</code>. The
first shows what happens when no directory specified as a value of the
<i>from</i> is a link. The second shows what happens when a
directory specified as a value of the <i>from</i> is a
link and <i>dereference-source-directory</i> is <code>nil</code>. The third section of the table shows what
happens when a directory specified as a value of the
<i>from</i> is a link and
<i>dereference-source-directory</i> is non-<code>nil</code>.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
</table>

<p id="248">
In this second section, the <i>from</i> is a linked
directory and <i>dereference-source-directory</i> is
<code>nil</code>.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">rm b; a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b/a</td>
  </tr>
</table>

<p id="249">
In this third section, the <i>from</i> is a linked
directory and <i>dereference-source-directory</i> is
non-<code>nil</code>.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b [1]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a [1]</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">@a -&gt; b/a [1]</td>
  </tr>
</table>

<h3 id="250">
Notes:
</h3>

<p id="251">
[1]
this operation leaves a dangling symbolic link. The GNU <b>mv</b> in
fileutils version 4.1 has a bug, in our estimation. If you do this:
</p>
<pre id="252">
mkdir dir
ln -s dir link
mv link/ dir2
</pre>
<p id="253">
The trailing slash is the same as
<code>:dereference-source-directory t</code>, according to the
fileutils documentation. The above commands cause
<i>dir</i> to be copied to <i>dir2</i>,
and not the correct result, a symbolic link <i>link</i>
that points to <i>dir</i> and <i>dir</i>
renamed to <i>dir2</i>. The <b>fileutils</b> documentation
says this:
</p>
<pre id="254">
    Warning: If you try to move a symlink that points to a directory,
    and you specify the symlink with a trailing slash, then `mv' doesn't
    move the symlink but instead moves the directory referenced by the
    symlink.
</pre>
<p id="255">
In other words, the fileutils documentation says that it will do the
right thing, but it does not.
</p>

<h3 id="256">
mv return value
</h3>
<p id="257">
If <a href="shell-module.htm#mv-op-bookmarkxx"><b>mv</b></a> is successful, <code>t</code> is returned; otherwise an error is signalled.
</p>

<hr>

<hr><h3 id="258"><a name="ln-op-bookmarkxx"></a>ln</h3><h3 id="259">Function</h3><h4 id="260">Package: excl.shell</h4>

<p id="261"><b>Arguments: </b><i>
from to </i>&amp;key <i>symbolic no-dereference-destination force relative no-execute verbose</i><i>
</i></p>

<p id="262">
This function creates a link to the <i>from</i> with the
name <i>to</i>. It works on UNIX only since Windows does
not support symbolic links.
</p>
<p id="263">
The keyword arguments are:
</p>
<ul>
<li id="264">
<i>symbolic</i>: when true, create a symbolic instead of
hard link.
</li>
<li id="265">
<i>force</i>: when true, remove existing destination
files before linking.
</li>
<li id="266">
<i>no-dereference-destination</i>: if non-<code>nil</code> then treat <i>to</i> that is a
symbolic link to a directory as if it were a normal file.
</li>
<li id="267">
<i>relative</i>: when true, do not do full merging on
<i>from</i> and <i>to</i> so that a
relative symbolic link can be created.
</li>
<li id="268">
<i>no-execute</i>: when true, do not execute any actions, just print out a description of what would be done.
</li>
<li id="269">
<i>verbose</i>: when true, print information about what
is being linked. The value can be a function which should expect
arguments: <i>what</i> (which will be one of the
following keywords: <code>:symlink</code> 
or <code>:link</code>),
<i>file1</i>, a filename, and an optional
<i>file2</i>, a second filename. Specifying <code>t</code> is roughly equivalent to this functional value:
<pre id="270">
  (lambda (what file1 &optional file2)
    (if* file2
      then (format t ";; ~a ~a to ~a~%" what file1 file2)
      else (format t ";; ~a ~a~%" what file)))
</pre>
<p id="271">
<i>what</i> will vary depending on whether symbolic or
hard links are being created.
</p>
</li>
</ul>

<p id="272">
The type of the arguments has a bearing on the operation of <a href="shell-module.htm#ln-op-bookmarkxx"><b>ln</b></a>. The
meaningful combinations are given in the table below.
</p>
<p id="273">
In the <b>Comments</b> column of the table the following notation is
used: <b>b -&gt; a</b> means <b>a link is made from b to a</b>.
</p>
<p id="274">
The first two sections of this table are the default behavior, without
any keyword arguments specified non-<code>nil</code>. The
first shows what happens when no directory specified as a value of the
<i>to</i> is a link. The second shows what happens when a
directory specified as a value of the <i>to</i> is a
link and <i>no-dereference-destination</i> is <code>nil</code>. The third section of the table shows what
happens when a directory specified as a value of the
<i>to</i> is a link and
<i>no-dereference-destination</i> is non-<code>nil</code>.
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">[non-existent]</td>
    <td WIDTH="34%" VALIGN="TOP">a -&gt; b</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
</table>

<p id="275">
The second section of the table shows what happens when a
directory specified as a value of the <i>to</i> is a
link and <i>no-dereference-destination</i> is <code>nil</code>. 
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">b/a -&gt; a</td>
  </tr>
</table>

<p id="276">
The third section of the table shows what happens when a directory
specified as a value of the <i>to</i> is a link and
<i>no-dereference-destination</i> is non-<code>nil</code> (such as when <code>--no-dereference</code>
is specified to <b>ln</b>).
</p>

<table BORDER="1" CELLSPACING="1" CELLPADDING="7">
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><b>from (a)</b></td>
    <td WIDTH="33%" VALIGN="TOP"><b>to (b)</b></td>
    <td WIDTH="34%" VALIGN="TOP"><b>Comments</b></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">file (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (non-link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="33%" VALIGN="TOP">directory (link)</td>
    <td WIDTH="34%" VALIGN="TOP">error</td>
  </tr>
</table>

<h3 id="277">
Value returned by ln
</h3>

<p id="278">
If successful, <a href="shell-module.htm#ln-op-bookmarkxx"><b>ln</b></a> returns <code>t</code>; otherwise an error is signaled.
</p>

<hr>

<hr><h3 id="279"><a name="die-op-bookmarkxx"></a>die</h3><h3 id="280">Function</h3><h4 id="281">Package: excl.shell</h4>

<p id="282"><b>Arguments: </b><i>
format-string </i> &amp;rest <i>format-args</i><i>
</i></p>

<p id="283">
Print an error message and then exit Lisp. The error message is sent to
a stream bound to <code>stderr</code>.
</p>
<p id="284">
This function does not return, and the exit status of the process executing
it will be 1.
</p>

<hr>

<hr><h3 id="285"><a name="shell-not-supported-condition-class-bookmarkxx"></a>shell-not-supported-condition</h3><h3 id="286">Class</h3><h4 id="287">Package: excl.shell</h4>

<p id="288">
Any function which is not supported on a particular version of Lisp
signals an error of this type.  It is a subclass of `error'.
</p>

<hr>

</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/shell-module.htm">8.1 version</a></td></tr></table></html>