<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Implementation</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/implementation.htm">8.1 version</a></td></tr></table><h1 id="2">Details of the Allegro CL Implementation</h1><p id="3">This document contains the following sections:</p><a href="#implementation-intro-1">1.0 Implementation introduction</a><br><a href="#data-types-1">2.0 Data types and array types</a><br><a href="#arrays-1">3.0 Arrays and short arrays</a><br>&nbsp;&nbsp;&nbsp;<a href="#short-arrays-2">3.1 Array short-ness</a><br>&nbsp;&nbsp;&nbsp;<a href="#array-like-structures-2">3.2 Relationship of arrays to array-like structures</a><br>&nbsp;&nbsp;&nbsp;<a href="#short-array-types-2">3.3 Short-arrays in the type hierarchy</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#string-comp-3">3.3.1 String comparisons with short strings</a><br><a href="#characters-1">4.0 Characters</a><br><a href="#autoloading-1">5.0 Autoloading</a><br>&nbsp;&nbsp;&nbsp;<a href="#autoload-location-2">5.1 Where the autoloaded files are located</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-symbols-2">5.2 Common Lisp symbols</a><br>&nbsp;&nbsp;&nbsp;<a href="#major-extensions-2">5.3 Major extensions</a><br>&nbsp;&nbsp;&nbsp;<a href="#load-modules-2">5.4 How to load modules </a><br><a href="#implementation-misc-1">6.0 Miscellaneous implementation details</a><br>&nbsp;&nbsp;&nbsp;<a href="#extensions-to-clfuns-one-2">6.1 Extensions to cl:make-package, cl:intern,  cl:disassemble, cl:truename, cl:probe-file, cl:open, cl:apropos, etc.</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-make-package-3">6.1.1 Extensions to cl:make-package</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-intern-3">6.1.2 Extensions to cl:intern</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-disassemble-3">6.1.3 Extensions to cl:disassemble</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-truename-3">6.1.4 Extensions to cl:truename</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-probe-file-3">6.1.5 Extensions to cl:probe-file</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-open-3">6.1.6 Extensions to cl:open</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-apropos-3">6.1.7 Extensions to cl:apropos</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#extensions-to-interactive-stream-p-3">6.1.8 Extensions to cl:interactive-stream-p</a><br>&nbsp;&nbsp;&nbsp;<a href="#with-open-file-2">6.2 A comment about with-open-file and timing hazards</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-directory-2">6.3 cl:directory</a><br>&nbsp;&nbsp;&nbsp;<a href="#reader-macros-2">6.4 Reader macros and cl:*features*</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#rm-table-3">6.4.1 Features present or  missing from *features* in Allegro CL</a><br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<a href="#nested-conditionals-3">6.4.2 The issue of nested conditionals in Allegro CL</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-random-2">6.5 cl:random and cl:make-random-state</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-make-hash-table-2">6.6 cl:make-hash-table</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-make-array-2">6.7 cl:make-array</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-namestring-2">6.8 cl:namestring</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-defpackage-2">6.9 cl:defpackage and cl:in-package</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-file-length-2">6.10 cl:file-length</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-file-write-date-2">6.11 cl:file-write-date</a><br>&nbsp;&nbsp;&nbsp;<a href="#cl-lisp-implementation-version-2">6.12 cl:lisp-implementation-version</a><br>&nbsp;&nbsp;&nbsp;<a href="#fast-writing-reading-floats-2">6.13 Functionality for quickly writing and reading floats</a><br>&nbsp;&nbsp;&nbsp;<a href="#provide-require-2">6.14 cl:provide and cl:require</a><br>&nbsp;&nbsp;&nbsp;<a href="#macroexpand-2">6.15 cl:macroexpand and cl:macroexpand-1</a><br>&nbsp;&nbsp;&nbsp;<a href="#simple-condition-format-2">6.16 cl:simple-condition-format-arguments and cl:simple-condition-format-control</a><br>&nbsp;&nbsp;&nbsp;<a href="#user-homedir-pathname-2">6.17 What user-homedir-pathname does on Windows</a><br>&nbsp;&nbsp;&nbsp;<a href="#readtable-2">6.18 The standard readtable is read-only, affect on with-standard-io-syntax</a><br>&nbsp;&nbsp;&nbsp;<a href="#pprint-2">6.19 Speed and pretty printing</a><br>&nbsp;&nbsp;&nbsp;<a href="#class-precedence-list-2">6.20 class-precedence-list: when is it available?</a><br>&nbsp;&nbsp;&nbsp;<a href="#infinities-nans-2">6.21 Floating-point infinities and NaNs, and floating-point underflow and overflow</a><br>&nbsp;&nbsp;&nbsp;<a href="#nat-vs-int-2">6.22 The :nat and :unsigned-nat types</a><br>&nbsp;&nbsp;&nbsp;<a href="#print-follow-2">6.23 Allegro CL print variables can follow the CL print variable value</a><br>&nbsp;&nbsp;&nbsp;<a href="#app-64bit-2">6.24 64 bit Allegro CL Implementations</a><br><a href="#acl-and-ansi-1">7.0 Allegro CL and the ANSI CL standard</a><br>&nbsp;&nbsp;&nbsp;<a href="#cltl1-compatibility-2">7.1 Compatibility with pre-ANSI CLtL-1 in Allegro CL</a><br>&nbsp;&nbsp;&nbsp;<a href="#compile-time-too-2">7.2 Other package changes and compile-time-too behavior</a><br>&nbsp;&nbsp;&nbsp;<a href="#function-data-type-2">7.3 The function data type</a><br>&nbsp;&nbsp;&nbsp;<a href="#clos-and-mop-2">7.4 CLOS and MOP</a><br>&nbsp;&nbsp;&nbsp;<a href="#clos-and-mop-conformance-2">7.5 CLOS and MOP conformance</a><br>&nbsp;&nbsp;&nbsp;<a href="#clos-optimization-2">7.6 CLOS optimization</a><br><a href="#function-specs-1">8.0 Function specs (fspecs)</a><br><a href="#low-level-1">9.0 Some low-level functionality</a><br>&nbsp;&nbsp;&nbsp;<a href="#getwinmainargs2-2">9.1 Windows: GetWinMainArgs2</a><br><a href="#compliance-1">10.0 Conformance with the ANSI specification</a><br><hr><hr><h2 id="4"><a name="implementation-intro-1">1.0 Implementation introduction</a></h2>

<p id="5">
The Common Lisp standard is deliberately vague on many of the
specifics of an implementation. The authors of that book were aware
that implementation details are dependent on the nature of the
hardware and the operating system, as well as the differing priorities
of the implementors and the different user communities. This document
details some of the specifics of the implementation of and extensions
in Allegro CL.
</p>

<hr><hr><h2 id="6"><a name="data-types-1">2.0 Data types and array types</a></h2>

<p id="7">
Allegro CL contains all of the required Common Lisp data
types. Fixnums are signed 30-bit quantities (29 bits of value, one
sign bit) on 32-bit machines and signed 61-bit quantities (60 bits of
value, one sign bit) on 64 bit machines. There are two distinct
floating-point types on all platforms (32 bit and 64 bit
floats). Short-float and single-float are equivalent and are 32 bit
floats. Double-float and long-float are equivalent and are 64 bit
floats.
</p>
<p id="8">
The distinct array data types are shown in the following list (in the
case of the simple arrays, we use suspension points, `...', to
indicate that there may be any number of dimensions). When you specify
an <i>element-type</i> to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a>, you will get an array whose element
type is <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> applied to the value
specified. Arrays of type <code>t</code> are general
arrays and arrays of any other type are called specialized
arrays. After the list, we give some examples of the types of arrays
created with particular values for <i>element-type</i>.
</p>
<p id="9">
The new short-array type is not mentioned in this list. See
<a href="#arrays-1">Section 3.0 Arrays and short arrays</a> for information on
short-arrays and also on maximum array sizes.
</p>
<p id="10">
Allegro CL allows most types of arrays to be allocated in static space
(where they are never moved or even looked at the the garbage
collector). See <a href="#cl-make-array-2">Section 6.7 cl:make-array</a> for
information on creating such arrays. Only (as noted) arrays of type
<code>t</code> cannot be allocated in static space
(because such arrays usually contain pointers to other Lisp objects
whicxh must be looked at and updated by the garbage collector when the
objects pointed to are relocated).
</p>

<pre id="11">
  (array t)  ;; cannot have :allocation :static, 
             ;; :malloc, or :static-reclaimable as noted above
  (array bit)
  (array (unsigned-byte 4))
  (array (unsigned-byte 8))
  (array (unsigned-byte 16))
  (array (unsigned-byte 32))
  (array (unsigned-byte 64)) [64-bit Lisps only]
  (array character)
  (array single-float)
  (array double-float)
  (array fixnum)
  (array (complex single-float))
  (array (complex double-float))
  (array (signed-byte 8))
  (array (signed-byte 16))
  (array (signed-byte 32))
  (array (signed-byte 64)) [64-bit Lisps only]
  (array nil) 
  (simple-array t (* ...))
  (simple-array bit (* ...))
  (simple-array (unsigned-byte 4) (* ...))
  (simple-array (unsigned-byte 8) (* ...))
  (simple-array (unsigned-byte 16) (* ...))
  (simple-array (unsigned-byte 32) (* ...))
  (simple-array (unsigned-byte 64) (* ...)) [64-bit Lisps only]
  (simple-array character (* ...))
  (simple-array single-float (* ...))
  (simple-array double-float (* ...))
  (simple-array fixnum (* ...))
  (simple-array (signed-byte 8) (* ...))
  (simple-array (signed-byte 16) (* ...))
  (simple-array (signed-byte 32) (* ...))
  (simple-array (signed-byte 64) (* ...)) [64-bit Lisps only]
  (simple-array nil (* ...))
</pre>

<p id="12">
Now let us look at some examples. When we specify
<code>(unsigned-byte 3)</code> as the value of
<i>element-type</i>, we get an array of type
<code>(unsigned-byte 4)</code>:
</p>
<pre id="13">
cl-user(2): (setq fn-arr 
                  (make-array 5 :element-type '(unsigned-byte 3) 
                                :initial-element 0))
#(0 0 0 0 0)
cl-user(3): (array-element-type fn-arr)
(unsigned-byte 4)
cl-user(4): (upgraded-array-element-type '(unsigned-byte 3))
(unsigned-byte 4)
cl-user(5): 
</pre>

<p id="14">
Note that <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> applied to
<code>(unsigned-byte 3)</code> returns <code>(unsigned-byte
4)</code>. Note too that we have specified 0 as the value of the
<i>initial-value</i>. If we had not, the initial value
would be <code>nil</code>, which is not of type
<code>(unsigned-byte 4)</code>.
</p>
<p id="15">
Here is what is returned by <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> for some other
common types:
</p>

<pre id="16">
cl-user(7): (upgraded-array-element-type 'single-float)
single-float
cl-user(8): (upgraded-array-element-type 'double-float)
double-float
cl-user(9): (upgraded-array-element-type 'float)
t
cl-user(10): (upgraded-array-element-type 'integer)
t
cl-user(11): (upgraded-array-element-type 'character)
character
cl-user(12): (upgraded-array-element-type '(signed-byte 6))
(signed-byte 8)
cl-user(13): (upgraded-array-element-type '(unsigned-byte 100))
t
</pre>
<p id="17">
Note that specifying <code>float</code> and
<code>integer</code> both result in arrays of type <code>t</code>, not in specialized arrays. Specifying signed or
unsigned bytes of particular sizes results in that size or bigger, or
possibly <code>t</code>.
</p>
<p id="18">
It is good programming practice to use <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> to determine exactly
what sort of array you will get.
</p>

<h2 id="19">
Stack allocating vectors
</h2>

<p id="20">
Certain types of vectors can be stack allocated, thus saving space in
applications. See <a href="compiling.htm#stack-consing-2">Stack consing, avoiding consing using apply, and
stack allocation</a> in <a href="compiling.htm">compiling.htm</a> for
details.
</p>

<hr><hr><h2 id="21"><a name="arrays-1">3.0 Arrays and short arrays</a></h2>

<p id="22">
Arrays sre stored internally as vectors. The underlying vector
associated with an array is accessible with the macro <a href="operators/excl/with-underlying-simple-vector.htm"><b>excl:with-underlying-simple-vector</b></a>.
</p>
<p id="23">
Release 7.0 contains a new array implementation with larger array size
limits: now <a href="../ansicl/dictentr/most-pos.htm"><code>most-positive-fixnum</code></a>. In earlier releases, the
limit in 32-bit Lisps was <code>(expt 2 24)</code>, a value 32
times smaller. In 64-bit images, the limit was <code>(expt 2
56)</code>, 16 times smaller than the new <a href="../ansicl/dictentr/most-pos.htm"><code>most-positive-fixnum</code></a> limit.
</p>
<p id="24">
Because the structure of arrays had to change in order to implement
this change, and because there exists the possibility that users have
done some coding which assumes a particular arrangement for arrays
(such as is the case for the <i>lisp.h</i> file for
compiling C code to recognize lisp structure), we have retained the
older array types with their smaller limits, and have renamed them to
be <b>short arrays</b>.
</p>
<p id="25">
The <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a> function now
accepts the additional <i>:short</i> keyword
argument. <i>:short</i> defaults to <code>nil</code> and when <code>nil</code>, a (long)
array is produced, and when specified true, a short array (that used
in earlier releases) is produced, with these exceptions:
</p>
<ul>
<li id="26">
When the <i>:element-type</i> argument is specified
<code>nil</code> a (long) array is produced, regardless of
the value of <i>:short</i>.
</li>
<li id="27">
When the <i>:element-type</i> argument is specified
<code>excl::foreign</code>, a short array is produced,
regardless of the value of <i>:short</i>.
</li>
</ul>
<p id="28">
The <a href="#short-arrays-2">next section</a>
discusses these and other anomalies.
</p>
<p id="29">
The new functions <a href="operators/excl/short-vector.htm"><b>short-vector</b></a> and <a href="operators/excl/short-string.htm"><b>short-string</b></a> create short vectors and short
strings, analogously to the standard functions <a href="../ansicl/dictentr/vector.htm"><b>vector</b></a> and <a href="../ansicl/dictentr/string0.htm"><b>string</b></a>.
</p>


<hr><h2 id="30"><a name="short-arrays-2">3.1 Array short-ness</a></h2>

<p id="31">
Most of the array set is symmetrical with respect to short-ness; i.e.
a call to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a> for most
element types will either produce a simple-array or short-simple-array
of the specified element-type, based on the
<i>:short</i> argument, (and, for specifications which
normally create non-simple arrays, these results will be either arrays
or short-arrays of the specified element-type) with the following
exceptions:
</p>
<ol>
<li id="32">
The fixnum element-type has been added to (long) arrays only, if
specified as short array, the element-type is upgraded to
<code>(unsigned-byte 32)</code>. For example:
<pre id="33">
CL-USER(2): (type-of (make-array 10 :element-type 'fixnum))
(SIMPLE-ARRAY FIXNUM (10))
CL-USER(3): (type-of (make-array 10 :element-type 'fixnum :short t))
(SHORT-SIMPLE-ARRAY (SIGNED-BYTE 32) (10))
CL-USER(4): 
</pre>
</li>
<li id="34">
An element-type specification of <code>nil</code> always
results in a (long) array:
<pre id="35">
CL-USER(4): (type-of (make-array 0 :element-type nil))
(SIMPLE-ARRAY NIL (0))
CL-USER(5): (type-of (make-array 0 :element-type nil :short t))
(SIMPLE-ARRAY NIL (0))
CL-USER(6): 
</pre>
</li>
<li id="36">
An element-type of <code>excl::foreign</code> always results in
a short array:
<pre id="37">
CL-USER(6): (type-of (make-array 5 :element-type 'excl::foreign))
(SHORT-SIMPLE-ARRAY FOREIGN (5))
CL-USER(7): (type-of (make-array 5 :element-type 'excl::foreign :short t))
(SHORT-SIMPLE-ARRAY FOREIGN (5))
CL-USER(8): 
</pre>
</li>
</ol>
<p id="38">
In all other cases, the "short-ness" of arrays depends only on the
<i>:short</i> argument to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a>:
</p>
<pre id="39">
CL-USER(8): (type-of (make-array 5 :element-type 'double-float))
(SIMPLE-ARRAY DOUBLE-FLOAT (5))
CL-USER(9): (type-of (make-array 5 :element-type 'double-float :short nil))
(SIMPLE-ARRAY DOUBLE-FLOAT (5))
CL-USER(10): (type-of (make-array 5 :element-type 'double-float :short t))
(SHORT-SIMPLE-ARRAY DOUBLE-FLOAT (5))
CL-USER(11): 
</pre>



<hr><h2 id="40"><a name="array-like-structures-2">3.2 Relationship of arrays to array-like structures</a></h2>

<p id="41">
At a low level, and below the level most programmers will ever need
to know, some other CL objects retain the same basic structure
(and thus the allocation limitations) as short arrays, though these
can certainly be reviewed and addressed as necessary in the future.
</p>
<p id="42">
They are:
</p>

<ul>
<li id="43">
objects created by defstruct
</li>
<li id="44">
objects created by make-instance (note: the instance objects
themselves are short-like, but the wrapper and slots vector for each
instance is a normal (long) vector).
</li>
<li id="45">
flavor objects (though the mapping tables are normal vectors)
</li>
<li id="46">
Gates in the multiprocessing package (see <a href="operators/mp/open-gate.htm"><b>open-gate</b></a>).
</li>
</ul>

<p id="47">
These objects should never be arguments to <a href="../ansicl/dictentr/svref.htm"><b>svref</b></a>, even if they had been punned on
simple-vectors in unsafe code (`punned' means declared to be
simple-vectors even when they are not).  If such punning is still
needed for these objects, use <a href="operators/excl/ssvref.htm"><b>ssvref</b></a>. 
</p>



<hr><h2 id="48"><a name="short-array-types-2">3.3 Short-arrays in the type hierarchy</a></h2>


<p id="49">
Short-arrays are not Common Lisp standard types. Some of the
relationships between short-arrays and normal (long) arrays are
intuitive, but some are not. For example, a short-vector of
element-type character is <a href="../ansicl/dictentr/arrayp.htm"><b>arrayp</b></a>, and is <a href="operators/excl/short-array-p.htm"><b>short-array-p</b></a>, but is not <a href="../ansicl/dictentr/stringp.htm"><b>stringp</b></a>, though it is <a href="operators/excl/short-string-p.htm"><b>short-string-p</b></a> (this is because only (array
character (*)) is <a href="../ansicl/dictentr/stringp.htm"><b>stringp</b></a>.
And a short-simple-vector (i.e. of <code>(short-simple-array t
(*))</code> type) is <a href="operators/excl/short-simple-vector-p.htm"><b>short-simple-vector-p</b></a>, but is not <a href="../ansicl/dictentr/simple-3.htm"><b>simple-vector-p</b></a>, because only
<code>(simple-array t (*))</code> is a simple-vector.
</p>
<p id="50">
Most other relationships between short array types are consistent and
<a href="../ansicl/dictentr/type-of.htm"><b>type-of</b></a>, <a href="../ansicl/dictentr/typep.htm"><b>typep</b></a>, and <a href="../ansicl/dictentr/subtypep.htm"><b>subtypep</b></a> know about them. 
</p>

<p id="51">
The list of short array types, classes, and utility functions
follows. The symbols naming them are the standard Common Lisp symbol
names with <code>short-</code> prepended. All are in the
<code>excl</code> package. 
</p>
<p id="52">
All short array types are subtypes of
<a href="../ansicl/dictentr/array.htm"><code>array</code></a>, but not subtypes
of any other Common Lisp array type. Their type hierarchy is the same
as the corresponding Common Lisp array type hierarchy.
</p>
<p id="53">
The various predicates also correspond to their standard Common Lisp
counterparts. <a href="../ansicl/dictentr/arrayp.htm"><b>arrayp</b></a> and
(where appropriate) <a href="../ansicl/dictentr/vectorp.htm"><b>vectorp</b></a>
return true when applied to short arrays, but no other Common Lisp
array predicate returns true when applied to a short array.
</p>

<ul>
<li id="54">
<code>short-array</code> (a type, not documented on its
own page, see <a href="../ansicl/dictentr/array.htm"><code>array</code></a>) 
</li>
<li id="55">
<a href="variables/excl/short-array-dimension-limit.htm"><code>short-array-dimension-limit</code></a>
</li>
<li id="56">
<a href="variables/excl/short-array-total-size-limit.htm"><code>short-array-total-size-limit</code></a> (a constant)
</li>
<li id="57">
<a href="operators/excl/short-array-p.htm"><b>short-array-p</b></a> (a function)
</li>
<li id="58">
<code>short-base-string</code> (a type, not documented on its
own page, see <a href="../ansicl/dictentr/base-str.htm"><code>base-string</code></a>)
</li>
<li id="59">
<code>short-bit-vector</code> (a type, not documented on its
own page, see <a href="../ansicl/dictentr/bit-vect.htm"><code>bit-vector</code></a>) 
</li>
<li id="60">
<a href="operators/excl/short-bit-vector-p.htm"><b>short-bit-vector-p</b></a> (a function)
</li>
<li id="61">
<code>short-simple-array</code> (a type, not documented on its
own page, see <a href="../ansicl/dictentr/simple-a.htm"><code>simple-array</code></a>)
</li>
<li id="62">
<a href="operators/excl/short-simple-array-p.htm"><b>short-simple-array-p</b></a> (a function)
</li>
<li id="63">
<code>short-simple-base-string</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/simple-1.htm"><code>simple-base-string</code></a>)
</li>
<li id="64">
<code>short-simple-bit-vector</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/simple-b.htm"><code>simple-bit-vector</code></a>)
</li>
<li id="65">
<a href="operators/excl/short-simple-bit-vector-p.htm"><b>short-simple-bit-vector-p</b></a> (a
function)
</li>
<li id="66">
<code>short-simple-string</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/simple-s.htm"><code>simple-string</code></a>)
</li>
<li id="67">
<a href="operators/excl/short-simple-string-p.htm"><b>short-simple-string-p</b></a> (a
function)
</li>
<li id="68">
<code>short-simple-vector</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/simple-v.htm"><code>simple-vector</code></a>)
</li>
<li id="69">
<a href="operators/excl/short-simple-vector-p.htm"><b>short-simple-vector-p</b></a> (a function)
</li>
<li id="70">
<code>short-string</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/string.htm"><code>string</code></a>)
</li>
<li id="71">
<a href="operators/excl/short-string-p.htm"><b>short-string-p</b></a>
</li>
<li id="72">
<code>short-vector</code> (a type, not documented on
its own page, see <a href="../ansicl/dictentr/vector0.htm"><code>vector</code></a>)
</li>
<li id="73">
<a href="operators/excl/short-vector-p.htm"><b>short-vector-p</b></a>
</li>
</ul>

<p id="74">
There are the following two types. Each is defined by a <a href="../ansicl/dictentr/deftype.htm"><b>deftype</b></a> form, the source is shown.
</p>

<ul>
<li id="75">
<code>dual-simple-array</code>: a type, defined by the form 
<pre id="76">
(deftype dual-simple-array (elem dims)
  `(or (simple-array ,elem ,dims) (excl:short-simple-array ,elem ,dims)))
</pre>
</li>
<li id="77">
<code>dual-simple-vector</code>: a type, defined by the form 
<pre id="78">
(deftype dual-simple-vector ()
  `(or simple-vector excl:short-simple-vector))
</pre>
</li>
</ul>

<h3 id="79">
aref and other accessors
</h3>

<p id="80">
<a href="../ansicl/dictentr/aref.htm"><b>aref</b></a> and its <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> works on short arrays and normal
arrays. But the specialized accessors <a href="../ansicl/dictentr/bitsbit.htm"><b>sbit</b></a>, <a href="../ansicl/dictentr/charscha.htm"><b>schar</b></a>, and <a href="../ansicl/dictentr/svref.htm"><b>svref</b></a> and their <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a>'s only work on normal arrays (it is an
error to pass a short array to them). The following three specialized
short array accessors work, in the same way as their Common Lisp
counterparts, on short arrays.
</p>

<ul>
<li id="81">
<a href="operators/excl/ssbit.htm"><b>ssbit</b></a>
</li>
<li id="82">
<a href="operators/excl/sschar.htm"><b>sschar</b></a>
</li>
<li id="83">
<a href="operators/excl/ssvref.htm"><b>ssvref</b></a>
</li>
</ul>

<p id="84">
In optimized code, care must be taken to match the kind of array with
its accessor; <a href="../ansicl/dictentr/svref.htm"><b>svref</b></a> will
open-code to a single instruction access that assumes a normal (long)
vector of type <code>t</code>.  If the vector is instead a
short vector, the access might be to a nonexistent slot beyond the
allocation of the short-simple-vector. In the other direction, <a href="operators/excl/ssvref.htm"><b>ssvref</b></a> will open-code to a single
instruction access that assumes a short array.  An inverse-ssvref of
the zeroth "slot" of a normal (long) array will overwrite the length
word, and will result in eventual GC corruption.
</p>
<p id="85">
An <a href="../ansicl/dictentr/aref.htm"><b>aref</b></a> in optimized code will
generate the correct code if the declaration is missing or matches the
kind of array that will actually be accessed.  If it is unknown
whether the array being accessed will be short or normal (long), then
a declaration of <code>dual-simple-array</code> or
<code>dual-simple-vector</code> will generate the right code
(but code which is still much faster than an out-of-line call to
<a href="../ansicl/dictentr/aref.htm"><b>aref</b></a> or its inverse).
</p>
<p id="86">
It is strongly recommended, in the face of all of these dangers, that
use of short-arrays is kept at a minimum.  The space-savings of
short-arrays over normal arrays is on average one word per array
(depending on the parity of the size; odd-sized short-arrays will save
2 words, and even-sized short-arrays will not save any memory) so the
desirability of short arrays is very small when compared to the risks.
</p>

<hr><h2 id="87"><a name="string-comp-3">3.3.1 String comparisons with short strings</a></h2>

<p id="88">
Because short strings are not true strings (i.e. are not <a href="../ansicl/dictentr/stringp.htm"><b>stringp</b></a>), short strings are not
permitted as arguments to string comparison functions such as <a href="../ansicl/dictentr/stringst.htm"><b>string=</b></a> and <a href="../ansicl/dictentr/stringst.htm"><b>string-lessp</b></a>. An error will be
signaled if you pass a short string as an argument to a string
comparison function.
</p>
<p id="89">
If you need to compare short strings with each other or with regular
strings, you can use <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a>
for equality tests. You must write your own functions for greater than
or less than tests, such as the following:
</p>
<pre id="90">
(defun my-string-lessp (s1 s2)
  (let ((l1 (length s1)) (l2 (length s2)) minl)
    (setq minl (min l1 l2))
    (dotimes (i minl)
      (if (char-lessp (aref s1 i) (aref s2 i)) 
        (return-from my-string-lessp i)))
    (cond ((&gt;= l1 l2) (return-from my-string-lessp nil))
          (t (return-from my-string-lessp l1)))))
</pre>





<hr><hr><h2 id="91"><a name="characters-1">4.0 Characters</a></h2>

<p id="92">X3J13, the ANSI subcommittee chartered to propose a specification
for the forthcoming ANSI Common Lisp, has voted to make several
changes to Common Lisp's treatment of characters. The intent of these
changes is to clean up ideas that are felt not to have worked out in
pre-ANSI Common Lisp as well as to allow for Common Lisp to be
extensible to international languages. Unfortunately, some of these
changes affect backward compatibility and storage efficiency. The
result is that Franz Inc. has had to make some user-visible changes
that may affect code which explicitly makes arrays or vectors of type
character.</p>

<p id="93">X3J13 has removed discussion of bit and font attributes of
characters from the Common Lisp language. The string-char type
specifier has also been removed from the language by X3J13. Finally,
strings are now equivalent to (vector character) for creation
purposes.  X3J13 allows characters to be attributed with bit/font
features as described in CLtL, but in an implementation-dependent
way.</p>

<p id="94">ANSI compatible Allegro CL continues to support font/bit attributes
of characters. For example, the reader and printer acts on such
characters in the pre-ANSI CL way (e.g., #\control-a is #\a with the
control bit set, #3\meta-b is #\b with font 3 and the meta bit
set). What's more, functions operating on bits and fonts from pre-ANSI
CL (e.g., string-char-p, char-bits, char-font, make-char) are
available in the cltl1 package.</p>

<p id="95">Because Franz Inc. wants to achieve as much backward compatibility
as possible with code using pre-ANSI font/bit attributed characters,
and because Franz Inc. also wants to represent strings at least as
efficiently as they have been in pre-ANSI versions of Allegro CL,
difficulties arise in representing attributed characters in strings
(which are now vectors of characters instead of vectors of
string-chars). What ANSI-compatible Allegro CL does is to specify that
it is an error to store attributed characters in a string. What in
fact happens if one tries to do so is that the attributes are
stripped.  Thus an attributed character that has been stored in an
array and extracted is no longer attributed and no longer EQL to its
previous value.</p>

<p id="96">Although this behavior violates the spirit of how elements are
stored in arrays, this behavior was chosen by Franz Inc. because (a)
pre-ANSI CL code using fonts/bits will not have been storing
attributed characters into strings since it has always been an error
to do so, and (b) representing strings as arrays that can hold
attributed characters would have made strings less efficient and
incompatible with existing foreign function code that uses
strings.</p>

<p id="97">
In other words, portable ANSI CL code should not notice this
compromise and pre-ANSI CL code should mostly be able to run as before
with very little source change. The one area where portable pre-ANSI
CL may run into problems is in places where the character type
specifier is explicitly specified in calls to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a>, or to sequence functions that create
a vector. (Such sequence functions include coerce, map, concatenate,
etc.) These places in pre-ANSI CL where the character type specifier
is used should most likely be changed to specify the <code>t</code> type specifier. In pre-ANSI versions of Allegro CL
(array character) was equivalent to (array t).
</p>

<hr><hr><h2 id="98"><a name="autoloading-1">5.0 Autoloading</a></h2>

<p id="99">
Allegro CL has the ability to <i>autoload</i> certain files and
modules. In order to keep the size of the system down by excluding
parts not always needed, some of Allegro CL is not included in the
system when it is built. These parts must be loaded in when they are
required. This section describes how that code is loaded in.
</p>
<p id="100">
Autoloads are triggered by referencing certain objects associated with
an unloaded module. Typically, calling a function triggers an
autoload, but autoloads can also be triggered by referencing a package
or a class associated with an unloaded module. Note that only certain
objects associated with a module trigger autoloads. If you reference
unloaded functionality that does not trigger an autoload, the
functionality may seem to be undefined.
</p>
<p id="101">
An autoload is an automated form of load. When an autoload occurs, a
message is printed unless <a href="../ansicl/dictentr/load-pri.htm"><code>*load-verbose*</code></a> is <code>nil</code>, in which case the autoload is done silently. The
autoload message is sent to the stream specified by the variable
<a href="variables/excl/s_system-messages_s.htm"><code>*system-messages*</code></a>.
</p>

<hr><h2 id="102"><a name="autoload-location-2">5.1 Where the autoloaded files are located</a></h2>

<p id="103">All the <em>fasl</em> files which have the potential to be
autoloaded are part of the Allegro CL library. All the files are
collected into a single file called the <em>bundle file</em>. Its
filename is <em>files</em> and its type depends on the version of
Allegro CL, but is always some variant of <em>[letter]bu</em>,
for example <em>files.bu</em> and <em>files.ebu</em>. The bundle file
is located in the Allegro directory. It contains a set of
<em>fasl</em> files which can be loaded individually (the whole file
is not loaded when a part is). The function <a href="operators/excl/bundle-pathname.htm"><b>bundle-pathname</b></a> returns the pathname of the
bundle file.</p>



<hr><h2 id="104"><a name="cl-symbols-2">5.2 Common Lisp symbols</a></h2>

<p id="105">
Code for some Common Lisp functions and macros (notably
<b>trace</b>, <b>inspect</b>, and <b>step</b>) are contained in
modules separate from the default binary. (The modules are called
:trace, :inspect, and :step.) Whenever any Common Lisp function or
macro is called, the necessary module will be loaded
automatically. Note that using auxiliary features provided as
extensions (such as referring to the variable <a href="variables/excl/s_trace-print-length_s.htm"><code>*trace-print-length*</code></a>) will not cause the
module to be loaded. Even though the modules can be automatically
loaded, we recommend explicitly loading those that you need with a
call to <a href="../ansicl/dictentr/provider.htm"><b>require</b></a>, as described
<a href="#load-modules-2">below</a>.
</p>



<hr><h2 id="106"><a name="major-extensions-2">5.3 Major extensions</a></h2>

<p id="107">The code for major extensions, such as the foreign function
interface or multiprocessing, also is loaded when needed instead of
being in the default Lisp binary.  Again, calls to some functions will
cause the correct module to be loaded, but we recommend loading the
module before using the facility, using require, as described
next.</p>



<hr><h2 id="108"><a name="load-modules-2">5.4 How to load modules </a></h2>

<p id="109">While most modules will be loaded automatically when an important
function or macro defined in the module is called, you have to load
modules explicitly to use some of the less central functionality. Some
users also prefer to explicitly load modules in order to save waiting
when the module is actually needed.</p>

<p id="110">To load a module with <a href="../ansicl/dictentr/provider.htm"><b>require</b></a>, simply enter the form: </p>

<pre id="111">
(require :<i>module-name</i>)
</pre>

<p id="112">It is useful to put this form at the beginning of any source file
containing code which uses symbols in the module. It is not an error
to call <a href="../ansicl/dictentr/provider.htm"><b>require</b></a> when the
module is already loaded. </p>



<hr><hr><h2 id="113"><a name="implementation-misc-1">6.0 Miscellaneous implementation details</a></h2>

<p id="114">
This section describes implementation details and extensions to Common
Lisp operators.
</p>
<p id="115">
An extension is additional functionality beyond what is specified in
the ANSI spec. The section
<a href="#extensions-to-clfuns-one-2">Section 6.1 Extensions to cl:make-package, cl:intern,  cl:disassemble, cl:truename, cl:probe-file, cl:open, cl:apropos, etc.</a> describes
extensions to a number of SL functions. Usually, these extensions use
an additional (non-standard) argument. Portable programs should
conditionalize any use of that argument so that it is only used when
run in Allegro CL.
</p>
<p id="116">
An implementation detail either clarifies some part of the spec that
is intentionally or unintentionally under specified. The spec usually
says that details are left to the implementation when it intentionally
under specifies. Unintentional under specification is more subtle: the
spec simply says nothing about what should be done in a particular
situation. (So for example, should a <a href="../ansicl/dictentr/defpacka.htm"><b>defpackage</b></a> call which defines an existing
package completely redefine the package according to the new
description or should it add features to the package without removing
existing features -- see <a href="#cl-defpackage-2">Section 6.9 cl:defpackage and cl:in-package</a>
for details on this issue.) A number of subsections discuss such
details of various Common Lisp operators (and some variables).
</p>

<hr><h2 id="117"><a name="extensions-to-clfuns-one-2">6.1 Extensions to cl:make-package, cl:intern,  cl:disassemble, cl:truename, cl:probe-file, cl:open, cl:apropos, etc.</a></h2>

<p id="118">
Certain standard Common Lisp functions have been extended in minor
ways in Allegro CL.  Elsewhere we describe changes to <a href="../ansicl/dictentr/load.htm"><b>load</b></a>: <a href="loading.htm#using-load-1">Using the load function</a> in
<a href="loading.htm">loading.htm</a> for the general implementation,
<a href="foreign-functions.htm#load-foreign-code-2">Load
foreign code with cl:load</a> in
<a href="foreign-functions.htm">foreign-functions.htm</a> (for loading foreign code)
and <a href="../ansicl/dictentr/sleep.htm"><b>sleep</b></a> (in <a href="multiprocessing.htm#process-functions-and-variables-1">Process functions and
variables (both models)</a> in
<a href="multiprocessing.htm">multiprocessing.htm</a>, making it work on a
per-process basis). Those functions were extended to do something
essentially new (<a href="../ansicl/dictentr/load.htm"><b>load</b></a> to load
foreign functions and fasl files in libfasl mode, sleep to work on
single processes). The extensions mentioned in this section refer to
changes in the semantics of some Common Lisp functions which affect
the way they are ordinarily used.  The sort of changes done include
allowing strings denoting objects as input as well as the object
itself. In some cases we have added boolean variables which control
the extended behavior, allowing you to decide exactly how you want
Lisp to work.
</p>
<p id="119">
The following Common Lisp operators are dicussed in subsections of
this section:
</p>
<ul>
<li id="120">
<a href="#extensions-to-make-package-3">cl:make-package</a>
</li>
<li id="121">
<a href="#extensions-to-intern-3">cl:intern</a>
</li>
<li id="122">
<a href="#extensions-to-disassemble-3">cl:disassemble</a>
</li>
<li id="123">
<a href="#extensions-to-truename-3">cl:truename</a>
</li>
<li id="124">
<a href="#extensions-to-probe-file-3">cl:probe-file</a>
</li>
<li id="125">
<a href="#extensions-to-open-3">cl:open</a>
</li>
<li id="126">
<a href="#extensions-to-apropos-3">cl:apropos</a>
</li>
<li id="127">
<a href="#extensions-to-interactive-stream-p-3">cl:interactive-stream-p</a>
</li>
</ul>


<hr><h2 id="128"><a name="extensions-to-make-package-3">6.1.1 Extensions to cl:make-package</a></h2>

<hr><h3 id="129"><a name="make-package-op-bookmarkxx"></a>make-package</h3><h3 id="130">Function</h3><h4 id="131">Package: common-lisp</h4>

<p id="132"><b>Arguments: </b><i>
package-name </i>&amp;key <i>use implementation-packages</i><i>
</i></p>

<p id="133">The <i>implementation-packages</i> keyword argument
is an Allegro CL extension described fully in
<a href="packages.htm">packages.htm</a>. Its value should be a list.
Otherwise, this function works as specified in the ANSI
specification. The default for the <em>use</em> argument is
implementation-dependent. The default in Allegro CL is a list
containing one element, the common-lisp package.
</p>

<hr>



<hr><h2 id="134"><a name="extensions-to-intern-3">6.1.2 Extensions to cl:intern</a></h2>

<hr><h3 id="135"><a name="intern-op-bookmarkxx"></a>intern</h3><h3 id="136">Function</h3><h4 id="137">Package: common-lisp</h4>

<p id="138"><b>Arguments: </b><i>
string </i> &amp;optional <i>packages</i><i>
</i></p>

<p id="139">
Allegro CL may allow a symbol as the first
(<i>string</i>) argument to <a href="../ansicl/dictentr/intern.htm"><b>intern</b></a>. Standard Common Lisp requires
that the first argument be a string, but specifies no consequences if
it is not. Allegro CL controls the behavior with the variable
<a href="variables/excl/s_intern-allows-symbol_s.htm"><code>*intern-allows-symbol*</code></a>, which, if true,
causes <a href="../ansicl/dictentr/intern.htm"><b>intern</b></a> to also
accept a symbol as its first argument. If <a href="variables/excl/s_intern-allows-symbol_s.htm"><code>*intern-allows-symbol*</code></a>
is <code>nil</code>, passing a symbol as the first
argument signals an error.
</p>

<hr>



<hr><h2 id="140"><a name="extensions-to-disassemble-3">6.1.3 Extensions to cl:disassemble</a></h2>

<hr><h3 id="141"><a name="disassemble-op-bookmarkxx"></a>disassemble</h3><h3 id="142">Function</h3><h4 id="143">Package: common-lisp</h4>

<p id="144"><b>Arguments: </b><i>
name-or-compiled-function
</i>&amp;key <i>absolute references-only recurse start end</i><i>
</i></p>

<p id="145">
The standard <a href="../ansicl/dictentr/disassem.htm"><b>disassemble</b></a> does
not have any keyword arguments. The keyword arguments are extensions
which are likely not supported in implementations of Common Lisp other
than Allegro CL.
</p>

<p id="146">
In standard CL, <em>name-or-compiled-function</em> should be a
function-object, a lambda expression, or a symbol with a function
definition. Allegro CL also accepts function names which are lists as
well (see <a href="#function-specs-1">Section 8.0 Function specs (fspecs)</a> for a
discussion of function names which are lists).
</p>

<p id="147">
<i>name-or-compiled-function</i> can also be a
string. A string is interpreted as naming a foreign (C or Fortran)
function. The string must match the name identified by applying
<b>nm</b> (or similar system function) to the
current symbol table. This is often the result of applying <a href="operators/ff/convert-to-lang.htm"><b>convert-to-lang</b></a> to the
routine name, but there are exceptions -- e.g. Lisp internal routines
typically do not have a prepended
underscore. <i>name-or-compiled-function</i> can also be a
codevector. These are extensions to Common Lisp.</p>

<h3 id="148">
The :absolute keyword argument
</h3>

<p id="149">
If the value of the <i>absolute</i> keyword argument is
<code>nil</code> (the default), then relative pc addresses
are given, starting at 0. If the value of
<i>absolute</i> is true, addresses
are given as absolute addresses. Note that these addresses are
consistent within a single disassembly, but any gc activity may have
moved the code vector by the time the disassembly is done.
</p>

<h3 id="150">
The :recurse keyword argument
</h3>

<p id="151">The <i>recurse</i> keyword argument, if true, causes
internal functions to be disassembled after the specified function. It
defaults to <code>t</code> if the
<i>name-or-compiled-function</i> represents a function
and if 

<i>references-only</i> is <code>nil</code>,
and neither <i>start</i>, or <i>end</i> is
specified. Otherwise it defaults to <code>nil</code>.


</p>

<h3 id="152">
The :references-only keyword argument
</h3>

<p id="153">If the <i>references-only</i> keyword argument is
specified true (its default value is <code>nil</code>)
then no disassembly is printed. Instead, a list is returned of all
references the function identified by the required argument makes
(from either the function object or the global table) to any Lisp
object. When <i>references-only</i> is
non-<code>nil</code>, <i>recurse</i>
defaults to <code>nil</code>.
</p>


<h3 id="154">
The :start and :end keyword arguments
</h3>

<p id="155">
The <b><i>start</i></b>
and <b><i>end</i></b> keyword arguments act in the
spirit of the <i>start</i> and <i>end</i>
keyword argument to sequence functions, but the output of disassemble
is not a sequence so the arguments differ from those. Both values, if
specified, should be non-negative integers indicating the pc-offset
where printing of disassembled code should start and stop. The
absolute argument is ignored: <i>start</i>
and <i>end</i> work with respect to
a <i>start</i> of 0 regardless of what the absolute
address is. When <i>start</i>
or <i>end</i> or both are
specified, <i>recurse</i> defaults
to <code>nil</code>.
</p>
<p id="156">
Further:
</p>
<ul>
<li id="157">

The value of <i>start</i> is backed off to the pc offset
of the instruction that contains the value. Thus, if a 3-byte
instruction starts at byte 4, and <code>:start 5</code> is
specified, then the instruction at 4 is printed as the first
instruction.

</li>
<li id="158">

The value of <i>end</i> always designates the last
instruction to be shown (which is different
than <i>end</i> arguments to sequence functions, where
end designates an element after the seleceted range).

</li>
<li id="159">

No errors are given if :start is greater than :end, nor if either
are out of range.

<ul>
<li id="160">

For <i>start</i> greater than <i>end</i>,
exactly one instruction is printed, based on start (if it is not
greater than the length of the code vector)

</li>
<li id="161">

For <i>start</i> less than 0 or <i>end</i>
greater than length, the keywords act as if ignored.


</li>
<li id="162">

For <i>start</i> greater than or equal to length, no
code is printed

</li>
</ul>
</li>
</ul>

<p id="163">
Here is an example:
</p>

<pre id="164">
cl-user(1): (defun foo (x y)
              (+ (sqrt (* 2 y)) (log x)))
foo
cl-user(2): (compile 'foo)
foo
nil
nil
cl-user(3): (disassemble 'foo)
;; disassembly of #&lt;Function foo&gt;
;; formals: x y
;; constant vector:
0: sqrt
1: log

;; code start: #x40e922c4:
   0: 55          pushl	ebp
   1: 8b ec       movl	ebp,esp
   3: 83 ec 30    subl	esp,$48
   6: 89 75 fc    movl	[ebp-4],esi
   9: 89 5d e4    movl	[ebp-28],ebx
  12: 39 a3 be 00 cmpl	[ebx+190],esp   ; &quot;thread: stacklim&quot;
      00 00 
  18: 76 02       jbe	22
  20: cd 65       int	$101            ; sys::trap-stack-ovfl
  22: 83 f9 02    cmpl	ecx,$2
  25: 74 02       jz	29
  27: cd 61       int	$97             ; sys::trap-argerr
  29: 89 45 dc    movl	[ebp-36],eax    ; x
  32: 80 7f cb 00 cmpb	[edi-53],$0     ; sys::c_interrupt-pending
  36: 74 02       jz	40
  38: cd 64       int	$100            ; sys::trap-signal-hit
  40: 8b 9f af fd movl	ebx,[edi-593]   ; excl::*_2op
      ff ff 
  46: b8 08 00 00 movl	eax,$8          ; 2
      00 
  51: ff 57 27    call	*[edi+39]       ; sys::tramp-two
  54: 8b 5e 12    movl	ebx,[esi+18]    ; sqrt
  57: b1 01       movb	cl,$1
  59: ff d7       call	*edi
  61: 89 45 d8    movl	[ebp-40],eax    ; excl::local-1
  64: 8b 45 dc    movl	eax,[ebp-36]    ; x
  67: 8b 5e 16    movl	ebx,[esi+22]    ; log
  70: b1 01       movb	cl,$1
  72: ff d7       call	*edi
  74: 8b d8       movl	ebx,eax
  76: 0b 5d d8    orl	ebx,[ebp-40]    ; excl::local-1
  79: f6 c3 03    testb	bl,$3
  82: 75 0f       jnz	99
  84: 8b d8       movl	ebx,eax
  86: 03 5d d8    addl	ebx,[ebp-40]    ; excl::local-1
  89: 70 08       jo	99
  91: 8b c3       movl	eax,ebx
  93: f8          clc
  94: c9          leave
  95: 8b 75 fc    movl	esi,[ebp-4]
  98: c3          ret
  99: 8b d0       movl	edx,eax
 101: 8b 45 d8    movl	eax,[ebp-40]    ; excl::local-1
 104: 8b 5f 8f    movl	ebx,[edi-113]   ; excl::+_2op
 107: ff 57 27    call	*[edi+39]       ; sys::tramp-two
 110: eb ee       jmp	94

;; Note the start is pc-offset = 3 even though 5 was specified
;; since that instruction includes location 5:

cl-user(4): (disassemble 'foo :start 5 :end 34)
;; disassembly of #&lt;Function foo&gt;
;; formals: x y
;; constant vector:
0: sqrt
1: log

;; code start: #x40ed6464:
   3: 83 ec 30    subl	esp,$48
   6: 89 75 fc    movl	[ebp-4],esi
   9: 89 5d e4    movl	[ebp-28],ebx
  12: 39 a3 be 00 cmpl	[ebx+190],esp   ; &quot;thread: stacklim&quot;
      00 00 
  18: 76 02       jbe	22
  20: cd 65       int	$101            ; sys::trap-stack-ovfl
  22: 83 f9 02    cmpl	ecx,$2
  25: 74 02       jz	29
  27: cd 61       int	$97             ; sys::trap-argerr
  29: 89 45 dc    movl	[ebp-36],eax    ; x
  32: 80 7f cb 00 cmpb	[edi-53],$0     ; sys::c_interrupt-pending

;; When :absolute is true, start and end still use offsets with
;; respect to 0:

cl-user(5): (disassemble 'foo :start 5 :end 34 :absolute t)
;; disassembly of #&lt;Function foo&gt;
;; formals: x y
;; constant vector:
0: sqrt
1: log
40ed6467: 83 ec 30 subl	esp,$48
40ed646a: 89 75 fc movl	[ebp-4],esi
40ed646d: 89 5d e4 movl	[ebp-28],ebx
40ed6470: 39 a3 be 00 cmpl	[ebx+190],esp   ; &quot;thread: stacklim&quot;
          00 00 
40ed6476: 76 02   jbe	0x40ed647a
40ed6478: cd 65   int	$101            ; sys::trap-stack-ovfl
40ed647a: 83 f9 02 cmpl	ecx,$2
40ed647d: 74 02   jz	0x40ed6481
40ed647f: cd 61   int	$97             ; sys::trap-argerr
40ed6481: 89 45 dc movl	[ebp-36],eax    ; x
40ed6484: 80 7f cb 00 cmpb	[edi-53],$0     ; sys::c_interrupt-pending
cl-user(6): 
</pre>




<p id="165">There are other keyword arguments to <a href="../ansicl/dictentr/disassem.htm"><b>disassemble</b></a> but they are not for programmer
use.</p>
<hr>



<hr><h2 id="166"><a name="extensions-to-truename-3">6.1.4 Extensions to cl:truename</a></h2>


<hr><h3 id="167"><a name="truename-op-bookmarkxx"></a>truename</h3><h3 id="168">Function</h3><h4 id="169">Package: common-lisp</h4>

<p id="170"><b>Arguments: </b><i>
pathname
</i>&amp;key  (<i>follow-symlinks</i> t)<i>
</i></p>

<p id="171">
Until a 6.2 patch, <a href="../ansicl/dictentr/truename.htm"><b>truename</b></a>
did not reliably follow symbolic links to find the canonical name of
the file, as required by section 20.1.3.1 of the ANS. Now, <a href="../ansicl/dictentr/truename.htm"><b>truename</b></a> does correctly follow
symbolic links if the <i>follow-symlinks</i> keyword
arguments is true (the default). It returns the symbolic link pathname
if <i>follow-symlinks</i> is specified nil.
</p>
<p id="172">
Note that when <code>p</code> evaluates to a pathname that
references a symbolic link, <code>(delete-file (truename
p))</code> will delete the actual file while <code>(delete-file
(truename p :follow-symlinks nil))</code> will delete the symbolic
link.
</p>


<hr>



<hr><h2 id="173"><a name="extensions-to-probe-file-3">6.1.5 Extensions to cl:probe-file</a></h2>

<hr><h3 id="174"><a name="probe-file-op-bookmarkxx"></a>probe-file</h3><h3 id="175">Function</h3><h4 id="176">Package: common-lisp</h4>

<p id="177"><b>Arguments: </b><i>
filespec
</i>&amp;key  (<i>follow-symlinks</i> t)<i>
</i></p>


<p id="178">
<a href="../ansicl/dictentr/probe-fi.htm"><b>probe-file</b></a> checks to see
whether the file named by <i>filespec</i> exists and
returns its truename if it does. The value of the
<i>follow-symlinks</i> keyword argument is passed as the
value of that argument to truename in order to get the pathname to
return. If <i>filespec</i> evaluates to a pathname that
references a symbolic link, the symbolic link is returned if
<i>follow-symlinks</i> is <code>nil</code>,
the canonical name of the file if <i>follow-symlinks</i>
is true, the default. See the description of the Allegro CL
implementation of <b>truename</b> just above.
</p>

<hr>



<hr><h2 id="179"><a name="extensions-to-open-3">6.1.6 Extensions to cl:open</a></h2>


<hr><h3 id="180"><a name="open-op-bookmarkxx"></a>open</h3><h3 id="181">Function</h3><h4 id="182">Package: common-lisp</h4>

<p id="183"><b>Arguments: </b><i>
file </i>&amp;key <i>direction element-type if-exists if-does-not-exist class follow-symlinks external-format</i><i>  &amp;allow-other-keys
</i></p>

<p id="184">
The specification of this Common Lisp function allows a great deal of
latitude to the implementation since interfacing with file systems is
hard to specify generally. Here we discuss the
<i>if-exists</i>, <i>class</i>, and
(briefly) the <i>if-does-not-exist</i> keyword
arguments. For a discussion of
the <i>external-format</i> keyword argument,
see <a href="iacl.htm#streams-3">Streams</a>
in <a href="iacl.htm">iacl.htm</a>.
</p>


<p id="185">
The <b><i>if-exists</i></b> argument is looked at only
if the
<i>direction</i> argument is specified as
<code>:io</code> or <code>:output</code>. In that case the
following values are allowed for <i>if-exists</i> and
have the effect described. 
</p>

<ul>
<li id="186">
<code>:error</code> signals an error. 
</li>
<li id="187">
<code>:new-version</code> is treated just like
<code>:supersede</code>, which is discussed below. (Unix does
not support file versions.)
</li>
<li id="188">
<code>:rename</code> renames the old file to a new file using
the function that is the value of the special symbol <a href="variables/excl/s_open-rename-function_s.htm"><code>*open-rename-function*</code></a>. The
variables <a href="variables/excl/s_open-rename-prefix_s.htm"><code>*open-rename-prefix*</code></a> and <a href="variables/excl/s_open-rename-suffix_s.htm"><code>*open-rename-suffix*</code></a> are also
used.
</li>
<li id="189">
<code>:rename-and-delete</code> first renames the file following
the conventions of <code>:rename</code>, then creates the new
file, then deletes the renamed file if the creation was successful.
</li>
<li id="190">
<code>:overwrite</code> opens the file for destructive
modification. Although the file pointer initially points to the
beginning of the file, the file is not truncated to zero length upon
opening.
</li>
<li id="191">
<code>:append</code> opens the file for destructive
modification. The file pointer initially points to the end of the
file.
</li>
<li id="192">
<code>:always-append</code> causes <b>O_APPEND</b> to be used
when opening the file. This means that concurrent writes by any number
of programs will always write to the end of the file. This is useful
for writing to log files. Be warned, however, that you cannot change
the writing file position of a stream opened with
<code>:if-exists</code> specified to be
<code>:always-append</code>. The <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> of <a href="../ansicl/dictentr/file-pos.htm"><b>file-position</b></a> will have no effect on where
writing will occur. The file position does specify where reading
occurs, however.
</li>
<li id="193">
<code>:supersede</code> creates a new file that replaces the
existing file.
</li>
<li id="194">
<code>nil</code> creates neither a file nor a
stream. <code>nil</code> is returned.
</li>
</ul>

<p id="195">
The <b><i>if-does-not-exist</i></b> keyword argument
also accepts the value <code>:always-append</code> when a file
is opened for output. This value causes the file to be created and
opened using <b>O_APPEND</b>. See the description of the
<code>:always-append</code> value for
<i>if-exists</i> described just above for details of the
effect of specifying <code>:always-append</code>.
</p>

<h3 id="196">
The class keyword argument
</h3>

<p id="197">
The <a href="../ansicl/dictentr/open.htm"><b>open</b></a> function has been
further extended to take a <i>class</i> keyword
argument. <a href="../ansicl/dictentr/open.htm"><b>open</b></a> passes this
argument to <strong>make-instance</strong> when it creates the stream,
and as with <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>, the
argument may be a stream class object or a symbol naming such a
class. If the <i>class</i> argument is not supplied or
is <code>nil</code>, <a href="../ansicl/dictentr/open.htm"><b>open</b></a> selects one of the following built-in
classes according to the <i>direction</i> and
<i>element-type</i> arguments: </p>

<pre id="198">
  excl::character-input-file-stream 
  excl::character-output-file-stream
  excl::character-bidirectional-file-stream
  excl::binary-input-file-stream 
  excl::binary-output-file-stream
  excl::binary-bidirectional-file-stream
</pre>

<p id="199">These classes all contain <code>file-stream</code> and are
variously mixed with</p>

<pre id="200">
  fundamental-character-input-stream
  fundamental-character-output-stream
  fundamental-binary-input-stream
  fundamental-binary-output-stream
</pre>

<p id="201">Although the file-stream subclasses returned by <a href="../ansicl/dictentr/open.htm"><b>open</b></a> are all instantiable, at present they
require hidden initialization (for element-type upgrading, buffer
allocation, etc.) and therefore they should only be created using
open. It is fine to further specialize them, but you are required to
create instances of your specializations of these stream classes using
the :class keyword argument to <a href="../ansicl/dictentr/open.htm"><b>open</b></a> rather than by
calling <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>
yourself. </p>

<h3 id="202">
Missspelled keyword arguments
</h3>

<p id="203">
<a href="../ansicl/dictentr/open.htm"><b>open</b></a> is also modified with
&allow-other-keys and &rest to pass all keyword arguments as
initialization arguments to <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>. This has the unfortunate side
effect of removing error checking for misspelled keyword arguments. 
</p>

<p id="204">
See <a href="streams.htm">streams.htm</a>, particularly the discussion of
using open to create streams in <a href="streams.htm#cl-funs-2">Implementation of Common Lisp Functions for
simple-streams</a>.
</p>

<h3 id="205">
The follow-symlinks keyword argument
</h3>

<p id="206">
When called with <code>:direction :probe</code>, <a href="../ansicl/dictentr/open.htm"><b>open</b></a> essentially works like <a href="../ansicl/dictentr/probe-fi.htm"><b>probe-file</b></a> and checks to see whether
the file named by <i>file</i> exists and returns its
truename if it does. The value of the
<i>follow-symlinks</i> keyword argument, which is
ignored unless <i>direction</i> is
<code>:probe</code>, is passed as the value of that argument to
<a href="../ansicl/dictentr/truename.htm"><b>truename</b></a> in order to get the
pathname to return. If <i>file</i> evaluates to a
pathname that references a symbolic link, the symbolic link is
returned if <i>follow-symlinks</i> is <code>nil</code>, the canonical name of the file if
<i>follow-symlinks</i> is true, the default. See the
description of the Allegro CL implementation of <b>truename</b> just
above.
</p>

<hr>



<hr><h2 id="207"><a name="extensions-to-apropos-3">6.1.7 Extensions to cl:apropos</a></h2>

<hr><h3 id="208"><a name="apropos-op-bookmarkxx"></a>apropos</h3><h3 id="209">Function</h3><h4 id="210">Package: common-lisp</h4>

<p id="211"><b>Arguments: </b><i>
string
</i> &amp;optional <i>package external-only</i> (<i>case-insensitive</i> t)<i>
</i></p>

<p id="212">
<a href="../ansicl/dictentr/aproposa.htm"><b>apropos</b></a> in Allegro CL accepts
two additional optional arguments. The second is
<i>external-only</i>. If a package designator is
specified as the value of the first (standard) optional argument, only
symbol external in that package will be considered as candidates for
output. If <i>package</i> is specified <code>nil</code> (some value must be given if
<i>external-only</i> is to be specified), the
<i>external-only</i> is
ignored. <i>external-only</i> defaults to <code>nil</code>.
</p>
<pre id="213">
CL-USER(1): (apropos :defun nil t)
DEFUN               [macro] (name varlist &rest body)
COMP::PA-DEFUN-PROTO-1 [function] (xform)
COMP::QC-DEFUN-IN-RUNTIME [function] (node target cc)
COMP::COMPILE-P-DEFUN [function] (form)
EXCL::DEFUN-PROTO-1
EXCL::DEFUN-LIKE    [function] (xp list &rest args)
EXCL::RECORD-SOURCE-FILE-DEFUN [function] (fspec &optional icsp)
DEFUN-PROTO         [macro] (name varlist &rest body)
FF::DEFUN-FOREIGN-CALLABLE-1 [function] (name arglist body)
FF:DEFUN-FOREIGN-CALLABLE [macro] (name arglist &rest body)
FF:DEFUN-C-CALLABLE [macro] (&whole form &rest args)
:DEFUN              value: :defun
CL-USER(2): (apropos :defun (find-package :excl) t)
DEFUN-PROTO         [macro] (name varlist &rest body)
CL-USER(3): (apropos :defun (find-package :excl) nil)
EXCL::DEFUN-PROTO-1
EXCL::DEFUN-LIKE    [function] (xp list &rest args)
EXCL::RECORD-SOURCE-FILE-DEFUN [function] (fspec &optional icsp)
DEFUN-PROTO         [macro] (name varlist &rest body)
</pre>
<p id="214">
The third optional argument is
<i>case-insensitive</i>. If true
(which is the default starting in release 7.0), comparisons between
<i>string</i> and symbol names are done in a
case-insensitive fashion. Thus, in an ANSI (case-insensitive, symbols
are named with uppercase strings) image,
</p>
<pre id="215">
(apropos "car" (find-package :common-lisp) nil nil)
  PRINTS nothing (as no symbols in the CL package have "car" in
         their names)
(apropos "car" (find-package :common-lisp))
  PRINTS:

   MAPCAR
   CAR
</pre>
<p id="216">
And in a modern image (case-senstive, symbols are named with lowercase
strings),
</p>
<pre id="217">
(apropos "CaR" (find-package :common-lisp) nil nil)
  PRINTS nothing (as no symbols in the CL package have "CaR" in
         their names)
(apropos "CaR" (find-package :common-lisp))
  PRINTS:

   mapcar
   car
</pre>


<hr>

<hr><h3 id="218"><a name="apropos-list-op-bookmarkxx"></a>apropos-list</h3><h3 id="219">Function</h3><h4 id="220">Package: common-lisp</h4>

<p id="221"><b>Arguments: </b><i>
string
</i> &amp;optional <i>package external-only case-insensitive</i><i>
</i></p>

<p id="222">
Like <a href="../ansicl/dictentr/aproposa.htm"><b>apropos</b></a>, as described
just above, <a href="../ansicl/dictentr/aproposa.htm"><b>apropos-list</b></a>
accepts two additional optional arguments,
<i>external-only</i> and
<i>case-insensitive</i>. If
<i>external-only</i> is true and a package designator is
specified for the standard optional argument
<i>package</i>, only external symbols in that package
are included in the result. If <i>case-insensitive</i>
is true (the default is <code>nil</code>), comparisons between <i>string</i>
and symbol names are done in a case-insensitive fashion.
</p>
<hr>



<hr><h2 id="223"><a name="extensions-to-interactive-stream-p-3">6.1.8 Extensions to cl:interactive-stream-p</a></h2>

<hr><h3 id="224"><a name="interactive-stream-p-op-bookmarkxx"></a>interactive-stream-p</h3><h3 id="225">Function</h3><h4 id="226">Package: common-lisp</h4>

<p id="227"><b>Arguments: </b><i>
stream
</i></p>

<p id="228">
The Common Lisp function <a href="../ansicl/dictentr/interact.htm"><b>interactive-stream-p</b></a> returns true if its
argument is an interactive stream, which is a stream "on which it
makes sense to perform interactive querying". Allegro CL extends this
function so that it is <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a>'able.
</p>
<p id="229">
When <i>(setf (interactive-stream-p stream) t)</i> is
evaluated, not only does <code>(interactive-stream-p
stream)</code> return true, but also any writing that is done is
encapsulated into blocks of output that are forced out by a call to
<a href="../ansicl/dictentr/finish-o.htm"><b>force-output</b></a> at the end of the
call.  This makes the stream seem like it is unbuffered, yet without
sacrificing as much performance as a raw unbuffered stream would
require, since the actual output takes place only at the end of each
group of write operations.
</p>

<hr>





<hr><h2 id="230"><a name="with-open-file-2">6.2 A comment about with-open-file and timing hazards</a></h2>

<p id="231">
<a href="../ansicl/dictentr/with-op0.htm"><b>with-open-file</b></a> tries to
guarantee that the file stream opened for the evaluation of its body
is closed, thus avoiding open but unused files. (Such open files can
cause an error if the number, set by the operating system, of
allowable open files is reached.) 
</p>
<p id="232">
But note that there is a hazard between the time Lisp calls out to the
operating system to open a file and the time Lisp sets the stream
variable to the newly opened file stream. Between those events, an
interruption that causes a non-local exit may leave the file open, but
Lisp, lacking any handle on the newly opened stream object, cannot
in fact close it.
</p>
<p id="233">
The risk is small, but can be exacerbated by the following:
</p>
<ul>
<li id="234">
Fwrapping or advising <a href="../ansicl/dictentr/open.htm"><b>open</b></a>
(see <a href="fwrappers-and-advice.htm">fwrappers-and-advice.htm</a>). Because fwrap or
advice code can cause a non-local exit, the code to close the stream,
even if Lisp has a handle on it, can fail to run.
</li>
<li id="235">
Killing the process opening the file from another process. The hazard
arises from multiprocessing. Without multiprocessing, it is virtually
impossible for files not to be closed (except for the fwrap/advice
problem above). With multiprocessing, a process switch, with the new
process killing the process doing the file open, can cause a problem.
</li>
</ul>






<hr><h2 id="236"><a name="cl-directory-2">6.3 cl:directory</a></h2>

<p id="237">The <b>directory</b> function has had a keyword argument added to
it to assist in recursive walks down a directory tree. (Note that even
though the new argument is not specified, <i>Common Lisp: the
Language</i> says the following about directory: `It is anticipated
that an implementation may need to provide additional parameters to
control the directory search. Therefore directory is specified to take
additional keyword arguments so that implementations may experiment
with extensions, even though no particular keywords are specified
here.') </p>

<hr><h3 id="238"><a name="directory-op-bookmarkxx"></a>directory</h3><h3 id="239">Function</h3><h4 id="240">Package: common-lisp</h4>

<p id="241"><b>Arguments: </b><i>
path
</i>&amp;key <i>directories-are-files</i><i>
</i></p>

<p id="242">Returns a list of pathnames matching <i>path</i>,
which may be a pathname, string, symbol or stream. Returns <code>nil</code> if there is no match. </p>

<p id="243">
If the keyword argument <i>directories-are-files</i>
is specified true (the default), this function
will return directories as files (that is pathnames with name and/or
type components true). If the argument is <code>nil</code>, directories are returned as directories
(pathnames with name and type components <code>nil</code>). In the latter case it is possible to walk down
a directory tree recursively using <a href="../ansicl/dictentr/director.htm"><b>directory</b></a>.
</p>

<p id="244">
The elements of the list returned by <a href="../ansicl/dictentr/director.htm"><b>directory</b></a> is in the same order as returned by
the associated system function (e.g. <strong>readir()</strong> on
UNIX).
</p>
<p id="245">
If <a href="../ansicl/dictentr/director.htm"><b>directory</b></a> is given
wildcards, for example <b>"*/*.cl"</b>, it will ignore files which are
symbolic links that point to other directories. This prevents <a href="../ansicl/dictentr/director.htm"><b>directory</b></a> recursing into these
symbolically named directories. For example, <code>(directory
"*/*.cl")</code> will no longer, in the face of a `foo' symlink to a
directory, would descend into `foo'. (This issue affects UNIX and UNIX
like platforms only as Windows does not support symbolic links.)
</p>
<h3 id="246">
Wildcard handling
</h3>
<p id="247">
directory uses pathname-match-p, which, when presented with wildcards
in path (when path is a string), converts the pathname into Allegro CL
regular expressions, according to the rules given next. (See
<a href="regexp.htm">regexp.htm</a> for information on regular expression
handling.)
</p>
<h4 id="248">
Handling of non-directory components:
</h4>
<pre id="249">
    . turned into \.
    * turned into .*
    ? turned into .
    ^ prepended onto beginning
    $ appended onto end
</pre>
<h4 id="250">
Handling of directory components:
</h4>
<pre id="251">
    . turned into \.
    * turned into .[^/]* (or .[^\\]* on windows)
    ** matches any number of directory levels
    ? turned into .
    ^ prepended onto beginning
    $ appended onto end
</pre>

<hr>



<hr><h2 id="252"><a name="reader-macros-2">6.4 Reader macros and cl:*features*</a></h2>


<hr><h3 id="253">#+(version&gt;= ...)/#-(version&gt;= ... )</h3><h3 id="254">Reader Macro</h3>

<p id="255">We have extended the #+ and #- reader macros to accept
(version&gt;= N [ M]) as an argument. It is interpreted to mean that
the form following will only be read if the version (also called
release) of Allegro CL is greater than or equal to N.M. The N must be
supplied. The M is optional. Both must be integers. With #+,
version&gt;= signifies read the next form only if the version is
greater than or equal to N.M. With #-, it means read the next form
only is the version is less than N.M. For example, because of an X3J13
change, the element type for an array of characters is
<code>character</code> starting in release 4.1 and
<code>string-char</code> in earlier releases. To have code work
in all Allegro CL releases, do the following:</p>

<pre id="256">
(make-array 3 
            :element-type #+(version&gt;= 4 1) 'character
                          #-(version&gt;= 4 1) 'string-char)
</pre>

<p id="257">Warning: while most Common Lisp implementations (including Allegro
CL prior to version 4.1) ignore `(version&gt;=...)', it is possible
that an implementation would signal an error upon encountering it. As
a workaround for truly portable code, use:</p>

<pre id="258">
#+(and allegro-version&gt;= (version&gt;=...))
</pre>

<p id="259">Because :allegro-version&gt;= is (presumably) only on the
*features* list of Allegro CL 4.1 and later, this will fail in all
versions without version&gt;= having to have a definition.</p>

<hr>

<hr><h3 id="260"><a name="s_features_s-var-bookmarkxx"></a>*features*</h3><h3 id="261">Variable</h3><h4 id="262">Package: common-lisp</h4>

<p id="263">This standard Common Lisp variable can be used with the #+ and #-
reader macros to conditionalize code for different Lisp
implementations and releases. The exact value is different in every
version of Allegro CL. Here are some useful values which may or may
not be in your version. Please check the value of <a href="../ansicl/dictentr/features.htm"><code>*features*</code></a> in your version to
see exactly what is there. The function <a href="operators/excl/featurep.htm"><b>featurep</b></a> can be used to test whether a feature
is present or not.</p>

<hr>

<hr><h2 id="264"><a name="rm-table-3">6.4.1 Features present or  missing from *features* in Allegro CL</a></h2>

<p id="265">
This is a partial list.
</p>

<div align="left">

<table BORDER="1" CELLSPACING="1" CELLPADDING="8" WIDTH="699">

  <tr>
    <td WIDTH="33%" VALIGN="TOP"><p id="266" ALIGN="CENTER">Feature</p></td>
    <td WIDTH="67%" VALIGN="TOP"><p id="267" ALIGN="CENTER">Meaning and use</p></td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:allegro</code></td>
    <td WIDTH="67%" VALIGN="TOP">Unique to Allegro CL. Present 
    in all versions on all
    platforms. Use this to distinguish Allegro CL from other 
    Lisp implementations.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:ignore</code></td>
    <td WIDTH="67%" VALIGN="TOP">Absent in all versions on all
    platforms. Thus a form marked <code>#+ignore</code>
    is never evaluated. Used, for example, in 
    <b>custom.cl</b>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:x3j13</code></td>
    <td WIDTH="67%" VALIGN="TOP">Purports to conform to some 
    version of Common Lisp specified
    by the ANSI X3J13 committee. Present in Allegro 
    CL since version 4.2.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:cltl2</code></td>
    <td WIDTH="67%" VALIGN="TOP">Purports to conform to Common Lisp: the Language, 2nd ed.
    Since ANSI Lisp has diverged, :x3j13 and :cltl2 should not both be present. Not present in
    Allegro CL 4.2 or later. Present in some earlier versions.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:draft-ansi-cl-2</code></td>
    <td WIDTH="67%" VALIGN="TOP">Purports to conform to the second draft ANSI standard.
    Allegro CL does so, so :draft-ansi-cl-2 is present in Allegro CL 7.0</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:ansi-cl</code></td>
    <td WIDTH="67%" VALIGN="TOP">Purports to conform to ANSI Common 
    Lisp standard. The
    standard is now (since early 1996) final. Present in Allegro CL 
    starting with version 4.3.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dynload</code></td>
    <td WIDTH="67%" VALIGN="TOP">Foreign loading is done by dynamic linking of shared
    libraries/objects. The next several features are types of dynamic loading. 
    See <a href="foreign-functions.htm">foreign-functions.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dlfcn</code></td>
    <td WIDTH="67%" VALIGN="TOP">Uses dlopen() to link foreign code. OS examples: Solaris,
    IRIX, Dec Unix, AIX. See <a href="foreign-functions.htm">foreign-functions.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dlhp</code></td>
    <td WIDTH="67%" VALIGN="TOP">Uses shl_load to link foreign code. HP only. See <a href="foreign-functions.htm">foreign-functions.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dlwin</code></td>
    <td WIDTH="67%" VALIGN="TOP">Uses LoadLibrary to link foreign code. Windows machines only.
    See <a href="foreign-functions.htm">foreign-functions.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dlmac</code></td>
    <td WIDTH="67%" VALIGN="TOP">Uses the Mac OS X system loader
    NSLoadModule to link foreign code. Mac OS X machines only.
    See <a href="foreign-functions.htm">foreign-functions.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:dlld</code></td>
    <td WIDTH="67%" VALIGN="TOP">Loads .o files into image with ld. No 
    Allegro CL version uses
    this.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:ics</code></td>
    <td WIDTH="67%" VALIGN="TOP">Supports International Character sets.
    Characters are 16-bits (rather than 8 bits). Allegro CL comes in both
    International and non-International versions (the International version
    is standard). Use this feature to distinguish the versions.
    See <a href="iacl.htm">iacl.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:os-threads</code></td>
    <td WIDTH="67%" VALIGN="TOP">Multiprocessing model uses native threads. 
    Other model is the
    non :os-threads model (no special feature) where processes are 
    managed within Lisp. See <a href="multiprocessing.htm">multiprocessing.htm</a>.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:mswindows</code></td>
    <td WIDTH="67%" VALIGN="TOP">Appears in versions running on Windows 
    machines. Use
    #-mswindows for Unix.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:sparc</code></td>
    <td WIDTH="67%" VALIGN="TOP">This feature appears on versions that run on machines with a
    Sparc processor (e.g. Sun 4's and Sparcstations). A similar platform-naming feature
    appears in all implementations and allows differentiating between machines. Look for the
    feature in your version.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:big-endian</code></td>
    <td WIDTH="67%" VALIGN="TOP">Platform uses the big-endian method of representing numbers.</td>
  </tr>
  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:little-endian</code></td>
    <td WIDTH="67%" VALIGN="TOP">The platform uses the little-endian method of representing
    numbers.</td>
  </tr>

  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:verify-stack</code></td>

    <td WIDTH="67%" VALIGN="TOP">Checking how close the stack is to 
    overflowing is expensive. See <a href="variables/compiler/verify-stack-switch.htm"><code>verify-stack-switch</code></a>.

  </td>
  </tr>

  <tr>
    <td WIDTH="33%" VALIGN="TOP"><code>:allegro-vN.M</code></td>
    <td WIDTH="67%" VALIGN="TOP">Present in Allegro CL version N.M. (Examples
    :allegro-7.0, :allegro-8.0, :allegro-8.1, etc.)
    See also #+(version&gt;=...)
    reader macro defined <a href="#reader-macros-2">Section 6.4 Reader macros and cl:*features*</a>
    above. Both it and this feature are useful for conditionalizing 
    code to run on different releases of Allegro
    CL.</td>
  </tr>
</table>
</div>



<hr><h2 id="268"><a name="nested-conditionals-3">6.4.2 The issue of nested conditionals in Allegro CL</a></h2>

<p id="269">
Assume <code>:allegro</code> is on the <a href="../ansicl/dictentr/features.htm"><code>*features*</code></a> list and that
<code>:foo</code> is not. Consider the following two forms and
their evaluations:
</p>
<pre id="270">
;; CASE 1
(list #+allegro :allegro #-allegro #+foo :foo #-foo :default)

  Versions of Allegro CL prior to 8.0 return (:allegro :default)
  Allegro CL 8.0 and many other implementations return (:allegro)

;; CASE 2
(list #+allegro :allegro #-allegro #+foo :foo)

  Versions of Allegro CL prior to 8.0 return (:allegro)
  Allegro CL 8.0 and many other implementation signal an error
</pre>

<p id="271">
We will explain these disparate behaviors below, but first we
recommend that conditions be nested using <b>not</b>, <b>or</b>, and
<b>and</b> within the <code>#+</code> or <code>#-</code>
test expressions (the expression which follows the
<code>#+</code> or <code>#-</code>) as that is always
unambiguous in any Lisp. Thus the first conditional below implements
the old Allegro CL behavior and the second implement the current
behavior:
</p>
<pre id="272">
(list #+allegro :allegro #+(and (not allegro) foo) :foo #-foo :default)
(list #+allegro :allegro #+(and (not allegro) foo) :foo
                         #-(or allegro foo) :default)
</pre>
<p id="273">
Using nesting within the test expression for Case 2 should make clear
what is desired when <code>:allegro</code> holds and
<code>:foo</code> does not -- presumably:
</p>
<pre id="274">
(list #+allegro :allegro #+(and (not allegro) foo) :foo)
</pre>
<p id="275">
In older Allegro CL implementations, when a conditional fails (like
#-allegro fails), a conditional in the associated form (the one that
will be ignored) is not further considered. Thus that conditional and
its associated form are taken to be the form to be ignored. So in the
first example, <code>#-allegro #+foo :foo</code> is considered
to be a (failing) conditional and its associated form. It is ignored
and the reader then encounters <code>#-foo :default</code>. The
<code>#-foo</code> conditional succeeds so the subsequent form
-- <code>:default</code> -- is evaluated.
</p>
<p id="276">
Other Lisp implementations resolve the conditionals following a
conditional as part of determining what the form associated with a
conditional is. Allegro CL has been changed to match that behavior. As
a result, conditionals following a conditional (i.e. nested
conditionals) are considered and resolved as part of determining the
form that follows a conditional, the form that should be ignored (when
the original conditional fails) or evaluated (when it succeeds). So in
<code>#-allegro #+foo :foo #-foo :default</code> the inner
conditionals <code>#+foo :foo #-foo :default</code> are resolved
to <code>:default</code>. Thus <code>#-allegro #+foo :foo
#-foo :default</code> resolves to <code>#-allegro
:default</code> which is then ignored.
</p>
<p id="277">
In the second example, <code>#-allegro #+foo :foo</code>
resolves to <code>#-allegro</code> which signals an error
because no form follows the <code>#-allegro</code> conditional,
and that is erroneous code. (The conditional doing the nesting within
the test expression, show above, does not error.)
</p>
<p id="278">
We believe (although we do not present our analysis here) that the
ANSI standard is ambiguous on the handling of these cases and so both
the older Allegro CL behavior and the newer behavior are within
standard.  However, since the <b>#+/#-</b> conditonals are designed to
allow for using the same code in various implementations of Common
Lisp, we believe it is most important that all implementation do the
same thing. Since other implementations of Common Lisp resolve inner
conditionals to produce the form that outer conditionals apply to,
Allegro CL has been changed (starting in release 8.0) to do that as
well. Again, we recommend doing the nesting in the test expressions
rather than nesting #+/#-'s.
</p>

<p id="279">
The change in the handling of nested #+/#-'s is a
non-backward-compatible change in Allegro CL 8.0, and a rather obscure
one which may cause difficult to diagnose errors in user code which
has heretofore worked correctly. To mitigate this, in Allegro CL 8.0
(and later), a warning is signaled when nested conditionals are
detected. This warning remarks on the behavior change. The warning is
suppressed when the variable <a href="variables/excl/s_warn-on-nested-reader-conditionals_s.htm"><code>*warn-on-nested-reader-conditionals*</code></a> is set to
<code>nil</code> (its initial value is <code>t</code>). Users who want to revert to the old behavior (not
resolving inner conditionals before applying outer) can do so by
setting the variable <a href="variables/excl/s_sharp-plus-de-facto-standard-compatible_s.htm"><code>*sharp-plus-de-facto-standard-compatible*</code></a> to
<code>nil</code> (its initial value is also <code>t</code>). We do recommend that user change their code to
conform to the new behavior where that is possible rather than
reverting to the old behavior.
</p>






<hr><h2 id="280"><a name="cl-random-2">6.5 cl:random and cl:make-random-state</a></h2>

<p id="281">
There are two random number generators used in Allegro CL, depending
on the argument to random. One is fast, efficient, and does no
consing. It is used in compiled code when the argument is a (positive)
single or double floating point constant or any (positive) fixnum.
Other reasonable calls also invoke the fast algorithm. The other,
which is slower and less efficient and conses a great deal, is used
when the fast algorithm cannot be.
</p>

<p id="282">
We recommend that users interested in random floats of magnitude X do
</p>

<pre id="283">
(* x (random 1.0f0))
</pre>

<p id="284">
rather than
</p>

<pre id="285">
(random x)
</pre>

<h3 id="286">
Initial values returned by random
</h3>

<p id="287">
Because <a href="../ansicl/dictentr/random.htm"><b>random</b></a> may be
called by any Lisp function at any time, there can be no guarantee
that the sequence of numbers seen by your calls to random will be the
same each time you invoke Lisp even if your actions are seemingly
identical. However, absent specific action on your part, often the
values returned by <a href="../ansicl/dictentr/random.htm"><b>random</b></a> are the same from invocation to
invocation. If either repeatability or ensuring different runs are
different are important to you, you should manage <a href="../ansicl/dictentr/random.htm"><b>random</b></a> by specifying the optional
<i>random-state</i> argument with random-state objects
you have created and stored (see <a href="../ansicl/dictentr/make-ran.htm"><b>make-random-state</b></a>). Printed versions of
random-state objects are readable so values can be stored in text
files.
</p>

<h3 id="288">
random and multiple processes
</h3>

<p id="289">
When a new process is created, the value of <a href="../ansicl/dictentr/random-0.htm"><code>*random-state*</code></a> may be bound as part of
the initial bindings for the process (see
<a href="operators/mp/make-process.htm"><b>mp:make-process</b></a> and
<a href="operators/mp/process-run-function.htm"><b>mp:process-run-function</b></a>). <a href="../ansicl/dictentr/random-0.htm"><code>*random-state*</code></a> is one of the variables
included in the suggested list of bindings which is the value
of <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a>, but that list
is used for processes you create only if you specify that it be
used. The binding is to a copy of an existing random-state
object. This means that if that list is used, different processes may
start with copies of the same random-state object or with
random-states that produce similar (i.e. slighly displaced) random
number sequences. This may or may not be what is required for your
application. As we suggest with managing random numbers in general, we
suggest that if the nature of random sequences is important to your
application, you manage the random sequences for processes that you
create by creating your own random-state objects
(with <a href="../ansicl/dictentr/make-ran.htm"><b>make-random-state</b></a>) and using them in
the processes you create.
</p>

<hr><h3 id="290"><a name="random-op-bookmarkxx"></a>random</h3><h3 id="291">Function</h3><h4 id="292">Package: common-lisp</h4>

<p id="293"><b>Arguments: </b><i>
number
</i> &amp;optional <i>state</i><i>
</i></p>


<p id="294">Returns a pseudo-random number uniformly distributed between 0 and
(- <i>number</i> 1) if <i>number</i> is an
integer and between 0 (inclusive) and <i>number</i>
(exclusive) if <i>number</i> is real but not an
integer. <i>number</i> must be real and
positive. <i>state</i> should be a random-state
object. If supplied, it will be made the state while the returned
value is calculated.</p> 

<p id="295">
Pseudorandom numbers are generated using The Mersenne-Twister
algorithm, MT179937. MT179937 is described in detail in the paper
"Mersenne Twister: A 623-dimensionally equidistributed uniform
pseudorandom number generator" by Makoto Matsumoto (Keio
University/Max-Planck-Institut fuer Mathematik) and Takuji Nishimura
(Keio University), which appeared in the issue 1/1998 of the ACM
Transactions on Modeling and Computer Simulation.
</p>


<hr>


<hr><h3 id="296"><a name="make-random-state-op-bookmarkxx"></a>make-random-state</h3><h3 id="297">Function</h3><h4 id="298">Package: common-lisp</h4>

<p id="299"><b>Arguments: </b><i>
</i> &amp;optional <i>state seed</i><i>
</i></p>

<p id="300">
This standard Common Lisp function returns a random-state object. If
<i>state</i> is already a random-state, it is
returned. If state is <code>t</code> (and
<i>seed</i> is <code>nil</code>), <a href="../ansicl/dictentr/make-ran.htm"><b>make-random-state</b></a> uses
<a href="../ansicl/dictentr/get-univ.htm"><b>get-universal-time</b></a> for its
starting value. We have ensured that even in a tight loop, different
states will be produced by each call in the loop.
</p>
<p id="301">
The <i>seed</i> argument is provided as an extension to
standard Common Lisp. If <i>state</i> is specified as
<code>t</code>, and <i>seed</i> is given and
is an integer, then instead of using its own internal method for
generating a seed, that specified <i>seed</i> is
accepted and used to create the new random-state. Two such calls to
<b>make-random-state</b> with the same seed will produce equivalent
random-states. Only the least significant 32 bits of the integer are
used to seed the random state. 
</p>
<p id="302">
This capability allows the user to generate starting seeds from any
random-number generation source.  The question of how long that source
requires to generate truly random data is the user's
responsibility. (Thus <i>/dev/random</i>, if available, may block
indefinitely waiting for the entropy pool to be replenished.
<i>/dev/urandom</i> can also be used to generate random seeds, if it
is available).
</p>

<hr>






<hr><h2 id="303"><a name="cl-make-hash-table-2">6.6 cl:make-hash-table</a></h2>

<hr><h3 id="304"><a name="make-hash-table-op-bookmarkxx"></a>make-hash-table</h3><h3 id="305">Function</h3><h4 id="306">Package: common-lisp</h4>

<p id="307"><b>Arguments: </b><i>
</i>&amp;key <i>test size rehash-size rehash-threshold hash-function values weak-keys</i><i>
</i></p>

<p id="308">
Hash tables with standard tests (<a href="../ansicl/dictentr/eq.htm"><b>eq</b></a>, <a href="../ansicl/dictentr/eql.htm"><b>eql</b></a>,
<a href="../ansicl/dictentr/equal.htm"><b>equal</b></a>, and <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a>) have been optimized in Allegro CL to
make putting values into and getting values from a hash table
fast. <a href="../ansicl/dictentr/eq.htm"><b>eq</b></a> hashtables are the
fastest, followed closely by <a href="../ansicl/dictentr/eql.htm"><b>eql</b></a>, and then <a href="../ansicl/dictentr/equal.htm"><b>equal</b></a> and <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a>.
</p>

<h3 id="309">The size argument to make-hash-table</h3>

<p id="310">
The maximum size of a hash table is one less than the value of <a href="../ansicl/dictentr/array-di.htm"><code>array-dimension-limit</code></a>. In safe
code, if the value specified by the <i>size</i> is
greater than or equal to <a href="../ansicl/dictentr/array-di.htm"><code>array-dimension-limit</code></a>, then <a href="../ansicl/dictentr/array-di.htm"><code>array-dimension-limit</code></a> minus 1
will be used instead and a warning will be signaled.
</p>

<h3 id="311">Extensions to make-hash-table</h3>

<p id="312">
Allegro CL has also extended <a href="../ansicl/dictentr/make-has.htm"><b>make-hash-table</b></a> in several ways:
</p>

<ol>
<li id="313">
to accept the (non-standard) <i>hash-function</i> 
keyword argument,
</li>
<li id="314">
to allow <i>test</i> functions other than the standard
four,
</li>
<li id="315">
to allow for weak hashtables, and
</li>
<li id="316">
to allow for valueless hashtables.
</li>
</ol>

<h3 id="317">
The :hash-function keyword argument
</h3>

<p id="318">
The <b><i>hash-function</i></b> keyword argument allows
further specialization when standard functionality is inefficient
(usually because of excessive collisions caused by bunching of the
hash codes of the data). Code that uses the
<i>hash-function</i> argument is not portable Common
Lisp, of course.
</p>

<p id="319">
If specified, the value from <i>hash-function</i> should
be a a symbol naming a function of one argument which reproducibly
returns an integer in the correct range when applied to any Lisp
object intended to be used as a hash key. (The value must be a symbol,
not a function object.) 
</p>
<p id="320">
The correct range is between 0 and (1- (expt 2 24)) (inclusive) in
32-bit Lisps and between 0 and (1- (expt 2 32)) (inclusive) in 64-bit
Lisps. <em>Reproducibly</em> here means the function will return the
same value on equivalent objects whenever it is called.
<i>hash-function</i> defaults to <a href="../ansicl/dictentr/sxhash.htm"><b>sxhash</b></a> except when <i>test</i> is
one of the four standard tests (<a href="../ansicl/dictentr/eq.htm"><b>eq</b></a>, <a href="../ansicl/dictentr/eql.htm"><b>eql</b></a>,
<a href="../ansicl/dictentr/equal.htm"><b>equal</b></a>, <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a>) when <i>hash-function</i>
defaults to an internal function optimized for that test. (For <a href="../ansicl/dictentr/equal.htm"><b>equal</b></a> and <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a>, the hash-function is an internal version
of <a href="../ansicl/dictentr/sxhash.htm"><b>sxhash</b></a>.)</p>

<h3 id="321">
The :test keyword argument
</h3>
<p id="322">
<b><i>test</i></b> should be a symbol naming a function
of two arguments that returns <code>t</code> or <code>nil</code> as two keys are or are not equivalent. The
standard values for <i>test</i> are <a href="../ansicl/dictentr/eq.htm"><b>eq</b></a>, <a href="../ansicl/dictentr/eql.htm"><b>eql</b></a>,
<a href="../ansicl/dictentr/equal.htm"><b>equal</b></a>, and <a href="../ansicl/dictentr/equalp.htm"><b>equalp</b></a> (or the associated function
objects <code>#'eq</code> etc.) but any test function can be
specified. (But note (1) that <code>symbol</code> is reserved
for internal use; <i>test</i> should not be specified
<code>'symbol</code> in application or user code; and (2) the
value must be a symbol naming a function, not a function object; the
four standard function objects listed just above are accepted as
values but no other function objects.) If
<i>hash-function</i> is specified, it is the
programmer's responsibility to ensure the test function and the hash
function work together correctly and consistently.
</p>

<h3 id="323">
The :weak-keys keyword argument
</h3>
<p id="324">
<b><i>weak-keys</i></b> defaults to <code>nil</code>, which specifies the default behavior. When
<i>weak-keys</i> is specified as <code>t</code>, the keys of the resulting hash table are treated
specially by the garbage-collector: when a key in such a hash table
has no more references to it, the entire entry is removed from the
hash table, and the hash-table-count is decremented. This entry
removal will occur regardless of whether <code>:values
:weak</code> is specified (which by itself will never affect the
hash-table-count, but only the value of an entry). See
<a href="gc.htm">gc.htm</a> for information on weak objects.
</p>
<p id="325">
If <i>weak-keys</i> is given the value
<code>:tenurable</code>, then the key vector (the part of the
weak-key hash-table that is normally kept in newspace) is allowed to
be tenured. Any other true value for <i>weak-keys</i>
causes the key vector to be forced to stay in newspace (but it is best
to use <code>t</code> as this allows other non-<code>nil</code> values which have special meaning to be added
later). The <code>:tenurable</code> option allows the amount of
data copied between newspace halves to remain smaller than if the key
vector were forced to remain in newspace. This difference can be large
if the hash-table is large. Allegro CL now uses this option
internally. If a tenurable weak-keys hash-table must be rehashed due
to growth, the new key vector is allocated in newspace, but is still
allowed to be tenured. (This means the vector is not created with
<code>:allocation :old</code> described <a href="#cl-make-array-2">below</a>.)
</p>
<p id="326">
The downside of tenuring the weak-key vector is that
references to the values will remain until a global garbage collection
examines the weak-key vector. An untenured weak-key vector is examined
whenever there is a scavenge. Global gc's are typically rare, but
scavenges occur regularly. A decision to use the
<code>:tenurable</code> option should take this into
consideration.
</p>
<h3 id="327">
The :values keyword argument
</h3>
<p id="328">
<b><i>values</i></b> can be <code>t</code>
(the default), <code>:weak</code>, or <code>nil</code>.
</p>
<h4 id="329">
:values t or :values unspecified
</h4>
<p id="330">
When <i>values</i> is <code>t</code>, the
hash table will contain both a key and a value for each entry (that
is, it will be a normal hash table). As said above, <code>t</code> is the default value for
<i>values</i>.
</p>
<h4 id="331">
:values :weak
</h4>
<p id="332">
When <b><code>:values :weak</code></b> is specified, then the
hash table will hold a value only as long as it is referenced
non-weakly by some other object. If no other objects reference the
value, it becomes <code>nil</code> and a <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a> on the key will return <code>nil</code> for the value (the value is <em>collected</em> by
the gc). 
</p>
<h4 id="333">
:values :weak example
</h4>
<pre id="334">
;;  We create a :values :weak hashtable:
cl-user(26): (setq ht (make-hash-table :values :weak))
#&lt;eql hash-table with weak values, 0 entries @ #x48aef52&gt;
;;  We create an object to store aa a value:
cl-user(27): (setq a (list 1 2 3))
(1 2 3)
;;  We store the list as the value of the key 100:
cl-user(28): (setf (gethash 100 ht) a)
(1 2 3)
;;  And the list is returned when we ask for it:
cl-user(29): (gethash 100 ht)
(1 2 3)
t
;;  We break the link from the symbol A to the list:
cl-user(30): (setq a nil)
nil
;;  We break the links from variables like *, **, and *** to the list
;;  (this works here but be aware that links may exist that you are
;;  unaware of, and it make take longer for those links to disappear).
cl-user(31): t
t
cl-user(32): t
t
cl-user(33): t
t
cl-user(34): (gc)
cl-user(35): (gc)
;;  Now when we get the value associated with 100, it is NIL
cl-user(36): (gethash 100 ht)
nil
t
;;  Note, second value is T as 100 still has a value.  But the
;;  value is now NIL, not the list which was the original value.
cl-user(37): 
</pre>
<h4 id="335">
:values nil
</h4>
<p id="336">
When <b><code>:values nil</code></b> is specified, a <em>sans
values</em> hash table is created, and only keys are stored. <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a> returns the key as its first
return if the key is in the table, and <code>t</code> as
the second value in that case. As usual, <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a> returns <code>nil</code> and
<code>nil</code> if the key is not in the table. You can
use <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> and <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a> to store a key. You must specify a value
but that value is ignored. You can also use the function <a href="operators/excl/puthash-key.htm"><b>excl:puthash-key</b></a> to store a key in
the table.
</p>
<p id="337">
On sans-value hash tables, <a href="../ansicl/dictentr/maphash.htm"><b>maphash</b></a> will call its argument function with the
key as both arguments (as the <i>key</i> argument and as
the <i>value</i> argument), as there is no value to
pass.   
</p>
<p id="338">
One use of <code>:values nil</code> (sans-value) hash tables is
to identify a set of objects, such as those objects which have a
particular property, in a space efficient way. Suppose, for example,
you have many instances (millions of them) of a particular class, and
only 20 are XYZ-positive. You could have an
<code>xyz-positive</code> instance slot in the class, but that
could use megabytes of space. A sans-value hash table with the 20
objects as keys uses just a few hundred bytes. That table could be the
value of a class slot of the class and a method that looked to the user
like an ordinary reader could test whether an instance was in the hash
table or not, while a writer could add an instance to the hash table.
</p>
<p id="339">
Sans-value hash tables are also a good way to store conses. If you
have a bunch of conses you will need many times, place each as you
first create it as a key into a sans-value hash table with the
appropriate test function (say <b>equal</b>). Then, if you need that
cons, create one and test it using <a href="operators/excl/puthash-key.htm"><b>excl:puthash-key</b></a> or <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a>, and always using the return value
(unless <code>nil</code> in the case of <a href="../ansicl/dictentr/gethash.htm"><b>gethash</b></a>) and discarding the test value. Only one
permanent copy of the cons will then be stored no matter how may you
create. (See the second example below.)
</p>
<h4 id="340">
:values nil example
</h4>
<pre id="341">
;; We create a sans-value hashtable:
cl-user(49): (setq svht (make-hash-table :values nil))
#&lt;eql hash-table (sans values) with 0 entries @ #x4a94bb2&gt;
;;  We store as keys all CL symboles with more than 3 e's in
;;  the symbol name. Note we use puthash-key to store the key.
;;  We do not need a value because being in the hashtable indicates
;;  the key has the desired property (more that 3 e's).
;;
cl-user(50): (do-external-symbols (s (find-package :cl))
	       (if (&gt; (count #\e (symbol-name s) :test 'char-equal) 3)
		   (puthash-key s svht)))
nil
;;  There are 39 such symbols:  #x4a94bb2
cl-user(51): svht
#&lt;eql hash-table (sans values) with 39 entries @ #x4a94bb2&gt;
;;  We use MAPHASH to print out the 39 symbols. Note the value
;;  passed to the MAPHASH argument function is the key (that
;;  is, the key is passed as both the K and the V arguments).
;;  We have added line breaks for clarity in some cases
cl-user(52): (maphash #'(lambda (k v)
			  (format t &quot;~S, value is ~S~%&quot; k v))
		      svht)
integer-decode-float, value is integer-decode-float
least-negative-normalized-single-float, 
  value is least-negative-normalized-single-float
set-difference, value is set-difference
update-instance-for-different-class, 
  value is update-instance-for-different-class
double-float-negative-epsilon, 
  value is double-float-negative-epsilon
make-sequence, value is make-sequence
make-instances-obsolete, value is make-instances-obsolete
stream-element-type, value is stream-element-type
least-negative-normalized-double-float, 
  value is least-negative-normalized-double-float
delete-package, value is delete-package
least-negative-normalized-long-float, 
  value is least-negative-normalized-long-float
delete-file, value is delete-file
array-element-type, value is array-element-type
upgraded-array-element-type, value is upgraded-array-element-type
encode-universal-time, value is encode-universal-time
least-negative-normalized-short-float, 
  value is least-negative-normalized-short-float
internal-time-units-per-second, 
  value is internal-time-units-per-second
type-error-expected-type, value is type-error-expected-type
ensure-generic-function, value is ensure-generic-function
delete-duplicates, value is delete-duplicates
define-setf-expander, value is define-setf-expander
least-negative-single-float, 
  value is least-negative-single-float
read-sequence, value is read-sequence
get-decoded-time, value is get-decoded-time
concatenated-stream-streams, 
  value is concatenated-stream-streams
invoke-restart-interactively, value is invoke-restart-interactively
read-preserving-whitespace, value is read-preserving-whitespace
get-internal-real-time, value is get-internal-real-time
least-positive-normalized-double-float, 
  value is least-positive-normalized-double-float
decode-universal-time, value is decode-universal-time
*compile-file-truename*, value is *compile-file-truename*
least-negative-double-float, value is least-negative-double-float
nset-difference, value is nset-difference
ensure-directories-exist, value is ensure-directories-exist
make-concatenated-stream, value is make-concatenated-stream
update-instance-for-redefined-class, 
  value is update-instance-for-redefined-class
write-sequence, value is write-sequence
least-positive-normalized-single-float, 
  value is least-positive-normalized-single-float
single-float-negative-epsilon, 
  value is single-float-negative-epsilon
nil
;;  GETHASH works as usual but returns the KEY as if it 
;;  were the value:
cl-user(53): (gethash 'write-sequence svht)
write-sequence
t
;;  You can use SETF of GETHASH instead of PUTHASH-KEY. Note
;;  the value specified (10 in this case) is discarded:
cl-user(54): (setf (gethash nil svht) 10)
nil
;;  GETHASH returns the key as the value. The value specified
;;  just above (10) is not stored so is not available:
cl-user(55): (gethash nil svht)
nil
t
;;  NIL is returned because the KEY is NIL. When the key is NIL,
;;  you must look at the second return value to see if NIL is 
;;  in the hash table.
cl-user(56): 

;;  In the second example, we create a EQUAL sans-value hash table
;;  and store some conses in it. We create a new cons and use
;;  PUTHASH-KEY to store it if necessary.  PUTHASH-KEY returns
;;  the stored cons if there, or the cons if just stored.  
cl-user(59): (setq cons-storer-ht (make-hash-table :test 'equal :values nil))
#&lt;equal hash-table (sans values) with 0 entries @ #x4b78e3a%gt;
;;  We put some conses in the hash table:
cl-user(60): (puthash-key (list 'baltimore 'md) cons-storer-ht)
(baltimore md)
cl-user(61): (puthash-key (list 'boston 'ma) cons-storer-ht)
(boston ma)
cl-user(62): (puthash-key (list 'berkeley 'ca) cons-storer-ht)
(berkeley ca)
cl-user(63): (puthash-key (list 'reno 'nv) cons-storer-ht)
(reno nv)
;;  Here is a cons. We put it in the hashtable if necessary.
;;  PUTHASH-KEY returns the one there if present:
cl-user(64): (setq a (list 'boston 'ma))
(boston ma)
cl-user(65): (puthash-key a cons-storer-ht)
(boston ma)
;;  Note the new one is not the one returned:
cl-user(66): (eql a *)
nil
;;  So we break the link to the new one, and use the stored
;;  one so only one copy is live in the image:
cl-user(67): (setq a **)
(boston ma)
</pre>
<hr>



<hr><h2 id="342"><a name="cl-make-array-2">6.7 cl:make-array</a></h2>

<hr><h3 id="343"><a name="make-array-op-bookmarkxx"></a>make-array</h3><h3 id="344">Function</h3><h4 id="345">Package: common-lisp</h4>

<p id="346"><b>Arguments: </b><i>
dims
</i>&amp;key <i>allocation element-type weak short</i><i></i>
[and other standard CL keyword args not listed here]
<i>
</i></p>

<p id="347">
<i>allocation</i> is discussed first and then
<i>weak</i>. <i>short</i> is discussed
briefly after the discussion of <i>weak</i> and in
detail in <a href="#arrays-1">Section 3.0 Arrays and short arrays</a>.
</p>

<p id="348"><i>allocation</i>: <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a>, a standard Common Lisp function, has
been extended to accept the <i>allocation</i> keyword
argument. The value of this argument must be one of the following
keywords (the default is <code>:new</code>, which produces the
behavior of earlier releases).</p>

<table border="1" width="69%">
  <tr>
    <td width="35%"><b>Value of <i>allocation</i> argument</b></td>
    <td width="65%"><b>Meaning</b></td>
  </tr>
  <tr>
    <td width="35%"><code>:new</code></td>
    <td width="65%">Allocate the new array data in new space (the usual behavior). Any array
    element type accepted. This is the default.</td>
  </tr>
  <tr>
    <td width="35%"><code>:old</code></td>
    <td width="65%">Try to allocate the new array data in old space 
    immediately (without waiting for
    it to survive for the required number of scavenges). 
    Any array element type accepted. 
    <p id="349">
    If there is not enough contiguous oldspace available to allocate 
    the array, it will be allocated in newspace. 
    <a href="operators/system/resize-areas.htm"><b>resize-areas</b></a>
    can be used before the allocation in order to ensure that there 
    is enough oldspace available.
    </p>
  </td>
  </tr>
<tr>
<td width="35%"><code>:static</code></td>

<td width="65%" rowspan="2">

Allocate the new array in <a href="operators/excl/aclmalloc.htm"><b>aclmalloc</b></a> (foreign) space. The array will
never be touched by the garbage collector and must be deallocated
explicitly. The arrays must have a specialized element type since
arrays of type <code>t</code> may contain pointers that
the garbage collector may need to update. See the list of array types
in <a href="#data-types-1">Section 2.0 Data types and array types</a> for a list of
specialized array types. Note that if the <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> of an
element type is <code>t</code>, that array may not be
allocated <code>:static</code> or <code>:malloc</code>.
<p id="350">
You must explicitly free the space if it is no longer needed, as
described below. <code>:malloc</code> and
<code>:static</code> are synonyms. (Despite the
<code>:malloc</code> argument name, <a href="operators/excl/aclmalloc.htm"><b>aclmalloc</b></a> is used to allocate space, not
<a href="operators/excl/malloc.htm"><b>malloc</b></a>. It is preferable to
use <code>:static</code> rather than <code>:malloc</code>
to avoid confusion about how the space is allocated.)
</p>
</td>
</tr>

<tr>
<td width="35%"><code>:malloc</code></td>
</tr>

<tr>
<td width="35%"><code>:static-reclaimable</code></td> <td width="65%"> Allocate the new array data in <a href="operators/excl/aclmalloc.htm"><b>aclmalloc</b></a> (foreign) space and the header in
Lisp space. The data will never be touched by the garbage collector
but it will be deallocated when there are no pointers from Lisp (using
a finalization). Only specialized arrays (not arrays of type t) can be
allocated in this way, as with :static/:malloc allocations. See the
description of those allocation types for more details.
</td>
</tr>

<tr>
<td width="35%"><code>:lispstatic-reclaimable</code>
</td>
<td width="65%">
Allocate the new array in malloc (foreign) space. The
array will never be touched by the garbage collector (except to update
pointers back into Lisp space) until there are no pointers from Lisp,
at which point the whole array will be deallocated explicitly. Any
Lisp type can be contained in the array.
</td>
</tr>

</table>

<p id="351"><i>allocation</i> is not a standard Common Lisp
argument to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a> so
programmers may wish to conditionalize it with #+allegro to preserve
code portability.</p>


<p id="352">
Having created a static array, you may wish to free it. To do this,
first pass the array to the function <a href="operators/excl/lispval-other-to-address.htm"><b>lispval-other-to-address</b></a>, which will return an
address (an integer). That address can be passed to <a href="operators/excl/aclfree.htm"><b>aclfree</b></a>. <strong>Note</strong>: if you
reference the array after it has been freed, you will get garbage
values. If you set a value in the array after it has been freed, you
may cause Lisp to fail.
</p>

<p id="353">
<b><i>weak</i></b>: <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a>, a standard Common Lisp function, has
been extended to accept the <i>weak</i> keyword
argument. <i>weak</i> is not a standard Common Lisp
argument to <a href="../ansicl/dictentr/make-arr.htm"><b>make-array</b></a> so
programmers may wish to conditionalize it with #+allegro to preserve
code portability. <i>weak</i> may be true (meaning
create a weak array) or <code>nil</code> (meaning create a
standard array). The default is <code>nil</code>.</p>

<p id="354">A Lisp object becomes garbage when nothing points to or references
it. The way the garbage collector works is it finds and identifies
live objects (often then moving them somewhere). Whatever is left is
garbage. Weak arrays allow pointers to objects which will not,
however, keep them alive. If one of these pointers exists, the garbage
collector will see the item and (depending on the circumstances),
either keep it alive or abandon it. </p>

<p id="355">If you specify <i>weak</i> true, you cannot specify
the non-standard <i>allocation</i> argument or the
standard <i>displaced-to</i> argument. The only values
accepted for the standard <i>element-type</i> argument
are those for which no specialized array type for that element-type is
defined (i.e. <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a> applied to
<em>element-type</em> should return <code>t</code>, which
in essence means you should not specify <i>element-type</i>).
</p>

<p id="356">
<b><i>short</i></b>: Allegro CL supports two fundamental
kinds of arrays: standard and short. Short arrays (equivalent to the
array type in releases prior to 7.0) have a smaller maximum size than
standard arrays. See <a href="#arrays-1">Section 3.0 Arrays and short arrays</a> for
details. When :short t is specified, a short array is
produced. Otherwise a standard array is produced.
</p>

<p id="357">
See <a href="gc.htm#weak-arrays-2">Weak arrays and
hashtables</a> in <a href="gc.htm">gc.htm</a> for more information on
weak arrays.
</p>

<hr>



<hr><h2 id="358"><a name="cl-namestring-2">6.8 cl:namestring</a></h2>

<hr><h3 id="359"><a name="namestring-op-bookmarkxx"></a>namestring</h3><h3 id="360">Function</h3><h4 id="361">Package: common-lisp</h4>

<p id="362"><b>Arguments: </b><i>
pathname </i>&amp;key <i>syntax</i><i>
</i></p>

<p id="363">
<a href="../ansicl/dictentr/namestri.htm"><b>cl:namestring</b></a> takes a pathname
designator and returns the full namestring of the pathname.  Allegro
CL adds an additional keyword argument:
<i>syntax</i>. The value of <i>syntax</i>
can be <code>nil</code> or <code>:unix</code>. The
behavior of the <i>syntax</i> argument is different on
Unix and Unix-like platforms and on Windows.
</p>
<h4 id="364">
On Unix and Unix-like platforms
</h4>
<p id="365">
The <i>syntax</i> argument is ignored.
</p>
<h4 id="366">
On Windows
</h4>
<p id="367">
If <i>syntax</i> is <code>:unix</code>, any
backward slashes in the pathname are converted to forward slashes. If
<i>syntax</i> is <code>nil</code> (the
default), no slashes are converted and <a href="../ansicl/dictentr/namestri.htm"><b>cl:namestring</b></a> behaves normally.
</p>
<p id="368">
Thus, on Windows only, 
</p>
<pre id="369">
(namestring "\\ftp\\pub\\patches\\8.0\\ftp.001" :syntax :unix)
  <b>returns</b> "/ftp/pub/patches/8.0/ftp.001"

while

(namestring "\\ftp\\pub\\patches\\8.0\\ftp.001")
  <b>returns</b> "\\ftp\\pub\\patches\\8.0\\ftp.001"
</pre>
<p id="370">
The argument was added to assist ftp functions called from
Windows. Functions like <a href="ftp.htm#map-over-ftp-directory-op-bookmarkxx"><b>map-over-ftp-directory</b></a> called on Windows
generates pathnames of the files in an ftp directory, but these
generated pathnames use Windows syntax (with backward slashes
delimiting directories). In order for these pathnames to be used in
calls to other ftp functions, such as <a href="ftp.htm#ftp-stream-file-mod-time-op-bookmarkxx"><b>ftp-stream-file-mod-time</b></a>, they must be
first converted to Unix syntax. Users writing their own mapping
functions for ftp directories may find this added feature of <a href="../ansicl/dictentr/namestri.htm"><b>cl:namestring</b></a> useful. The ftp client
module is described in <a href="ftp.htm">ftp.htm</a>.
</p>


<hr>





<hr><h2 id="371"><a name="cl-defpackage-2">6.9 cl:defpackage and cl:in-package</a></h2>

<hr><h3 id="372"><a name="defpackage-op-bookmarkxx"></a>defpackage</h3><h3 id="373">Macro</h3><h4 id="374">Package: common-lisp</h4>


<p id="375"><b>Arguments: </b><i>
defined-package-name </i> &amp;rest <i>options</i><i>
</i></p>

<p id="376">
The specification of <a href="../ansicl/dictentr/defpacka.htm"><b>defpackage</b></a> is silent on whether,
when there are two defpackage forms for the same package, the second
should augment the first or the second should replace the first.
</p>
<p id="377">
Consider, for example, the following two defpackage forms:
</p>
<pre id="378">
(defpackage :newpack (:use :excl :cl))
(defpackage :newpack (:use :net.uri))
</pre>
<p id="379">
What is the package-use-list after the second defpackage form returns:
a list of three packages (excl, common-lisp, and net.uri) or a list of
a single package (net.uri)? Allegro CL augments the package specification rather than replacing it, as illustrated by the following transcript:
</p>
<pre id="380">
cl-user(1): (defpackage :newpack (:use :excl :cl))
#&lt;The newpack package&gt;
cl-user(2): (package-use-list (find-package :newpack))
(#&lt;The excl package&gt; #&lt;The common-lisp package&gt;)
cl-user(3): (defpackage :newpack (:use :net.uri))
#&lt;The newpack package&gt;
cl-user(4):  (package-use-list (find-package :newpack))
(#&lt;The net.uri package&gt; #&lt;The excl package&gt; #&lt;The common-lisp package&gt;)
</pre>

<h2 id="381">
Treatment of string designator arguments named by symbols
</h2>

<p id="382">
If you use a symbol (other than a keyword) to specify a value which is
eventually converted into a string (such as the package
name <code>foo</code> in <code>(defpackage foo)</code>),
then the macroexpansion of the <b>defpackage</b> form will reference
the uninterned symbol named
<code>foo</code>, not <code>foo</code> internal in some
package. This makes little difference to the Lisp which processes,
either evaluating or compiling, the <b>defpackage</b> form
-- <code>foo</code> will end up being interned in the current
package when the form is read -- but does make a difference to Lisp
images which simply read the fasl (compiled Lisp) file which contains
the <b>defpackage</b> form.
</p>
<p id="383">
This means that you can use symbols for names in <b>defpackage</b>
forms in your application files, compile those files, and when you
later use the compiled files to build your application, it will not
have package name spaces cluttered by these symbols. Using a symbol
has the advantage that it finesses the case-mode
issue. <code>(defpackage foo)</code> creates the "FOO" package
in an ANSI Lisp and the "foo" package in a modern Lisp
(see <a href="case.htm">case.htm</a>).
</p>

<hr>

<hr><h3 id="384"><a name="in-package-op-bookmarkxx"></a>in-package</h3><h3 id="385">Macro</h3><h4 id="386">Package: common-lisp</h4>

<p id="387"><b>Arguments: </b><i>
package-name
</i></p>

<p id="388">
The Common Lisp macro <a href="../ansicl/dictentr/in-packa.htm"><b>in-package</b></a> changes the value
of <a href="../ansicl/dictentr/package.htm"><code>*package*</code></a> to the
package designated by <b><i>package-name</i></b>. If
<i>package-name</i> is a symbol, the macroexpansion of
the in-package form converts that symbol reference to an uninterned
symbol of that name. See the discussion under the heading <b>Treatment
of string designator arguments named by symbols</b> in the description
of <b>defpackage</b> above for why this is a useful feature.
</p>

<hr>





<hr><h2 id="389"><a name="cl-file-length-2">6.10 cl:file-length</a></h2>

<hr><h3 id="390"><a name="file-length-op-bookmarkxx"></a>file-length</h3><h3 id="391">Function</h3><h4 id="392">Package: common-lisp</h4>

<p id="393"><b>Arguments: </b><i>
stream
</i></p>

<p id="394">
Allegro CL allows <i>stream</i> to be a pathname or a
namestring as well as a stream open to a file (ANSI CL specifies only
a stream open to a file). For a pathname or a namestring argument, the
<a href="../ansicl/dictentr/file-len.htm"><b>file-length</b></a> function returns
the size (number of octets, that is 8-bit bytes) of the associated
file.
</p>
<p id="395">
We also do not signal an error when the argument to <b>file-length</b>
is a string stream or a buffer stream (instead of just a stream open
to a file). See the discussion of <b>file-length</b> in
<a href="#compliance-1">Section 10.0 Conformance with the ANSI specification</a> for further details.
</p>

<hr>



<hr><h2 id="396"><a name="cl-file-write-date-2">6.11 cl:file-write-date</a></h2>

<p id="397">
There are two implementation details for <a href="../ansicl/dictentr/file-wri.htm"><b>cl:file-write-date</b></a>:
</p>

<ol>
<li id="398">
A <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> method has been
provided for <a href="../ansicl/dictentr/file-wri.htm"><b>file-write-date</b></a>. It sets the
<code>mtime</code> (the modification time on UNIX) of the
file. On Windows, the comparable value is set.
</li>
<li id="399">
If the file specified by the <i>pathspec</i> argument
does not exist, <code>nil</code> is returned (rather than
an error being signaled).
</li>
</ol>

<p id="400">
The fact that <code>nil</code> is returned when the
argument file does not exist is arguably an ANSI non-compliance. The
Spec says: "An error of type file-error is signaled if the file system
cannot perform the requested operation". But it also says: "returns
nil if such a time cannot be determined". Returning <code>nil</code> in this situation is longstanding behavior in
Allegro CL and is being maintained.
</p>




<hr><h2 id="401"><a name="cl-lisp-implementation-version-2">6.12 cl:lisp-implementation-version</a></h2>

<p id="402">
In Allegro CL, <a href="../ansicl/dictentr/lisp-imp.htm"><b>cl:lisp-implementation-version</b></a> returns two
value. The first is a string which is of the form
</p>
<pre id="403">
"[Version number] [[Platform]] ([Date and time of build])"
</pre>

<p id="404">
For example
</p>

<pre id="405">
"8.1 [64-bit Linux (AMD64)] (Feb 7, 2007 14:55)"
</pre>

<p id="406">
The second return value is a list of strings (there may be only one)
that identify the Allegro shared library build version. For example:
</p>

<pre id="407">
("lisp_build_NNN")
</pre>

<p id="408">
<code>NNN</code> is an integer which is increased with each new
build. (The library is often updated between releases because of
patches.) So, a call looks like:
</p>

<pre id="409">
cl-user(2): (lisp-implementation-version)
"8.1 [64-bit Linux (AMD64)] (Feb 7, 2007 14:55)"
("lisp_build_1")
cl-user(3): 
</pre>

<p id="410">
These examples are for illustration only. The values you see will be
different. This information may be helpful when trying to identify a
potential problem, allowing users at different sites to be sure they
are running the same versions of all parts of Allegro CL.
</p>







<hr><h2 id="411"><a name="fast-writing-reading-floats-2">6.13 Functionality for quickly writing and reading floats</a></h2>

<p id="412">
Often you wish to write floating point numbers to a file which is read
later, perhaps in the same Lisp invocation but more likely in a
different one. The simple way to do this, writing the decimal
representation of the floats, suffers from being very inefficient and
somewhat inexact. (It is expensive to convert the internal binary
representation to decimal for writing, and then the decimal
representation back to binary when the values are read.)
</p>
<p id="413">
Allegro CL provides functions that write and read the binary
representation of floats (rather than the decimal representation),
thus saving the time and loss of accuracy associated with conversion
to and from decimal format. The functions are <a href="operators/excl/single-float-to-shorts.htm"><b>single-float-to-shorts</b></a>, <a href="operators/excl/double-float-to-shorts.htm"><b>double-float-to-shorts</b></a>, <a href="operators/excl/shorts-to-single-float.htm"><b>shorts-to-single-float</b></a>, and <a href="operators/excl/shorts-to-double-float.htm"><b>shorts-to-double-float</b></a>. Note that machine
binary representations are used by most languages, and so, just as
Allegro CL can read the files produced by writing the integers
returned by <a href="operators/excl/single-float-to-shorts.htm"><b>single-float-to-shorts</b></a> and convert them back
to floating point numbers, programs easily written in other languages
can do so as well.
</p>



<hr><h2 id="414"><a name="provide-require-2">6.14 cl:provide and cl:require</a></h2>

<p id="415">
An additional <i>version</i> optional argument has been
added to <b>cl:provide</b> and <b>cl:require</b>. It allows specifying
a minimal version acceptable for loading a module.
</p>

<hr><h3 id="416"><a name="provide-op-bookmarkxx"></a>provide</h3><h3 id="417">Function</h3><h4 id="418">Package: common-lisp</h4>

<p id="419"><b>Arguments: </b><i>
module-name
</i> &amp;optional <i>version</i><i>
</i></p>

<p id="420">
The non-standard <i>version</i> argument, if specified,
should be a positive real number (a float or an integer). This value
is checked when the module specified by
<i>module-name</i> is loaded. If the <b>cl:require</b>
form also specified a <i>version</i>, it is compared
(numerically) with the version in the <b>provide</b> form. If the
require version is less than the provide version, a continuable error
is signaled. If either form does not have a version specified, there
will be no error.
</p>

<hr>

<hr><h3 id="421"><a name="require-op-bookmarkxx"></a>require</h3><h3 id="422">Function</h3><h4 id="423">Package: common-lisp</h4>

<p id="424"><b>Arguments: </b><i>
module-name
</i> &amp;optional <i>pathname min-version</i><i>
</i></p>

<p id="425">
The non-standard <i>min-version</i> argument, if
specified, should be a positive real number (a float or an
integer). This value is compared with the version specified in the
<b>cl:provide</b> form in the module. An error will be signaled if the
<b>cl:provide</b> form has a version less than the value of
<i>min-version</i>. If the <b>cl:provide</b> form has no
version specified (or there is no <b>cl:provide</b>), no error will be
signaled.
</p>

<hr>


<hr><h2 id="426"><a name="macroexpand-2">6.15 cl:macroexpand and cl:macroexpand-1</a></h2>

<p id="427">
Both <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand</b></a> and
<a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> are
enhanced to receive a new argument, special-operator-stop, and to add
behavior for specific kinds of environments.
</p>


<hr><h3 id="428"><a name="macroexpand-op-bookmarkxx"></a>macroexpand</h3><h3 id="429">Function</h3><h4 id="430">Package: common-lisp</h4>

<p id="431"><b>Arguments: </b><i>
form
</i> &amp;optional <i>environment special-operator-stop</i><i>
</i></p>

<p id="432">
A second (non-standard) optional argument,
<i>special-operator-stop</i>, has been added to allow
controlling behavior for specific kinds of environments.
</p>
<p id="433">
If the <i>environment</i> passed in is a
<code>:compiler</code> environment (as opposed to a
<code>:compilation</code>, <code>:interpreter</code>,
<code>:evaluation</code>, or <code>:macros-only</code>)
then compiler-macros will be expanded by both <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand</b></a> and <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a>. This is to simulate what
happens when the compiler does its macro expansions. Note that this
behavior is an extension to the ANSI Spec, which states that
compiler-macros are not expanded by
<b>macroexpand</b>/<b>macroexpand-1</b>.  Note also that any portable
code-walker which expects to receive an ansi-compliant environment
must condition the environment by using <a href="operators/system/ensure-portable-walking-environment.htm"><b>sys:ensure-portable-walking-environment</b></a> on
the argument.
</p>
<p id="434">
If a <code>:compiler</code> environment is passed in to <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand</b></a>/<a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> and
<i>special-operator-stop</i> is true, then a
special-form (a form whose car is a special-operator) will not be
macroexpanded, as is otherwise usually the situation.  This feature is
provided to allow a specialized code-walker (not necessarily a
portable one) to see what special forms the compiler sees.  If the
walker then knows how to interpret the syntax of the special-operator,
it can do so in an implementation-dependent way; otherwise, it can
always do the macroexpansion again with the
<i>special-operator-stop</i> set to <code>nil</code>, in order to get a full macroexpansion through
the special form.
</p>
<h3 id="435">
Example
</h3>

<pre id="436">
cl-user(1): (setq env (sys:make-compilation-unit-environment))
#&lt;Augmentable compiler environment @ #x40c916aa&gt;
cl-user(2): (macroexpand '(case num
                            (1 (foo &quot;one&quot;))
                            (2 (foo &quot;two&quot;))
                            (3 (foo &quot;three&quot;))
                            (otherwise (foo &quot;unknown&quot;)))
                            )
(let ()
  (cond ((eql '1 num) (foo &quot;one&quot;))
        ((eql '2 num) (foo &quot;two&quot;))
        ((eql '3 num) (foo &quot;three&quot;))
        (t (foo &quot;unknown&quot;))))
t
cl-user(3): (macroexpand '(case num
                            (1 (foo &quot;one&quot;))
                            (2 (foo &quot;two&quot;))
                            (3 (foo &quot;three&quot;))
                            (otherwise (foo &quot;unknown&quot;)))
                            env)
(let ()
  (cond ((eql '1 num) (foo &quot;one&quot;))
        ((eql '2 num) (foo &quot;two&quot;))
        ((eql '3 num) (foo &quot;three&quot;))
        (t (foo &quot;unknown&quot;))))
t
cl-user(4): (macroexpand '(case num
                            (1 (foo &quot;one&quot;))
                            (2 (foo &quot;two&quot;))
                            (3 (foo &quot;three&quot;))
                            (otherwise (foo &quot;unknown&quot;)))
                            env t)
(excl::simple-case num (1 (foo &quot;one&quot;)) (2 (foo &quot;two&quot;)) (3 (foo &quot;three&quot;))
                   (otherwise (foo &quot;unknown&quot;)))
t
cl-user(5): (macroexpand-1 * env t)
(excl::simple-case num (1 (foo &quot;one&quot;)) (2 (foo &quot;two&quot;)) (3 (foo &quot;three&quot;))
                   (otherwise (foo &quot;unknown&quot;)))
nil
cl-user(6): (macroexpand-1 * env)
(let ()
  (cond ((eql '1 num) (foo &quot;one&quot;))
        ((eql '2 num) (foo &quot;two&quot;))
        ((eql '3 num) (foo &quot;three&quot;))
        (t (foo &quot;unknown&quot;))))
t
cl-user(7): 
</pre>

<hr>

<hr><h3 id="437"><a name="macroexpand-1-op-bookmarkxx"></a>macroexpand-1</h3><h3 id="438">Function</h3><h4 id="439">Package: common-lisp</h4>

<p id="440"><b>Arguments: </b><i>
form
</i> &amp;optional <i>environment special-operator-stop</i><i>
</i></p>

<p id="441">
The effect of the second (non-standard) optional argument to <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> is the same as
described just above in the description of macroexpand in Allegro
CL. See that description and the associated examples for further
details.
</p>

<hr>



<hr><h2 id="442"><a name="simple-condition-format-2">6.16 cl:simple-condition-format-arguments and cl:simple-condition-format-control</a></h2>

<p id="443">
The generic functions <a href="../ansicl/dictentr/simple-4.htm"><b>cl:simple-condition-format-control</b></a> and
<a href="../ansicl/dictentr/simple-4.htm"><b>cl:simple-condition-format-arguments</b></a>
take condition arguments and return the values of the respective
slots. Allegro CL extends the condition system to define and sometimes
bind the format-control and format-arguments slots in all
conditions. That is, the slots always exist but are only sometimes
bound. The slot names are internal in the <b>excl</b> package, and so
are <b>excl::format-control</b> and <b>excl::format-arguments</b>.
</p>
<p id="444">
Because the slots are not always bound (except for actual
simple-conditions), code should check that there are bound before
trying to access them, with tests like:
</p>
<pre id="445">
(slot-boundp <i>instance</i> 'excl::format-control)
(slot-boundp <i>instance</i> 'excl::format-arguments)
</pre>
<p id="446">
Because these slots need not exist in Lisps other than Allegro CL
(again except for simple-conditions) code which tries to access them
should be conditionalized for Allegro CL. 
</p>
<p id="447">
Many conditions in Allegro CL which are not simple conditions bind
these slots (including, for example, <a href="../ansicl/dictentr/undefine.htm"><code>undefined-function</code></a> and and <a href="../ansicl/dictentr/unbound-.htm"><code>unbound-variable</code></a>). We do
not give a list, however, because it will likely go out of date. Users
who wish to make use of the slot value should, again, test whether
they are bound before accessing them.
</p>







<hr><h2 id="448"><a name="user-homedir-pathname-2">6.17 What user-homedir-pathname does on Windows</a></h2>

<p id="449">
<a href="../ansicl/dictentr/user-hom.htm"><b>user-homedir-pathname</b></a>
is a Common Lisp function that "determines the pathname that
corresponds to the user's home directory on host."
<i>host</i> is an optional argument. 
</p>
<p id="450">
In Allegro CL, the host argument is ignored in all cases. Allegro CL
simply polls the Operating system in which it is running asking for
the current user's home directory. On UNIX, this concept is well
defined. On Windows, the notion of a home directory is more
murky. Here is what Allegro CL does on Windows.
</p>
<ol>
<li id="451">
If there is a value for the HOME environment variable, it is
obtained. It will be a string.
</li>
<li id="452">
If HOME has no value, then the HOMEDRIVE and HOMEPATH environment
variables are examined and if both exist, a string is made from
concatenating them together.
</li>
</ol>
<p id="453">
If a value has been determined from HOME or the combination of
HOMEDRIVE and HOMEPATH, that value is processed and returned as a
pathname if it exists. HOME or HOMEDRIVE and HOMEPATH are not set, or
if the home directory they specify does not exist, #P"C\\" is
returned. (A warning is signaled if the environment variables name a
directory which does not exist.)
</p>
<p id="454">
Thus, on Windows, you can change what <a href="../ansicl/dictentr/user-hom.htm"><b>user-homedir-pathname</b></a> returns in a
running Lisp by setting the value of the HOME environment variable to
be a string naming the desired existing directory, for example:
</p>
<pre id="455">
(setf (sys:getenv "HOME") "C:\\mydir\\")
</pre>
<p id="456">
Only the Lisp process see this value of HOME. You are not setting it
for all processes or permanently.
</p>








<hr><h2 id="457"><a name="readtable-2">6.18 The standard readtable is read-only, affect on with-standard-io-syntax</a></h2>

<p id="458">
The standard readtable, which is the initial value
of <a href="../ansicl/dictentr/readtabl.htm"><code>*readtable*</code></a> cannot be
modified. You can, of course, copy it and modify the copy as
desired. 
</p>
<p id="459">
The restriction on modifying the standard
readtable (which was added in release 8.2) should not
affect user code except possibly calls to
<a href="../ansicl/dictentr/with-sta.htm"><b>with-standard-io-syntax</b></a>. That
macro binds many global variables associated with output,
including <a href="../ansicl/dictentr/readtabl.htm"><code>*readtable*</code></a>,
to their initial or default values. An attempt in the body of a call
to <a href="../ansicl/dictentr/with-sta.htm"><b>with-standard-io-syntax</b></a> to
modify the current readtable (the value of <a href="../ansicl/dictentr/readtabl.htm"><code>*readtable*</code></a>) will fail unless the value of
<code>*readtable*</code> has been changed earlier in the body to
the macro to a non-read-only readtable.
</p>





<hr><h2 id="460"><a name="pprint-2">6.19 Speed and pretty printing</a></h2>

<p id="461">
While investigating ways to speed up Allegro CL, developers at Franz
determined that pretty printing was a significant user of compute
cycles, and that turning pretty printing off produced significant
speedup of code that did output. This conclusion is not particularly
suprising, of course. It takes work to produce pretty output. The
question is, what to do about it. Turning off pretty printing sounds
easier than it is.
</p>
<p id="462">
Allegro CL starts with <code>*print-pretty*</code> set to
<code>t</code> and further, the value in <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a>
is (essentially) <code>t</code> as well. So simply setting
<code>*print-pretty*</code> to <code>nil</code> will
not work because the true value will tend to return unexpectedly (in
new processes, for example).
</p>
<p id="463">
Further, user code may depend on the initial value of
<code>*print-pretty*</code> being <code>t</code>, so
the initial value could not be changed. 
</p>
<p id="464">
However, we can make suggestions to users so that they can achieve the
speedups when desired.
</p>
<h4 id="465">In a development image</h4>

<p id="466">
There are three steps.
</p>
<p id="467">
(1) change the value of <code>*print-pretty*</code>
in <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a> to <code>nil</code> by evaluating
</p>
<pre id="468">
(setq *print-pretty* nil)
(tpl:setq-default *print-pretty* nil)
</pre>
<p id="469">
(See <a href="operators/tpl/setq-default.htm"><b>setq-default</b></a>.)
</p>
<p id="470">
(2) avoid using format strings that are pretty-printing by nature
(such as <code>~&lt; ... ~:$gt;</code>).
</p>

<p id="471">
(3) Set the value of <a href="variables/excl/s_pprint-gravity_s.htm"><code>*pprint-gravity*</code></a> to
<code>nil</code>. Code in Allegro CL that used to bind
<code>*print-pretty*</code> to <code>t</code> now
bind it to <a href="variables/excl/s_pprint-gravity_s.htm"><code>*pprint-gravity*</code></a>. That variable is
not set on the <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a> list.
</p>

<h4 id="472">In custom images</h4>

<p id="473">
There is a module <i>pprint.fasl</i>. When loaded into
an image, it sets <code>*print-pretty*</code> and
<a href="variables/excl/s_pprint-gravity_s.htm"><code>*pprint-gravity*</code></a> to <code>t</code>. This module is loaded automatically when an image
is built with a standard top-level. However, when an image is built
with a minimal top-level (as described in <a href="building-images.htm#minimal-top-levels-1">Minimal top
levels</a> in <a href="building-images.htm">building-images.htm</a>, the
<code>pprint</code> module is not loaded.
</p>
<p id="474">
So when building an image, you can include them for a development
image (above), putting them in, say, <b>custom.cl</b>, or you can build the image with
a minimal top-level.
</p>
<p id="475">
Note that the guts of pretty-printing are in the
<code>pprint</code> module. Whenever a format statement, or a
print statement with <code>*print-pretty*</code> set to <code>t</code>, is executed, the pprint module is required, so
that the machinery is present to do the pretty-printing.  So you have
to be careful to avoid such cases. If you need pretty printing, you
should use the strategy presented above rather than a minimal
top-level strategy.
</p>
<p id="476">
Starting in release 6.2, the new variable <a href="variables/excl/s_print-circle-gravity_s.htm"><code>*print-circle-gravity*</code></a> acts
with respect to <a href="../ansicl/dictentr/print-ci.htm"><code>*print-circle*</code></a> as <a href="variables/excl/s_pprint-gravity_s.htm"><code>*pprint-gravity*</code></a> does with <a href="../ansicl/dictentr/print-pr.htm"><code>*print-pretty*</code></a>: no Allegro CL
code sets the value of <a href="../ansicl/dictentr/print-ci.htm"><code>*print-circle*</code></a>. Instead, Allegro CL code binds
it where necessary to the value of <a href="variables/excl/s_print-circle-gravity_s.htm"><code>*print-circle-gravity*</code></a>, and <a href="variables/excl/s_print-circle-gravity_s.htm"><code>*print-circle-gravity*</code></a> is only
set in two places: initially to <code>nil</code> and in
the <code>:pprint</code> module to <code>t</code>.
</p>

<h4 id="477">Further notes</h4>

<p id="478">
Please check the Allegro CL FAQ from time to time to see if there is
new information on this issue.
</p>





<hr><h2 id="479"><a name="class-precedence-list-2">6.20 class-precedence-list: when is it available?</a></h2>

<p id="480">
The class-precedence-list is calculated by <b>mop:finalize-inheritance</b>
but it is not installed into the class until close to the end of
finalization, as <b>mop:class-precedece-list</b> signals a program
error when the class is not finalized. But the class-precedence-list
is available much earlier and can be accessed with
</p>

<pre id="481">
(slot-value class 'mop:class-precedence-list)
</pre>

<p id="482">
after it is actually calculated (but before the operator
<b>mop:class-precedece-list</b> can access it).
</p>








<hr><h2 id="483"><a name="infinities-nans-2">6.21 Floating-point infinities and NaNs, and floating-point underflow and overflow</a></h2>

<p id="484">
The IEEE floating-point standard calls for infinities and NaNs
(Not-a-Number) to be represented and used. So division of a non-zero
finite float by zero produces an infinity, while a division of zero by
zero produces a NaN.
</p>
<p id="485">
the Common Lisp standard does not call for these special floats (as
they are often called), but does allow for implementation of
IEEE. Further, compiled code which dispatches directly to an IEEE
floating-point processor may get back a special float result which it
may just return, particularly if it is compiled at high speed and low
safety. So consider the following from Allegro CL:
</p>
<pre id="486">
cl-user(115): (defun foo-err (sf)
                (declare (single-float sf))
                (declare (optimize (speed 1) (safety 1)))
                (/ 1.0 sf))
foo-err
cl-user(116): (compile *)
foo-err
nil
nil
cl-user(117): (foo-err 0.0)
Error: Attempt to divide 1.0 by zero.
  [condition type: division-by-zero]
[1] cl-user(118): :reset
cl-user(119): (defun foo-inf (sf)
                (declare (single-float sf))
                (declare (optimize (speed 3) (safety 1)))
                (/ 1.0 sf))
foo-inf
cl-user(120): (compile *)
foo-inf
nil
nil
cl-user(121): (foo-inf 0.0)
#.excl::*infinity-single*
cl-user(122): 
</pre>
<p id="487">
In the safe code, we get an error. In the fast code, we (silently) get
infinity. This is not unexpected. Fast code is supposed to be fast and
it achieves speed by discarding checks. The fp processor on the
machine where this was run is an IEEE processor and it does not set
the error flag for division by zero. Instead, it retuns the legal IEEE
float infinity. 
</p>


<p id="488">
There are predicate function that return true when an object is a
floating-point infinity or a NaN. <a href="operators/excl/exceptional-floating-point-number-p.htm"><b>exceptional-floating-point-number-p</b></a>
returns true when passed an floating-point infinity or
NaN. <a href="operators/excl/nanp.htm"><b>nanp</b></a> returns
true when passed a NaN and <a href="operators/excl/infinityp.htm"><b>infinityp</b></a> returns true when passed an
infinity.
</p>

<p id="489">
Because underflows and overflows often signal an error, code like
<code>(expt most-positive-single-float 2)</code> will now error
rather than returning an infitity. Users who want infinite value
and who do something like:
</p>

<pre id="490">
(defvar +single-positive-infinity+ (expt most-positive-single-float 2))
</pre>

<p id="491">
should instead do
</p>

<pre id="492">
(defvar +single-positive-infinity+ excl:*infinity-single*)
</pre>

<p id="493">
The six special-float constants are:
</p>
<ul>
<li id="494">

<a href="variables/excl/s_infinity-single_s.htm"><code>*infinity-single*</code></a>

</li>
<li id="495">

<a href="variables/excl/s_infinity-double_s.htm"><code>*infinity-double*</code></a>

</li>
<li id="496">

<a href="variables/excl/s_negative-infinity-single_s.htm"><code>*negative-infinity-single*</code></a>

</li>
<li id="497">

<a href="variables/excl/s_negative-infinity-double_s.htm"><code>*negative-infinity-double*</code></a>

</li>
<li id="498">

<a href="variables/excl/s_nan-single_s.htm"><code>*nan-single*</code></a>

</li>
<li id="499">

<a href="variables/excl/s_nan-double_s.htm"><code>*nan-double*</code></a>

</li>
</ul>

<p id="500">
Arithmetic operations with special floats are legal. Generally, the
result of an operation with a special float is a special float, the
exception being dividing by infinity which produces zero. The
following table shows the result of operations. Note we do not cover
all cases nor most floating-point coercion cases. An operation with a
double and a single results in a double.
</p>
<table BORDER="1" CELLSPACING="1" CELLPADDING="8">
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="501" ALIGN="CENTER"><b>Operation</b></p></td>
    <td WIDTH="28%" VALIGN="TOP"><p id="502" ALIGN="CENTER"><b>Arg1</b></p></td>
    <td WIDTH="28%" VALIGN="TOP"><p id="503" ALIGN="CENTER"><b>Arg2</b></p></td>
    <td WIDTH="28%" VALIGN="TOP"><p id="504" ALIGN="CENTER"><b>result</b></p></td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="505" ALIGN="CENTER"><b>Any</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
    <td WIDTH="28%" VALIGN="TOP">Any single</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="506" ALIGN="CENTER"><b>Any</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
    <td WIDTH="28%" VALIGN="TOP">Any double</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-double*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="507" ALIGN="CENTER"><b>Any</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*nan-double*</td>
    <td WIDTH="28%" VALIGN="TOP">Any</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-double*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="508" ALIGN="CENTER"><b>+</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">finite single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="509" ALIGN="CENTER"><b>+</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">finite double-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-double*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="510" ALIGN="CENTER"><b>+</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-double*</td>
    <td WIDTH="28%" VALIGN="TOP">Any finite</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-double*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="511" ALIGN="CENTER"><b>+</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">*negative-infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="512" ALIGN="CENTER"><b>-</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">Any finite single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">*negative-infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="513" ALIGN="CENTER"><b>*</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">Any positive single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="514" ALIGN="CENTER"><b>*</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">Any negative single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*negative-infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="515" ALIGN="CENTER"><b>*</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="516" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="517" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">any positive finite single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="518" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">any finite single-float</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="519" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="520" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="521" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">Any positive single-float</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">*infinity-single*</td>
  </tr>
  <tr>
    <td WIDTH="16%" VALIGN="TOP"><p id="522" ALIGN="CENTER"><b>/</b></p></td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">0.0S0</td>
    <td WIDTH="28%" VALIGN="TOP">*nan-single*</td>
  </tr>
</table>

<h2 id="523">
Handling underflow (and overflow) errors
</h2>

<p id="524">
Actually, we just discuss underflow errors. The same method will work
with overflow errors. Before handling the error, you must decide what
you want to do: for an underflow, do you want to return zero? Or (if
sorking in single-floats), switch to doubles and try again? Or return
<a href="../ansicl/dictentr/most-po0.htm"><code>least-positive-single-float</code></a> or <a href="../ansicl/dictentr/most-po0.htm"><code>least-positive-single-float</code></a>
(assuming positives)? See also the function <a href="operators/excl/read-tiny-float.htm"><b>read-tiny-float</b></a> which handles the underflow
error when reading a single float from a string, giving you the option
of returning zero or the least-positive/least-negative float of the
appropriate format.
</p>
<p id="525">
Once you have decided that, code like the following will handle the error:
</p>

<pre id="526">
;; This read-from-string form will signal an underflow error:
cl-user(1): (read-from-string "4.9e-324")
Error: expt operation on (2.0 -723) resulted in floating point underflow.
   [condition type: floating-point-underflow]

;; This condition code will trap the error and return 0.0:

(catch 'trap-error
 (handler-bind ((floating-point-underflow
		 #'(lambda (c)
		     (declare (ignore c))
		     (throw 'trap-error 0.0))))
   (read-from-string "4.9e-324")))
</pre>

<p id="527">
That condition code can be adapted to other underflows and also
overflows (changing the condition type to
<code>floating-point-overflow</code>).
</p>





<hr><h2 id="528"><a name="nat-vs-int-2">6.22 The :nat and :unsigned-nat types</a></h2>

<p id="529">
Because the natural word size on 32-but machine is 32-bits and on
64-bit machines is 64-bit, we have defined new
types <code>nat</code> and <code>unsigned-nat</code> which
is a 32-bit integer on 32-bit machines and a 64-bit integer on 64-bit
machines. One can use <code>nat</code>
and <code>unsigned-nat</code> in places
where <code>int</code> and <code>unsigned-int</code> (and
sometimes, <code>long</code>
and <code>unsigned-long</code>) normally go. This allows
sources for both 32-bit and 64-bit lisps to be the same. 
</p>
<p id="530">
Functions that accept nat and unsigned-nat as values for arguments
include <a href="operators/system/memref.htm"><b>memref</b></a>
and <a href="operators/system/memref-int.htm"><b>memref-int</b></a> and
<a href="operators/system/stack-cushion.htm"><b>stack-cushion</b></a>
and <a href="operators/system/set-stack-cushion.htm"><b>set-stack-cushion</b></a>. See
also <a href="ftype.htm">ftype.htm</a>
(particularly <a href="ftype.htm#foreign-type-syntax-1">The Syntax for Foreign Types</a>)
and <i>lisp.h</i>.
</p>







<hr><h2 id="531"><a name="print-follow-2">6.23 Allegro CL print variables can follow the CL print variable value</a></h2>

<p id="532">
Allegro CL has a number of printer variables which control the length
and level of particular kinds of
printing. Thus, <a href="variables/tpl/s_print-length_s.htm"><code>tpl:*print-length*</code></a> controls the print-length
used when printing return values at the
top-level. <a href="../ansicl/dictentr/print-le.htm"><code>cl:*print-length*</code></a> controls the print-length
used by the various print functions. This example illustrates the
difference. Recall <a href="../ansicl/dictentr/writepri.htm"><b>print</b></a>
returns its argument after printing it:
</p>

<pre id="533">
(setq *print-length* nil)
(setq tpl:*print-length* 5)

cl-user(16): (print '(1 2 3 4 5 6 7 8 9 10))

(1 2 3 4 5 6 7 8 9 10) 
(1 2 3 4 5 ...)
cl-user(17): 
</pre>

<p id="534">
The Allegro CL print variables can have the same values as the CL ones
(an integer or <code>nil</code>). They may also have the
value <code>:follow</code>. That value means use the value of
the corresponding CL variable. So if we
make <code>:follow</code> the value of <a href="variables/tpl/s_print-length_s.htm"><code>tpl:*print-length*</code></a>, we get this behavior:
</p>

<pre id="535">
cl-user(9): (setq *print-length* 5)
5
cl-user(10): (setq tpl:*print-length* :follow)
:follow
cl-user(11): (print '(1 2 3 4 5 6 7 8 9 10))

(1 2 3 4 5 ...) 
(1 2 3 4 5 ...)
cl-user(12): (setq *print-length* nil)
nil
cl-user(13): (print '(1 2 3 4 5 6 7 8 9 10))

(1 2 3 4 5 6 7 8 9 10) 
(1 2 3 4 5 6 7 8 9 10)
cl-user(14): 
</pre>

<p id="536">
This facility should be used with care, especially with the tracing
print variables (<a href="variables/excl/s_trace-print-level_s.htm"><code>*trace-print-level*</code></a> etc.), since it eliminates
the protection those variables provide by default when huge or
circular objects are encountered during tracing, or contrarily, it may
prevent trace from providing useful output. A traced function may be
called in a dynamic environment where some surrounding code has for
its own legitimate purposes bound some of these variables to extreme
values.
</p>
<p id="537">
The Allegro CL print variables include:
</p>
<ul>
<li id="538">
<a href="variables/excl/s_step-print-length_s.htm"><code>*step-print-length*</code></a>
</li>
<li id="539">
<a href="variables/excl/s_step-print-level_s.htm"><code>*step-print-level*</code></a>
</li>
<li id="540">
<a href="variables/excl/s_trace-print-array_s.htm"><code>*trace-print-array*</code></a>
</li>
<li id="541">
<a href="variables/excl/s_trace-print-circle_s.htm"><code>*trace-print-circle*</code></a>
</li>
<li id="542">
<a href="variables/excl/s_trace-print-length_s.htm"><code>*trace-print-length*</code></a>
</li>
<li id="543">
<a href="variables/excl/s_trace-print-level_s.htm"><code>*trace-print-level*</code></a>
</li>
<li id="544">
<a href="variables/tpl/s_zoom-print-length_s.htm"><code>tpl:*zoom-print-length*</code></a>
</li>
<li id="545">
<a href="variables/tpl/s_zoom-print-level_s.htm"><code>tpl:*zoom-print-level*</code></a>
</li>
<li id="546">
<a href="variables/tpl/s_zoom-print-circle_s.htm"><code>tpl:*zoom-print-circle*</code></a>
</li>
<li id="547">
<a href="variables/tpl/s_print-length_s.htm"><code>tpl:*print-length*</code></a>
</li>
<li id="548">
<a href="variables/tpl/s_print-level_s.htm"><code>tpl:*print-level*</code></a>
</li>
</ul>





<hr><h2 id="549"><a name="app-64bit-2">6.24 64 bit Allegro CL Implementations</a></h2>

<p id="550">
There are now 64-bit implementations of Allegro CL for some platforms
that support 64-bit operations. 
</p>
<p id="551">
For the most part there is no compatibility issue, especially when dealing
with Lisp. The exceptions are:
</p>

<ul>
<li id="552">
The file <i>lisp.h</i> now requires that you specify
<code>-DAcl32Bit</code> or <code>-DAcl64Bit</code> on the
cc line of any program which includes it, for any architectures for
which there are both 32-bit ports and 64-bit ports (HP Tru64, Sun,
HP for example). It is a good idea to add the -DAcl32Bit option to cc
lines to be sure as additional platforms may be added later.
</li>
<li id="553">
The <i>natural</i> word and address size is 32 for 32-bit
implementations and 64 for 64-bit
implementations. <i>lisp.h</i> defines a new C
pseudo-types called "nat" and "unsigned nat". One can use nat and
unsigned nat in places where int and unsigned int (and sometimes, long
and unsigned long) normally
go. See <a href="#nat-vs-int-2">Section 6.22 The :nat and :unsigned-nat types</a> for more details.
Also, users who include lisp.h in their sources can always count on
Acl64Bit to be defined for foreign to be included in a 64-bit lisp
(though the absence of Acl32Bit does not necessarily mean that the
compilation is not intended for a 32-bit lisp). See
<i>lisp.h</i> and also <a href="operators/system/memref.htm"><b>memref</b></a> and <a href="operators/system/memref-int.htm"><b>memref-int</b></a>.
</li>
<li id="554">
Foreign types are not defined for naturals, but the
<code>:int</code>, <code>:long</code>,
<code>:unsigned-int</code>, and
<code>:unsigned-long</code> types always follow precisely the
sizes of the foreign modules that are successfully loaded into that
Lisp.
</li>
</ul>

<p id="555">
Again, most pure-lisp behavior will be completely portable between
32-bit and 64-bit lisps, and that at most a user is likely only to see
wider values while inspecting objects, or larger addresses in room
displays.
</p>
<p id="556">
For operations that must deal with specific sizes but do not use the
<a href="operators/ff/def-foreign-type.htm"><b>def-foreign-type</b></a>
interface, the natural type (in Lisp) and the nat type (in C) provides
a simple method to allow compatibility between 32-bit and 64-bit lisp
code and foreign modules.
</p>

<h3 id="557">Note about environments on HP machines</h3>

<p id="558">
The same HP machine can run in 32-bit and 64-bit modes, and different
libraries, etc. are used for the different modes. Users should be
aware that the settings of environment variables (such as LPATH,
SHLIB_PATH, and LD_LIBRARY_PATH) appropriate for one mode may be
inappropriate for the other. Bad settings can cause problems for Lisp
(when, for example, it executes shell commands). These problems often
manifest themselves with strange and unexpected errors or problems. If
you experience strange and unexpected errors and problems, consider
whether the cause is inappropriate settings of environment variables.
</p>




<hr><hr><h2 id="559"><a name="acl-and-ansi-1">7.0 Allegro CL and the ANSI CL standard</a></h2>

<p id="560">
A great deal of work has gone into cleaning up the remaining
non-conformances in Allegro CL 7.0.
</p>

<p id="561">Allegro CL 7.0 is an implementation of Common Lisp as specified by
the ANSI X3J13 committee. The standard of conformance has been
accepted by ANSI as final. ANSI is the American National Standards
Institute, and the X3J13 committee prepared the ANSI standard for
Common Lisp.</p>

<p id="562">Common Lisp was originally specified in <i>Common Lisp: the
Language</i>, 1st edition (CLtL-1). That standard is now out of
date. <i>Common Lisp: the Language</i>, 2nd edition (CLtL-2) describes
an early version of the ANSI standard. It is still used but please
understand that the final ANSI standard has diverged in a number of
ways from CLtL-2, so CLtL-2 is no longer definitive.</p>

<hr><h2 id="563"><a name="cltl1-compatibility-2">7.1 Compatibility with pre-ANSI CLtL-1 in Allegro CL</a></h2>

<p id="564">
The several symbols removed from the language by X3J13 but preserved
by Allegro CL for backward compatibility are exported from the
<code>cltl1</code> package. These generally retain their CLtL-1
definitions. We list the symbols exported from the
<code>cltl1</code> package at the end of this section. Note that
the definitions are in the <code>:cltl1</code> module.
</p>

<p id="565">
Two symbols exported from the <code>flavors</code> package conflict
with symbols now exported from the common-lisp package as part of
CLOS: <b>defmethod</b> and <b>make-instance</b>.  This means that no
package can use the flavors package without shadowing these two
symbols. See the code at the beginning of
<a href="flavors.htm">flavors.htm</a>.
</p>

<p id="566">
The following symbols in the cltl1 package have been deleted from
standard Common Lisp by X3J13. They (for the most part) maintain their
CLtL-1 functionality. You may use the cltl1 package to get backward
compatibility but we recommend that you write all new code so that you
do not use these symbols and that you modify all existing code as soon
as practical. 
</p>

<p id="567">
Note that <strong>special-form-p</strong>
is in the cltl1 package. That symbol was previously in the common-lisp
package but has been replaced in that package with the symbol <a href="../ansicl/dictentr/special-.htm"><b>special-operator-p</b></a>.
</p>

<p id="568">
These symbols were in the <code>cltl1</code> package since
release 4.0 and are still there:
</p>

<ul>
<li id="569">
<b>applyhook</b>: (function) along with *applyhook*, evalhook, and
*evalhook*, provided functionality to affect evaluation.
</li>
<li id="570">
<code>*applyhook*</code>: (variable) along with applyhook,
*evalhook*, and evalhook, provided functionality to affect
evaluation.
</li>
<li id="571">
<code>*break-on-warnings*</code>: (variable) if true, go into a
break loop when a warning is signaled (essentially replaced by <a href="../ansicl/dictentr/break-on.htm"><code>*break-on-signals*</code></a>).
</li>
<li id="572">
<b>char-bit</b>: (function) when passed a character and a bit name
(such as :control), returns true or false as the character has that
bit set. This and <b>char-control-bit</b>, <b>char-hyper-bit</b>,
<b>char-meta-bit</b>, and <b>char-super-bit</b> were all eliminated
because there is no longer any standard set of modifying keys.
</li>
<li id="573">
<b>char-bits</b>: (function) returns the value of the bits attribute
(no longer supported in ANSI CL but still present in Allegro CL) of
the argument character.
</li>
<li id="574">
<b>char-bits-limit</b>: (variable) value is the upper limit of the bits
attribute (see <b>char-bits</b> just above).
</li>
<li id="575">
<b>char-control-bit</b>: (variable) indicates the location of
the control bit. See <b>char-bit</b> above.
</li>
<li id="576">
<b>char-font</b>: (function) returns the value of the font attribute
(no longer supported in ANSI CL but still present in Allegro CL) of
the argument character.
</li>
<li id="577">
<b>char-font-limit</b>: (constant) value is the upper limit of the font
attribute (see <b>char-font</b> just above).
</li>
<li id="578">
<b>char-hyper-bit</b>:(function)  indicates the location of
the hyper bit. See <b>char-bit</b> above.
</li>
<li id="579">
<b>char-meta-bit</b>: (constant) indicates the location of
the meta bit. See <b>char-bit</b> above.
</li>
<li id="580">
<b>char-super-bit</b>: (constant) indicates the location of
the super bit. See <b>char-bit</b> above.
</li>
<li id="581">
<b>compiler-let</b>: (special-operator) allows specification of bindings
that affect compilation but do not appear in the resulting compiled
code.
</li>
<li id="582">
<b>evalhook</b>: (function) along with applyhook, *applyhook*, and
*evalhook*, provided functionality to affect evaluation.
</li>
<li id="583">
<code>*evalhook*</code>: (variable) along with applyhook,
*applyhook*, and evalhook, provided functionality to affect
evaluation.
</li>
<li id="584">
<b>int-char</b>: (function) returns the character associated with an
integer.  (<a href="../ansicl/dictentr/char-int.htm"><b>char-int</b></a>, still
part of the standard, returns the integer associated with a
character.)
</li>
<li id="585">
<b>make-char</b>: (function) returns a character similar to the argument
character (the first, required argument), but with bits and font
attributes as specified by the optional <i>bits</i> and
<i>font</i> arguments.
</li>
<li id="586">
<b>set-char-bit</b>: (function) returns a character to the argument
character but with the the control. meta, hyper, or super (as
specified by the second argument) set or unset as specified by the
third argument.
</li>
<li id="587">
<code>string-char</code>: (class) the type of elements that
could be in a string.  Essentially, in ANSI CL, strings contain
characters.
</li>
<li id="588">
<b>string-char-p</b>: (function) true if its argument is a
<code>string-char</code> (see just above).
</li>
<li id="589">
<b>define-setf-method</b>: (macro) renamed <a href="../ansicl/dictentr/define-s.htm"><b>define-setf-expander</b></a>.
</li>
<li id="590">
<b>get-setf-method-multiple-value</b>: (function) replaced with <a href="../ansicl/dictentr/get-setf.htm"><b>get-setf-expansion</b></a>.
</li>
<li id="591">
<b>get-setf-method</b>: (function) replaced with <a href="../ansicl/dictentr/get-setf.htm"><b>get-setf-expansion</b></a>.
</li>
<li id="592">
<b>special-form-p</b>: (function) replaced by <a href="../ansicl/dictentr/special-.htm"><b>special-operator-p</b></a>.
</li>
</ul>
    



<hr><h2 id="593"><a name="compile-time-too-2">7.2 Other package changes and compile-time-too behavior</a></h2>

<p id="594">
X3J13 made a number of improvements to the package system in order to
facilitate portability and to regularize the handling of top-level
forms in a file. The function in-package was changed to a macro, and
its various keyword arguments were deleted. The macro expansion of
<a href="../ansicl/dictentr/in-packa.htm"><b>in-package</b></a> is defined to have
effect at compile, load, and eval times, but no longer creates a
package if it does not exist, nor modifies any existing package. These
functionalities are subsumed by the new defpackage macro, along with
that of the several other package-manipulating functions. The package
name argument to <a href="../ansicl/dictentr/in-packa.htm"><b>in-package</b></a> is
no longer evaluated. Execution of an <a href="../ansicl/dictentr/in-packa.htm"><b>in-package</b></a> form referencing an unknown package
or containing optional arguments signals a continuable error. </p>

<p id="595">The variable <a href="variables/excl/s_cltl1-in-package-compatibility-p_s.htm"><code>*cltl1-in-package-compatibility-p*</code></a> makes
<b>in-package</b> work as it did in CLtL-1 Common Lisp. Users porting
code from Allegro CL for Windows 3.0.x (which used CLtL-1 semantics in
this regard) may find this variable useful. We do recommend modifying
the code in the long run, however.</p>

<p id="596">By compile-time-too behavior, we refer to the effect of certain
top-level forms in a file being compiled. In CLtL-1, top-level forms
which were calling the functions listed below were treated as if they
were wrapped in an </p>

<pre id="597">
(eval-when (compile)) 
</pre>

<p id="598">form. That behavior has been changed in the new standard and you
must wrap such forms in appropriate eval-when forms if they are to
have effect while a file is being compiled.  The affected functions
are: </p>

<pre id="599">
    proclaim
    make-package
    shadow
    shadowing-import
    import
    export
    unexport
    use-package
    unuse-package
    require 
</pre>

<p id="600">The variable <a href="variables/compiler/s_cltl1-compile-file-toplevel-compatibility-p_s.htm"><code>*cltl1-compile-file-toplevel-compatibility-p*</code></a>
can be used to get CLtL-1 compile-time-too behavior when compiling
files. Users porting code from Allegro CL for Windows 3.0.x (which
used CLtL-1 semantics in this regard) may find this variable
useful. We do recommend modifying the code in the long run,
however.</p>



<hr><h2 id="601"><a name="function-data-type-2">7.3 The function data type</a></h2>

<p id="602">X3J13 tightened the definition of the function data type, primarily
so generic functions could discriminate on functional arguments. It
was necessary that the type represented by the function datatype and
functionp predicate be disjoint from all other datatypes. Therefore,
in Allegro CL since version 4.2 the only objects that are type
function are those returned by the function special form, or by the
compile function given a first argument of <code>nil</code>, or by coerce of a lambda expression to type
function, or functions loaded from a compiled file. X3J13 specifies
that the <b>funcall</b> and apply functions will continue to accept a
symbol for the first argument, but a symbol is no longer
<b>functionp</b>, nor are lists beginning with
<code>lambda</code>, sometimes called lambda expressions. For
backward compatibility the <b>funcall</b> and <b>apply</b> functions
in Allegro CL will still accept a lambda expression, as is permitted
by X3J13, but as required by X3J13 lambda expressions no longer
satisfy <b>functionp</b> nor <code>(typep function)</code>. </p>



<hr><h2 id="603"><a name="clos-and-mop-2">7.4 CLOS and MOP</a></h2>

<p id="604">Previous versions of Allegro CL have used Portable Common Loops
(PCL) as a substitute for the Common Lisp Object System (CLOS) which
was adopted by X3J13 as a standard part of Common Lisp. The last
several versions of PCL worked in most ways the same as CLOS and
provided most of the required features. (Some unavoidable divergences
of PCL from CLOS derived from the dependence of CLOS on certain other
incompatible language changes.) </p>

<p id="605">
Since CLOS replaces PCL completely, there has been no attempt to
port any version of PCL to Allegro CL since prior to release
4.3. Doing such a port would be difficult, and would not benefit from
the significant speed advantages of the native CLOS implementation in
Allegro CL. User code that depends on various details of PCL
(especially internals) may have temporary difficulties, but in any
case such code will someday need to be brought into conformance with
CLOS. In addition to full conformance with CLOS, of course, the other
advantage of the native CLOS implementation is its greatly enhanced
runtime performance.
</p>

<p id="606">CLOS is documented in chapter 28 of CLtL-2. MOP is documented in
the book <em>The Art of MetaObject Protocol</em>. </p>

<p id="607">It is possible to trace, disassemble, and compile CLOS methods by
name. Here is an example of tracing. </p>

<pre id="608">
USER(14): (defmethod my-function ((x integer)) (cons x :integer))
  #&lt;clos:standard-method my-function ...&gt;
  USER(15): (my-function 1)
  (1 . :integer)
  USER(16): (trace ((method my-function (integer))))
  ((method my-function (integer)))
  USER(17): (my-function 1)
  0: ((method my-function (integer)) 1)
  0: returned (1 . :integer)
  (1 . :integer)
  USER(18): (untrace (method my-function (integer)))
  ((method my-function (integer)))
  USER(19): (my-function 1)
  (1 . :integer)
  USER(20):

</pre>

<p id="609">Here is how to trace <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a>,
<code>:before</code>, and <code>:after</code> methods (the
names and argument types will likely be different in your case, of
course):</p>

<pre id="610">
(trace ((method (setf slot-1) (t baz))))
  (trace ((method foo :before (integer))))
  (trace ((method foo :after (integer))))
</pre>

<p id="611">The extra set of parentheses is required to avoid confusion with
specifying trace options (they are specified with a list whose car is
the function to be traced and whose cdr is a possibly empty list of
options). Note that the extra set of parentheses is not used with
untrace:</p>

<pre id="612">
(untrace (method (setf slot-1) (t baz)))
  (untrace (method foo :before (integer)))
  (untrace (method foo :after (integer)))
</pre>

<p id="613">A generic function itself can be traced exactly like any other function.</p>



<hr><h2 id="614"><a name="clos-and-mop-conformance-2">7.5 CLOS and MOP conformance</a></h2>

<p id="615">We list known non-conformances with CLOS and MOP. The basic format
is to list the object that is unimplemented or only partially
implemented with a brief description of the
non-conformance. Unqualified symbols are part of CLOS and are exported
from the common-lisp package. Symbols qualified with clos: are part of
MOP (they are exported from the clos package). </p>

<blockquote>
  <blockquote>
    <p id="616">[Generic function] clos:class-prototype </p> 
    <p id="617">Implemented for
    clos::std-class only. clos::std-class (which is not part of the
    CLOS standard) is a superclass of funcallable-standard-class and
    standard-class but is not a superclass of
    forward-referenced-class, structure-class, and
    built-in-class. Therefore, methods are defined on the first two
    classes but not the next three. (This is not actually a
    non-conformance.) </p> 
    <p id="618">[Special form] generic-flet
    </p> <p id="619">Removed from spec by X3J13 and not
    implemented.</p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p id="620">[Macro]
    <strong><code>generic-function</code></strong></p>
  </blockquote>
</blockquote>

<blockquote>
  <blockquote>
    <p id="621">Removed from spec by X3J13 and not implemented.</p>
    <p id="622">[Special form]
    <strong>generic-labels </strong></p>
    <p id="623">Removed from spec by X3J13 and not implemented.</p>
    <p id="624">[Generic function]
    <code><strong>clos:make-method-lambda </strong></code></p>
    <p id="625">Not implemented. </p>
    <p id="626">[Special form]
    <strong>with-added-methods </strong></p>
    <p id="627">Removed from spec by X3J13 and not implemented. </p>
  </blockquote>
</blockquote>



<hr><h2 id="628"><a name="clos-optimization-2">7.6 CLOS optimization</a></h2>

<p id="629">Calls to <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a>
where the class-name is a quoted constant and each of the keywords is
a constant are transformed by the compiler into calls to constructor
functions. A constructor function is a piece of code that is
equivalent to the <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> call except that it is
significantly (10 to 100 times) faster.</p>

<p id="630">The optimization is automatic when the call to <a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a> is formed in a particular way. In
order for an optimized constructor function to be used certain
restrictions apply: </p>

<ol>
  <li id="631">The set of keywords must be valid for the call.</li>
  <li id="632">Only certain methods must be applicable as defined by the following table:</li>
</ol>
<div align="left">

<table BORDER="1" CELLSPACING="1" CELLPADDING="8" WIDTH="444">
  <tr>
    <td WIDTH="43%" VALIGN="TOP"><p id="633" ALIGN="CENTER">Generic function</p></td>
    <td WIDTH="57%" VALIGN="TOP"><p id="634" ALIGN="CENTER">Condition for optimization</p></td>
  </tr>
  <tr>
    <td WIDTH="43%" VALIGN="TOP"><a href="../ansicl/dictentr/make-ins.htm"><b>make-instance</b></a></td>
    <td WIDTH="57%" VALIGN="TOP">Only system supplied methods are applicable</td>
  </tr>
  <tr>
    <td WIDTH="43%" VALIGN="TOP"><a href="../ansicl/dictentr/initiali.htm"><b>initialize-instance</b></a></td>
    <td WIDTH="57%" VALIGN="TOP">Only system supplied standard method and user-supplied <code>:after</code>
    methods are applicable</td>
  </tr>
  <tr>
    <td WIDTH="43%" VALIGN="TOP"><a href="../ansicl/dictentr/shared-i.htm"><b>shared-initialize</b></a></td>
    <td WIDTH="57%" VALIGN="TOP">Only system supplied standard method and user-supplied <code>:after</code>
    methods are applicable</td>
  </tr>
</table>
</div>

<p id="635">The calls to <b>make-instance</b> are replaced by calls to the
constructor regardless of whether an optimized constructor can be
used. The first time the constructor function is called, the
restrictions are tested and if they do not apply, an optimized
constructor is generated. When the restrictions are not obeyed the
constructor calls make-instance.  Redefining a class or one of its
superclasses or adding/removing a method to one of the generic
functions mentioned above causes the constructor function to be
recomputed.</p>



<hr><hr><h2 id="636"><a name="function-specs-1">8.0 Function specs (fspecs)</a></h2>

<p id="637">A function spec (fspec) is a list that denotes a place to store a
function. Function specs are useful for functions that don't otherwise
have obvious names. ANSI CL defines Function Names as either symbols
or the lists formed by <code>(setf</code>&nbsp;
<em>[symbol]</em><code>)</code> [to denote a writer function to
pair with the reader function named by <em>[symbol]</em> which
may or may not itself be defined]. Allegro CL extends the Function
Name concept by defining function specs, and allows the user to create
new kinds of function specs. Some pre-defined function spec names in
Allegro CL are <code>:discriminator</code>,
<code>:effective-method</code>, <code>method</code>,
<code>flet</code>, <code>labels</code>,
<code>:internal</code>, <code>:top-level-form</code>,
etc.</p>

<p id="638">Function specs are normally kept in an internal form, which allows
many of the cons cells in various fspecs to be shared. They are
converted to the normal external format usually only when printing, or
at other times when parsing the internal form is too complex. Handlers
of fspecs must be aware of these internal formats and may use the
following functions to access their components: <a href="operators/excl/fspec-first.htm"><b>fspec-first</b></a>, <a href="operators/excl/fspec-second.htm"><b>fspec-second</b></a>, <a href="operators/excl/fspec-third.htm"><b>fspec-third</b></a>.
</p>

<p id="639">Each of these functions will work on either an internal or external
fspec, and will for an external fspec return the first, second, or
third element, respectively (i.e. just like <a href="../ansicl/dictentr/firstsec.htm"><b>first</b></a>, <a href="../ansicl/dictentr/firstsec.htm"><b>second</b></a>, and <a href="../ansicl/dictentr/firstsec.htm"><b>third</b></a>). If the fspec is in internal form, the
proper corresponding element is still returned, but without the
overhead of first converting to an external fspec.</p>

<p id="640">
Users can define their own function specs with <a href="operators/excl/def-function-spec-handler.htm"><b>def-function-spec-handler</b></a>. The function
<a href="operators/excl/function-name-p.htm"><b>function-name-p</b></a> returns true
when passed a valid function spec defined with <a href="operators/excl/def-function-spec-handler.htm"><b>def-function-spec-handler</b></a>. <a href="../ansicl/dictentr/fboundp.htm"><b>fboundp</b></a> can be used to determine
whether a valid function spec defined with <a href="operators/excl/def-function-spec-handler.htm"><b>def-function-spec-handler</b></a> actually names an
operator.
</p>


<hr><hr><h2 id="641"><a name="low-level-1">9.0 Some low-level functionality</a></h2>

<hr><h2 id="642"><a name="getwinmainargs2-2">9.1 Windows: GetWinMainArgs2</a></h2>

<p id="643">The C function <strong>GetWinMainArgs2</strong> in the Allegro CL
dll (which has a name like <em>acly7xxx.dll</em>, where the
<em>y</em>, if present, is a letter and the <em>x</em>'s are digits)
is used by the IDE to retrieve Windows handle information known by the
ACL runtime system. This information may also be useful for
applications written in Lisp. The information returned by this
function should be used carefully and non-destructively as the ACL
runtime system (i.e. the low-level routines in Allegro CL, unrelated
to Allegro Runtime) depends on these handles to exist and behave in
predictable ways. </p>

<p id="644">In order to use this function you must use the foreign function
interface to create a Lisp function to call the C function: </p>

<pre id="645">
(ff:def-foreign-call (GetWinMainArgs2 "GetWinMainArgs2") 
         ((vec (:array :int)) (count :int)) :returning :void) 
</pre>

<p id="646">Next create a vector of five raw integers for the function to fill in: </p>

<pre id="647">
(setq myvec (make-array 5 :element-type '(unsigned-byte 32))) 
</pre>

<p id="648">Now call the function with the vector followed by the number of
elements in the vector </p>

<pre id="649">
(GetWinMainArgs2 myvec (length myvec)) 
</pre>

<p id="650">The vector now contains the following information </p>

<p id="651"><strong>index value 0</strong>: The Windows instance handle of the
lisp process </p>

<p id="652"><strong>index value 1</strong>: The previous Windows instance
handle (which is always zero). </p>

<p id="653"><strong>index value 2</strong>: unused </p>

<p id="654"><strong>index value 3</strong>: The Windows handle of the console
window (if there is one). </p>

<p id="655"><strong>index value 4</strong>: The Windows handle of the splash
window. Normally the splash window is gone by the time the application
starts up, but the +B command-line argument to <em>mlisp.exe</em> can
cause the splash window to stay up longer. If this value is non-zero
then the application is permitted to call the Windows function
<strong>DestroyWindow()</strong> on it to make the splash window
disappear. If this value is zero then the splash window is already
gone. </p>



<hr><hr><h2 id="656"><a name="compliance-1">10.0 Conformance with the ANSI specification</a></h2>



<p id="657">The following list describes the (mostly minor or obscure) known
non-conformances of Allegro CL with the ANSI spec. </p>

<ol>
<li id="658">

<a href="../ansicl/dictentr/file-len.htm"><b>file-length</b></a> is documented to
signal an error in safe code when the stream is not a stream
associated with a file. Allegro CL extends <b>file-lenght</b> via
simple-streams (see <a href="streams.htm">streams.htm</a>)to include a value
for string streams, which is the length of the string buffer - the
same is true for buffer streams, where the <b>file-length</b> is the
length (in octets) of the buffer.  We feel this is preferrable because
<b>file-length</b> and <a href="../ansicl/dictentr/file-pos.htm"><b>file-position</b></a> are closely associated.  If a
stream can have a <b>file-position</b>, it can likely also have a
length. The description of <b>file-position</b> was more careful to
account for unanticipated situations at the time of the writing of the
spec, and so we believe that the <b>file-length</b> description is too
harsh.

</li>
<li id="659">
<a href="../ansicl/dictentr/file-wri.htm"><b>file-write-date</b></a> returns
<code>nil</code> when given a non-existent file as an
argument (rather than signaling an error), which is arguably a
non-conformance. See the discussion at
<a href="#cl-file-write-date-2">Section 6.11 cl:file-write-date</a>. There is no plan
to change this behavior.
</li>
<li id="660">
<a href="variables/compiler/declared-fixnums-remain-fixnums-switch.htm"><code>declared-fixnums-remain-fixnums-switch</code></a>, if
true, allows code to be generated by the compiler which will produce
the incorrect value when certain fixnums (those whose sum is a bignum)
are added. Allowing incorrect values from fixnum addition under any
circumstances is out of compliance with the ANSI specification. This
compiler switch may be set to nil (thus removing any non-compliance)
by evaluating <code>(setf
comp:declared-fixnums-remain-fixnums-switch nil)</code>.
</li>
<li id="661">
<a href="../ansicl/dictentr/coerce.htm"><b>coerce</b></a> of a sequence, as
well as <a href="../ansicl/dictentr/concate1.htm"><b>concatenate</b></a>, <a href="../ansicl/dictentr/map.htm"><b>map</b></a>, <a href="../ansicl/dictentr/make-seq.htm"><b>make-sequence</b></a>, and <a href="../ansicl/dictentr/merge.htm"><b>merge</b></a> should signal an error if the new type
specifier specifies a different length. Allegro CL presently ignores
any length specifier on the new type, never signaling an error even in
safe code.
</li>
<li id="662">
<a href="../ansicl/dictentr/eval.htm"><b>eval</b></a> and <a href="../ansicl/dictentr/compile.htm"><b>compile</b></a> are not permitted to copy and/or
collapse "like" constants. The compile-file/load cycle is
permitted to copy and/or collapse constants. Presently, constants in a
file compilation are only collapsed within a single
function. Constants are never copied in the evaluator, but Allegro
CL's compile violates the no collapsing requirement.
</li>
<li id="663">
A lexical function or macro definition should prevent <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> from using a global setf
method. Allegro CL still uses the global definition. (Prior to the
introduction of setf functions there was no way a correct program
could demonstrate the problem.)
</li>

<li id="664">
<a href="../ansicl/dictentr/multipl3.htm"><b>multiple-value-setq</b></a> of a
variable with a <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a> definition operates on the
expansion. Allegro CL's interpreter handles this correctly, but the
compiler does not.
</li>
<li id="665">
Non-local exits from the cleanup forms of an <a href="../ansicl/dictentr/unwind-p.htm"><b>unwind-protect</b></a> that is in the process of
unwinding another non-local exit. When a non-local exit (<a href="../ansicl/dictentr/throw.htm"><b>throw</b></a>, <a href="../ansicl/dictentr/return-f.htm"><b>return-from</b></a>, or <a href="../ansicl/dictentr/go.htm"><b>go</b></a>) is being performed, cleanup forms of an
intervening unwind-protect form may not transfer to any exit point
between itself and the original target exit. Unfortunately, the ANSI
spec leaves ambiguous certain details about transferring to exit
points outside the original target. Allegro CL currently allows a
non-local exit to be usurped by a cleanup form executing another
transfer to an intervening exit point. Depending on the ANSI
ambiguity, this is either a nonconformance or an extension upon which
portable user code should not depend.
</li>
<li id="666">
The value of *macroexpand-hook* is coerced to type function before
being called, and therefore may be a symbol, function, or lambda
expression. Allegro CL has always permitted these but macros and
symbol macros expanded directly by the compiler (and not indirectly by
other macros) don't go through <a href="../ansicl/dictentr/macroex0.htm"><b>macroexpand-1</b></a> and consequently don't invoke
*macroexpand-hook*. While the specification is somewhat ambiguous,
this should probably be considered a bug.
</li>
<li id="667">
<a href="../ansicl/dictentr/with-acc.htm"><b>with-accessors</b></a>, and <a href="../ansicl/dictentr/with-slo.htm"><b>with-slots</b></a> should allow declarations,
but in Allegro CL, do not.
</li>
<li id="668">
The scoping distinctions between pervasive and nonpervasive
declarations has been removed. The scope of a declaration always
contains the form body along with any "stepper" or
"result" forms, but not in general
"initialization" forms, e.g. in let binding clauses. If the
declaration concerns a binding established by the form, then the
declaration applies to the entire scope of the binding. The
declaration may therefore include initialization forms in subsequent
binding clauses of, for example, let*. Allegro CL does not yet
implement this change, retaining CLtL-1 semantics. If made, it will be
an incompatible change, although it is unlikely to affect significant
amounts of user code.
</li>
<li id="669">
<b>The floating point contagion rules for comparison
operations</b>. When float and rational numbers are to be compared,
the float is converted to rational as if by the function rational, and
then an exact comparison is performed. Allegro CL was changed in
release 7.0 to do this. In earlier releases, the rational was coreced
to be a float.
</li>
<li id="670">
Branch cuts for various mathematical functions to specify behavior at
floating minus zero. It is difficult on most Allegro CL ports to
generate minus zero, although the quantity can certainly be
constructed by a foreign function. In any case, Allegro CL's branch
cut behavior does not conform around minus zero.
</li>
<li id="671">
On an echo-stream, a character should be echoed only the first time it
is returned by <a href="../ansicl/dictentr/read-cha.htm"><b>read-char</b></a>, and
never by <a href="../ansicl/dictentr/peek-cha.htm"><b>peek-char</b></a>. When a
character is returned to the stream with <a href="../ansicl/dictentr/unread-c.htm"><b>unread-char</b></a>, it is not unechoed, nor will it be
reechoed when it is reread. Allegro CL's new stream implementation
does not yet conform. An echo stream always transmits these function
calls naively to its component streams.
</li>
<li id="672">
Allegro CL does not yet support the fourth positional argument to the
~D format directive and a fifth positional argument to the ~R format
directive to specify the comma interval.
</li>
<li id="673">
The ~E format directive always prints a sign for the exponent portion
of the number, whereas <a href="../ansicl/dictentr/writepri.htm"><b>prin1</b></a>
prints an exponent sign only if the exponent is negative. In Allegro
CL <a href="../ansicl/dictentr/writepri.htm"><b>prin1</b></a> always prints an
exponent sign.
</li>
<li id="674">
Allegro CL ignores the :newest version specifier of a pathname and
always forces it to be <code>nil</code>.
</li>
<li id="675">
In releases before 7.0, Allegro CL did not implement pathname case,
and the :case keyword argument to the <a href="../ansicl/dictentr/make-pat.htm"><b>make-pathname</b></a>, <a href="../ansicl/dictentr/pathnam0.htm"><b>pathname-host</b></a>, <a href="../ansicl/dictentr/pathnam0.htm"><b>pathname-device</b></a>, <a href="../ansicl/dictentr/pathnam0.htm"><b>pathname-directory</b></a>, <a href="../ansicl/dictentr/pathnam0.htm"><b>pathname-name</b></a>, and <a href="../ansicl/dictentr/pathnam0.htm"><b>pathname-type</b></a> was accepted but ignored. Now
:case is no longer ignored. See <a href="variables/excl/s_pathname-customary-case_s.htm"><code>*pathname-customary-case*</code></a>.
</li>
<li id="676">
The definition of <a href="../ansicl/dictentr/compile.htm"><b>compile</b></a>
should permit a compiled function as the optional second argument but
does not in Allegro CL.
</li>
<li id="677">
In Allegro CL, <a href="../ansicl/dictentr/deftype.htm"><b>deftype</b></a> forms
are implicitly evaluated at compile time, making the result of the
type definition available at compile time, changing the compiling lisp
image inappropriately.
</li>
<li id="678">
Allegro CL does not support <a href="../ansicl/dictentr/document.htm"><b>documentation</b></a> for <a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> functions.
</li>
<li id="679">
Though calls to the <a href="../ansicl/dictentr/step.htm"><b>step</b></a> macro
may be compiled in Allegro CL, compiled code will not correctly expand
in the correct lexical environment.
</li>
<li id="680">
For macro-like defining forms such as <a href="../ansicl/dictentr/defmacro.htm"><b>defmacro</b></a>, <a href="../ansicl/dictentr/fletlabe.htm"><b>macrolet</b></a>, <strong>define-setf-method</strong>,
<a href="../ansicl/dictentr/deftype.htm"><b>deftype</b></a>, and <a href="../ansicl/dictentr/define-2.htm"><b>define-compiler-macro</b></a>, the lambda-list default
initializer code should run outside the implicit named block
established around the definition body but Allegro CL evaluates
initializers inside the block.
</li>
<li id="681">
Allegro CL uses slot name variables as lambda list variables even
though an automatically-generated <a href="../ansicl/dictentr/defstruc.htm"><b>defstruct</b></a> keyword constructor function should
not use and bind as its lambda list variables slot name symbols.
</li>
<li id="682">
An &environment variable that appears in a macro lambda list
should be bound first before any of the other variables (making the
binding visible to macroexpansions occurring in initialization forms
elsewhere in the lambda list) but Allegro CL binds all variables in
normal left-to-right order.
</li>
<li id="683">
With regard to lambda list congruence between the :arguments keyword
argument to <a href="../ansicl/dictentr/define-m.htm"><b>define-method-combination</b></a> and the actual lambda
list of a generic function to which the method combination applies,
Allegro CL essentially appends an ignored &rest argument to the
lambda list, preventing errors from being signaled, but not correctly
handling optional/key argument bindings and default value forms.
</li>
<li id="684">
Allegro CL prints slot names in the keyword package though this
behavior is deprecated.
</li>
<li id="685">
Allegro CL does not permit the <strong>type</strong> indicator to be
omitted for declarations of the form (declare (type foo x)) for any
symbol naming a type (Allegro CL does permit it for many predefined
types). Thus (declare (foo x)) is not valid in Allegro CL.
</li>
<li id="686">
Allegro CL does not handle nested <a href="../ansicl/dictentr/dribble.htm"><b>dribble</b></a>'s correctly, presently forgeting about
the previous dribble, without even closing it.
</li>
<li id="687">
In Allegro CL, calling a &key function with :allow-other-keys
<code>nil</code> signals an error, and it should not.
</li>
<li id="688">
In Allegro CL, <code>call-next-method</code> with changed
arguments does not check that the set of applicable methods has not
changed, though it should in safe (safety=3) code.
</li>
<li id="689">
When <a href="../ansicl/dictentr/butlastn.htm"><b>butlast</b></a> is passed a
negative second argument, an error should be signaled but Allegro CL
never signals this error and silently treats the value as zero.
</li>
<li id="690">
In Allegro CL, the strings returned by <a href="../ansicl/dictentr/char-nam.htm"><b>char-name</b></a> are currently all lower case (the
first letter should be capitalized).
</li>
<li id="691">
Allegro CL implements the second argument to <a href="../ansicl/dictentr/constant.htm"><b>constantp</b></a> but does not yet implement it properly
to differentiate between the compile-time and runtime environments.
</li>
<li id="692">
In Allegro CL compiler macros are not invoked using *macroexpand-hook*
and instead are called using funcall directly. Further, in Allegro CL
compiler macros cannot be invoked on forms such as (funcall #'name
...). <a href="../ansicl/dictentr/define-2.htm"><b>define-compiler-macro</b></a>
should be responsible for transparently accommodating the argument
destructuring for this case but does not in Allegro CL.
</li>
<li id="693">
With regard to the <a href="../ansicl/dictentr/document.htm"><b>documentation</b></a> function, there should be a
documentation type compiler-macro; and <a href="../ansicl/dictentr/document.htm"><b>documentation</b></a> for a defstruct should be able to
be accessed as a class object, just as for <strong>defclass</strong>,
but does not in Allegro CL.
</li>

<li id="694">
<a href="../ansicl/dictentr/typep.htm"><b>typep</b></a>, <a href="../ansicl/dictentr/subtypep.htm"><b>subtypep</b></a>, <a href="../ansicl/dictentr/upgraded.htm"><b>upgraded-array-element-type</b></a>, and <a href="../ansicl/dictentr/upgrade0.htm"><b>upgraded-complex-part-type</b></a> should
accept an optional <em>environment</em> argument and <a href="../ansicl/dictentr/deftype.htm"><b>deftype</b></a> should accept an &environment lambda
argument in its lambda list, but Allegro CL does not yet implement any
of these optional environment arguments, nor does <a href="../ansicl/dictentr/deftype.htm"><b>deftype</b></a> accept the &environment lambda
argument.
</li>
<li id="695">
<a href="../ansicl/dictentr/sxhash.htm"><b>sxhash</b></a> should not be sensitive
to contents of arrays that are not descended by equal (those other
than arrays of type string and bit-vector) but <a href="../ansicl/dictentr/sxhash.htm"><b>sxhash</b></a> in Allegro CL is sensitive to the
contents of all arrays.
</li>
<li id="696">
In <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a>, a type
declaration on a <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a> variable should be equivalent to
wrapping every reference to the variable in an appropriate
<code>the</code> clause. The expansion should not literally
include the <code>the</code> form, but the effect of the type
declaration may be effectuated by the compiler by some other
means. Allegro CL does not conform, and the expansion of a <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a> variable with a type
declaration includes a <code>the</code> form.
</li>
<li id="697">
A <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a> definition
of a variable may not shadow a global special declaration of that
variable name, or for keyword symbols. <a href="../ansicl/dictentr/symbol-m.htm"><b>symbol-macrolet</b></a> should signal an error. In
Allegro CL, it does not.
</li>
<li id="698">
A <a href="../ansicl/dictentr/the.htm"><b>the</b></a> form should return
exactly the values returned by evaluation of its second subform. It
should not be an error if more values are returned than the first
subform specifies, and if fewer values are returned than the first
subform specifies, the missing values are treated as <code>nil</code> for purposes of type checking. In Allegro CL in
interpreted code, an error is signalled unless a <a href="../ansicl/dictentr/the.htm"><b>the</b></a> form agrees exactly with both the number and
types of the returned values. However, in compiled code, it does not
check values returned through a the form (although the type
declaration may be used for code optimization) and therefore complies.
</li>
<li id="699">
Allegro signals error (and it should not) if a compiled function is
given to <a href="../ansicl/dictentr/compile.htm"><b>compile</b></a>.  Allegro
will correctly compile interpreted functions defined in a non-null
lexical environment, and will additionally correctly handle references
to closed-over variables.  However, it improperly issues a warning
when it does so.
</li>
<li id="700">
(SETF (APPLY #'FOO ...) V) should expand to the approximate equivalent
(APPLY #'(SETF FOO) V ...) except that the order of evaluation of the
original subforms shall be preserved. However, Allegro CL expands
<a href="../ansicl/dictentr/setfpset.htm"><b>setf</b></a> of <a href="../ansicl/dictentr/apply.htm"><b>apply</b></a> according to the CLTL-1
specification. 
</li>
<li id="701">
Allegro CL retains certain CLtL2 specifications of the <a href="../ansicl/dictentr/document.htm"><b>documentation</b></a> function.
</li>

</ol>



</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>This page has had moderate revisions compared to the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Moderately revised from 8.1.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/implementation.htm">8.1 version</a></td></tr></table></html>