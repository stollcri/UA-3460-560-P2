<html><head><meta http-equiv="content-type" content="text/html; charset=UTF-8"> <title>Dumplisp</title></head><link rel="stylesheet" href="acldoc-styles.css" type="text/css"><body><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dumplisp.htm">8.1 version</a></td></tr></table><h1 id="2">Dumplisp</h1><p id="3">This document contains the following sections:</p><a href="#dumplisp-intro-1">1.0 Introduction to excl:dumplisp, a tool for saving an image</a><br><a href="#finding-files-1">2.0 Finding additional files</a><br><a href="#dumplisp-uses-1">3.0 Uses of excl:dumplisp</a><br><a href="#dumplisp-failures-1">4.0 excl:dumplisp will fail under some conditions</a><br><a href="#aclstart-1">5.0 [allegro directory]/src/aclstart.cl is the source code for startup</a><br><a href="#creating-an-application-1">6.0 Creating an application</a><br><a href="#creating-a-custom-image-1">7.0 Creating a customized image</a><br><a href="#dumped-image-starting-one-1">8.0 When the dumped image starts 1: values of global variables</a><br><a href="#dumped-image-starting-two-1">9.0 When the dumped image starts 2: command-line arguments</a><br><a href="#dumped-image-starting-three-1">10.0 When the dumped image starts 3: reading init files</a><br><a href="#dumped-image-starting-four-1">11.0 When the dumped image starts 4: restart actions</a><br><a href="#dumped-image-starting-five-1">12.0 When the dumped image starts 5: the two restart functions</a><br><a href="#emacs-lisp-interface-and-dumped-images-1">13.0 The emacs-lisp interface and dumped images</a><br><a href="#dumping-presto-image-1">14.0 Dumping a prestoized image</a><br><a href="#standalone-images-1">15.0 Standalone image: not supported</a><br><a href="#library-files-1">16.0 How the dumped image finds loaded library files</a><br><a href="#logical-pathnames-1">17.0 Logical pathnames and the dumped image</a><br><a href="#allegro-directory-1">18.0 How the dumped image finds its Allegro directory</a><br><a href="#multiprocessing-1">19.0 dumplisp and multiprocessing</a><br><a href="#using-dumped-image-1">20.0 How to use the dumped image</a><br><hr><hr><h2 id="4"><a name="dumplisp-intro-1">1.0 Introduction to excl:dumplisp, a tool for saving an image</a></h2>

<p id="5">
The function <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> writes
an image file from the current running Lisp image. It has many options
and many uses. Unlike the two other functions that create new images,
<a href="operators/excl/build-lisp-image.htm"><b>build-lisp-image</b></a> and <a href="operators/excl/generate-application.htm"><b>generate-application</b></a>, <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> preserves much of the
environment of the running image. Both excl:build-lisp-image and
excl:generate-application create new images from external constituent
parts that inherit nothing from the running image. 
</p>

<hr><hr><h2 id="6"><a name="finding-files-1">2.0 Finding additional files</a></h2>

<p id="7">
One advantage of the small executable/large image model is that all
image files use the same executable, so there needs only be one
executable file on a machine (or on a network). This means that the
location of that executable can be used as a starting location which
can be a reference point for finding other necessary files.
</p>

<p id="8">
The location of the executable is taken as the reference point for
finding files so no specific location must be supplied when Lisp
starts up. (You can specify a different location with the -H argument
if you wish. However, that should not be necessary.)
</p>

<hr><hr><h2 id="9"><a name="dumplisp-uses-1">3.0 Uses of excl:dumplisp</a></h2>

<p id="10">
You might use <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> for the following purposes (as
well as others not listed): 
</p>

<ul>
  <li id="11">Saving certain parts of the state of a running image. <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> cannot save the
    entire state.  Thus processes cannot be saved (neither their state
    nor even the fact that they were running) nor can OS connections
    such as open files and databases, but other things, like variable
    values, function definitions, macro definitions etc. are all
    saved.</li> 
    <li id="12">Customizing an image. You may dump an image after,
    for example, loading a large application (which you intend to use
    yourself). Then you do not have to spend time loading the
    application each time you start Lisp. You can also dump an image
    after defining functions and setting variables to your liking, but
    simple things like that are usually better done with
    initialization files (like ~/.clinit.cl). See 
    <a href="#creating-a-custom-image-1">Section 7.0 Creating a customized image</a> below.</li> 
    <li id="13">Preparing an application for
    delivery. We generally recommend using excl:generate-application
    for this purpose but <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> can be used as well. The
    dumped image may be intended for delivery to others (perhaps at
    different sites or running on different networks). See 
    <a href="delivery.htm">delivery.htm</a> where delivery issues are
    discussed in greater detail. Note that you must have the correct
    license before you can ship an image of any sort away from your
    site. Please contact the correct administrator at your site or
    your Franz Inc. account manager if you have questions about what
    you are licensed to do with dumped images.</li>
</ul>

<hr><hr><h2 id="14"><a name="dumplisp-failures-1">4.0 excl:dumplisp will fail under some conditions</a></h2>

<p id="15">In order for <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> to work, it must examine the
currently running image. For this reason, <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> will fail if: </p>

<ul>
  <li id="16">The :name argument to <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> names the currently running
    image. Thus, if the current image is <em>/usr/mydir/cl.dxl</em>
    and you specify the value of <em>name</em> to be
    "/usr/mydir/cl.dxl", <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> will get confused between
    the image file it is examining and the image file it is writing
    and fail.</li> <li id="17">The image that is currently running is removed
    or moved (with <strong>mv</strong>). </li> 
    <li id="18">Lisp was started
    with a relative pathname (<em>./cl</em>, for example) and <a href="operators/excl/chdir.htm"><b>chdir</b></a> or one of its top-level
    command counterparts <a href="tpl-commands/pushd.htm"><b>:pushd</b></a>,
    <a href="tpl-commands/popd.htm"><b>:popd</b></a>, and <a href="tpl-commands/cd.htm"><b>:cd</b></a> has since changed the current
    working directory. Since relative pathnames are resolved with
    respect to the current directory, the image will not be found with
    respect to the changed directory. If you change back to the
    original working directory, <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> should work.</li>
</ul>

<hr><hr><h2 id="19"><a name="aclstart-1">5.0 [allegro directory]/src/aclstart.cl is the source code for startup</a></h2>

<p id="20">Allegro CL does a number of things when it starts up before it
prints the first prompt and is ready to accept input. Programmers may
want to know what it does and in what order, so that programmer
modifications and customizations can be done at the right
time. Allegro CL calls the function <b>excl::start-lisp-execution</b> on
startup. The source for that function and for several associated
functions (that process command-line arguments and read initialization
files, e.g.) can be found in the file s<i>ys:;src;aclstart.cl</i>,
equivalently <i>[Allegro directory]/src/aclstart.cl</i>. See
also <a href="startup.htm">startup.htm</a> where startup is described
in English rather than Lisp code.</p>

<hr><hr><h2 id="21"><a name="creating-an-application-1">6.0 Creating an application</a></h2>

<p id="22">Please see <a href="delivery.htm">delivery.htm</a> for a detailed
discussion of creating images for delivery. </p>

<hr><hr><h2 id="23"><a name="creating-a-custom-image-1">7.0 Creating a customized image</a></h2>

<p id="24">A typical customization is loading a complicated program and thus
saving the time to load whenever you start Lisp (but quicker startup
should be balanced against additional disk space usage). </p>

<hr><hr><h2 id="25"><a name="dumped-image-starting-one-1">8.0 When the dumped image starts 1: values of global variables</a></h2>

<p id="26">When a Lisp Listener (which presents the prompt to users and
accepts and processes typed input) starts up, bindings are set up for
many Common Lisp and Allegro CL-specific global variables. The
bindings come from alists, one of which is the value of <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a>.  Here is
part of <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a>:</p>

<pre id="27">
;; From excl:*default-cl-special-bindings* (a few values only)
;; (*PRINT-LENGTH*) is equivalent to (*PRINT-LENGTH* . NIL).
(*PRINT-LENGTH*) (*PRINT-LEVEL*) (*PRINT-RADIX*) (*PRINT-BASE* . 10)
(*PRINT-PRETTY* . T) (*PRINT-ESCAPE* . T)
</pre>

<p id="28">Note that each variable in the portion of the alist shown is
associated with a specific value (<code>nil</code> for
<code>*print-length*</code>, <code>*print-level*</code> and
<code>*print-radix*</code>, 10 for <code>*print-base*</code>, and
<code>t</code> for <code>*print-pretty*</code> and
<code>*print-escape*</code>).  When a Lisp listener is started in the
dumped image, <code>*print-length*</code> in that listener will be
<code>nil</code> regardless of its value when <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> was called, as this
example shows:</p>

<pre id="29">
;; We bring up Allegro CL and note that *print-length* has initial value
NIL.
USER(1): *print-length*
NIL
;; We set the value of *print-length* to 20:
USER(2): (setq *print-length* 20)
20
USER(3): *print-length*
20
;; and we dump the image:
USER(4): (excl:dumplisp :name "my-image")
USER(5): (exit)
;; Now we start my-image:
==============================================================
Starting image `my-image'
[...]
;; Note that *print-length* is NIL, not 20:
USER(1): *print-length*
NIL
USER(2):
</pre>

<p id="30">The listener in the restarted image gets the value of
<code>*print-length*</code> from the <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a> alist,
where <code>*print-length*</code> is associated explicitly with
<code>nil</code>.  The value in the parent image is not
relevant. In order to ensure that <code>*print-length*</code> (or any
variable whose name appears on either alist) has the desired value in
the listener when the dumped image is started, you must modify the
appropriate alist. The easiest way to do this is with <a href="operators/tpl/setq-default.htm"><b>tpl:setq-default</b></a>.  This macro
is like <b>setq</b>: its first argument should be a symbol and is not
evaluated; its second argument should be a value and is evaluated. It
modifies the alist appropriately (see the definition for a complete
description) but does not affect the current value. Thus:</p>

<pre id="31">
;; We bring up Allegro CL and note that *print-length* has initial value
NIL.
USER(1): *print-length*
NIL
;; We use TPL:SETQ-DEFAULT to modify the EXCL:*CL-DEFAULT-SPECIAL-BINDINGS*
;; entry referring to *PRINT-LENGTH* so new bindings will be to 20, not NIL:
USER(2): (tpl:setq-default *print-length* 20)
20
USER(3): *print-length* ;; its value in the current listener is unchanged
NIL
;; and we dump the image:
USER(4): (excl:dumplisp :name "my-image")
USER(5): (exit)
;; Now we start my-image:
==============================================================
Starting image `my-image'
[...]
;; Note that *print-length* is 20, not NIL:
USER(1): *print-length*
20
USER(2):
</pre>


<p id="32">
Recall that changes to the reader (such as setting a
macro-character) are stored in <code>*readtable*</code> and that
variable appears on <a href="variables/excl/s_cl-default-special-bindings_s.htm"><code>*cl-default-special-bindings*</code></a>.
</p>

<p id="33">
This same issue affects setting values from an initialization
file. A discussion very similar to this one appears in 
<a href="startup.htm">startup.htm</a>.
</p>

<hr><hr><h2 id="34"><a name="dumped-image-starting-two-1">9.0 When the dumped image starts 2: command-line arguments</a></h2>

<p id="35">
Command-line arguments are processed as usual or ignored as the
<i>ignore-command-line-arguments</i> keyword argument to <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> is <code>nil</code> (the default) or <code>t</code>. The emacs-lisp
interface uses command-line arguments to start up. See below under the
heading 
<a href="#emacs-lisp-interface-and-dumped-images-1">Section 13.0 The emacs-lisp interface and dumped images</a> 
for information on starting the
interface when command-line arguments are ignored.
</p>

<p id="36">
Command-line arguments are available, of course, with
sys:command-line-arguments and related functions. They are just
ignored by Allegro CL's startup routine when
<i>ignore-command-line-arguments</i> is true.
</p>

<hr><hr><h2 id="37"><a name="dumped-image-starting-three-1">10.0 When the dumped image starts 3: reading init files</a></h2>

<p id="38">There are various initialization files that might be read:
<i>~/.clinit.cl</i>, <i>[working-directory]/.clinit.cl</i> (if
<em>[working-directory]</em> is different than ~), <i>~/</i> and
<i>[working-directory]/clinit.cl</i>, and
<i>sys:siteinit.cl</i>. These files will be looked for if <a href="variables/excl/s_read-init-files_s.htm"><code>*read-init-files*</code></a> is
<code>t</code> when the image is dumped (just
<i>[working-directory]/.clinit.cl</i> and <i>clinit.cl</i> and
<i>sys:siteinit.cl</i>, if <a href="variables/excl/s_read-init-files_s.htm"><code>*read-init-files*</code></a> is
<code>:no-home</code>). This variable should be set (not bound) prior
to the call to <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a>. Setting this variable after
Lisp has started up only affects its value in dumped images. It is not
used by Lisp after startup has completed. </p>

<p id="39">
Command-line arguments can suppress the reading of some or all
initialization files (see <a href="startup.htm">startup.htm</a>). Since
command-line arguments are processed before initialization files are read,
the value of this variable can be changed using them -- e.g. specify
`-e (setq excl:*read-init-files* t)' on the command-line -- assuming
command-line arguments are not ignored.
</p>

<hr><hr><h2 id="40"><a name="dumped-image-starting-four-1">11.0 When the dumped image starts 4: restart actions</a></h2>

<p id="41">The variable <a href="variables/excl/s_restart-actions_s.htm"><code>*restart-actions*</code></a>, if
true, should be a list of functions of no
arguments (function names or function objects are acceptable). These
functions are called in order, after the command-line arguments are
processed and the init files are read. The purpose of this variable is
to do system initializations. Do not set this variable or you may
eliminate values put on the list by Allegro CL and its associated
products (CLIM, for example, uses this variable). Instead, use
<b>push</b> or <b>pushnew</b> to add items if desired.</p>

<p id="42">Programmers are in fact discouraged from using this variable. <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>
and <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a>
(both described under the next heading) are better suited to application code while <a href="variables/excl/s_restart-actions_s.htm"><code>*restart-actions*</code></a> is best
left to Allegro CL and its associated products. Both <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>
and <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a>
are processed at the end of the startup procedure. <a href="variables/excl/s_restart-actions_s.htm"><code>*restart-actions*</code></a> is
processed early in the procedure, too early for certain actions (like starting CLIM) to
succeed.</p>

<hr><hr><h2 id="43"><a name="dumped-image-starting-five-1">12.0 When the dumped image starts 5: the two restart functions</a></h2>

<p id="44">At the end of the startup procedure, Allegro CL examines the
variable <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>.  If it is
true, its value is assumed to be a function of no
arguments (either a function name or a function object) and that
function is called. The function typically will return. It is designed
for late initializations (perhaps based on information supplied by
initialization files), possibly cleanup of state from the pre-dumplisp
image, application tasks like printing an information message or an
application banner, reading an application-specific initialization
file, processing application command-line arguments, etc.</p>

<p id="45">When the <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> returns, Allegro
CL examines *restart-app-function*. If it is <code>nil</code>, a standard Lisp listener is started. If it is
true, its value is assumed to be a function of no
arguments (either a function name or a function object) and that
function is called. The function should not return (the behavior if it
does return is undefined.) <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> is designed to
provide an application top-level when the application does not want to
use the standard Lisp listener as a top-level.</p>

<p id="46">There are two restart functions specifically to divide the two
purposes of a restart function in earlier versions of Allegro CL:
application-specific initializations and providing an application
top-level. Note that, a listener is started if <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> is <code>nil</code> but not when <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> returns (indeed,
the behavior if <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> returns is
undefined). Note that <a href="variables/excl/s_restart-app-function_s.htm"><code>*restart-app-function*</code></a> can start its own
Lisp listener by evaluating the following form:</p>

<pre id="47">
(tpl:start-interactive-top-level *terminal-io*
   #'tpl:top-level-read-eval-print-loop nil)
</pre>

<p id="48">See the definitions of <a href="operators/tpl/start-interactive-top-level.htm"><b>tpl:start-interactive-top-level</b></a> and
<a href="operators/tpl/top-level-read-eval-print-loop.htm"><b>tpl:top-level-read-eval-print-loop</b></a>.</p>

<hr><hr><h2 id="49"><a name="emacs-lisp-interface-and-dumped-images-1">13.0 The emacs-lisp interface and dumped images</a></h2>

<p id="50">This issue is also discussed in <a href="eli.htm">eli.htm</a>. The
Emacs-Lisp interface provides a close coupling of Allegro CL and
Emacs. What is important with respect to dumped images is how the
interface is started. It can only be started by invoking Allegro CL
within Emacs with the function <strong>fi:common-lisp</strong>. Images
invoked in that way cause the Emacs-Lisp interface to be started with
the command line arguments "-e (excl::new-start-emacs-lisp-interface
t)" (plus any additional command line arguments you
specify). This will be ineffective if processing of those command line
arguments is suppressed because the image was dumped with the
<i>ignore-command-line-arguments</i> argument to <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> specified true.</p>

<p id="51">If you create an image which ignores command-line arguments and you
want the emacs-lisp interface started, you must take responsibility
for evaluating <code>(<b>excl::new-start-emacs-lisp-interface</b>
t)</code>. This could be done as part of the <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>.</p>

<p id="52">There is one minor complication: you may want to handle the case
where you are starting the image in some fashion other than calling
fi:common-lisp within Emacs (for example, starting Lisp in a
shell). In that case, calling
<b>excl::new-start-emacs-lisp-interface</b> will not, of course, do
anything effective. Calling the function is not an error. However, it
does print a cryptic string to the listener, which you may want to
avoid. The solution to that problem is, instead of unconditionally
calling <b>excl::new-start-emacs-lisp-interface</b>, to look yourself
for "-e (excl::new-start-emacs-lisp-interface t)" among the
command line arguments and only call
<b>excl::new-start-emacs-lisp-interface</b> if it appears. The
following code (which actually simply looks for the first -e argument
and evaluates its companion argument) will do that:</p>

<pre id="53">
(let ((e-arg (member "-e" 
                     (system:command-line-arguments :application nil)
                     :test #'string=)))
  (when e-arg
    (eval (with-standard-io-syntax 
            (read-from-string (cadr e-arg))))))
</pre>

<hr><hr><h2 id="54"><a name="dumping-presto-image-1">14.0 Dumping a prestoized image</a></h2>

<p id="55">
In earlier releases, there were issues with dumping an image using
the Allegro Presto feature and with some functions partially
loaded. In 7.0, the Allegro Presto facility has been removed so
interaction between <a href="operators/excl/dumplisp.htm"><b>dumplisp</b></a> and Allegro Presto is no
longer an issue. See <a href="loading.htm#presto-1">The
Allegro Presto facility has been removed</a> in
<a href="loading.htm">loading.htm</a> for further information.
</p>

<hr><hr><h2 id="56"><a name="standalone-images-1">15.0 Standalone image: not supported</a></h2>

<p id="57">Because Allegro CL now requires an executable file and an image
file, standalone images (images that depend on no other files) are no
longer possible.</p>

<hr><hr><h2 id="58"><a name="library-files-1">16.0 How the dumped image finds loaded library files</a></h2>

<p id="59">Foreign loading is done on Unix by `loading' <i>.so</i> or
<i>.sl</i> files with dlopen() or an equivalent and on Windows by
loading <i>.dll</i> files. Dumped images must find these files when it
starts up. </p>

<p id="60">The pathnames of loaded .so files are stored. So long as those
pathnames are valid when the image is restarted, things should work
correctly. However, to guarantee that the dumped image finds the .so
files when it restarts, even if run on a different machine or network,
you can use one of the following methods. </p>

<ol>
  <li id="61">Use pathnames that will be valid when the dumped image restarts 
    (and, as we describe,
    logical pathnames can be made valid in the dumped image); or </li>
  <li id="62">Unload the .so files prior to dumplisp and reload them as part of the startup procedure
    (perhaps as an action taken by <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a>).
    We describe both methods in some detail.</li>
</ol>

<p id="63"><strong>Using logical pathnames and making them valid in the dumped
image</strong>. Lisp stores the pathnames of all loaded .so files as
they are specified to load (or <a href="tpl-commands/ld.htm"><b>:ld</b></a>). It uses these stored pathnames when
a dumped image is restarted to find the files and reload them. We
recommend these steps for loading .so files. Because logical pathnames
are used and because a translations file is specified
(<i>~/myhosts</i>), all that is needed is to ensure that file contains
the correct translation for the logical host. </p>

<ol>
  <li id="64">Specify the needed files to be loaded with logical pathnames.</li>
  <li id="65">Modify <a href="operators/excl/logical-pathname-translations-database-pathnames.htm"><b>logical-pathname-translations-database-pathnames</b></a>
    before dumping the image so that some file under your control (~/myhosts, e.g.) is
    examined along with <em>sys:hosts.cl</em>.</li>
  <li id="66">Make sure that file has the correct translation for the logical pathnames used to
    identify the .so files.</li>
</ol>

<p id="67">For example, suppose you want to load
/<em>usr/mydir/mysos/foo.so</em> into an image that will be
dumped. The following transcript shows the actions in the pre-dumped
image and modifications to the external logical hosts file.</p>

<pre id="68">
USER(1): (setf (logical-pathname-translations "myso")
           '((";**;*.*"
#p"/usr/mydir/mysos/")))
((#p";**;*.*" #p"/usr/mydir/mysos/"))
USER(2): :ld myso:b.so
; Foreign loading myso:b.so.
USER(3): (push "~/myhosts" (logical-pathname-translations-database-pathnames))
("~/myhosts" "sys:hosts.cl")
USER(4): (dumplisp :name "mycl")
Warning: shared object files have been loaded into this image, and so the 
resulting image will depend on myso:b.so for successful operation.
USER(5):
;; ~/myhosts contains:
"myso" '(";**;*.*" #p"/usr/mydir/mysos/")
</pre>

<p id="69"><strong>Unloading all .so files and reloading them upon
startup</strong>. In this example, we unload the (in our case single)
.so file with <a href="operators/ff/unload-foreign-library.htm"><b>ff:unload-foreign-library</b></a> and
show how to modify <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> so the .so file
is reloaded. We end with a couple of notes and warnings.</p>

<pre id="70">
USER(1): :ld /usr/mydir/mysos/b.so
; Foreign loading /usr/mydir/mysos/b.so.
USER(2): (ff:unload-foreign-library "/usr/mydir/mysos/b.so")
NIL
USER(3): (defun reload-my-so () (load "/usr/mydir/mysos/b.so"))
RELOAD-MY-SO
USER(4): (setq excl:*restart-init-function* 'reload-my-so)
USER(5): (dumplisp :name "mycl")
;; NOTE: no warning about loaded .so files.
USER(6):
;; The new image comes up as follows (note the message about foreign loading):
Allegro CL 

Copyright (C) Franz Inc., Berkeley, CA, USA. All Rights Reserved.
;; Starting socket daemon and emacs-lisp interface...
; Foreign loading /usr/mydir/mysos/b.so.
USER(1): 
</pre>

<p id="71">Notes and warnings: </p>

<ol>
  <li id="72">Certain Allegro CL utilities may dynamically load .so
    files. (CLIM does if loading into a running image rather than
    being built into the image, e.g.). These files are specified with
    logical pathnames with host <i>sys:</i>, so they should be found
    without programmer intervention.</li>

  <li id="73">The <a href="variables/excl/s_restart-init-function_s.htm"><code>*restart-init-function*</code></a> in our example is
    very simple and not very useful. In real situations, programmers
    would likely get information from a command-line argument or an
    initialization file about the location of the needed files and act
    on that information.</li>

  <li id="74">The files must be found and reloaded before any foreign function
    that requires them is called.</li>
</ol>

<hr><hr><h2 id="75"><a name="logical-pathnames-1">17.0 Logical pathnames and the dumped image</a></h2>

<p id="76">All logical pathname translations are flushed as the first action
when a dumped image restarts. This is a feature. There is no way for
Lisp to tell whether the translations are valid upon restart (and they
almost certainly will not be valid if the image is restarted on a
different machine on a different network). Rather than devise a way to
communicate to Lisp whether to flush translations on startup (and thus
overload the few ways available to communicate with restarting
images), Allegro CL instead provides tools for properly
re-establishing translations using specific files.</p>

<p id="77">The function <a href="operators/excl/logical-pathname-translations-database-pathnames.htm"><b>logical-pathname-translations-database-pathnames</b></a>
returns a list of pathname namestrings. Initially, it returns the list
("sys:hosts.cl"). You may use <b>push</b> or <b>pushnew</b>
to add other strings naming files. For example,</p>

<pre id="78">
USER(5): (logical-pathname-translations-database-pathnames)
("sys:hosts.cl")
USER(6): (pushnew "~/myhosts"
(logical-pathname-translations-database-pathnames))
("~/myhosts" "sys:hosts.cl")
USER(6): (logical-pathname-translations-database-pathnames)
("~/myhosts" "sys:hosts.cl")
</pre>

<p id="79">When looking for a translation for a logical pathname, Lisp will
look first in <i>~/myhosts</i> and then in <i>sys:hosts.cl</i>. It is
not an error if a named file does not exist.  Therefore, your
translations should be added to <i>hosts.cl</i> in the Allegro
directory or to a file of your own which you push onto <a href="operators/excl/logical-pathname-translations-database-pathnames.htm"><b>logical-pathname-translations-database-pathnames</b></a>
as described above. (Many users of Lisp may not have permission to
modify <i>hosts.cl</i>.  Indeed, having several users modifying that
file is impractical.)</p>

<hr><hr><h2 id="80"><a name="allegro-directory-1">18.0 How the dumped image finds its Allegro directory</a></h2>

<p id="81">
The Allegro directory is the location of the executable file (such
as <em>mlisp</em> or <em>mlisp.exe</em>). In the separate
executable/image model, finding the directory using the executable is
simple and should work without problems.
</p>

<hr><hr><h2 id="82"><a name="multiprocessing-1">19.0 dumplisp and multiprocessing</a></h2>

<p id="83">
When lisp starts from a dumped image, it has exactly one process that
is runnable, the <b>Initial Lisp Listener</b> process, and that is a
new process, completely unrelated to the Initial Lisp Listener process
that was running when the image was dumped.
</p>
<p id="84">
Any other processes that were in the image when it was dumped must be
<a href="operators/mp/process-reset.htm"><b>process-reset</b></a>
before being run again. It would be legal to <a href="operators/mp/process-kill.htm"><b>process-kill</b></a> any or all of them
instead of resetting and restarting them.
</p>

<hr><hr><h2 id="85"><a name="using-dumped-image-1">20.0 How to use the dumped image</a></h2>

<p id="86">
The image is specified to the executable with the -I argument, Thus,
if the dumped image is named <i>myimage.dxl</i>, and mlisp.exe or
mlisp is the executable, then this starts a Lisp using
<i>myimage.dxl</i>:
</p>

<pre id="87">
[Windows]
% mlisp.exe [+ args if any] -I &lt;path&gt;/myimage.dxl [other args]
[Unix]
% mlisp -I &lt;path&gt;/myimage.dxl [other args]
</pre>

<p id="88">
If no -I argument is specified, the executable looks for an image
in the same directory with the same name as itself (thus
<em>mlisp.exe</em> will look for <em>mlisp.dxl</em>). If you have
created an image for general use, you may wish to copy it to the
Allegro directory (assuming you have permission to do so) and copy the
executable to have the same name.
</p>



</body><hr><p id="2"><small>Copyright (c) 1998-2010, Franz Inc. Oakland, CA., USA. All rights reserved.</small><br><small>Documentation for Allegro CL version 8.2. This page was not revised from the 8.1 page.</small><br>
<small>Created 2010.1.21.</small>
<br></p><table border="0" width="100%" cellpadding="1" cellspacing="0"><tr><td colspan="2" bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3"><tr><td align="left" bgcolor="#00FFFF"><a href="contents.htm"><b>ToC</b></a></td><td align="left" bgcolor="#00FFFF"><a href="introduction.htm"><b>DocOverview</b></a></td><td align="left" bgcolor="#00FFFF"><a href="cgide.htm"><b>CGDoc</b></a></td><td align="left" bgcolor="#00FFFF"><a href="release-notes.htm"><b>RelNotes</b></a></td><td align="left" bgcolor="#00FFFF"><a href="http://www.franz.com/support/faqs/"><b>FAQ</b></a></td><td align="left" bgcolor="#00FFFF"><a href="index.htm"><b>Index</b></a></td><td align="left" bgcolor="#00FFFF"><a href="permuted-index.htm"><b>PermutedIndex</b></a></td></tr></table></td><td align="right"><b>Allegro CL version 8.2</b><br><small><a href="introduction.htm#updates-s">Unrevised from 8.1 to 8.2.</a></small><br><a href="http://www.franz.com/support/documentation/8.1/doc/dumplisp.htm">8.1 version</a></td></tr></table></html>