<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : e.htm
  representing node       : E  [ID:NO-1465]
                 of class : GlossaryEntry  [ID:SC-10]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:51:25 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>E</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="GlossaryEntr_E_1465"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="d.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="f.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/glossary.htm">26 Glossary</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/glossary.htm">26.1 Glossary</A>

</FONT>
<H1 ID="2">E</H1>
<DL>
<A NAME="echostream">
<DT><B>echo stream:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="s.htm#stream">stream</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/echo-str.htm"><B>echo-stream</B></A>.

<P ID="3">
<A NAME="effectivemethod">
<DT><B>effective method:</B><DD> <I>n.</I>&nbsp;  the combination of <I><A HREF="a.htm#applicablemethod">applicable methods</A></I> that are executed
  when a <I><A HREF="g.htm#genericfunction">generic function</A></I> is invoked with a particular sequence
  of <I><A HREF="a.htm#argument">arguments</A></I>.

<P ID="4">
<A NAME="element">
<DT><B>element:</B><DD> <I>n.</I>&nbsp;  1. (of a <I><A HREF="l.htm#list">list</A></I>) 
     an <I><A HREF="o.htm#object">object</A></I> that is the <I><A HREF="c.htm#car">car</A></I> of one of the <I>conses</I>
     that comprise the <I><A HREF="l.htm#list">list</A></I>.
  2. (of an <I><A HREF="a.htm#array">array</A></I>)
     an <I><A HREF="o.htm#object">object</A></I> that is stored in the <I><A HREF="a.htm#array">array</A></I>.
  3. (of a <I><A HREF="s.htm#sequence">sequence</A></I>)
     an <I><A HREF="o.htm#object">object</A></I> that is an <I><A HREF="#element">element</A></I> of the <I><A HREF="l.htm#list">list</A></I> or <I><A HREF="a.htm#array">array</A></I>
     that is the <I><A HREF="s.htm#sequence">sequence</A></I>.
  4. (of a <I><A HREF="t.htm#type">type</A></I>)
     an <I><A HREF="o.htm#object">object</A></I> that is a member of the set of <I><A HREF="o.htm#object">objects</A></I>
     designated by the <I><A HREF="t.htm#type">type</A></I>.
  5. (of an <I><A HREF="i.htm#input">input</A></I> <I><A HREF="s.htm#stream">stream</A></I>)
     a <I><A HREF="c.htm#character">character</A></I> or <I><A HREF="n.htm#number">number</A></I> (as appropriate to the
     <I><A HREF="#elementtype">element type</A></I> of the <I><A HREF="s.htm#stream">stream</A></I>)
     that is among the ordered series of <I><A HREF="o.htm#object">objects</A></I> that can be 
     read from the <I><A HREF="s.htm#stream">stream</A></I> (using <A HREF="../dictentr/read-cha.htm"><B>read-char</B></A> or <A HREF="../dictentr/read-byt.htm"><B>read-byte</B></A>,
     as appropriate to the <I><A HREF="s.htm#stream">stream</A></I>).
  6. (of an <I><A HREF="o.htm#output">output</A></I> <I><A HREF="s.htm#stream">stream</A></I>)
     a <I><A HREF="c.htm#character">character</A></I> or <I><A HREF="n.htm#number">number</A></I> (as appropriate to the
     <I><A HREF="#elementtype">element type</A></I> of the <I><A HREF="s.htm#stream">stream</A></I>)
     that is among the ordered series of <I><A HREF="o.htm#object">objects</A></I> that has been
     or will be written to the <I><A HREF="s.htm#stream">stream</A></I> (using <A HREF="../dictentr/write-ch.htm"><B>write-char</B></A> 
     or <A HREF="../dictentr/write-by.htm"><B>write-byte</B></A>, as appropriate to the <I><A HREF="s.htm#stream">stream</A></I>).
  7. (of a <I><A HREF="c.htm#class">class</A></I>) a <I><A HREF="g.htm#generalizedinstance">generalized instance</A></I> of the <I><A HREF="c.htm#class">class</A></I>.

<P ID="5">
<A NAME="elementtype">
<DT><B>element type:</B><DD> <I>n.</I>&nbsp;
  1. (of an <I><A HREF="a.htm#array">array</A></I>) the <I><A HREF="a.htm#arrayelementtype">array element type</A></I> of the <I><A HREF="a.htm#array">array</A></I>.
  2. (of a <I><A HREF="s.htm#stream">stream</A></I>) the <I><A HREF="s.htm#streamelementtype">stream element type</A></I> of the <I><A HREF="s.htm#stream">stream</A></I>.

<P ID="6">
<A NAME="em">
<DT><B>em:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;
  a context-dependent unit of measure commonly used in typesetting,
  equal to the displayed width of of a letter "M" in the current font.
  (The letter "M" is traditionally chosen because it is typically 
   represented by the widest <I><A HREF="g.htm#glyph">glyph</A></I> in the font, and other characters' 
   widths are typically fractions of an <I><A HREF="#em">em</A></I>.  In implementations providing 
   non-Roman characters with wider characters than "M," it is permissible 
   for another character to be the <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> reference character
   for this measure, and for "M" to be only a fraction of an <I><A HREF="#em">em</A></I>
   wide.)  
  In a fixed width font, a line with <I>n</I> characters is <I>n</I> 
  <I><A HREF="#em">ems</A></I> wide; in a variable width font, <I>n</I> <I><A HREF="#em">ems</A></I> is the
  expected upper bound on the width of such a line.

<P ID="7">
<A NAME="emptylist">
<DT><B>empty list:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="l.htm#list">list</A></I> containing no <I><A HREF="#element">elements</A></I>. See <I><A HREF="non-alph.htm#_">()</A></I>.

<P ID="8">
<A NAME="emptytype">
<DT><B>empty type:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="t.htm#type">type</A></I> that contains no <I><A HREF="#element">elements</A></I>, and that is
  a <I><A HREF="s.htm#subtype">subtype</A></I> of all <I><A HREF="t.htm#type">types</A></I> (including itself).
  See <I><A HREF="n.htm#nil">nil</A></I>.

<P ID="9">
<A NAME="endoffile">
<DT><B>end of file:</B><DD> <I>n.</I>&nbsp;  1. the point in an <I><A HREF="i.htm#input">input</A></I> <I><A HREF="s.htm#stream">stream</A></I> beyond which there is
     no further data.
     Whether or not there is such a point on an <I><A HREF="i.htm#interactivestream">interactive stream</A></I> 
     is <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I>.
  2. a <I><A HREF="s.htm#situation">situation</A></I> that occurs upon an attempt to obtain data from an
     <I>input stream</I> that is at the <I><A HREF="#endoffile">end of file</A></I><SUB>1</SUB>.

<P ID="10">
<A NAME="environment">
<DT><B>environment:</B><DD> <I>n.</I>&nbsp;  1. a set of <I><A HREF="b.htm#binding">bindings</A></I>. See Section <A HREF="../subsecti/introdu4.htm">3.1.1 Introduction to Environments</A>.
  2. an <I><A HREF="#environmentobject">environment object</A></I>.
     <A HREF="../dictentr/macroex0.htm"><B>macroexpand</B></A> takes an optional environment argument.

<P ID="11">
<A NAME="environmentobject">
<DT><B>environment object:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> representing a set of <I><A HREF="l.htm#lexicalbinding">lexical bindings</A></I>,
     used in the processing of a <I><A HREF="f.htm#form">form</A></I> to provide meanings for
     <I><A HREF="n.htm#name">names</A></I> within that <I><A HREF="f.htm#form">form</A></I>.
     <A HREF="../dictentr/macroex0.htm"><B>macroexpand</B></A> takes an optional environment argument.
     (The <I><A HREF="o.htm#object">object</A></I> <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;when used as an <I><A HREF="#environmentobject">environment object</A></I>
      denotes the <I><A HREF="n.htm#nulllexicalenvironment">null lexical environment</A></I>;
      the <I><A HREF="v.htm#value">values</A></I> of <I><A HREF="#environmentparameter">environment parameters</A></I> 
      to <I><A HREF="m.htm#macrofunction">macro functions</A></I> are <I><A HREF="o.htm#object">objects</A></I>
      of <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> nature which represent the 
      <I><A HREF="#environment">environment</A></I><SUB>1</SUB> in which the corresponding <I><A HREF="m.htm#macroform">macro form</A></I>
      is to be expanded.)
     See Section <A HREF="../subsubse/environm.htm">3.1.1.4 Environment Objects</A>.

<P ID="12">
<A NAME="environmentparameter">
<DT><B>environment parameter:</B><DD> <I>n.</I>&nbsp;  A <I><A HREF="p.htm#parameter">parameter</A></I> in a <I><A HREF="d.htm#definingform">defining form</A></I> <I>f</I> for which there is no corresponding
  <I><A HREF="a.htm#argument">argument</A></I>; instead, this <I><A HREF="p.htm#parameter">parameter</A></I> receives as its value an
  <I><A HREF="#environment">environment</A></I> <I><A HREF="o.htm#object">object</A></I> which corresponds to the
  <I><A HREF="l.htm#lexicalenvironment">lexical environment</A></I> in which the <I><A HREF="d.htm#definingform">defining form</A></I> <I>f</I> appeared.

<P ID="13">

<A NAME="error">
<DT><B>error:</B><DD> <I>n.</I>&nbsp;  1. (only in the phrase "is an error")
     a <I><A HREF="s.htm#situation">situation</A></I> in which the semantics of a program are not specified, 
     and in which the consequences are undefined.
  2. a <I><A HREF="c.htm#condition">condition</A></I> which represents an <I><A HREF="#error">error</A></I> <I><A HREF="s.htm#situation">situation</A></I>.
     See Section <A HREF="../subsecti/errorter.htm">1.4.2 Error Terminology</A>.
  3. an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/error.htm"><B>error</B></A>.

<P ID="14">
<A NAME="erroroutput">
<DT><B>error output:</B><DD> <I>n.</I>&nbsp;
  the <I><A HREF="o.htm#output">output</A></I> <I><A HREF="s.htm#stream">stream</A></I> which is the <I><A HREF="v.htm#value">value</A></I> of the <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>
  <A HREF="../dictentr/debug-io.htm"><B>*error-output*</B></A>.

<P ID="15">
<A NAME="escape">
<DT><B>escape:</B><DD> <I>n.</I>, <I>adj.</I>&nbsp;  1. <I>n.</I>&nbsp;a <I><A HREF="s.htm#singleescape">single escape</A></I> or a <I><A HREF="m.htm#multipleescape">multiple escape</A></I>.
  2. <I>adj.</I>&nbsp;<I><A HREF="s.htm#singleescape">single escape</A></I> or <I><A HREF="m.htm#multipleescape">multiple escape</A></I>.

<P ID="16">


<A NAME="establish">
<DT><B>establish:</B><DD> <I>v.t.</I>&nbsp;
  to build or bring into being 
      a  <I><A HREF="b.htm#binding">binding</A></I>,
      a  <I><A HREF="d.htm#declaration">declaration</A></I>,
      an <I><A HREF="#exitpoint">exit point</A></I>,
      a  <I><A HREF="t.htm#tag">tag</A></I>,
      a  <I><A HREF="h.htm#handler">handler</A></I>, 
      a <I><A HREF="r.htm#restart">restart</A></I>,
   or an <I><A HREF="#environment">environment</A></I>. 
  <A HREF="../dictentr/letlet.htm"><B>let</B></A> establishes lexical bindings.

<P ID="17">
<A NAME="evaluate">
<DT><B>evaluate:</B><DD> <I>v.t.</I>&nbsp;(a <I><A HREF="f.htm#form">form</A></I> or an <I><A HREF="i.htm#implicitprogn">implicit progn</A></I>)
  to <I><A HREF="#execute">execute</A></I> the <I><A HREF="c.htm#code">code</A></I> represented by the <I><A HREF="f.htm#form">form</A></I>
  (or the series of <I><A HREF="f.htm#form">forms</A></I> making up the <I><A HREF="i.htm#implicitprogn">implicit progn</A></I>)
  by applying the rules of <I><A HREF="#evaluation">evaluation</A></I>,
  returning zero or more values.

<P ID="18">
<A NAME="evaluation">
<DT><B>evaluation:</B><DD> <I>n.</I>&nbsp;  a model whereby <I><A HREF="f.htm#form">forms</A></I> are <I>executed</I>, returning zero or more values.
  Such execution might be implemented directly in one step by an interpreter
  or in two steps by first <I>compiling</I> the <I><A HREF="f.htm#form">form</A></I> and then
  <I>executing</I> the <I>compiled</I> <I><A HREF="c.htm#code">code</A></I>; this choice is 
  dependent both on context and the nature of the <I><A HREF="i.htm#implementation">implementation</A></I>, 
  but in any case is not in general detectable by any program.  The evaluation
  model is designed in such a way that a <I><A HREF="c.htm#conformingimplementation">conforming implementation</A></I> 
  might legitimately have only a compiler and no interpreter, or vice versa.
  See Section <A HREF="../subsecti/theevalu.htm">3.1.2 The Evaluation Model</A>.

<P ID="19">
<A NAME="evaluationenvironment">
<DT><B>evaluation environment:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="r.htm#runtimeenvironment">run-time environment</A></I> in which macro expanders 
  and code specified by <A HREF="../dictentr/eval-whe.htm"><B>eval-when</B></A> to be evaluated
  are evaluated.  All evaluations initiated by the <I><A HREF="c.htm#compiler">compiler</A></I> 
  take place in the <I><A HREF="#evaluationenvironment">evaluation environment</A></I>.

<P ID="20">
<A NAME="execute">
<DT><B>execute:</B><DD> <I>v.t.</I>&nbsp;<I>Trad.</I>&nbsp;(<I><A HREF="c.htm#code">code</A></I>)
  to perform the imperative actions represented by the <I><A HREF="c.htm#code">code</A></I>.

<P ID="21">
<A NAME="executiontime">
<DT><B>execution time:</B><DD> <I>n.</I>&nbsp;  the duration of time that <I><A HREF="c.htm#compiledcode">compiled code</A></I> is being <I>executed</I>.

<P ID="22">
<A NAME="exhaustivepartition">
<DT><B>exhaustive partition:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="t.htm#type">type</A></I>)
  a set of <I><A HREF="p.htm#pairwise">pairwise</A></I> <I><A HREF="d.htm#disjoint">disjoint</A></I> <I><A HREF="t.htm#type">types</A></I> that form an 
  <I><A HREF="#exhaustiveunion">exhaustive union</A></I>.

<P ID="23">
<A NAME="exhaustiveunion">
<DT><B>exhaustive union:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="t.htm#type">type</A></I>)
  a set of <I><A HREF="s.htm#subtype">subtypes</A></I> of the <I><A HREF="t.htm#type">type</A></I>,
  whose union contains all <I><A HREF="#element">elements</A></I> of that <I><A HREF="t.htm#type">type</A></I>.

<P ID="24">
<A NAME="exitpoint">
<DT><B>exit point:</B><DD> <I>n.</I>&nbsp;  a point in a <I><A HREF="c.htm#controlform">control form</A></I>


       from which (<I>e.g.</I>,  <A HREF="../dictentr/block.htm"><B>block</B></A>),
       through which (<I>e.g.</I>,  <A HREF="../dictentr/unwind-p.htm"><B>unwind-protect</B></A>),
    or to which (<I>e.g.</I>,  <A HREF="../dictentr/tagbody.htm"><B>tagbody</B></A>)
  control and possibly <I><A HREF="v.htm#value">values</A></I> can be transferred both actively by using 
  another <I><A HREF="c.htm#controlform">control form</A></I> and passively through the normal control and
  data flow of <I><A HREF="#evaluation">evaluation</A></I>.
  <A HREF="../dictentr/catch.htm"><B>catch</B></A> and <A HREF="../dictentr/block.htm"><B>block</B></A> establish bindings for
            exit points to which <A HREF="../dictentr/throw.htm"><B>throw</B></A> and <A HREF="../dictentr/return-f.htm"><B>return-from</B></A>,
	    respectively, can transfer control and values;
	    <A HREF="../dictentr/tagbody.htm"><B>tagbody</B></A> establishes a binding for an exit point
	    with lexical extent to which <A HREF="../dictentr/go.htm"><B>go</B></A> can transfer control;
	    and <A HREF="../dictentr/unwind-p.htm"><B>unwind-protect</B></A> establishes an exit point 
	    through which control might be transferred by 
	    operators such as <A HREF="../dictentr/throw.htm"><B>throw</B></A>, <A HREF="../dictentr/return-f.htm"><B>return-from</B></A>,
            and <A HREF="../dictentr/go.htm"><B>go</B></A>.

<P ID="25">
<A NAME="explicitreturn">
<DT><B>explicit return:</B><DD> <I>n.</I>&nbsp;
  the act of transferring control (and possibly <I><A HREF="v.htm#value">values</A></I>) 
  to a <I><A HREF="b.htm#block">block</A></I> by using <A HREF="../dictentr/return-f.htm"><B>return-from</B></A> (or <A HREF="../dictentr/return.htm"><B>return</B></A>).


<P ID="26">
<A NAME="explicituse">
<DT><B>explicit use:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="v.htm#variable">variable</A></I> <I>V</I> in a <I><A HREF="f.htm#form">form</A></I> <I>F</I>)
  a reference to <I>V</I> that is directly apparent in the normal semantics of <I>F</I>;
  <I>i.e.</I>,  that does not expose any undocumented details of the
      <I><A HREF="m.htm#macroexpansion">macro expansion</A></I> of the <I><A HREF="f.htm#form">form</A></I> itself.
  References to <I>V</I> exposed by expanding <I><A HREF="s.htm#subform">subforms</A></I> of <I>F</I> are, however,
  considered to be <I><A HREF="#explicituse">explicit uses</A></I> of <I>V</I>.

<P ID="27">

<A NAME="exponentmarker">
<DT><B>exponent marker:</B><DD> <I>n.</I>&nbsp;  a character that is used in the textual notation for a <I><A HREF="f.htm#float">float</A></I>
  to separate the mantissa from the exponent.
  The characters defined as <I><A HREF="#exponentmarker">exponent markers</A></I> in the <I><A HREF="s.htm#standardreadtable">standard readtable</A></I>
  are shown in the next figure.
  For more information, see Section <A HREF="../section/characte.htm">2.1 Character Syntax</A>.
  The exponent marker `d' in `3.0d7' indicates
	    that this number is to be represented as a double float.

<P ID="28">
<P ID="29">
<TABLE WIDTH="100%" BORDER=1 CELLSPACING=0 CELLPADDING=5>
<CAPTION ALIGN=BOTTOM>Exponent Markers</CAPTION>
<TR><TH ALIGN=LEFT>Marker</TH>
<TH ALIGN=LEFT>Meaning</TH>
</TR>

  <tr>
    <td><TT>D</TT> or <TT>d</TT></td>
    <td><A HREF="../dictentr/short-fl.htm"><B>double-float</B></A></td>
  </tr>
  <tr>
    <td><TT>E</TT> or <TT>e</TT></td>
    <td><A HREF="../dictentr/float.htm"><B>float</B></A> (see <A HREF="../dictentr/read-def.htm"><B>*read-default-float-format*</B></A>)</td>
  </tr>
  <tr>
    <td><TT>F</TT> or <TT>f</TT></td>
    <td><A HREF="../dictentr/short-fl.htm"><B>single-float</B></A></td>
  </tr>
  <tr>
    <td><TT>L</TT> or <TT>l</TT></td>
    <td><A HREF="../dictentr/short-fl.htm"><B>long-float</B></A></td>
  </tr>
  <tr>
    <td><TT>S</TT> or <TT>s</TT></td>
    <td><A HREF="../dictentr/short-fl.htm"><B>short-float</B></A></td>
  </tr>
</TABLE>


<P ID="30">
<A NAME="export">
<DT><B>export:</B><DD> <I>v.t.</I>&nbsp;(a <I><A HREF="s.htm#symbol">symbol</A></I> in a <I><A HREF="p.htm#package">package</A></I>)
  to add the <I><A HREF="s.htm#symbol">symbol</A></I> to the list of <I><A HREF="#externalsymbol">external symbols</A></I> of the
  <I><A HREF="p.htm#package">package</A></I>.

<P ID="31">
<A NAME="exported">
<DT><B>exported:</B><DD> <I>adj.</I>&nbsp;(of a <I><A HREF="s.htm#symbol">symbol</A></I> in a <I><A HREF="p.htm#package">package</A></I>)
  being an <I><A HREF="#externalsymbol">external symbol</A></I> of the <I><A HREF="p.htm#package">package</A></I>.

<P ID="32">
<A NAME="expressedadjustability">
<DT><B>expressed adjustability:</B><DD> <I>n.</I>&nbsp;(of an <I><A HREF="a.htm#array">array</A></I>)
  a <I><A HREF="g.htm#generalizedboolean">generalized boolean</A></I> that is conceptually (but not necessarily actually)
  associated with the <I><A HREF="a.htm#array">array</A></I>, representing whether the <I><A HREF="a.htm#array">array</A></I>
  is <I><A HREF="#expresslyadjustable">expressly adjustable</A></I>.
  See also <I><A HREF="a.htm#actualadjustability">actual adjustability</A></I>.

<P ID="33">
<A NAME="expressedarrayelementtype">
<DT><B>expressed array element type:</B><DD> <I>n.</I>&nbsp;(of an <I><A HREF="a.htm#array">array</A></I>)
  the <I><A HREF="t.htm#type">type</A></I> which is the <I><A HREF="a.htm#arrayelementtype">array element type</A></I>
  implied by a <I><A HREF="t.htm#typedeclaration">type declaration</A></I> for the <I><A HREF="a.htm#array">array</A></I>, 
  or which is the requested <I><A HREF="a.htm#arrayelementtype">array element type</A></I> at its time 
  of creation, prior to any selection of an <I><A HREF="u.htm#upgradedarrayelementtype">upgraded array element type</A></I>.
  (<I>Common Lisp</I>&nbsp;does not provide a way of detecting this <I><A HREF="t.htm#type">type</A></I>
   directly at run time, but an <I><A HREF="i.htm#implementation">implementation</A></I> is permitted 
   to make assumptions about the <I><A HREF="a.htm#array">array</A></I>'s contents and
   the operations which may be performed on the <I><A HREF="a.htm#array">array</A></I> when
   this <I><A HREF="t.htm#type">type</A></I> is noted during code analysis, even if those 
   assumptions would not be valid in general for the
   <I><A HREF="u.htm#upgradedarrayelementtype">upgraded array element type</A></I> of the
   <I><A HREF="#expressedarrayelementtype">expressed array element type</A></I>.)
<P ID="34">
<A NAME="expressedcomplexparttype">
<DT><B>expressed complex part type:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="c.htm#complex">complex</A></I>)
  the <I><A HREF="t.htm#type">type</A></I> which is implied as the <I><A HREF="c.htm#complexparttype">complex part type</A></I>
  by a <I><A HREF="t.htm#typedeclaration">type declaration</A></I> for the <I><A HREF="c.htm#complex">complex</A></I>, 
  or which is the requested <I><A HREF="c.htm#complexparttype">complex part type</A></I> at its time of
  creation, prior to any selection of an <I><A HREF="u.htm#upgradedcomplexparttype">upgraded complex part type</A></I>.
  (<I>Common Lisp</I>&nbsp;does not provide a way of detecting this <I><A HREF="t.htm#type">type</A></I>
   directly at run time, but an <I><A HREF="i.htm#implementation">implementation</A></I> is permitted 
   to make assumptions about the operations which may be performed on
   the <I><A HREF="c.htm#complex">complex</A></I> when this <I><A HREF="t.htm#type">type</A></I> is noted during code
   analysis, even if those assumptions would not be valid in general for 
   the <I><A HREF="u.htm#upgradedcomplexparttype">upgraded complex part type</A></I> of the
   <I><A HREF="#expressedcomplexparttype">expressed complex part type</A></I>.)

<P ID="35">
<A NAME="expression">
<DT><B>expression:</B><DD> <I>n.</I>&nbsp;  1. an <I><A HREF="o.htm#object">object</A></I>, often used to emphasize the use 
     of the <I><A HREF="o.htm#object">object</A></I> to encode or represent information in a specialized
     format, such as program text.
     The second expression in a <A HREF="../dictentr/letlet.htm"><B>let</B></A> form is a list
   	       of bindings.
  2. the textual notation used to notate an <I><A HREF="o.htm#object">object</A></I> in a source file.
     The expression <TT>'sample</TT> is equivalent to <TT>(quote sample)</TT>.

<P ID="36">
<A NAME="expresslyadjustable">
<DT><B>expressly adjustable:</B><DD> <I>adj.</I>&nbsp;(of an <I><A HREF="a.htm#array">array</A></I>)
  being <I><A HREF="a.htm#actuallyadjustable">actually adjustable</A></I> by virtue of an explicit request for this
  characteristic having been made at the time of its creation.
  All <I><A HREF="a.htm#array">arrays</A></I> that are <I><A HREF="#expresslyadjustable">expressly adjustable</A></I> 
  are <I><A HREF="a.htm#actuallyadjustable">actually adjustable</A></I>,
  but not necessarily vice versa.

<P ID="37">
<A NAME="extendedcharacter">
<DT><B>extended character:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="c.htm#character">character</A></I> 

  of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/extended.htm"><B>extended-char</B></A>:

  a <I><A HREF="c.htm#character">character</A></I> that is not a <I><A HREF="b.htm#basecharacter">base character</A></I>.

<P ID="38">
<A NAME="extendedfunctiondesignator">
<DT><B>extended function designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="f.htm#function">function</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="f.htm#function">function</A></I>
  and that is one of:
      a <I><A HREF="f.htm#functionname">function name</A></I> (denoting the <I><A HREF="f.htm#function">function</A></I> it names
                              in the <I><A HREF="g.htm#globalenvironment">global environment</A></I>),
   or a <I><A HREF="f.htm#function">function</A></I> (denoting itself).
  The consequences are undefined if 
  a <I><A HREF="f.htm#functionname">function name</A></I> is used as an 
  <I><A HREF="#extendedfunctiondesignator">extended function designator</A></I> but
  it does not have a global definition as a <I><A HREF="f.htm#function">function</A></I>,
  or if it is a <I><A HREF="s.htm#symbol">symbol</A></I> 
     that has a global definition as a <I><A HREF="m.htm#macro">macro</A></I> or a <I><A HREF="s.htm#specialform">special form</A></I>.
  See also <I><A HREF="f.htm#functiondesignator">function designator</A></I>.

<P ID="39">
<A NAME="extendedlambdalist">
<DT><B>extended lambda list:</B><DD> <I>n.</I>&nbsp;  a list resembling an <I><A HREF="o.htm#ordinarylambdalist">ordinary lambda list</A></I> in form and purpose, but 
  offering additional syntax or functionality not available in an
  <I><A HREF="o.htm#ordinarylambdalist">ordinary lambda list</A></I>.
  <A HREF="../dictentr/defmacro.htm"><B>defmacro</B></A> uses extended lambda lists.

<P ID="40">
<A NAME="extension">
<DT><B>extension:</B><DD> <I>n.</I>&nbsp;  a facility in an <I><A HREF="i.htm#implementation">implementation</A></I> of <I>Common Lisp</I>&nbsp;
  that is not specified by this standard.

<P ID="41">
<A NAME="extent">
<DT><B>extent:</B><DD> <I>n.</I>&nbsp;  the interval of time during which a <I><A HREF="r.htm#reference">reference</A></I> to 
      an <I><A HREF="o.htm#object">object</A></I>,
      a  <I><A HREF="b.htm#binding">binding</A></I>,
      an <I><A HREF="#exitpoint">exit point</A></I>,
      a  <I><A HREF="t.htm#tag">tag</A></I>,
      a  <I><A HREF="h.htm#handler">handler</A></I>,
      a  <I><A HREF="r.htm#restart">restart</A></I>,
   or an <I><A HREF="#environment">environment</A></I> is defined.

<P ID="42">
<A NAME="externalfileformat">
<DT><B>external file format:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> nature which determines
  one of possibly several <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> ways in which
  <I><A HREF="c.htm#character">characters</A></I> are encoded externally in a <I><A HREF="c.htm#character">character</A></I> <I><A HREF="f.htm#file">file</A></I>.

<P ID="43">
<A NAME="externalfileformatdesignator">
<DT><B>external file format designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for an <I><A HREF="#externalfileformat">external file format</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes an <I><A HREF="#externalfileformat">external file format</A></I>
  and that is one of:
      the <I><A HREF="s.htm#symbol">symbol</A></I> <TT>:default</TT> 
         (denoting an <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> default 
          <I><A HREF="#externalfileformat">external file format</A></I> that can accomodate at least
          the <I><A HREF="b.htm#basecharacter">base characters</A></I>),
      some other <I><A HREF="o.htm#object">object</A></I> defined by the <I><A HREF="i.htm#implementation">implementation</A></I> to be
      an <I><A HREF="#externalfileformatdesignator">external file format designator</A></I>
         (denoting an <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> <I><A HREF="#externalfileformat">external file format</A></I>),
   or some other <I><A HREF="o.htm#object">object</A></I> defined by the <I><A HREF="i.htm#implementation">implementation</A></I> to be
      an <I><A HREF="#externalfileformat">external file format</A></I> 
         (denoting itself).

<P ID="44">
<A NAME="externalsymbol">
<DT><B>external symbol:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="p.htm#package">package</A></I>)
  a <I><A HREF="s.htm#symbol">symbol</A></I> that is part of the `external interface' to the <I><A HREF="p.htm#package">package</A></I>
  and that are <I>inherited</I><SUB>3</SUB> by any other <I><A HREF="p.htm#package">package</A></I>
   that <I><A HREF="u.htm#use">uses</A></I> the <I><A HREF="p.htm#package">package</A></I>.
  When using the <I>Lisp reader</I>, 
  if a <I><A HREF="p.htm#packageprefix">package prefix</A></I> is used,
  the <I><A HREF="n.htm#name">name</A></I> of an <I><A HREF="#externalsymbol">external symbol</A></I> is separated
    from the <I><A HREF="p.htm#package">package</A></I> <I><A HREF="n.htm#name">name</A></I> by a single <I><A HREF="p.htm#packagemarker">package marker</A></I>
  while
  the <I><A HREF="n.htm#name">name</A></I> of an <I><A HREF="i.htm#internalsymbol">internal symbol</A></I> is separated
    from the <I><A HREF="p.htm#package">package</A></I> <I><A HREF="n.htm#name">name</A></I> by a double <I><A HREF="p.htm#packagemarker">package marker</A></I>;
  see Section <A HREF="../subsecti/symbolsa.htm">2.3.4 Symbols as Tokens</A>.

<P ID="45">
<A NAME="externalizableobject">
<DT><B>externalizable object:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> that can be used as a <I><A HREF="l.htm#literal">literal</A></I> <I><A HREF="o.htm#object">object</A></I> 
  in <I><A HREF="c.htm#code">code</A></I> to be processed by the <I><A HREF="f.htm#filecompiler">file compiler</A></I>.  

<P ID="46"></DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="d.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="f.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
