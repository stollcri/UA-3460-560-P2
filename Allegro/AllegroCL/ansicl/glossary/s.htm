<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : s.htm
  representing node       : S  [ID:NO-1478]
                 of class : GlossaryEntry  [ID:SC-10]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:51:13 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>S</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="GlossaryEntr_S_1478"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="r.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="t.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/glossary.htm">26 Glossary</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/glossary.htm">26.1 Glossary</A>

</FONT>
<H1 ID="2">S</H1>
<DL>
<A NAME="safe">
<DT><B>safe:</B><DD> <I>adj.</I>&nbsp;
  1. (of <I><A HREF="c.htm#code">code</A></I>)
     processed in a <I><A HREF="l.htm#lexicalenvironment">lexical environment</A></I> where the the highest
     <B>safety</B> level (<TT>3</TT>) was in effect. 
     See <A HREF="../dictentr/optimize.htm"><B>optimize</B></A>.
  2. (of a <I><A HREF="c.htm#call">call</A></I>) a <I><A HREF="#safecall">safe call</A></I>.

<P ID="3">
<A NAME="safecall">
<DT><B>safe call:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="c.htm#call">call</A></I> in which 
        the <I><A HREF="c.htm#call">call</A></I>,
        the <I><A HREF="f.htm#function">function</A></I> being <I>called</I>,
    and the point of <I><A HREF="f.htm#functionalevaluation">functional evaluation</A></I>
  are all <I><A HREF="#safe">safe</A></I><SUB>1</SUB> <I><A HREF="c.htm#code">code</A></I>.
  For more detailed information, see Section <A HREF="../subsubse/safeandu.htm">3.5.1.1 Safe and Unsafe Calls</A>.

<P ID="4">
<A NAME="same">
<DT><B>same:</B><DD> <I>adj.</I>&nbsp;
  1. (of <I><A HREF="o.htm#object">objects</A></I> under a specified <I><A HREF="p.htm#predicate">predicate</A></I>) 
     indistinguishable by that <I><A HREF="p.htm#predicate">predicate</A></I>.
     The symbol <TT>car</TT>, the string <TT>"car"</TT>, and the string <TT>"CAR"</TT>
	       are the <TT>same</TT> under <A HREF="../dictentr/stringst.htm"><B>string-equal</B></A>.
  2. (of <I><A HREF="o.htm#object">objects</A></I> if no predicate is implied by context)
     indistinguishable by <A HREF="../dictentr/eql.htm"><B>eql</B></A>.
     Note that <A HREF="../dictentr/eq.htm"><B>eq</B></A> might be capable of distinguishing some 
     <I><A HREF="n.htm#number">numbers</A></I> and <I><A HREF="c.htm#character">characters</A></I> which <A HREF="../dictentr/eql.htm"><B>eql</B></A> cannot 
     distinguish, but the nature of such, if any, 
     is <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I>.
     Since <A HREF="../dictentr/eq.htm"><B>eq</B></A> is used only rarely in this specification,
     <A HREF="../dictentr/eql.htm"><B>eql</B></A> is the default predicate when none is mentioned explicitly.
     The conses returned by two successive calls to <A HREF="../dictentr/cons0.htm"><B>cons</B></A>
	       are never the same.
  3. (of <I><A HREF="t.htm#type">types</A></I>) having the same set of <I><A HREF="e.htm#element">elements</A></I>;
     that is, each <I><A HREF="t.htm#type">type</A></I> is a <I><A HREF="#subtype">subtype</A></I> of the others.
     The types specified by <TT>(integer 0 1)</TT>,
				      <TT>(unsigned-byte 1)</TT>,
				  and <TT>bit</TT> are the same.

<P ID="5">
<A NAME="satisfythetest">
<DT><B>satisfy the test:</B><DD> <I>v.</I>&nbsp;
       (of an <I><A HREF="o.htm#object">object</A></I> being considered by a <I><A HREF="#sequencefunction">sequence function</A></I>)
  1. (for a one <I><A HREF="a.htm#argument">argument</A></I> test)
     to be in a state such that the <I><A HREF="f.htm#function">function</A></I> which is the
     <I>predicate</I> <I><A HREF="a.htm#argument">argument</A></I> to the <I><A HREF="#sequencefunction">sequence function</A></I>
     returns <I><A HREF="t.htm#true">true</A></I> when given a single <I><A HREF="a.htm#argument">argument</A></I> that is the
     result of calling the <I><A HREF="#sequencefunction">sequence function</A></I>'s <I>key</I> <I><A HREF="a.htm#argument">argument</A></I>
     on the <I><A HREF="o.htm#object">object</A></I> being considered.  
     See Section <A HREF="../subsecti/satisfyi.htm">17.2.2 Satisfying a One-Argument Test</A>.



  2. (for a two <I><A HREF="a.htm#argument">argument</A></I> test)
     to be in a state such that the two-place <I><A HREF="p.htm#predicate">predicate</A></I> 
     which is the <I><A HREF="#sequencefunction">sequence function</A></I>'s 
     <I>test</I> <I><A HREF="a.htm#argument">argument</A></I>
     returns <I><A HREF="t.htm#true">true</A></I> when given a first <I><A HREF="a.htm#argument">argument</A></I> that 
     is


     the <I><A HREF="o.htm#object">object</A></I> being considered, 
     and when given a second <I><A HREF="a.htm#argument">argument</A></I>
     that is the result of calling the <I><A HREF="#sequencefunction">sequence function</A></I>'s 
     <I>key</I> <I><A HREF="a.htm#argument">argument</A></I> on an <I><A HREF="e.htm#element">element</A></I> of the
     <I><A HREF="#sequencefunction">sequence function</A></I>'s <I>sequence</I> <I><A HREF="a.htm#argument">argument</A></I> 
     which is being tested for equality;
     or to be in a state such that the <I>test-not</I> <I><A HREF="f.htm#function">function</A></I>
     returns <I><A HREF="f.htm#false">false</A></I> given the same <I><A HREF="a.htm#argument">arguments</A></I>.
     See Section <A HREF="../subsecti/satisfy0.htm">17.2.1 Satisfying a Two-Argument Test</A>.

<P ID="6">


<A NAME="scope">
<DT><B>scope:</B><DD> <I>n.</I>&nbsp;
  the structural or textual region of code in which <I><A HREF="r.htm#reference">references</A></I> 
  to an <I><A HREF="o.htm#object">object</A></I>, a <I><A HREF="b.htm#binding">binding</A></I>, an <I><A HREF="e.htm#exitpoint">exit point</A></I>, 
  a <I><A HREF="t.htm#tag">tag</A></I>, or an <I><A HREF="e.htm#environment">environment</A></I> (usually by <I><A HREF="n.htm#name">name</A></I>) 
  can occur.

<P ID="7">
<A NAME="script">
<DT><B>script:</B><DD> <I>n.</I>&nbsp;<I>ISO</I>&nbsp;  one of possibly several sets that form an <I><A HREF="e.htm#exhaustivepartition">exhaustive partition</A></I>
  of the type <A HREF="../dictentr/charact1.htm"><B>character</B></A>.  See Section <A HREF="../subsubse/charact0.htm">13.1.2.1 Character Scripts</A>.

<P ID="8">
<A NAME="secondaryvalue">
<DT><B>secondary value:</B><DD> <I>n.</I>&nbsp;(of <I><A HREF="v.htm#value">values</A></I> resulting from the
				   <I><A HREF="e.htm#evaluation">evaluation</A></I> of a <I><A HREF="f.htm#form">form</A></I>)
  the second <I><A HREF="v.htm#value">value</A></I>, if any, 
  or else <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;if there are fewer than two <I><A HREF="v.htm#value">values</A></I>.
  The secondary value returned by <A HREF="../dictentr/floorffl.htm"><B>truncate</B></A> is a remainder.

<P ID="9">
<A NAME="section">
<DT><B>section:</B><DD> <I>n.</I>&nbsp;  a partitioning of output by a <I><A HREF="c.htm#conditionalnewline">conditional newline</A></I> on a <I><A HREF="p.htm#prettyprintingstream">pretty printing stream</A></I>.
  See Section <A HREF="../subsubse/dynamicc.htm">22.2.1.1 Dynamic Control of the Arrangement of Output</A>.

<P ID="10">
<A NAME="selfevaluatingobject">
<DT><B>self-evaluating object:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> that is neither a <I><A HREF="#symbol">symbol</A></I> nor a


  <I><A HREF="c.htm#cons">cons</A></I>.
  If a <I><A HREF="#selfevaluatingobject">self-evaluating object</A></I> is <I>evaluated</I>,
  it <I><A HREF="y.htm#yield">yields</A></I> itself as its only <I><A HREF="v.htm#value">value</A></I>.
  Strings are self-evaluating objects.

<P ID="11">
<A NAME="semistandard">
<DT><B>semi-standard:</B><DD> <I>adj.</I>&nbsp;(of a language feature)
  not required to be implemented by any <I><A HREF="c.htm#conformingimplementation">conforming implementation</A></I>,
  but nevertheless recommended as the canonical approach in situations where
  an <I><A HREF="i.htm#implementation">implementation</A></I> does plan to support such a feature.
  The presence of <I><A HREF="#semistandard">semi-standard</A></I> aspects in the language is intended
  to lessen portability problems and reduce the risk of gratuitous divergence
  among <I><A HREF="i.htm#implementation">implementations</A></I> that might stand in the way of future 
  standardization.

<P ID="12">
<A NAME="semicolon">
<DT><B>semicolon:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="#standardcharacter">standard character</A></I> that is called "semicolon" (<TT>;</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="13">
<A NAME="sequence">
<DT><B>sequence:</B><DD> <I>n.</I>&nbsp;
  1. an ordered collection of elements
  2. a <I><A HREF="v.htm#vector">vector</A></I> or a <I><A HREF="l.htm#list">list</A></I>.

<P ID="14">
<A NAME="sequencefunction">
<DT><B>sequence function:</B><DD> <I>n.</I>&nbsp;  one of the <I><A HREF="f.htm#function">functions</A></I> in Figure <A HREF="../section/sequence.htm">17.1 Sequence Concepts</A>,
  or an <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> <I><A HREF="f.htm#function">function</A></I> 
     that operates on one or more <I><A HREF="#sequence">sequences</A></I>.
     and that is defined by the <I><A HREF="i.htm#implementation">implementation</A></I> to be a <I><A HREF="#sequencefunction">sequence function</A></I>.

<P ID="15">

<A NAME="sequential">
<DT><B>sequential:</B><DD> <I>adj.</I>&nbsp;<I>Trad.</I>&nbsp;(of <I><A HREF="b.htm#binding">binding</A></I> or <I>assignment</I>)
  done in the style of <A HREF="../dictentr/setq.htm"><B>setq</B></A>, <A HREF="../dictentr/letlet.htm"><B>let*</B></A>, or <A HREF="../dictentr/dodo.htm"><B>do*</B></A>;
  that is, interleaving the evaluation of the <I><A HREF="f.htm#form">forms</A></I> that produce <I><A HREF="v.htm#value">values</A></I>
  with the <I>assignments</I> or <I><A HREF="b.htm#binding">bindings</A></I> of the <I><A HREF="v.htm#variable">variables</A></I> (or <I><A HREF="p.htm#place">places</A></I>).
  See <I><A HREF="p.htm#parallel">parallel</A></I>.

<P ID="16">
<A NAME="sequentially">
<DT><B>sequentially:</B><DD> <I>adv.</I>&nbsp;  in a <I><A HREF="#sequential">sequential</A></I> way.

<P ID="17">
<A NAME="seriouscondition">
<DT><B>serious condition:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#condition">condition</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/serious-.htm"><B>serious-condition</B></A>, 
  which represents a <I><A HREF="#situation">situation</A></I> that is generally sufficiently 
  severe that entry into the <I><A HREF="d.htm#debugger">debugger</A></I> should be expected if 
  the <I><A HREF="c.htm#condition">condition</A></I> is <I>signaled</I> but not <I>handled</I>.

<P ID="18">
<A NAME="session">
<DT><B>session:</B><DD> <I>n.</I>&nbsp;  the conceptual aggregation of events in a <I>Lisp image</I> from the time
  it is started to the time it is terminated.

<P ID="19">
<A NAME="set">
<DT><B>set:</B><DD> <I>v.t.</I>&nbsp;<I>Trad.</I>&nbsp;(any <I><A HREF="v.htm#variable">variable</A></I>
				     or a <I><A HREF="#symbol">symbol</A></I> that 
				        is the <I><A HREF="n.htm#name">name</A></I> of a <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>)
  to <I><A HREF="a.htm#assign">assign</A></I> the <I><A HREF="v.htm#variable">variable</A></I>.

<P ID="20">

<A NAME="setfexpander">
<DT><B>setf expander:</B><DD> <I>n.</I>&nbsp;
  a function used by <A HREF="../dictentr/setfpset.htm"><B>setf</B></A> to compute the <I><A HREF="#setfexpansion">setf expansion</A></I>
  of a <I><A HREF="p.htm#place">place</A></I>.


<P ID="21">

<A NAME="setfexpansion">
<DT><B>setf expansion:</B><DD> <I>n.</I>&nbsp;
  a set of five <I><A HREF="e.htm#expression">expressions</A></I><SUB>1</SUB> that, taken together, describe 
       how to store into a <I><A HREF="p.htm#place">place</A></I> 
   and which <I><A HREF="#subform">subforms</A></I> of the macro call associated with the
       <I><A HREF="p.htm#place">place</A></I> are evaluated.
  See Section <A HREF="../subsubse/setfexpa.htm">5.1.1.2 Setf Expansions</A>.


<P ID="22">
<A NAME="setffunction">
<DT><B>setf function:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="f.htm#function">function</A></I> whose <I><A HREF="n.htm#name">name</A></I> is <TT>(setf <I><A HREF="#symbol">symbol</A></I>)</TT>.

<P ID="23">

<A NAME="setffunctionname">
<DT><B>setf function name:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#symbol">symbol</A></I> <I>S</I>)
  the <I><A HREF="l.htm#list">list</A></I> <TT>(setf <I>S</I>)</TT>.


<P ID="24">
<A NAME="shadow">
<DT><B>shadow:</B><DD> <I>v.t.</I>&nbsp;
  1. to override the meaning of.
     That binding of <TT>X</TT> shadows an outer one. 
  2. to hide the presence of.
     That <A HREF="../dictentr/fletlabe.htm"><B>macrolet</B></A> of <TT>F</TT> shadows the
               outer <A HREF="../dictentr/fletlabe.htm"><B>flet</B></A> of <TT>F</TT>.
  3. to replace.
     That package shadows the symbol <TT>cl:car</TT> with
               its own symbol <TT>car</TT>.

<P ID="25">
<A NAME="shadowingsymbol">
<DT><B>shadowing symbol:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="p.htm#package">package</A></I>)
  an <I><A HREF="e.htm#element">element</A></I> of the <I><A HREF="p.htm#package">package</A></I>'s <I><A HREF="#shadowingsymbolslist">shadowing symbols list</A></I>.

<P ID="26">
<A NAME="shadowingsymbolslist">
<DT><B>shadowing symbols list:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="p.htm#package">package</A></I>)
  a <I><A HREF="l.htm#list">list</A></I>, associated with the <I><A HREF="p.htm#package">package</A></I>, 
  of <I><A HREF="#symbol">symbols</A></I> that are to be exempted from `symbol conflict errors'
  detected when packages are <I>used</I>.
  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/package-.htm"><B>package-shadowing-symbols</B></A>.

<P ID="27">
<A NAME="sharedslot">
<DT><B>shared slot:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="c.htm#class">class</A></I>) 
  a <I><A HREF="#slot">slot</A></I> <I><A HREF="a.htm#accessible">accessible</A></I> in more than one <I><A HREF="i.htm#instance">instance</A></I> 
  of a <I><A HREF="c.htm#class">class</A></I>; specifically, such a <I><A HREF="#slot">slot</A></I> is <I><A HREF="a.htm#accessible">accessible</A></I>
  in all <I><A HREF="d.htm#directinstance">direct instances</A></I> of the <I><A HREF="c.htm#class">class</A></I> and in those 
  <I><A HREF="i.htm#indirectinstance">indirect instances</A></I> whose <I><A HREF="c.htm#class">class</A></I> does not 
  <I><A HREF="#shadow">shadow</A></I><SUB>1</SUB> the <I><A HREF="#slot">slot</A></I>.

<P ID="28">
<A NAME="sharpsign">
<DT><B>sharpsign:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="#standardcharacter">standard character</A></I> that is variously called "number sign," "sharp,"
  or "sharp sign" (<TT>#</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="29">
<A NAME="shortfloat">
<DT><B>short float:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/short-fl.htm"><B>short-float</B></A>.

<P ID="30">
<A NAME="sign">
<DT><B>sign:</B><DD> <I>n.</I>&nbsp;
  one of the <I><A HREF="#standardcharacter">standard characters</A></I> "<TT>+</TT>" or "<TT>-</TT>".

<P ID="31">
<A NAME="signal">
<DT><B>signal:</B><DD> <I>v.</I>&nbsp;
  to announce, using a standard protocol, that a particular situation,
  represented by a <I><A HREF="c.htm#condition">condition</A></I>, has been detected.  
  See Section <A HREF="../section/conditio.htm">9.1 Condition System Concepts</A>.

<P ID="32">
<A NAME="signature">
<DT><B>signature:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="m.htm#method">method</A></I>)
  a description of the <I><A HREF="p.htm#parameter">parameters</A></I> and
  <I><A HREF="p.htm#parameterspecializer">parameter specializers</A></I> for the <I><A HREF="m.htm#method">method</A></I> which 
  determines the <I><A HREF="m.htm#method">method</A></I>'s applicability for a given set of
  required <I><A HREF="a.htm#argument">arguments</A></I>, and which also describes the
  <I><A HREF="a.htm#argument">argument</A></I> conventions for its other, non-required 
  <I><A HREF="a.htm#argument">arguments</A></I>.

<P ID="33">
<A NAME="similar">
<DT><B>similar:</B><DD> <I>adj.</I>&nbsp;(of two <I><A HREF="o.htm#object">objects</A></I>)
  defined to be equivalent under the <I><A HREF="#similarity">similarity</A></I> relationship.

<P ID="34">
<A NAME="similarity">
<DT><B>similarity:</B><DD> <I>n.</I>&nbsp;  a two-place conceptual equivalence predicate, 
  which is independent of the <I>Lisp image</I> 
  so that two <I><A HREF="o.htm#object">objects</A></I> in different <I>Lisp images</I> 
  can be understood to be equivalent under this predicate.
  See Section <A HREF="../subsecti/literalo.htm">3.2.4 Literal Objects in Compiled Files</A>.

<P ID="35">
<A NAME="simple">
<DT><B>simple:</B><DD> <I>adj.</I>&nbsp;  1. (of an <I><A HREF="a.htm#array">array</A></I>) being of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-a.htm"><B>simple-array</B></A>.
  2. (of a <I><A HREF="c.htm#character">character</A></I>)
     having no <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> <I><A HREF="a.htm#attribute">attributes</A></I>,
     or else having <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> <I><A HREF="a.htm#attribute">attributes</A></I>
      each of which has the <I><A HREF="n.htm#null">null</A></I> value for that <I><A HREF="a.htm#attribute">attribute</A></I>.

<P ID="36">
<A NAME="simplearray">
<DT><B>simple array:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="a.htm#array">array</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-a.htm"><B>simple-array</B></A>.

<P ID="37">
<A NAME="simplebitarray">
<DT><B>simple bit array:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="b.htm#bitarray">bit array</A></I> that is a <I><A HREF="#simplearray">simple array</A></I>;
  that is, an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <TT>(simple-array bit)</TT>.

<P ID="38">
<A NAME="simplebitvector">
<DT><B>simple bit vector:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="b.htm#bitvector">bit vector</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-b.htm"><B>simple-bit-vector</B></A>.

<P ID="39">
<A NAME="simplecondition">
<DT><B>simple condition:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#condition">condition</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-c.htm"><B>simple-condition</B></A>.

<P ID="40">
<A NAME="simplegeneralvector">
<DT><B>simple general vector:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#simplevector">simple vector</A></I>.

<P ID="41">
<A NAME="simplestring">
<DT><B>simple string:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#string">string</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-s.htm"><B>simple-string</B></A>.

<P ID="42">


<A NAME="simplevector">
<DT><B>simple vector:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="v.htm#vector">vector</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/simple-v.htm"><B>simple-vector</B></A>,
  sometimes called a "<I><A HREF="#simplegeneralvector">simple general vector</A></I>."
  Not all <I><A HREF="v.htm#vector">vectors</A></I> that are <I><A HREF="#simple">simple</A></I> are <I><A HREF="#simplevector">simple vectors</A></I> - only
  those that have <I><A HREF="e.htm#elementtype">element type</A></I> <A HREF="../dictentr/t.htm"><B>t</B></A>.

<P ID="43">
<A NAME="singleescape">
<DT><B>single escape:</B><DD> <I>n.</I>, <I>adj.</I>&nbsp;  1. <I>n.</I>&nbsp;the <I><A HREF="#syntaxtype">syntax type</A></I> of a <I><A HREF="c.htm#character">character</A></I> 
     that indicates that the next <I><A HREF="c.htm#character">character</A></I> is 
     to be treated as an <I><A HREF="a.htm#alphabetic">alphabetic</A></I><SUB>2</SUB> <I><A HREF="c.htm#character">character</A></I>
     with its <I><A HREF="c.htm#case">case</A></I> preserved.
     For details, see Section <A HREF="../subsubse/singlees.htm">2.1.4.6 Single Escape Character</A>.
  2. <I>adj.</I>&nbsp;(of a <I><A HREF="c.htm#character">character</A></I>)
     having the <I><A HREF="#singleescape">single escape</A></I> <I><A HREF="#syntaxtype">syntax type</A></I>.
  3. <I>n.</I>&nbsp;a <I><A HREF="#singleescape">single escape</A></I><SUB>2</SUB> <I><A HREF="c.htm#character">character</A></I>.
     (In the <I><A HREF="#standardreadtable">standard readtable</A></I>,
      <I><A HREF="#slash">slash</A></I> is the only <I><A HREF="#singleescape">single escape</A></I>.)

<P ID="44">
<A NAME="singlefloat">
<DT><B>single float:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/short-fl.htm"><B>single-float</B></A>.

<P ID="45">
<A NAME="singlequote">
<DT><B>single-quote:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="#standardcharacter">standard character</A></I> that is variously called
      "apostrophe,"
      "acute accent,"
      "quote,"
   or "single quote" (<TT>'</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="46">
<A NAME="singleton">
<DT><B>singleton:</B><DD> <I>adj.</I>&nbsp;(of a <I><A HREF="#sequence">sequence</A></I>)
  having only one <I><A HREF="e.htm#element">element</A></I>.
  <TT>(list 'hello)</TT> returns a singleton list.

<P ID="47">
<A NAME="situation">
<DT><B>situation:</B><DD> <I>n.</I>&nbsp;
  the <I><A HREF="e.htm#evaluation">evaluation</A></I> of a <I><A HREF="f.htm#form">form</A></I> in a specific <I><A HREF="e.htm#environment">environment</A></I>.

<P ID="48">
<A NAME="slash">
<DT><B>slash:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="#standardcharacter">standard character</A></I> that is variously called
       "solidus" 
    or "slash" (<TT>/</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="49">

<A NAME="slot">
<DT><B>slot:</B><DD> <I>n.</I>&nbsp;
  a component of an <I><A HREF="o.htm#object">object</A></I> that can store a <I><A HREF="v.htm#value">value</A></I>.

<P ID="50">

<A NAME="slotspecifier">
<DT><B>slot specifier:</B><DD> <I>n.</I>&nbsp;  a representation of a <I><A HREF="#slot">slot</A></I> 
  that includes the <I><A HREF="n.htm#name">name</A></I> of the <I><A HREF="#slot">slot</A></I> and zero or more <I><A HREF="#slot">slot</A></I> options.
  A <I><A HREF="#slot">slot</A></I> option pertains only to a single <I><A HREF="#slot">slot</A></I>.

<P ID="51">
<A NAME="sourcecode">
<DT><B>source code:</B><DD> <I>n.</I>&nbsp;
  <I><A HREF="c.htm#code">code</A></I> representing <I><A HREF="o.htm#object">objects</A></I> suitable for <I><A HREF="e.htm#evaluation">evaluation</A></I>
  (<I>e.g.</I>,  <I><A HREF="o.htm#object">objects</A></I> created by <A HREF="../dictentr/readread.htm"><B>read</B></A>, 
       by <I><A HREF="m.htm#macroexpansion">macro expansion</A></I>, 

    or by <I><A HREF="c.htm#compilermacroexpansion">compiler macro expansion</A></I>).


<P ID="52">
<A NAME="sourcefile">
<DT><B>source file:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#file">file</A></I> which contains a textual representation of <I><A HREF="#sourcecode">source code</A></I>,
  that can be edited, <I>loaded</I>, or <I>compiled</I>.

<P ID="53">
<A NAME="space">
<DT><B>space:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="#standardcharacter">standard character</A></I> <I>&lt;Space&gt;</I>,
  notated for the <I>Lisp reader</I> as <TT>#\Space</TT>.

<P ID="54">
<A NAME="specialform">
<DT><B>special form:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="l.htm#list">list</A></I>, other than a <I><A HREF="m.htm#macroform">macro form</A></I>, which is a
  <I><A HREF="f.htm#form">form</A></I> with special syntax or special <I><A HREF="e.htm#evaluation">evaluation</A></I> 
  rules or both, possibly manipulating the <I><A HREF="e.htm#evaluation">evaluation</A></I> 
  <I><A HREF="e.htm#environment">environment</A></I> or control flow or both.  The first element of
  a <I><A HREF="#specialform">special form</A></I> is a <I><A HREF="#specialoperator">special operator</A></I>.

<P ID="55">
<A NAME="specialoperator">
<DT><B>special operator:</B><DD> <I>n.</I>&nbsp;
  one of a fixed set of <I><A HREF="#symbol">symbols</A></I>, 
  enumerated in Figure <A HREF="../subsubsu/specialf.htm">3.1.2.1.2.1 Special Forms</A>,
  that may appear in the <I><A HREF="c.htm#car">car</A></I> of
  a <I><A HREF="f.htm#form">form</A></I> in order to identify the <I><A HREF="f.htm#form">form</A></I> as a <I><A HREF="#specialform">special form</A></I>.

<P ID="56">
<A NAME="specialvariable">
<DT><B>special variable:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;  a <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>.

<P ID="57">
<A NAME="specialize">
<DT><B>specialize:</B><DD> <I>v.t.</I>&nbsp;(a <I><A HREF="g.htm#genericfunction">generic function</A></I>)
  to define a <I><A HREF="m.htm#method">method</A></I> for the <I><A HREF="g.htm#genericfunction">generic function</A></I>, or in other words,
  to refine the behavior of the <I><A HREF="g.htm#genericfunction">generic function</A></I> by giving it a specific
  meaning for a particular set of <I>classes</I> or <I><A HREF="a.htm#argument">arguments</A></I>. 

<P ID="58">
<A NAME="specialized">
<DT><B>specialized:</B><DD> <I>adj.</I>&nbsp;
  1. (of a <I><A HREF="g.htm#genericfunction">generic function</A></I>)
     having <I><A HREF="m.htm#method">methods</A></I> which <I><A HREF="#specialize">specialize</A></I> the <I><A HREF="g.htm#genericfunction">generic function</A></I>.
  2. (of an <I><A HREF="a.htm#array">array</A></I>)
     having an <I><A HREF="a.htm#actualarrayelementtype">actual array element type</A></I>
     that is a <I><A HREF="p.htm#propersubtype">proper subtype</A></I> of the <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/t.htm"><B>t</B></A>;
     see Section <A HREF="../subsecti/arrayele.htm">15.1.1 Array Elements</A>.
     <TT>(make-array 5 :element-type 'bit)</TT> makes an array of length
	       five that is specialized for bits.

<P ID="59">
<A NAME="specializedlambdalist">
<DT><B>specialized lambda list:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="e.htm#extendedlambdalist">extended lambda list</A></I> used in <I><A HREF="f.htm#form">forms</A></I> that <I><A HREF="e.htm#establish">establish</A></I>
  <I><A HREF="m.htm#method">method</A></I> definitions, such as <A HREF="../dictentr/defmetho.htm"><B>defmethod</B></A>.
  See Section <A HREF="../subsecti/speciali.htm">3.4.3 Specialized Lambda Lists</A>.

<P ID="60">
<A NAME="spreadableargumentlistdesignator">
<DT><B>spreadable argument list designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="l.htm#list">list</A></I> of <I><A HREF="o.htm#object">objects</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="l.htm#list">list</A></I> 
  and that is a <I>non-null</I> <I><A HREF="l.htm#list">list</A></I> <I>L1</I> of length <I>n</I>,
  whose last element is a <I><A HREF="l.htm#list">list</A></I> <I>L2</I> of length <I>m</I>
  (denoting a list <I>L3</I> of length <I>m+n-1</I> whose <I><A HREF="e.htm#element">elements</A></I> are
   <I>L1<SUB>i</SUB></I> for <I>i &lt; n-1</I> followed by <I>L2<SUB>j</SUB></I> for <I>j &lt; m</I>).
  The list (1 2 (3 4 5)) is a spreadable argument list designator for
	    the list (1 2 3 4 5).

<P ID="61">
<A NAME="stackallocate">
<DT><B>stack allocate:</B><DD> <I>v.t.</I>&nbsp;<I>Trad.</I>&nbsp;
  to allocate in a non-permanent way, such as on a stack.  Stack-allocation
  is an optimization technique used in some <I><A HREF="i.htm#implementation">implementations</A></I> for
  allocating certain kinds of <I><A HREF="o.htm#object">objects</A></I> that have <I><A HREF="d.htm#dynamicextent">dynamic extent</A></I>.
  Such <I><A HREF="o.htm#object">objects</A></I> are allocated on the stack rather than in the heap
  so that their storage can be freed as part of unwinding the stack rather
  than taking up space in the heap until the next garbage collection.
  What <I><A HREF="t.htm#type">types</A></I> (if any) can have <I><A HREF="d.htm#dynamicextent">dynamic extent</A></I> can vary
  from <I><A HREF="i.htm#implementation">implementation</A></I> to <I><A HREF="i.htm#implementation">implementation</A></I>.  No
  <I><A HREF="i.htm#implementation">implementation</A></I> is ever required to perform stack-allocation.

<P ID="62">

<A NAME="stackallocated">
<DT><B>stack-allocated:</B><DD> <I>adj.</I>&nbsp;<I>Trad.</I>&nbsp;
  having been <I>stack allocated</I>.

<P ID="63">
<A NAME="standardcharacter">
<DT><B>standard character:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#character">character</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/standard.htm"><B>standard-char</B></A>, which is one of a fixed set of 96
  such <I><A HREF="c.htm#character">characters</A></I> required to be present in all <I><A HREF="c.htm#conformingimplementation">conforming implementations</A></I>.
  See Section <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="64">


<A NAME="standardclass">
<DT><B>standard class:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#class">class</A></I> that is a <I><A HREF="g.htm#generalizedinstance">generalized instance</A></I> of <I><A HREF="c.htm#class">class</A></I> <A HREF="../dictentr/standar0.htm"><B>standard-class</B></A>.

<P ID="65">

<A NAME="standardgenericfunction">
<DT><B>standard generic function:</B><DD>
  a <I><A HREF="f.htm#function">function</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/standar1.htm"><B>standard-generic-function</B></A>.

<P ID="66">
<A NAME="standardinput">
<DT><B>standard input:</B><DD> <I>n.</I>&nbsp;
  the <I><A HREF="i.htm#input">input</A></I> <I><A HREF="#stream">stream</A></I> which is the <I><A HREF="v.htm#value">value</A></I> of the <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>
  <A HREF="../dictentr/debug-io.htm"><B>*standard-input*</B></A>.

<P ID="67">
<A NAME="standardmethodcombination">
<DT><B>standard method combination:</B><DD> <I>n.</I>&nbsp;
  the <I><A HREF="m.htm#methodcombination">method combination</A></I> named <B>standard</B>.

<P ID="68">
<A NAME="standardobject">
<DT><B>standard object:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> that is 

  a <I><A HREF="g.htm#generalizedinstance">generalized instance</A></I> 
  of <I><A HREF="c.htm#class">class</A></I> <A HREF="../dictentr/standar2.htm"><B>standard-object</B></A>.

<P ID="69">
<A NAME="standardoutput">
<DT><B>standard output:</B><DD> <I>n.</I>&nbsp;
  the <I><A HREF="o.htm#output">output</A></I> <I><A HREF="#stream">stream</A></I> which is the <I><A HREF="v.htm#value">value</A></I> of the <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>
  <A HREF="../dictentr/debug-io.htm"><B>*standard-output*</B></A>.

<P ID="70">

<A NAME="standardpprintdispatchtable">
<DT><B>standard pprint dispatch table:</B><DD> <I>n.</I>&nbsp;  A <I><A HREF="p.htm#pprintdispatchtable">pprint dispatch table</A></I> that is <I><A HREF="d.htm#different">different</A></I> from 
  the <I><A HREF="i.htm#initialpprintdispatchtable">initial pprint dispatch table</A></I>,
  that implements <I>pretty printing</I> as described in this specification,
  and that, unlike other <I><A HREF="p.htm#pprintdispatchtable">pprint dispatch tables</A></I>,
  must never be modified by any program.
  (Although the definite reference "the <I><A HREF="#standardpprintdispatchtable">standard pprint dispatch table</A></I>"
   is generally used
   within this document, it is actually <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> whether a
   single <I><A HREF="o.htm#object">object</A></I> fills the role of the <I><A HREF="#standardpprintdispatchtable">standard pprint dispatch table</A></I>,
   or whether there might be multiple such objects, any one of which could be used on any
   given occasion where "the <I><A HREF="#standardpprintdispatchtable">standard pprint dispatch table</A></I>" is called for.
   As such, this phrase should be seen as an indefinite reference 
   in all cases except for anaphoric references.)


<P ID="71">

<A NAME="standardreadtable">
<DT><B>standard readtable:</B><DD> <I>n.</I>&nbsp;  A <I><A HREF="r.htm#readtable">readtable</A></I> that is <I><A HREF="d.htm#different">different</A></I> from the <I><A HREF="i.htm#initialreadtable">initial readtable</A></I>,
  that implements the <I><A HREF="e.htm#expression">expression</A></I> syntax defined in this specification,
  and that, unlike other <I><A HREF="r.htm#readtable">readtables</A></I>, must never be modified by any program.
  (Although the definite reference "the <I><A HREF="#standardreadtable">standard readtable</A></I>" is generally used
   within this document, it is actually <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> whether a
   single <I><A HREF="o.htm#object">object</A></I> fills the role of the <I><A HREF="#standardreadtable">standard readtable</A></I>,
   or whether there might be multiple such objects, any one of which could be used on any
   given occasion where "the <I><A HREF="#standardreadtable">standard readtable</A></I>" is called for.
   As such, this phrase should be seen as an indefinite reference 
   in all cases except for anaphoric references.)


<P ID="72">
<A NAME="standardsyntax">
<DT><B>standard syntax:</B><DD> <I>n.</I>&nbsp;  the syntax represented by the <I><A HREF="#standardreadtable">standard readtable</A></I> 
  and used as a reference syntax throughout this document.
  See Section <A HREF="../section/characte.htm">2.1 Character Syntax</A>.

<P ID="73">
<A NAME="standardized">
<DT><B>standardized:</B><DD> <I>adj.</I>&nbsp;(of a <I><A HREF="n.htm#name">name</A></I>, <I><A HREF="o.htm#object">object</A></I>, or definition)
  having been defined by <I>Common Lisp</I>.
  All standardized variables that are required to 
	    hold bidirectional streams have "<TT>-io*</TT>" in their name.

<P ID="74">
<A NAME="startupenvironment">
<DT><B>startup environment:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="g.htm#globalenvironment">global environment</A></I> of the running <I>Lisp image</I> 
  from which the <I><A HREF="c.htm#compiler">compiler</A></I> was invoked.

<P ID="75">
<A NAME="step">
<DT><B>step:</B><DD> <I>v.t.</I>, <I>n.</I>&nbsp;
  1. <I>v.t.</I>&nbsp;(an iteration <I><A HREF="v.htm#variable">variable</A></I>) to <I><A HREF="a.htm#assign">assign</A></I> the <I><A HREF="v.htm#variable">variable</A></I>
     a new <I><A HREF="v.htm#value">value</A></I> at the end of an iteration, in preparation for a new iteration.
  2. <I>n.</I>&nbsp;the <I><A HREF="c.htm#code">code</A></I> that identifies how the next value in an iteration
     is to be computed.
  3. <I>v.t.</I>&nbsp;(<I><A HREF="c.htm#code">code</A></I>) to specially execute the <I><A HREF="c.htm#code">code</A></I>, pausing at
     intervals to allow user confirmation or intervention, usually for debugging.

<P ID="76">
<A NAME="stream">
<DT><B>stream:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> that can be used with an input or output function to
  identify an appropriate source or sink of <I><A HREF="c.htm#character">characters</A></I> or 
  <I><A HREF="b.htm#byte">bytes</A></I> for that operation.

<P ID="77">


<A NAME="streamassociatedwithafile">
<DT><B>stream associated with a file:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#filestream">file stream</A></I>, or a <I><A HREF="#synonymstream">synonym stream</A></I> the <I><A HREF="t.htm#target">target</A></I> 
  of which is a <I><A HREF="#streamassociatedwithafile">stream associated with a file</A></I>.

  Such a <I><A HREF="#stream">stream</A></I> cannot be created with
      <A HREF="../dictentr/make-two.htm"><B>make-two-way-stream</B></A>, 
      <A HREF="../dictentr/make-ech.htm"><B>make-echo-stream</B></A>,
      <A HREF="../dictentr/make-bro.htm"><B>make-broadcast-stream</B></A>, 
      <A HREF="../dictentr/make-con.htm"><B>make-concatenated-stream</B></A>,
      <A HREF="../dictentr/make-str.htm"><B>make-string-input-stream</B></A>,
   or <A HREF="../dictentr/make-st0.htm"><B>make-string-output-stream</B></A>.



<P ID="78">
<A NAME="streamdesignator">
<DT><B>stream designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#stream">stream</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#stream">stream</A></I> 
  and that is one of:
      <A HREF="../dictentr/t.htm"><B>t</B></A>&nbsp;(denoting the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/terminal.htm"><B>*terminal-io*</B></A>), 
      <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;(denoting the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/debug-io.htm"><B>*standard-input*</B></A>
             for <I><A HREF="i.htm#input">input</A></I> <I><A HREF="#streamdesignator">stream designators</A></I>
             or denoting the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/debug-io.htm"><B>*standard-output*</B></A>
             for <I><A HREF="o.htm#output">output</A></I> <I><A HREF="#streamdesignator">stream designators</A></I>),
   or a <I><A HREF="#stream">stream</A></I> (denoting itself).

<P ID="79">
<A NAME="streamelementtype">
<DT><B>stream element type:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#stream">stream</A></I>)
  the <I><A HREF="t.htm#type">type</A></I> of data for which the <I><A HREF="#stream">stream</A></I> is specialized.



<P ID="80">
<A NAME="streamvariable">
<DT><B>stream variable:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="v.htm#variable">variable</A></I> whose <I><A HREF="v.htm#value">value</A></I> must be a <I><A HREF="#stream">stream</A></I>.

<P ID="81">
<A NAME="streamvariabledesignator">
<DT><B>stream variable designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#streamvariable">stream variable</A></I>; that is,
  a <I><A HREF="#symbol">symbol</A></I> that denotes a <I><A HREF="#streamvariable">stream variable</A></I> 
  and that is one of:
      <A HREF="../dictentr/t.htm"><B>t</B></A>&nbsp;(denoting <A HREF="../dictentr/terminal.htm"><B>*terminal-io*</B></A>), 
      <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;(denoting <A HREF="../dictentr/debug-io.htm"><B>*standard-input*</B></A>
             for <I><A HREF="i.htm#input">input</A></I> <I><A HREF="#streamvariabledesignator">stream variable designators</A></I>
             or denoting <A HREF="../dictentr/debug-io.htm"><B>*standard-output*</B></A>
             for <I><A HREF="o.htm#output">output</A></I> <I><A HREF="#streamvariabledesignator">stream variable designators</A></I>),
   or some other <I><A HREF="#symbol">symbol</A></I> (denoting itself).

<P ID="82">
<A NAME="string">
<DT><B>string:</B><DD> <I>n.</I>&nbsp;
  a specialized <I><A HREF="v.htm#vector">vector</A></I> that is of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/string.htm"><B>string</B></A>,
  and whose elements are of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/charact1.htm"><B>character</B></A> or a <I><A HREF="#subtype">subtype</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/charact1.htm"><B>character</B></A>.

<P ID="83">
<A NAME="stringdesignator">
<DT><B>string designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#string">string</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#string">string</A></I> 
  and that is one of:
       a <I><A HREF="c.htm#character">character</A></I> (denoting a <I><A HREF="#singleton">singleton</A></I> <I><A HREF="#string">string</A></I>
			   that has the <I><A HREF="c.htm#character">character</A></I> as its only <I><A HREF="e.htm#element">element</A></I>),
       a <I><A HREF="#symbol">symbol</A></I> (denoting the <I><A HREF="#string">string</A></I> that is its <I><A HREF="n.htm#name">name</A></I>),
    or a <I><A HREF="#string">string</A></I> (denoting itself).

  The intent is that this term be consistent with the behavior of <A HREF="../dictentr/string.htm"><B>string</B></A>;
  <I><A HREF="i.htm#implementation">implementations</A></I> that extend <A HREF="../dictentr/string.htm"><B>string</B></A> must extend the meaning of 
  this term in a compatible way.


<P ID="84">
<A NAME="stringequal">
<DT><B>string equal:</B><DD> <I>adj.</I>&nbsp;
  the <I><A HREF="#same">same</A></I> under <A HREF="../dictentr/stringst.htm"><B>string-equal</B></A>.

<P ID="85">
<A NAME="stringstream">
<DT><B>string stream:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#stream">stream</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/string-s.htm"><B>string-stream</B></A>.

<P ID="86">
<A NAME="structure">
<DT><B>structure:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/structur.htm"><B>structure-object</B></A>.



<P ID="87">
<A NAME="structureclass">
<DT><B>structure class:</B><DD> <I>n.</I>&nbsp;


  a <I><A HREF="c.htm#class">class</A></I> that is a <I><A HREF="g.htm#generalizedinstance">generalized instance</A></I> of <I><A HREF="c.htm#class">class</A></I> <A HREF="../dictentr/structu0.htm"><B>structure-class</B></A>.

<P ID="88">
<A NAME="structurename">
<DT><B>structure name:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="n.htm#name">name</A></I> defined with <A HREF="../dictentr/defstruc.htm"><B>defstruct</B></A>.
  Usually, such a <I><A HREF="t.htm#type">type</A></I> is also a <I><A HREF="#structureclass">structure class</A></I>,

  but there may be <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> situations 
  in which this is not so, if the <TT>:type</TT> option to <A HREF="../dictentr/defstruc.htm"><B>defstruct</B></A> is used.

<P ID="89">
<A NAME="stylewarning">
<DT><B>style warning:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="c.htm#condition">condition</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/style-wa.htm"><B>style-warning</B></A>.

<P ID="90">
<A NAME="subclass">
<DT><B>subclass:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#class">class</A></I> that <I><A HREF="i.htm#inherit">inherits</A></I> from another <I><A HREF="c.htm#class">class</A></I>, 
  called a <I><A HREF="#superclass">superclass</A></I>.
  (No <I><A HREF="c.htm#class">class</A></I> is a <I><A HREF="#subclass">subclass</A></I> of itself.)

<P ID="91">
<A NAME="subexpression">
<DT><B>subexpression:</B><DD> <I>n.</I>&nbsp;(of an <I><A HREF="e.htm#expression">expression</A></I>)
  an <I><A HREF="e.htm#expression">expression</A></I> that is contained within the <I><A HREF="e.htm#expression">expression</A></I>. 
  (In fact, the state of being a <I><A HREF="#subexpression">subexpression</A></I> is not an attribute 
   of the <I><A HREF="#subexpression">subexpression</A></I>, but really an attribute of the containing
   <I><A HREF="e.htm#expression">expression</A></I> since the <I><A HREF="#same">same</A></I> <I><A HREF="o.htm#object">object</A></I> can at once be
   a <I><A HREF="#subexpression">subexpression</A></I> in one context, and not in another.)

<P ID="92">
<A NAME="subform">
<DT><B>subform:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="f.htm#form">form</A></I>)
  an <I><A HREF="e.htm#expression">expression</A></I> that is a <I><A HREF="#subexpression">subexpression</A></I> of the <I><A HREF="f.htm#form">form</A></I>,
  and which by virtue of its position in that <I><A HREF="f.htm#form">form</A></I> is also a
  <I><A HREF="f.htm#form">form</A></I>.
  <TT>(f x)</TT> and <TT>x</TT>, but not <TT>exit</TT>, are subforms of
	    <TT>(return-from exit (f x))</TT>.

<P ID="93">
<A NAME="subrepertoire">
<DT><B>subrepertoire:</B><DD> <I>n.</I>&nbsp;
  a subset of a <I><A HREF="r.htm#repertoire">repertoire</A></I>.

<P ID="94">
<A NAME="subtype">
<DT><B>subtype:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="t.htm#type">type</A></I> whose membership is the same as or a proper subset of the
  membership of another <I><A HREF="t.htm#type">type</A></I>, called a <I><A HREF="#supertype">supertype</A></I>.
  (Every <I><A HREF="t.htm#type">type</A></I> is a <I><A HREF="#subtype">subtype</A></I> of itself.)

<P ID="95">
<A NAME="superclass">
<DT><B>superclass:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#class">class</A></I> from which another <I><A HREF="c.htm#class">class</A></I> 
  (called a <I><A HREF="#subclass">subclass</A></I>) <I><A HREF="i.htm#inherit">inherits</A></I>.
  (No <I><A HREF="c.htm#class">class</A></I> is a <I><A HREF="#superclass">superclass</A></I> of itself.)
  See <I><A HREF="#subclass">subclass</A></I>.

<P ID="96">
<A NAME="supertype">
<DT><B>supertype:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="t.htm#type">type</A></I> whose membership is the same as or a proper superset
  of the membership of another <I><A HREF="t.htm#type">type</A></I>, called a <I><A HREF="#subtype">subtype</A></I>.
  (Every <I><A HREF="t.htm#type">type</A></I> is a <I><A HREF="#supertype">supertype</A></I> of itself.)
  See <I><A HREF="#subtype">subtype</A></I>.

<P ID="97">
<A NAME="suppliedpparameter">
<DT><B>supplied-p parameter:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="p.htm#parameter">parameter</A></I> which recieves its <I><A HREF="g.htm#generalizedboolean">generalized boolean</A></I> value
  implicitly due to the presence or absence of an <I><A HREF="a.htm#argument">argument</A></I> 
  corresponding to another <I><A HREF="p.htm#parameter">parameter</A></I> 
  (such as an <I><A HREF="o.htm#optionalparameter">optional parameter</A></I> or a <I><A HREF="r.htm#restparameter">rest parameter</A></I>).
  See Section <A HREF="../subsecti/ordinary.htm">3.4.1 Ordinary Lambda Lists</A>.

<P ID="98">
<A NAME="symbol">
<DT><B>symbol:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/symbol.htm"><B>symbol</B></A>.

<P ID="99">
<A NAME="symbolmacro">
<DT><B>symbol macro:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#symbol">symbol</A></I> that stands for another <I><A HREF="f.htm#form">form</A></I>.
  See the <I><A HREF="m.htm#macro">macro</A></I> <A HREF="../dictentr/symbol-m.htm"><B>symbol-macrolet</B></A>.

<P ID="100">
<A NAME="synonymstream">
<DT><B>synonym stream:</B><DD> <I>n.</I>&nbsp;
  1. a <I><A HREF="#stream">stream</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/synonym-.htm"><B>synonym-stream</B></A>, 
     which is consequently a <I><A HREF="#stream">stream</A></I> that is an alias for another <I><A HREF="#stream">stream</A></I>,
     which is the <I><A HREF="v.htm#value">value</A></I> of a <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I>
     whose <I><A HREF="n.htm#name">name</A></I> is the <I><A HREF="#synonymstreamsymbol">synonym stream symbol</A></I> of the <I><A HREF="#synonymstream">synonym stream</A></I>.
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/make-syn.htm"><B>make-synonym-stream</B></A>.
  2. (to a <I><A HREF="#stream">stream</A></I>)
     a <I><A HREF="#synonymstream">synonym stream</A></I> which has the <I><A HREF="#stream">stream</A></I> as the <I><A HREF="v.htm#value">value</A></I>
     of its <I><A HREF="#synonymstreamsymbol">synonym stream symbol</A></I>.
  3. (to a <I><A HREF="#symbol">symbol</A></I>)
     a <I><A HREF="#synonymstream">synonym stream</A></I> which has the <I><A HREF="#symbol">symbol</A></I> as its
     <I><A HREF="#synonymstreamsymbol">synonym stream symbol</A></I>.

<P ID="101">
<A NAME="synonymstreamsymbol">
<DT><B>synonym stream symbol:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#synonymstream">synonym stream</A></I>)
  the <I><A HREF="#symbol">symbol</A></I> which names the <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I> which has as its
  <I><A HREF="v.htm#value">value</A></I> another <I><A HREF="#stream">stream</A></I> for which the <I><A HREF="#synonymstream">synonym stream</A></I>
  is an alias.

<P ID="102">
<A NAME="syntaxtype">
<DT><B>syntax type:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="c.htm#character">character</A></I>)
  one of several classifications, enumerated in Figure <A HREF="../subsecti/characte.htm">2.1.4 Character Syntax Types</A>,
  that are used for dispatch during parsing by the <I>Lisp reader</I>.
  See Section <A HREF="../subsecti/characte.htm">2.1.4 Character Syntax Types</A>.

<P ID="103">
<A NAME="systemclass">
<DT><B>system class:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="c.htm#class">class</A></I> that may be of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/built-in.htm"><B>built-in-class</B></A> in a <I><A HREF="c.htm#conformingimplementation">conforming implementation</A></I>
  and hence cannot be inherited by <I>classes</I> defined by <I><A HREF="c.htm#conformingprogram">conforming programs</A></I>.

<P ID="104">
<A NAME="systemcode">
<DT><B>system code:</B><DD> <I>n.</I>&nbsp;
  <I><A HREF="c.htm#code">code</A></I> supplied by the <I><A HREF="i.htm#implementation">implementation</A></I> to implement this specification
  (<I>e.g.</I>,  the definition of <A HREF="../dictentr/mapcmapc.htm"><B>mapcar</B></A>)
  or generated automatically in support of this specification
  (<I>e.g.</I>,  during method combination);
  that is, <I><A HREF="c.htm#code">code</A></I> that is not <I><A HREF="p.htm#programmercode">programmer code</A></I>.

<P ID="105"></DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="r.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="t.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
