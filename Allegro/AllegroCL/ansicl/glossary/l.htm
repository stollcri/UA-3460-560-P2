<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : l.htm
  representing node       : L  [ID:NO-1471]
                 of class : GlossaryEntry  [ID:SC-10]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:51:21 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>L</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="GlossaryEntr_L_1471"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="k.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="m.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/glossary.htm">26 Glossary</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/glossary.htm">26.1 Glossary</A>

</FONT>
<H1 ID="2">L</H1>
<DL>
<A NAME="lambdacombination">
<DT><B>lambda combination:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;
  a <I><A HREF="#lambdaform">lambda form</A></I>.

<P ID="3">
<A NAME="lambdaexpression">
<DT><B>lambda expression:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#list">list</A></I> which can be used in place of a <I><A HREF="f.htm#functionname">function name</A></I> in 
  certain contexts to denote a <I><A HREF="f.htm#function">function</A></I> by directly describing its
  behavior rather than indirectly by referring to the name of an
  <I>established</I> <I><A HREF="f.htm#function">function</A></I>; its name derives from the fact that its
  first element is the <I><A HREF="s.htm#symbol">symbol</A></I> <TT>lambda</TT>.
  See <A HREF="../dictentr/lambda.htm"><B>lambda</B></A>.

<P ID="4">
<A NAME="lambdaform">
<DT><B>lambda form:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#form">form</A></I> that is a <I><A HREF="#list">list</A></I> and that has a first element
  which is a <I><A HREF="#lambdaexpression">lambda expression</A></I> representing a <I><A HREF="f.htm#function">function</A></I>
  to be called on <I><A HREF="a.htm#argument">arguments</A></I> which are the result of <I>evaluating</I>
  subsequent elements of the <I><A HREF="#lambdaform">lambda form</A></I>.

<P ID="5">
<A NAME="lambdalist">
<DT><B>lambda list:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="#list">list</A></I> that specifies a set of <I><A HREF="p.htm#parameter">parameters</A></I> 
  (sometimes called <I><A HREF="#lambdavariable">lambda variables</A></I>)
  and a protocol for receiving <I><A HREF="v.htm#value">values</A></I> for those <I><A HREF="p.htm#parameter">parameters</A></I>;
  that is,
  an <I><A HREF="o.htm#ordinarylambdalist">ordinary lambda list</A></I>,
  an <I><A HREF="e.htm#extendedlambdalist">extended lambda list</A></I>,
  or a <I><A HREF="m.htm#modifiedlambdalist">modified lambda list</A></I>.

<P ID="6">
<A NAME="lambdalistkeyword">
<DT><B>lambda list keyword:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="s.htm#symbol">symbol</A></I> whose <I><A HREF="n.htm#name">name</A></I> begins with <I><A HREF="a.htm#ampersand">ampersand</A></I>
  and that is specially recognized in a <I><A HREF="#lambdalist">lambda list</A></I>.
  Note that no <I><A HREF="s.htm#standardized">standardized</A></I> <I><A HREF="#lambdalistkeyword">lambda list keyword</A></I> 
  is in the <A HREF="../dictentr/keyword.htm"><TT>keyword</TT></A> <I><A HREF="p.htm#package">package</A></I>.

<P ID="7">
<A NAME="lambdavariable">
<DT><B>lambda variable:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#formalparameter">formal parameter</A></I>, used to emphasize the <I><A HREF="v.htm#variable">variable</A></I>'s
  relation to the <I><A HREF="#lambdalist">lambda list</A></I> that <I>established</I> it.

<P ID="8">
<A NAME="leaf">
<DT><B>leaf:</B><DD> <I>n.</I>&nbsp;
  1. an <I><A HREF="a.htm#atom">atom</A></I> in a <I><A HREF="t.htm#tree">tree</A></I><SUB>1</SUB>.
  2. a terminal node of a <I><A HREF="t.htm#tree">tree</A></I><SUB>2</SUB>.

<P ID="9">
<A NAME="leapseconds">
<DT><B>leap seconds:</B><DD> <I>n.</I>&nbsp;  additional one-second intervals of time that are occasionally inserted 
  into the true calendar by official timekeepers as a correction similar 
  to "leap years."  All <I>Common Lisp</I>&nbsp;<I><A HREF="t.htm#time">time</A></I> representations ignore 
  <I><A HREF="#leapseconds">leap seconds</A></I>; every day is assumed to be exactly 86400 seconds 
  long.

<P ID="10">
<A NAME="leftparenthesis">
<DT><B>left-parenthesis:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="s.htm#standardcharacter">standard character</A></I> "<TT>(</TT>",
  that is variously called
      "left parenthesis"
   or "open parenthesis"
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="11">
<A NAME="length">
<DT><B>length:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="s.htm#sequence">sequence</A></I>)
  the number of <I><A HREF="e.htm#element">elements</A></I> in the <I><A HREF="s.htm#sequence">sequence</A></I>.
  (Note that if the <I><A HREF="s.htm#sequence">sequence</A></I> is a <I><A HREF="v.htm#vector">vector</A></I> with a 
   <I><A HREF="f.htm#fillpointer">fill pointer</A></I>, its <I><A HREF="#length">length</A></I> is the same as the 
   <I><A HREF="f.htm#fillpointer">fill pointer</A></I> even though the total allocated size of
   the <I><A HREF="v.htm#vector">vector</A></I> might be larger.)

<P ID="12">
<A NAME="lexicalbinding">
<DT><B>lexical binding:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="b.htm#binding">binding</A></I> in a <I><A HREF="#lexicalenvironment">lexical environment</A></I>.

<P ID="13">
<A NAME="lexicalclosure">
<DT><B>lexical closure:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#function">function</A></I> that, when invoked on <I><A HREF="a.htm#argument">arguments</A></I>, executes
  the body of a <I><A HREF="#lambdaexpression">lambda expression</A></I> in the <I><A HREF="#lexicalenvironment">lexical environment</A></I> 
  that was captured at the time of the creation of the <I><A HREF="#lexicalclosure">lexical closure</A></I>,
  augmented by <I><A HREF="b.htm#binding">bindings</A></I> of the <I><A HREF="f.htm#function">function</A></I>'s <I><A HREF="p.htm#parameter">parameters</A></I>
  to the corresponding <I><A HREF="a.htm#argument">arguments</A></I>.

<P ID="14">
<A NAME="lexicalenvironment">
<DT><B>lexical environment:</B><DD> <I>n.</I>&nbsp;
  that part of the <I><A HREF="e.htm#environment">environment</A></I> that contains <I><A HREF="b.htm#binding">bindings</A></I>
  whose names have <I><A HREF="#lexicalscope">lexical scope</A></I>. A <I><A HREF="#lexicalenvironment">lexical environment</A></I> 
  contains, among other things:

     ordinary <I><A HREF="b.htm#binding">bindings</A></I> of <I><A HREF="v.htm#variable">variable</A></I> <I><A HREF="n.htm#name">names</A></I> to <I><A HREF="v.htm#value">values</A></I>,
     lexically <I>established</I> <I><A HREF="b.htm#binding">bindings</A></I> of <I><A HREF="f.htm#functionname">function names</A></I>
        to <I><A HREF="f.htm#function">functions</A></I>,
     <I><A HREF="m.htm#macro">macros</A></I>,
     <I><A HREF="s.htm#symbolmacro">symbol macros</A></I>,
     <I><A HREF="b.htm#block">blocks</A></I>,
     <I><A HREF="t.htm#tag">tags</A></I>,
  and
     <I><A HREF="#localdeclaration">local declarations</A></I> (see <A HREF="../dictentr/declare.htm"><B>declare</B></A>).

<P ID="15">
<A NAME="lexicalscope">
<DT><B>lexical scope:</B><DD> <I>n.</I>&nbsp;
  <I><A HREF="s.htm#scope">scope</A></I> that is limited to a spatial or textual region within the
  establishing <I><A HREF="f.htm#form">form</A></I>.

  The names of parameters to a function normally are lexically scoped.

<P ID="16">
<A NAME="lexicalvariable">
<DT><B>lexical variable:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="v.htm#variable">variable</A></I> the <I><A HREF="b.htm#binding">binding</A></I> for which is in the
  <I><A HREF="#lexicalenvironment">lexical environment</A></I>.

<P ID="17">


<A NAME="Lispimage">
<DT><B>Lisp image:</B><DD> <I>n.</I>&nbsp;  a running instantiation of a <I>Common Lisp</I>&nbsp;<I><A HREF="i.htm#implementation">implementation</A></I>.
  A <I>Lisp image</I> is characterized by a single address space in which any
  <I><A HREF="o.htm#object">object</A></I> can directly refer to any another in conformance with this specification,
  and by a single, common, <I><A HREF="g.htm#globalenvironment">global environment</A></I>.
  (External operating systems sometimes call this a 
       "core image,"
       "fork,"
       "incarnation," 
       "job,"
    or "process."  Note however, that the issue of a "process" in such 
    an operating system is technically orthogonal to the issue of a <I>Lisp image</I>
    being defined here.  Depending on the operating system, a single "process" 
    might have multiple <I>Lisp images</I>, and multiple "processes" might reside
    in a single <I>Lisp image</I>.  Hence, it is the idea of a fully shared address
    space for direct reference among all <I><A HREF="o.htm#object">objects</A></I> which is the defining
    characteristic.  Note, too, that two "processes" which have a communication 
    area that permits the sharing of some but not all <I><A HREF="o.htm#object">objects</A></I> are considered
    to be distinct <I>Lisp images</I>.)

<P ID="18">
<A NAME="Lispprinter">
<DT><B>Lisp printer:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;
  the procedure that prints the character representation of an
  <I><A HREF="o.htm#object">object</A></I> onto a <I><A HREF="s.htm#stream">stream</A></I>. (This procedure is implemented
  by the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/writepri.htm"><B>write</B></A>.)

<P ID="19">
<A NAME="Lispreadevalprintloop">
<DT><B>Lisp read-eval-print loop:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;
  an endless loop that <I><A HREF="r.htm#read">reads</A></I><SUB>2</SUB> a <I><A HREF="f.htm#form">form</A></I>,
  <I><A HREF="e.htm#evaluate">evaluates</A></I> it,
  and prints (<I>i.e.</I>,  <I><A HREF="w.htm#write">writes</A></I><SUB>2</SUB>) the results.
  In many <I><A HREF="i.htm#implementation">implementations</A></I>,
  the default mode of interaction with <I>Common Lisp</I>&nbsp;during program development
  is through such a loop.

<P ID="20">
<A NAME="Lispreader">
<DT><B>Lisp reader:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;
  the procedure that parses character representations of <I><A HREF="o.htm#object">objects</A></I>
  from a <I><A HREF="s.htm#stream">stream</A></I>, producing <I><A HREF="o.htm#object">objects</A></I>.
  (This procedure is implemented by the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/readread.htm"><B>read</B></A>.)
  

<P ID="21">
<A NAME="list">
<DT><B>list:</B><DD> <I>n.</I>&nbsp;
  1. a chain of <I>conses</I> in which the <I><A HREF="c.htm#car">car</A></I> of each
     <I><A HREF="c.htm#cons">cons</A></I> is an <I><A HREF="e.htm#element">element</A></I> of the <I><A HREF="#list">list</A></I>, 
     and the <I><A HREF="c.htm#cdr">cdr</A></I> of each <I><A HREF="c.htm#cons">cons</A></I> is either the next
     link in the chain or a terminating <I><A HREF="a.htm#atom">atom</A></I>.  
     See also <I><A HREF="p.htm#properlist">proper list</A></I>,
	    <I><A HREF="d.htm#dottedlist">dotted list</A></I>, 
         or <I><A HREF="c.htm#circularlist">circular list</A></I>.
  2. the <I><A HREF="t.htm#type">type</A></I> that is the union of <A HREF="../dictentr/null0.htm"><B>null</B></A> and <A HREF="../dictentr/cons0.htm"><B>cons</B></A>.

<P ID="22">
<A NAME="listdesignator">
<DT><B>list designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#list">list</A></I> of <I><A HREF="o.htm#object">objects</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#list">list</A></I> 
  and that is one of:
       a <I><A HREF="n.htm#nonnil">non-nil</A></I> <I><A HREF="a.htm#atom">atom</A></I> 
         (denoting a <I><A HREF="s.htm#singleton">singleton</A></I> <I><A HREF="#list">list</A></I> 
          whose <I><A HREF="e.htm#element">element</A></I> is that <I><A HREF="n.htm#nonnil">non-nil</A></I> <I><A HREF="a.htm#atom">atom</A></I>)
       or a <I><A HREF="p.htm#properlist">proper list</A></I> (denoting itself).

<P ID="23">
<A NAME="liststructure">
<DT><B>list structure:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#list">list</A></I>)
  the set of <I>conses</I> that make up the <I><A HREF="#list">list</A></I>.
  Note that while the <I><A HREF="c.htm#car">car</A></I><SUB>1b</SUB> component of each such <I><A HREF="c.htm#cons">cons</A></I>
  is part of the <I><A HREF="#liststructure">list structure</A></I>, 
  the <I><A HREF="o.htm#object">objects</A></I> that are <I><A HREF="e.htm#element">elements</A></I> of the <I><A HREF="#list">list</A></I>
  (<I>i.e.</I>,  the <I><A HREF="o.htm#object">objects</A></I> that are the <I><A HREF="c.htm#car">cars</A></I><SUB>2</SUB> of each <I><A HREF="c.htm#cons">cons</A></I>
   in the <I><A HREF="#list">list</A></I>)
  are not themselves part of its <I><A HREF="#liststructure">list structure</A></I>, 
  even if they are <I>conses</I>,
  except in the (<I><A HREF="c.htm#circular">circular</A></I><SUB>2</SUB>)
  case where the <I><A HREF="#list">list</A></I> 
  actually contains one of its <I><A HREF="t.htm#tail">tails</A></I> as an <I><A HREF="e.htm#element">element</A></I>.
  (The <I><A HREF="#liststructure">list structure</A></I> of a <I><A HREF="#list">list</A></I> is sometimes redundantly 
   referred to as its "top-level list structure" in order to emphasize
   that any <I>conses</I> that are <I><A HREF="e.htm#element">elements</A></I> of the <I><A HREF="#list">list</A></I> 
   are not involved.)

<P ID="24">
<A NAME="literal">
<DT><B>literal:</B><DD> <I>adj.</I>&nbsp;(of an <I><A HREF="o.htm#object">object</A></I>)
  referenced directly in a program rather than being computed by the program;
  that is,
  appearing as data in a <A HREF="../dictentr/quote.htm"><B>quote</B></A> <I><A HREF="f.htm#form">form</A></I>, 
  or, if the <I><A HREF="o.htm#object">object</A></I> is a <I><A HREF="s.htm#selfevaluatingobject">self-evaluating object</A></I>,
  appearing as unquoted data.
  In the form <TT>(cons "one" '("two"))</TT>, 
            the expressions <TT>"one"</TT>, <TT>("two")</TT>, and <TT>"two"</TT>
            are literal objects.

<P ID="25">
<A NAME="load">
<DT><B>load:</B><DD> <I>v.t.</I>&nbsp;(a <I><A HREF="f.htm#file">file</A></I>)
  to cause the <I><A HREF="c.htm#code">code</A></I> contained in the <I><A HREF="f.htm#file">file</A></I> to be <I>executed</I>.
  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/load.htm"><B>load</B></A>.

<P ID="26">
<A NAME="loadtime">
<DT><B>load time:</B><DD> <I>n.</I>&nbsp;  the duration of time that the loader is <I>loading</I> <I><A HREF="c.htm#compiledcode">compiled code</A></I>.

<P ID="27">
<A NAME="loadtimevalue">
<DT><B>load time value:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> referred to in <I><A HREF="c.htm#code">code</A></I> by a <A HREF="../dictentr/load-tim.htm"><B>load-time-value</B></A> 
  <I><A HREF="f.htm#form">form</A></I>.  The <I><A HREF="v.htm#value">value</A></I> of such a <I><A HREF="f.htm#form">form</A></I> is some specific
  <I><A HREF="o.htm#object">object</A></I> which can only be computed in the run-time <I><A HREF="e.htm#environment">environment</A></I>.
  In the case of <I><A HREF="f.htm#file">file</A></I> <I><A HREF="c.htm#compilation">compilation</A></I>, the <I><A HREF="v.htm#value">value</A></I> is
  computed once as part of the process of <I>loading</I> the <I><A HREF="c.htm#compiledfile">compiled file</A></I>,
  and not again.  See the <I><A HREF="s.htm#specialoperator">special operator</A></I> <A HREF="../dictentr/load-tim.htm"><B>load-time-value</B></A>.

<P ID="28">
<A NAME="loader">
<DT><B>loader:</B><DD> <I>n.</I>&nbsp;  a facility that is part of Lisp and that <I><A HREF="#load">loads</A></I> a <I><A HREF="f.htm#file">file</A></I>.
  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/load.htm"><B>load</B></A>.

<P ID="29">
<A NAME="localdeclaration">
<DT><B>local declaration:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="e.htm#expression">expression</A></I> which may appear only in specially designated
  positions of certain <I><A HREF="f.htm#form">forms</A></I>, and which provides information about
  the code contained within the containing <I><A HREF="f.htm#form">form</A></I>; 
  that is, a <A HREF="../dictentr/declare.htm"><B>declare</B></A> <I><A HREF="e.htm#expression">expression</A></I>.

<P ID="30">
<A NAME="localprecedenceorder">
<DT><B>local precedence order:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="c.htm#class">class</A></I>)
  a <I><A HREF="#list">list</A></I> consisting of the <I><A HREF="c.htm#class">class</A></I> followed by its
  <I>direct superclasses</I> in the order mentioned in the defining
  <I><A HREF="f.htm#form">form</A></I> for the <I><A HREF="c.htm#class">class</A></I>.

<P ID="31">
<A NAME="localslot">
<DT><B>local slot:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="c.htm#class">class</A></I>)
  a <I><A HREF="s.htm#slot">slot</A></I> <I><A HREF="a.htm#accessible">accessible</A></I> in only one <I><A HREF="i.htm#instance">instance</A></I>, 
  namely the <I><A HREF="i.htm#instance">instance</A></I> in which the <I><A HREF="s.htm#slot">slot</A></I> is allocated.

<P ID="32">
<A NAME="logicalblock">
<DT><B>logical block:</B><DD> <I>n.</I>&nbsp;  a conceptual grouping of related output used by the <I><A HREF="p.htm#prettyprinter">pretty printer</A></I>.
  See the <I><A HREF="m.htm#macro">macro</A></I> <A HREF="../dictentr/pprint-l.htm"><B>pprint-logical-block</B></A> and Section <A HREF="../subsubse/dynamicc.htm">22.2.1.1 Dynamic Control of the Arrangement of Output</A>.

<P ID="33">
<A NAME="logicalhost">
<DT><B>logical host:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> nature 
  that is used as the representation of a "host" in a <I><A HREF="#logicalpathname">logical pathname</A></I>,
  and that has an associated set of translation rules for converting
  <I><A HREF="#logicalpathname">logical pathnames</A></I> belonging to that host into <I><A HREF="p.htm#physicalpathname">physical pathnames</A></I>.
  See Section <A HREF="../section/logicalp.htm">19.3 Logical Pathnames</A>.

<P ID="34">
<A NAME="logicalhostdesignator">
<DT><B>logical host designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#logicalhost">logical host</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#logicalhost">logical host</A></I> 
  and that is one of:
       a <I><A HREF="s.htm#string">string</A></I> (denoting the <I><A HREF="#logicalhost">logical host</A></I> that it names),
    or a <I><A HREF="#logicalhost">logical host</A></I> (denoting itself).
  (Note that because the representation of a <I><A HREF="#logicalhost">logical host</A></I> 
   is <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I>,
   it is possible that an <I><A HREF="i.htm#implementation">implementation</A></I> might represent 
   a <I><A HREF="#logicalhost">logical host</A></I> as the <I><A HREF="s.htm#string">string</A></I> that names it.)

<P ID="35">
<A NAME="logicalpathname">
<DT><B>logical pathname:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/logical-.htm"><B>logical-pathname</B></A>.

<P ID="36">
<A NAME="longfloat">
<DT><B>long float:</B><DD> <I>n.</I>&nbsp;
  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/short-fl.htm"><B>long-float</B></A>.

<P ID="37">
<A NAME="loopkeyword">
<DT><B>loop keyword:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;  a symbol that is a specially recognized part of the syntax of 
  an extended <A HREF="../dictentr/loop.htm"><B>loop</B></A> <I><A HREF="f.htm#form">form</A></I>.  Such symbols are recognized by their
  <I><A HREF="n.htm#name">name</A></I> (using <A HREF="../dictentr/stringst.htm"><B>string=</B></A>), not by their identity; as such, they
  may be in any package.  A <I><A HREF="#loopkeyword">loop keyword</A></I> is not a <I><A HREF="k.htm#keyword">keyword</A></I>.

<P ID="38">
<A NAME="lowercase">
<DT><B>lowercase:</B><DD> <I>adj.</I>&nbsp;(of a <I><A HREF="c.htm#character">character</A></I>)
     being among <I><A HREF="s.htm#standardcharacter">standard characters</A></I> corresponding to
     the small letters <TT>a</TT> through <TT>z</TT>,
  or being some other <I><A HREF="i.htm#implementationdefined">implementation-defined</A></I> <I><A HREF="c.htm#character">character</A></I>
      that is defined by the <I><A HREF="i.htm#implementation">implementation</A></I> to be <I><A HREF="#lowercase">lowercase</A></I>.
  See Section <A HREF="../subsubse/characte.htm">13.1.4.3 Characters With Case</A>.

<P ID="39"></DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="k.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="m.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
