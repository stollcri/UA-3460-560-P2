<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : c.htm
  representing node       : C  [ID:NO-1463]
                 of class : GlossaryEntry  [ID:SC-10]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:51:28 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>C</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="GlossaryEntr_C_1463"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="b.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="d.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/glossary.htm">26 Glossary</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/glossary.htm">26.1 Glossary</A>

</FONT>
<H1 ID="2">C</H1>
<DL>
<A NAME="cadr">
<DT><B>cadr:</B><DD> <FONT SIZE="+1">[ <B>'ka<SUB>'</SUB>dEr</B> ]</FONT>, <I>n.</I>&nbsp;(of an <I><A HREF="o.htm#object">object</A></I>)
  the <I><A HREF="#car">car</A></I> of the <I><A HREF="#cdr">cdr</A></I> of that <I><A HREF="o.htm#object">object</A></I>.

<P ID="3">
<A NAME="call">
<DT><B>call:</B><DD> <I>v.t.</I>, <I>n.</I>&nbsp;
  1. <I>v.t.</I>&nbsp;(a <I><A HREF="f.htm#function">function</A></I> with <I><A HREF="a.htm#argument">arguments</A></I>)
     to cause the <I><A HREF="#code">code</A></I> represented by that <I><A HREF="f.htm#function">function</A></I> to be 
     <I>executed</I> in an <I><A HREF="e.htm#environment">environment</A></I> where <I><A HREF="b.htm#binding">bindings</A></I> for
     the <I><A HREF="v.htm#value">values</A></I> of its <I><A HREF="p.htm#parameter">parameters</A></I> have been <I>established</I>
     based on the <I><A HREF="a.htm#argument">arguments</A></I>.
     Calling the function <A HREF="../dictentr/unnamed0.htm"><B>+</B></A> with the arguments 
               <TT>5</TT> and <TT>1</TT> yields a value of <TT>6</TT>.
  2. <I>n.</I>&nbsp;a <I><A HREF="s.htm#situation">situation</A></I> in which a <I><A HREF="f.htm#function">function</A></I> is called.

<P ID="4">
<A NAME="capturedinitializationform">
<DT><B>captured initialization form:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="i.htm#initializationform">initialization form</A></I> along with the <I><A HREF="l.htm#lexicalenvironment">lexical environment</A></I>
  in which the <I><A HREF="f.htm#form">form</A></I> that defined the <I><A HREF="i.htm#initializationform">initialization form</A></I>
  was <I>evaluated</I>.
  Each newly added shared slot is set to the result of evaluating
            the captured initialization form for the slot that was specified
            in the <A HREF="../dictentr/defclass.htm"><B>defclass</B></A> form for the new class.

<P ID="5">
<A NAME="car">
<DT><B>car:</B><DD> <I>n.</I>&nbsp;  1. a. (of a <I><A HREF="#cons">cons</A></I>) 
        the component of a <I><A HREF="#cons">cons</A></I> corresponding to the first
        <I><A HREF="a.htm#argument">argument</A></I> to <A HREF="../dictentr/cons0.htm"><B>cons</B></A>; the other component is the
        <I><A HREF="#cdr">cdr</A></I>.
	The function <A HREF="../dictentr/rplacarp.htm"><B>rplaca</B></A> modifies the car of a cons.
     b. (of a <I><A HREF="l.htm#list">list</A></I>)
        the first <I><A HREF="e.htm#element">element</A></I> of the <I><A HREF="l.htm#list">list</A></I>, or <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;if the
        <I><A HREF="l.htm#list">list</A></I> is the <I><A HREF="e.htm#emptylist">empty list</A></I>.
  2. the <I><A HREF="o.htm#object">object</A></I> that is held in the <I><A HREF="#car">car</A></I><SUB>1</SUB>.
     The function <A HREF="../dictentr/carcdrca.htm"><B>car</B></A> returns the car of a cons.

<P ID="6">
<A NAME="case">
<DT><B>case:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#character">character</A></I>)
  the property of being either <I><A HREF="u.htm#uppercase">uppercase</A></I> or <I><A HREF="l.htm#lowercase">lowercase</A></I>.
  Not all <I><A HREF="#character">characters</A></I> have <I><A HREF="#case">case</A></I>.
  The characters <TT>#\A</TT> and <TT>#\a</TT> have case,
	    but the character <TT>#\$</TT> has no case.
  See Section <A HREF="../subsubse/characte.htm">13.1.4.3 Characters With Case</A>&nbsp;and the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/upper-ca.htm"><B>both-case-p</B></A>.

<P ID="7">
<A NAME="casesensitivitymode">
<DT><B>case sensitivity mode:</B><DD> <I>n.</I>&nbsp;  one of the <I><A HREF="s.htm#symbol">symbols</A></I>
  <TT>:upcase</TT>, <TT>:downcase</TT>, <TT>:preserve</TT>, or <TT>:invert</TT>.


<P ID="8">
<A NAME="catch">
<DT><B>catch:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="e.htm#exitpoint">exit point</A></I> which is <I>established</I> by a <A HREF="../dictentr/catch.htm"><B>catch</B></A>
  <I><A HREF="f.htm#form">form</A></I> within the <I><A HREF="d.htm#dynamicscope">dynamic scope</A></I> of its body,
  which is named by a <I><A HREF="#catchtag">catch tag</A></I>,
  and to which control and <I><A HREF="v.htm#value">values</A></I> may be <I>thrown</I>.

<P ID="9">
<A NAME="catchtag">
<DT><B>catch tag:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> which names an <I><A HREF="a.htm#active">active</A></I> <I><A HREF="#catch">catch</A></I>.
  (If more than one <I><A HREF="#catch">catch</A></I> is active with the same <I><A HREF="#catchtag">catch tag</A></I>,
   it is only possible to <I><A HREF="t.htm#throw">throw</A></I> to the innermost such <I><A HREF="#catch">catch</A></I>
   because the outer one is <I>shadowed</I><SUB>2</SUB>.)

<P ID="10">
<A NAME="cddr">
<DT><B>cddr:</B><DD> <FONT SIZE="+1">[ <B>'k&uuml;dE<SUB>'</SUB>dEr</B> ]</FONT> or
	      <FONT SIZE="+1">[ <B>'kE<SUB>'</SUB>d&uuml;dEr</B> ]</FONT>, <I>n.</I>&nbsp;
	      (of an <I><A HREF="o.htm#object">object</A></I>)
  the <I><A HREF="#cdr">cdr</A></I> of the <I><A HREF="#cdr">cdr</A></I> of that <I><A HREF="o.htm#object">object</A></I>.

<P ID="11">
<A NAME="cdr">
<DT><B>cdr:</B><DD> <FONT SIZE="+1">[ <B>'k&uuml;<SUB>'</SUB>dEr</B> ]</FONT>, <I>n.</I>&nbsp;
  1. a. (of a <I><A HREF="#cons">cons</A></I>) 
        the component of a <I><A HREF="#cons">cons</A></I> corresponding to the second <I><A HREF="a.htm#argument">argument</A></I>
        to <A HREF="../dictentr/cons0.htm"><B>cons</B></A>; the other component is the <I><A HREF="#car">car</A></I>.
	The function <A HREF="../dictentr/rplacarp.htm"><B>rplacd</B></A> modifies the cdr of a cons.
     b. (of a <I><A HREF="l.htm#list">list</A></I> <I>L<SUB>1</SUB></I>)
        either the <I><A HREF="l.htm#list">list</A></I> <I>L<SUB>2</SUB></I> that contains 
	       the <I><A HREF="e.htm#element">elements</A></I> of <I>L<SUB>1</SUB></I> that follow after the first, 
	or else <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;if <I>L<SUB>1</SUB></I> is the <I><A HREF="e.htm#emptylist">empty list</A></I>.
  2. the <I><A HREF="o.htm#object">object</A></I> that is held in the <I><A HREF="#cdr">cdr</A></I><SUB>1</SUB>.
     The function <A HREF="../dictentr/carcdrca.htm"><B>cdr</B></A> returns the cdr of a cons.

<P ID="12">
<A NAME="cell">
<DT><B>cell:</B><DD> <I>n.</I>&nbsp;<I>Trad.</I>&nbsp;(of an <I><A HREF="o.htm#object">object</A></I>)
  a conceptual <I><A HREF="s.htm#slot">slot</A></I> of that <I><A HREF="o.htm#object">object</A></I>.
  The <I><A HREF="d.htm#dynamicvariable">dynamic variable</A></I> and global <I><A HREF="f.htm#function">function</A></I> <I><A HREF="b.htm#binding">bindings</A></I>
  of a <I><A HREF="s.htm#symbol">symbol</A></I> are sometimes referred to as its <I><A HREF="v.htm#valuecell">value cell</A></I>
  and <I><A HREF="f.htm#functioncell">function cell</A></I>, respectively.

<P ID="13">
<A NAME="character">
<DT><B>character:</B><DD> <I>n.</I>, <I>adj.</I>&nbsp;  1. <I>n.</I>&nbsp;an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/charact1.htm"><B>character</B></A>; that is,
     an <I><A HREF="o.htm#object">object</A></I> that represents a unitary token in an aggregate quantity of text;
     see Section <A HREF="../section/charact0.htm">13.1 Character Concepts</A>.
  2. <I>adj.</I>&nbsp;
     a. (of a <I><A HREF="s.htm#stream">stream</A></I>)
        having an <I><A HREF="e.htm#elementtype">element type</A></I> that is a <I><A HREF="s.htm#subtype">subtype</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/charact1.htm"><B>character</B></A>.
        The most fundamental operation on a <I><A HREF="#character">character</A></I> <I><A HREF="i.htm#input">input</A></I> <I><A HREF="s.htm#stream">stream</A></I> 
        is <A HREF="../dictentr/read-cha.htm"><B>read-char</B></A> and on a <I><A HREF="#character">character</A></I> <I><A HREF="o.htm#output">output</A></I> <I><A HREF="s.htm#stream">stream</A></I> 
        is <A HREF="../dictentr/write-ch.htm"><B>write-char</B></A>. See <I><A HREF="b.htm#binary">binary</A></I>.
     b. (of a <I><A HREF="f.htm#file">file</A></I>)
        having been created by opening a <I><A HREF="#character">character</A></I> <I><A HREF="s.htm#stream">stream</A></I>.
        (It is <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> whether this is an inspectable aspect 
         of the <I><A HREF="f.htm#file">file</A></I>, or whether any given <I><A HREF="b.htm#binary">binary</A></I> <I><A HREF="f.htm#file">file</A></I> can be
         treated as a <I><A HREF="#character">character</A></I> <I><A HREF="f.htm#file">file</A></I>.)

<P ID="14">

<A NAME="charactercode">
<DT><B>character code:</B><DD> <I>n.</I>&nbsp;  1. one of possibly several <I><A HREF="a.htm#attribute">attributes</A></I> of a <I><A HREF="#character">character</A></I>.
  2. a non-negative <I><A HREF="i.htm#integer">integer</A></I> less than the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/char-cod.htm"><B>char-code-limit</B></A>
     that is suitable for use as a <I><A HREF="#charactercode">character code</A></I><SUB>1</SUB>.

<P ID="15">
<A NAME="characterdesignator">
<DT><B>character designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#character">character</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#character">character</A></I> 
  and that is one of:
       a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="s.htm#string">string</A></I> of <I><A HREF="l.htm#length">length</A></I> one
         (denoting the <I><A HREF="#character">character</A></I> that is its only <I><A HREF="e.htm#element">element</A></I>),



    or a <I><A HREF="#character">character</A></I> (denoting itself).

<P ID="16">
<A NAME="circular">
<DT><B>circular:</B><DD> <I>adj.</I>&nbsp;  1. (of a <I><A HREF="l.htm#list">list</A></I>) a <I><A HREF="#circularlist">circular list</A></I>.
  2. (of an arbitrary <I><A HREF="o.htm#object">object</A></I>)
     having a <I>component</I>, <I><A HREF="e.htm#element">element</A></I>, <I><A HREF="#constituent">constituent</A></I><SUB>2</SUB>, 
     or <I><A HREF="s.htm#subexpression">subexpression</A></I> (as appropriate to the context) 
     that is the <I><A HREF="o.htm#object">object</A></I> itself.

<P ID="17">
<A NAME="circularlist">
<DT><B>circular list:</B><DD> <I>n.</I>&nbsp;
  a chain of <I>conses</I> that has no termination because some
 <I><A HREF="#cons">cons</A></I> in the chain is the <I><A HREF="#cdr">cdr</A></I> of a later <I><A HREF="#cons">cons</A></I>.

<P ID="18">
<A NAME="class">
<DT><B>class:</B><DD> <I>n.</I>&nbsp;  1. an <I><A HREF="o.htm#object">object</A></I> that uniquely determines the structure and behavior of 
     a set of other <I><A HREF="o.htm#object">objects</A></I> called its <I><A HREF="d.htm#directinstance">direct instances</A></I>, 
     that contributes structure and behavior to a set of
     other <I><A HREF="o.htm#object">objects</A></I> called its <I><A HREF="i.htm#indirectinstance">indirect instances</A></I>,
     and that acts as a <I><A HREF="t.htm#typespecifier">type specifier</A></I> for a set of objects
     called its <I><A HREF="g.htm#generalizedinstance">generalized instances</A></I>.
     The class <A HREF="../dictentr/integer.htm"><B>integer</B></A> is a subclass of the class <A HREF="../dictentr/number.htm"><B>number</B></A>.
     (Note that the phrase "the <I><A HREF="#class">class</A></I> <TT>foo</TT>" is often substituted for
      the more precise phrase "the <I><A HREF="#class">class</A></I> named <TT>foo</TT>" - in both
      cases, a <I><A HREF="#class">class</A></I> <I><A HREF="o.htm#object">object</A></I> (not a <I><A HREF="s.htm#symbol">symbol</A></I>) is denoted.)
  2. (of an <I><A HREF="o.htm#object">object</A></I>)
     the uniquely determined <I><A HREF="#class">class</A></I> of which the <I><A HREF="o.htm#object">object</A></I> is
     a <I><A HREF="d.htm#directinstance">direct instance</A></I>.
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/class-of.htm"><B>class-of</B></A>.
     The class of the object returned by <A HREF="../dictentr/gensym.htm"><B>gensym</B></A> 
 	       is <A HREF="../dictentr/symbol.htm"><B>symbol</B></A>.
     (Note that with this usage a phrase such as "its <I><A HREF="#class">class</A></I> is <TT>foo</TT>" 
      is often substituted for the more precise phrase
      "its <I><A HREF="#class">class</A></I> is the <I><A HREF="#class">class</A></I> named <TT>foo</TT>" - in both
      cases, a <I><A HREF="#class">class</A></I> <I><A HREF="o.htm#object">object</A></I> (not a <I><A HREF="s.htm#symbol">symbol</A></I>) is denoted.)

<P ID="19">
<A NAME="classdesignator">
<DT><B>class designator:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="d.htm#designator">designator</A></I> for a <I><A HREF="#class">class</A></I>; that is,
  an <I><A HREF="o.htm#object">object</A></I> that denotes a <I><A HREF="#class">class</A></I> 
  and that is one of:
       a <I><A HREF="s.htm#symbol">symbol</A></I> (denoting the <I><A HREF="#class">class</A></I> named by that <I><A HREF="s.htm#symbol">symbol</A></I>;
		        see the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/find-cla.htm"><B>find-class</B></A>)
    or a <I><A HREF="#class">class</A></I> (denoting itself).

<P ID="20">
<A NAME="classprecedencelist">
<DT><B>class precedence list:</B><DD> <I>n.</I>&nbsp;  a unique total ordering on a <I><A HREF="#class">class</A></I>
  and its <I>superclasses</I> that is consistent with the
  <I><A HREF="l.htm#localprecedenceorder">local precedence orders</A></I> for the <I><A HREF="#class">class</A></I> and its
  <I>superclasses</I>.
  For detailed information, see Section <A HREF="../subsecti/determin.htm">4.3.5 Determining the Class Precedence List</A>.

<P ID="21">
<A NAME="close">
<DT><B>close:</B><DD> <I>v.t.</I>&nbsp;(a <I><A HREF="s.htm#stream">stream</A></I>)
  to terminate usage of the <I><A HREF="s.htm#stream">stream</A></I> as a source or sink of data,
  permitting the <I><A HREF="i.htm#implementation">implementation</A></I> to reclaim its internal data structures,
  and to free any external resources which might have been locked by the
 <I><A HREF="s.htm#stream">stream</A></I> when it was opened.

<P ID="22">
<A NAME="closed">
<DT><B>closed:</B><DD> <I>adj.</I>&nbsp;(of a <I><A HREF="s.htm#stream">stream</A></I>)
  having been <I><A HREF="#closed">closed</A></I> (see <I><A HREF="#close">close</A></I>).
  Some (but not all) operations that are valid on <I><A HREF="o.htm#open">open</A></I> <I><A HREF="s.htm#stream">streams</A></I> 
  are not valid on <I><A HREF="#closed">closed</A></I> <I><A HREF="s.htm#stream">streams</A></I>.
  See Section <A HREF="../subsecti/fileoper.htm">20.1.2 File Operations on Open and Closed Streams</A>.

<P ID="23">
<A NAME="closure">
<DT><B>closure:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="l.htm#lexicalclosure">lexical closure</A></I>.

<P ID="24">

<A NAME="coalesce">
<DT><B>coalesce:</B><DD> <I>v.t.</I>&nbsp;(<I>literal objects</I> that are <I><A HREF="s.htm#similar">similar</A></I>)
  to consolidate the identity of those <I><A HREF="o.htm#object">objects</A></I>,
  such that they become the <I><A HREF="s.htm#same">same</A></I> 
  <I><A HREF="o.htm#object">object</A></I>.
  See Section <A HREF="../subsecti/compiler.htm">3.2.1 Compiler Terminology</A>.

<P ID="25">
<A NAME="code">
<DT><B>code:</B><DD> <I>n.</I>&nbsp;  1. <I>Trad.</I>&nbsp;
     any representation of actions to be performed, whether conceptual
     or as an actual <I><A HREF="o.htm#object">object</A></I>, such as
         <I><A HREF="f.htm#form">forms</A></I>,
         <I><A HREF="l.htm#lambdaexpression">lambda expressions</A></I>,
         <I><A HREF="o.htm#object">objects</A></I> of <I><A HREF="t.htm#type">type</A></I> <I><A HREF="f.htm#function">function</A></I>, 
         text in a <I><A HREF="s.htm#sourcefile">source file</A></I>,
      or instruction sequences in a <I><A HREF="#compiledfile">compiled file</A></I>.
      This is a generic term;
      the specific nature of the representation depends on its context.
  2. (of a <I><A HREF="#character">character</A></I>)
     a <I><A HREF="#charactercode">character code</A></I>.

<P ID="26">
<A NAME="coerce">
<DT><B>coerce:</B><DD> <I>v.t.</I>&nbsp;(an <I><A HREF="o.htm#object">object</A></I> to a <I><A HREF="t.htm#type">type</A></I>)
  to produce an <I><A HREF="o.htm#object">object</A></I> from the given <I><A HREF="o.htm#object">object</A></I>,
  without modifying that <I><A HREF="o.htm#object">object</A></I>,
  by following some set of coercion rules that must be specifically 
  stated for any context in which this term is used.
  The resulting <I><A HREF="o.htm#object">object</A></I> is necessarily of the indicated <I><A HREF="t.htm#type">type</A></I>, 
  except when that type is a <I><A HREF="s.htm#subtype">subtype</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/complex.htm"><B>complex</B></A>; in that case,
  if a <I><A HREF="#complexrational">complex rational</A></I> with an imaginary part of zero would result,
  the result is a <I><A HREF="r.htm#rational">rational</A></I> 
  rather than a <I><A HREF="#complex">complex</A></I> - see Section <A HREF="../subsubse/ruleofca.htm">12.1.5.3 Rule of Canonical Representation for Complex Rationals</A>.

<P ID="27">
<A NAME="colon">
<DT><B>colon:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="s.htm#standardcharacter">standard character</A></I> that is called "colon" (<TT>:</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="28">
<A NAME="comma">
<DT><B>comma:</B><DD> <I>n.</I>&nbsp;  the <I><A HREF="s.htm#standardcharacter">standard character</A></I> that is called "comma" (<TT>,</TT>).
  See Figure <A HREF="../subsecti/standard.htm">2.1.3 Standard Characters</A>.

<P ID="29">
<A NAME="compilation">
<DT><B>compilation:</B><DD> <I>n.</I>&nbsp;  the process of <I>compiling</I> <I><A HREF="#code">code</A></I> by the <I><A HREF="#compiler">compiler</A></I>.

<P ID="30">

<A NAME="compilationenvironment">
<DT><B>compilation environment:</B><DD> <I>n.</I>&nbsp;
  1. An <I><A HREF="e.htm#environment">environment</A></I> that represents information known by the
     <I><A HREF="#compiler">compiler</A></I> about a <I><A HREF="f.htm#form">form</A></I> that is being <I>compiled</I>.
     See Section <A HREF="../subsecti/compiler.htm">3.2.1 Compiler Terminology</A>.
  2. An <I><A HREF="o.htm#object">object</A></I> that represents the
     <I><A HREF="#compilationenvironment">compilation environment</A></I><SUB>1</SUB> 
     and that is used as a second argument to a <I><A HREF="m.htm#macrofunction">macro function</A></I>
     (which supplies a <I><A HREF="v.htm#value">value</A></I> for any <A HREF="../subsecti/macrolam.htm"><B>&amp;environment</B></A> <I><A HREF="p.htm#parameter">parameter</A></I>
      in the <I><A HREF="m.htm#macrofunction">macro function</A></I>'s definition).

<P ID="31">
<A NAME="compilationunit">
<DT><B>compilation unit:</B><DD> <I>n.</I>&nbsp;  an interval during which a single unit of compilation is occurring.
  See the <I><A HREF="m.htm#macro">macro</A></I> <A HREF="../dictentr/with-com.htm"><B>with-compilation-unit</B></A>.

<P ID="32">
<A NAME="compile">
<DT><B>compile:</B><DD> <I>v.t.</I>&nbsp;
  1. (<I><A HREF="#code">code</A></I>)
     to perform semantic preprocessing of the <I><A HREF="#code">code</A></I>, usually optimizing
     one or more qualities of the code, such as run-time speed of <I>execution</I>
     or run-time storage usage.  The minimum semantic requirements of compilation are
     that it must remove all macro calls and arrange for all <I><A HREF="l.htm#loadtimevalue">load time values</A></I>
     to be resolved prior to run time.
  2. (a <I><A HREF="f.htm#function">function</A></I>)
     to produce a new <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/compiled.htm"><B>compiled-function</B></A>
     which represents the result of <I>compiling</I> the <I><A HREF="#code">code</A></I> 
     represented by the <I><A HREF="f.htm#function">function</A></I>.  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/compile.htm"><B>compile</B></A>.
  3. (a <I><A HREF="s.htm#sourcefile">source file</A></I>)
     to produce a <I><A HREF="#compiledfile">compiled file</A></I> from a <I><A HREF="s.htm#sourcefile">source file</A></I>.
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/compile-.htm"><B>compile-file</B></A>.

<P ID="33">
<A NAME="compiletime">
<DT><B>compile time:</B><DD> <I>n.</I>&nbsp;
  the duration of time that the <I><A HREF="#compiler">compiler</A></I> is processing <I><A HREF="s.htm#sourcecode">source code</A></I>.

<P ID="34">
<A NAME="compiletimedefinition">
<DT><B>compile-time definition:</B><DD> <I>n.</I>&nbsp;  a definition in the <I><A HREF="#compilationenvironment">compilation environment</A></I>.

<P ID="35">
<A NAME="compiledcode">
<DT><B>compiled code:</B><DD> <I>n.</I>&nbsp;  1. <I><A HREF="#compiledfunction">compiled functions</A></I>.
  2. <I><A HREF="#code">code</A></I> that represents <I><A HREF="#compiledfunction">compiled functions</A></I>,
     such as the contents of a <I><A HREF="#compiledfile">compiled file</A></I>.

<P ID="36">
<A NAME="compiledfile">
<DT><B>compiled file:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="f.htm#file">file</A></I> which represents the results of <I>compiling</I> the 
  <I><A HREF="f.htm#form">forms</A></I> which appeared in a corresponding <I><A HREF="s.htm#sourcefile">source file</A></I>,
  and which can be <I>loaded</I>.  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/compile-.htm"><B>compile-file</B></A>.

<P ID="37">

<A NAME="compiledfunction">
<DT><B>compiled function:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/compiled.htm"><B>compiled-function</B></A>, which is a <I><A HREF="f.htm#function">function</A></I>
  that has been <I>compiled</I>, which contains no references to <I><A HREF="m.htm#macro">macros</A></I> that

  must be expanded at run time, and which contains no unresolved references 
  to <I><A HREF="l.htm#loadtimevalue">load time values</A></I>.


<P ID="38">
<A NAME="compiler">
<DT><B>compiler:</B><DD> <I>n.</I>&nbsp;  a facility that is part of Lisp and that translates <I><A HREF="#code">code</A></I>
  into an <I><A HREF="i.htm#implementationdependent">implementation-dependent</A></I> form
  that might be represented or <I>executed</I> efficiently.
  The functions <A HREF="../dictentr/compile.htm"><B>compile</B></A> and <A HREF="../dictentr/compile-.htm"><B>compile-file</B></A>
  permit programs to invoke the <I><A HREF="#compiler">compiler</A></I>.

<P ID="39">

<A NAME="compilermacro">
<DT><B>compiler macro:</B><DD> <I>n.</I>&nbsp;  an auxiliary macro definition for a globally defined <I><A HREF="f.htm#function">function</A></I>
  or <I><A HREF="m.htm#macro">macro</A></I> which might or might not be called by any given
  <I><A HREF="#conformingimplementation">conforming implementation</A></I> and which must preserve the semantics
  of the globally defined <I><A HREF="f.htm#function">function</A></I> or <I><A HREF="m.htm#macro">macro</A></I> but which might
  perform some additional optimizations.  (Unlike a <I><A HREF="m.htm#macro">macro</A></I>, 
  a <I><A HREF="#compilermacro">compiler macro</A></I> does not extend the syntax of <I>Common Lisp</I>; rather, it
  provides an alternate implementation strategy for some existing syntax
  or functionality.)

<P ID="40">
<A NAME="compilermacroexpansion">
<DT><B>compiler macro expansion:</B><DD> <I>n.</I>&nbsp;  1. the process of translating a <I><A HREF="f.htm#form">form</A></I> into another <I><A HREF="f.htm#form">form</A></I>
     by a <I><A HREF="#compilermacro">compiler macro</A></I>.
  2. the <I><A HREF="f.htm#form">form</A></I> resulting from this process.

<P ID="41">
<A NAME="compilermacroform">
<DT><B>compiler macro form:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="f.htm#functionform">function form</A></I> or <I><A HREF="m.htm#macroform">macro form</A></I> whose <I><A HREF="o.htm#operator">operator</A></I>
  has a definition as a <I><A HREF="#compilermacro">compiler macro</A></I>, 
  or a <A HREF="../dictentr/funcall.htm"><B>funcall</B></A> <I><A HREF="f.htm#form">form</A></I> whose first <I><A HREF="a.htm#argument">argument</A></I> is a
  <A HREF="../dictentr/function.htm"><B>function</B></A> <I><A HREF="f.htm#form">form</A></I> whose <I><A HREF="a.htm#argument">argument</A></I> is the <I><A HREF="n.htm#name">name</A></I>
  of a <I><A HREF="f.htm#function">function</A></I> that has a definition as a <I><A HREF="#compilermacro">compiler macro</A></I>.

<P ID="42">
<A NAME="compilermacrofunction">
<DT><B>compiler macro function:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="f.htm#function">function</A></I> of two arguments, a <I><A HREF="f.htm#form">form</A></I> and an 
  <I><A HREF="e.htm#environment">environment</A></I>, that implements <I><A HREF="#compilermacroexpansion">compiler macro expansion</A></I> by
  producing either a <I><A HREF="f.htm#form">form</A></I> to be used in place of the original
  argument <I><A HREF="f.htm#form">form</A></I> or else <A HREF="../dictentr/nil.htm"><B>nil</B></A>, indicating that the original <I><A HREF="f.htm#form">form</A></I>
  should not be replaced.  See Section <A HREF="../subsubse/compiler.htm">3.2.2.1 Compiler Macros</A>.


<P ID="43">
<A NAME="complex">
<DT><B>complex:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/complex.htm"><B>complex</B></A>.

<P ID="44">
<A NAME="complexfloat">
<DT><B>complex float:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/complex.htm"><B>complex</B></A> which has a <I><A HREF="#complexparttype">complex part type</A></I>
  that is a <I><A HREF="s.htm#subtype">subtype</A></I> of <A HREF="../dictentr/float.htm"><B>float</B></A>.
  A <I><A HREF="#complexfloat">complex float</A></I> is a <I><A HREF="#complex">complex</A></I>,
  but it is not a <I><A HREF="f.htm#float">float</A></I>.

<P ID="45">
<A NAME="complexparttype">
<DT><B>complex part type:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#complex">complex</A></I>)
  1. the <I><A HREF="t.htm#type">type</A></I> which is used to represent both the real part 
     and the imaginary part of the <I><A HREF="#complex">complex</A></I>.
  2. the <I><A HREF="a.htm#actualcomplexparttype">actual complex part type</A></I> of the <I><A HREF="#complex">complex</A></I>.
  3. the <I><A HREF="e.htm#expressedcomplexparttype">expressed complex part type</A></I> of the <I><A HREF="#complex">complex</A></I>.

<P ID="46">
<A NAME="complexrational">
<DT><B>complex rational:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/complex.htm"><B>complex</B></A> which has a <I><A HREF="#complexparttype">complex part type</A></I>
  that is a <I><A HREF="s.htm#subtype">subtype</A></I> of <A HREF="../dictentr/rational.htm"><B>rational</B></A>.
  A <I><A HREF="#complexrational">complex rational</A></I> is a <I><A HREF="#complex">complex</A></I>, but it is not a <I><A HREF="r.htm#rational">rational</A></I>.  
  No <I><A HREF="#complexrational">complex rational</A></I> has an imaginary part of zero because such a
  number is always represented by <I>Common Lisp</I>&nbsp;as an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/rational.htm"><B>rational</B></A>;
  see Section <A HREF="../subsubse/ruleofca.htm">12.1.5.3 Rule of Canonical Representation for Complex Rationals</A>.

<P ID="47">
<A NAME="complexsinglefloat">
<DT><B>complex single float:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/complex.htm"><B>complex</B></A> which has a <I><A HREF="#complexparttype">complex part type</A></I>
  that is a <I><A HREF="s.htm#subtype">subtype</A></I> of <A HREF="../dictentr/short-fl.htm"><B>single-float</B></A>.
  A <I><A HREF="#complexsinglefloat">complex single float</A></I> is a <I><A HREF="#complex">complex</A></I>,
  but it is not a <I><A HREF="s.htm#singlefloat">single float</A></I>.

<P ID="48">
<A NAME="compositestream">
<DT><B>composite stream:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="s.htm#stream">stream</A></I> that is composed of one or more other <I><A HREF="s.htm#stream">streams</A></I>.
  <A HREF="../dictentr/make-syn.htm"><B>make-synonym-stream</B></A> creates a composite stream.

<P ID="49">
<A NAME="compoundform">
<DT><B>compound form:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="n.htm#nonempty">non-empty</A></I> <I><A HREF="l.htm#list">list</A></I> which is a <I><A HREF="f.htm#form">form</A></I>:
  a <I><A HREF="s.htm#specialform">special form</A></I>,
  a <I><A HREF="l.htm#lambdaform">lambda form</A></I>,
  a <I><A HREF="m.htm#macroform">macro form</A></I>, 
  or a <I><A HREF="f.htm#functionform">function form</A></I>.

<P ID="50">
<A NAME="compoundtypespecifier">
<DT><B>compound type specifier:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="t.htm#typespecifier">type specifier</A></I> that is a <I><A HREF="#cons">cons</A></I>;
  <I>i.e.</I>,  a <I><A HREF="t.htm#typespecifier">type specifier</A></I> that is not an <I><A HREF="a.htm#atomictypespecifier">atomic type specifier</A></I>.
  <TT>(vector single-float)</TT> is a compound type specifier.

<P ID="51">
<A NAME="concatenatedstream">
<DT><B>concatenated stream:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="i.htm#input">input</A></I> <I><A HREF="s.htm#stream">stream</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/concaten.htm"><B>concatenated-stream</B></A>.

<P ID="52">
<A NAME="condition">
<DT><B>condition:</B><DD> <I>n.</I>&nbsp;  1. an <I><A HREF="o.htm#object">object</A></I> which represents a <I><A HREF="s.htm#situation">situation</A></I> - usually,
     but not necessarily, during <I>signaling</I>.
  2. an <I><A HREF="o.htm#object">object</A></I> of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/conditio.htm"><B>condition</B></A>.

<P ID="53">
<A NAME="conditiondesignator">
<DT><B>condition designator:</B><DD> <I>n.</I>&nbsp;  one or more <I><A HREF="o.htm#object">objects</A></I> that, taken together, 
  denote either an existing <I><A HREF="#condition">condition</A></I> <I><A HREF="o.htm#object">object</A></I> 
	     or a <I><A HREF="#condition">condition</A></I> <I><A HREF="o.htm#object">object</A></I> to be implicitly created.
  For details, see Section <A HREF="../subsubse/conditio.htm">9.1.2.1 Condition Designators</A>.

<P ID="54">
<A NAME="conditionhandler">
<DT><B>condition handler:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="f.htm#function">function</A></I> that might be invoked by the act of <I>signaling</I>,
  that receives the <I><A HREF="#condition">condition</A></I> being signaled as its only argument,
  and that is permitted to <I><A HREF="h.htm#handle">handle</A></I> the <I><A HREF="#condition">condition</A></I> 
  or to <I><A HREF="d.htm#decline">decline</A></I>.  See Section <A HREF="../subsubse/signalin.htm">9.1.4.1 Signaling</A>.

<P ID="55">
<A NAME="conditionreporter">
<DT><B>condition reporter:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="f.htm#function">function</A></I> that describes how a <I><A HREF="#condition">condition</A></I> is to be printed
  when the <I>Lisp printer</I> is invoked while <A HREF="../dictentr/print-es.htm"><B>*print-escape*</B></A> 
  is <I><A HREF="f.htm#false">false</A></I>.  See Section <A HREF="../subsecti/printing.htm">9.1.3 Printing Conditions</A>.

<P ID="56">
<A NAME="conditionalnewline">
<DT><B>conditional newline:</B><DD> <I>n.</I>&nbsp;  a point in output where a <I><A HREF="n.htm#newline">newline</A></I> might be inserted at the
  discretion of the <I><A HREF="p.htm#prettyprinter">pretty printer</A></I>.
  There are four kinds of <I><A HREF="#conditionalnewline">conditional newlines</A></I>,
  called "linear-style,"
	 "fill-style,"
	 "miser-style,"
     and "mandatory-style."
  See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/pprint-n.htm"><B>pprint-newline</B></A> and Section <A HREF="../subsubse/dynamicc.htm">22.2.1.1 Dynamic Control of the Arrangement of Output</A>.

<P ID="57">
<A NAME="conformance">
<DT><B>conformance:</B><DD> <I>n.</I>&nbsp;  a state achieved by proper and complete adherence to the requirements
  of this specification.  See Section <A HREF="../section/conforma.htm">1.5 Conformance</A>.

<P ID="58">
<A NAME="conformingcode">
<DT><B>conforming code:</B><DD> <I>n.</I>&nbsp;  <I><A HREF="#code">code</A></I> that is all of part of a <I><A HREF="#conformingprogram">conforming program</A></I>.

<P ID="59">
<A NAME="conformingimplementation">
<DT><B>conforming implementation:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="i.htm#implementation">implementation</A></I>, used to emphasize complete and correct
  adherance to all conformance criteria.
  A <I><A HREF="#conformingimplementation">conforming implementation</A></I> is capable of 
      accepting a <I><A HREF="#conformingprogram">conforming program</A></I> as input,
      preparing that <I><A HREF="p.htm#program">program</A></I> for <I>execution</I>,
  and executing the prepared <I><A HREF="p.htm#program">program</A></I> in accordance with this specification.
  An <I><A HREF="i.htm#implementation">implementation</A></I> which
  has been extended may still be a <I><A HREF="#conformingimplementation">conforming implementation</A></I> 
  provided that no extension interferes with the correct function of any
  <I><A HREF="#conformingprogram">conforming program</A></I>.

<P ID="60">
<A NAME="conformingprocessor">
<DT><B>conforming processor:</B><DD> <I>n.</I>&nbsp;<I>ANSI</I>&nbsp;
  a <I><A HREF="#conformingimplementation">conforming implementation</A></I>.

<P ID="61">
<A NAME="conformingprogram">
<DT><B>conforming program:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="p.htm#program">program</A></I>, used to emphasize the fact that the <I><A HREF="p.htm#program">program</A></I>
  depends for its correctness only upon documented aspects of <I>Common Lisp</I>, and
  can therefore be expected to run correctly in any <I><A HREF="#conformingimplementation">conforming implementation</A></I>.

<P ID="62">
<A NAME="congruent">
<DT><B>congruent:</B><DD> <I>n.</I>&nbsp;
  conforming to the rules of <I><A HREF="l.htm#lambdalist">lambda list</A></I> congruency, as detailed in 
  Section <A HREF="../subsecti/congruen.htm">7.6.4 Congruent Lambda-lists for all Methods of a Generic Function</A>.

<P ID="63">
<A NAME="cons">
<DT><B>cons:</B><DD> <I>n.</I><I>v.</I>&nbsp;
  1. <I>n.</I>&nbsp;a compound data <I><A HREF="o.htm#object">object</A></I> having two components called the
     <I><A HREF="#car">car</A></I> and the <I><A HREF="#cdr">cdr</A></I>.
  2. <I>v.</I>&nbsp;to create such an <I><A HREF="o.htm#object">object</A></I>.
  3. <I>v.</I>&nbsp;<I>Idiom.</I>&nbsp;to create any <I><A HREF="o.htm#object">object</A></I>, or to allocate storage.

<P ID="64">
<A NAME="constant">
<DT><B>constant:</B><DD> <I>n.</I>&nbsp;  1. a <I><A HREF="#constantform">constant form</A></I>.
  2. a <I><A HREF="#constantvariable">constant variable</A></I>.
  3. a <I><A HREF="#constantobject">constant object</A></I>.
  4. a <I><A HREF="s.htm#selfevaluatingobject">self-evaluating object</A></I>.

<P ID="65">
<A NAME="constantform">
<DT><B>constant form:</B><DD> <I>n.</I>&nbsp;  any <I><A HREF="f.htm#form">form</A></I>
   for which <I><A HREF="e.htm#evaluation">evaluation</A></I> always <I><A HREF="y.htm#yield">yields</A></I> the same <I><A HREF="v.htm#value">value</A></I>,
   that neither affects nor is affected by the <I><A HREF="e.htm#environment">environment</A></I>
     in which it is <I>evaluated</I> (except that it is permitted to
     refer to the names of <I><A HREF="#constantvariable">constant variables</A></I> 
     defined in the <I><A HREF="e.htm#environment">environment</A></I>),
   and
   that neither affects nor is affected by the state of any <I><A HREF="o.htm#object">object</A></I>
     except those <I><A HREF="o.htm#object">objects</A></I> that are <I><A HREF="o.htm#otherwiseinaccessiblepart">otherwise inaccessible parts</A></I>
     of <I><A HREF="o.htm#object">objects</A></I> created by the <I><A HREF="f.htm#form">form</A></I> itself.
  A <A HREF="../dictentr/carcdrca.htm"><B>car</B></A> form in which the argument is a
            <A HREF="../dictentr/quote.htm"><B>quote</B></A> form is a constant form.

<P ID="66">
<A NAME="constantobject">
<DT><B>constant object:</B><DD> <I>n.</I>&nbsp;  an <I><A HREF="o.htm#object">object</A></I> that is constrained (<I>e.g.</I>,  by its context in a <I><A HREF="p.htm#program">program</A></I>
  or by the source from which it was obtained) to be <I><A HREF="i.htm#immutable">immutable</A></I>.
  A literal object that has been processed by <A HREF="../dictentr/compile-.htm"><B>compile-file</B></A>
	    is a constant object.

<P ID="67">
<A NAME="constantvariable">
<DT><B>constant variable:</B><DD> <I>n.</I>&nbsp;  a <I><A HREF="v.htm#variable">variable</A></I>, the <I><A HREF="v.htm#value">value</A></I> of which can never change;
  that is, a <I><A HREF="k.htm#keyword">keyword</A></I><SUB>1</SUB> or a <I><A HREF="n.htm#namedconstant">named constant</A></I>.
  The symbols <A HREF="../dictentr/t.htm"><B>t</B></A>, <A HREF="../dictentr/nil.htm"><B>nil</B></A>, <TT>:direction</TT>, and
            <A HREF="../dictentr/most-pos.htm"><B>most-positive-fixnum</B></A>&nbsp;are constant variables.

<P ID="68">
<A NAME="constituent">
<DT><B>constituent:</B><DD> <I>n.</I>, <I>adj.</I>&nbsp;  1. a. <I>n.</I>&nbsp;the <I><A HREF="s.htm#syntaxtype">syntax type</A></I> of a <I><A HREF="#character">character</A></I> that is part of a <I><A HREF="t.htm#token">token</A></I>.
         For details, see Section <A HREF="../subsubse/constitu.htm">2.1.4.1 Constituent Characters</A>.
     b. <I>adj.</I>&nbsp;(of a <I><A HREF="#character">character</A></I>)
        having the <I><A HREF="#constituent">constituent</A></I><SUB>1a</SUB> <I><A HREF="s.htm#syntaxtype">syntax type</A></I><SUB>2</SUB>.
     c. <I>n.</I>&nbsp;a <I><A HREF="#constituent">constituent</A></I><SUB>1b</SUB> <I><A HREF="#character">character</A></I>.
  2. <I>n.</I>&nbsp;(of a <I><A HREF="#compositestream">composite stream</A></I>)
     one of possibly several <I><A HREF="o.htm#object">objects</A></I> that collectively comprise
     the source or sink of that <I><A HREF="s.htm#stream">stream</A></I>.

<P ID="69">
<A NAME="constituenttrait">
<DT><B>constituent trait:</B><DD> <I>n.</I>&nbsp;(of a <I><A HREF="#character">character</A></I>)
  one of several classifications of a <I><A HREF="#constituent">constituent</A></I> <I><A HREF="#character">character</A></I>
  in a <I><A HREF="r.htm#readtable">readtable</A></I>.  See Section <A HREF="../subsubse/constitu.htm">2.1.4.1 Constituent Characters</A>.

<P ID="70">
<A NAME="constructedstream">
<DT><B>constructed stream:</B><DD> <I>n.</I>&nbsp;
  a <I><A HREF="s.htm#stream">stream</A></I> whose source or sink is a Lisp <I><A HREF="o.htm#object">object</A></I>.
  Note that since a <I><A HREF="s.htm#stream">stream</A></I> is another Lisp <I><A HREF="o.htm#object">object</A></I>,
  <I><A HREF="#compositestream">composite streams</A></I> are considered <I><A HREF="#constructedstream">constructed streams</A></I>.
  A string stream is a constructed stream.

<P ID="71">
<A NAME="contagion">
<DT><B>contagion:</B><DD> <I>n.</I>&nbsp;  a process whereby operations on <I><A HREF="o.htm#object">objects</A></I> of differing <I><A HREF="t.htm#type">types</A></I>
  (<I>e.g.</I>,  arithmetic on mixed <I><A HREF="t.htm#type">types</A></I> of <I><A HREF="n.htm#number">numbers</A></I>) produce a result
  whose <I><A HREF="t.htm#type">type</A></I> is controlled by the dominance of one <I><A HREF="a.htm#argument">argument</A></I>'s
  <I><A HREF="t.htm#type">type</A></I> over the <I><A HREF="t.htm#type">types</A></I> of the other <I><A HREF="a.htm#argument">arguments</A></I>.
  See Section <A HREF="../subsubse/contagio.htm">12.1.1.2 Contagion in Numeric Operations</A>.

<P ID="72">
<A NAME="continuable">
<DT><B>continuable:</B><DD> <I>n.</I>&nbsp;(of an <I><A HREF="e.htm#error">error</A></I>)
  an <I><A HREF="e.htm#error">error</A></I> that is <I><A HREF="#correctable">correctable</A></I> by the <TT>continue</TT> restart.

<P ID="73">
<A NAME="controlform">
<DT><B>control form:</B><DD> <I>n.</I>&nbsp;  1. a <I><A HREF="f.htm#form">form</A></I> that establishes one or more places to which control
     can be transferred.
  2. a <I><A HREF="f.htm#form">form</A></I> that transfers control.



<P ID="74">
<A NAME="copy">
<DT><B>copy:</B><DD> <I>n.</I>&nbsp;  1. (of a <I><A HREF="#cons">cons</A></I> <I>C</I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="#cons">cons</A></I> with the <I><A HREF="s.htm#same">same</A></I> <I><A HREF="#car">car</A></I> and <I><A HREF="#cdr">cdr</A></I> as <I>C</I>.
  2. (of a <I><A HREF="l.htm#list">list</A></I> <I>L</I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="l.htm#list">list</A></I> with the <I><A HREF="s.htm#same">same</A></I> <I><A HREF="e.htm#element">elements</A></I> as <I>L</I>.  
     (Only the <I><A HREF="l.htm#liststructure">list structure</A></I> is <I><A HREF="f.htm#fresh">fresh</A></I>;
      the <I><A HREF="e.htm#element">elements</A></I> are the <I><A HREF="s.htm#same">same</A></I>.)
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/copy-lis.htm"><B>copy-list</B></A>.
  3. (of an <I><A HREF="a.htm#associationlist">association list</A></I> <I>A</I> with <I><A HREF="e.htm#element">elements</A></I> <I>A<SUB>i</SUB></I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="l.htm#list">list</A></I> <I>B</I> with <I><A HREF="e.htm#element">elements</A></I> <I>B<SUB>i</SUB></I>, each of which is
     <A HREF="../dictentr/nil.htm"><B>nil</B></A>&nbsp;if <I>A<SUB>i</SUB></I> is <A HREF="../dictentr/nil.htm"><B>nil</B></A>, or else a <I><A HREF="#copy">copy</A></I> of the <I><A HREF="#cons">cons</A></I> <I>A<SUB>i</SUB></I>.
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/copy-ali.htm"><B>copy-alist</B></A>.
  4. (of a <I><A HREF="t.htm#tree">tree</A></I> <I>T</I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="t.htm#tree">tree</A></I> with the <I><A HREF="s.htm#same">same</A></I> <I>leaves</I> as <I>T</I>.
     See the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/copy-tre.htm"><B>copy-tree</B></A>.
  5. (of a <I><A HREF="r.htm#randomstate">random state</A></I> <I>R</I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="r.htm#randomstate">random state</A></I> that, if used as an argument to
     to the <I><A HREF="f.htm#function">function</A></I> <A HREF="../dictentr/random.htm"><B>random</B></A> would produce the same series of "random"
     values as <I>R</I> would produce.

  6. (of a <I><A HREF="s.htm#structure">structure</A></I> <I>S</I>)
     a <I><A HREF="f.htm#fresh">fresh</A></I> <I><A HREF="s.htm#structure">structure</A></I> that has the same <I><A HREF="t.htm#type">type</A></I> as <I>S</I>,
     and that has slot values, each of which is the <I><A HREF="s.htm#same">same</A></I> as the 
     corresponding slot value of <I>S</I>.

  (Note that since the difference between a <I><A HREF="#cons">cons</A></I>, a <I><A HREF="l.htm#list">list</A></I>, 
   and a <I><A HREF="t.htm#tree">tree</A></I> is a matter of "view" or "intention,"  there can
   be no general-purpose <I><A HREF="f.htm#function">function</A></I> which, based solely on the <I><A HREF="t.htm#type">type</A></I>
   of an <I><A HREF="o.htm#object">object</A></I>, can determine which of these distinct meanings is 
   intended.  The distinction rests solely on the basis of the text description
   within this document.  For example, phrases like "a <I><A HREF="#copy">copy</A></I> of the
   given <I><A HREF="l.htm#list">list</A></I>" or "copy of the <I><A HREF="l.htm#list">list</A></I> <I>x</I>" imply the
   second definition.)

<P ID="75">
<A NAME="correctable">
<DT><B>correctable:</B><DD> <I>adj.</I>&nbsp;(of an <I><A HREF="e.htm#error">error</A></I>)
  1. (by a <I><A HREF="r.htm#restart">restart</A></I> other than <A HREF="../dictentr/abort.htm"><B>abort</B></A> 
      that has been associated with the <I><A HREF="e.htm#error">error</A></I>)
     capable of being corrected by invoking that <I><A HREF="r.htm#restart">restart</A></I>.
     The function <A HREF="../dictentr/cerror.htm"><B>cerror</B></A> signals an error 
	       that is correctable by the <A HREF="../dictentr/continue.htm"><B>continue</B></A> <I><A HREF="r.htm#restart">restart</A></I>.

     (Note that correctability is not a property of an
      <I><A HREF="e.htm#error">error</A></I> <I><A HREF="o.htm#object">object</A></I>, but rather a property of the 
      <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I> that is in effect when the
      <I><A HREF="e.htm#error">error</A></I> is <I>signaled</I>.
      Specifically, the <I><A HREF="r.htm#restart">restart</A></I> is "associated with" 
      the <I><A HREF="e.htm#error">error</A></I> <I><A HREF="#condition">condition</A></I> <I><A HREF="o.htm#object">object</A></I>.
      See Section <A HREF="../subsubsu/associat.htm">9.1.4.2.4 Associating a Restart with a Condition</A>.)

  2. (when no specific <I><A HREF="r.htm#restart">restart</A></I> is mentioned)
     <I><A HREF="#correctable">correctable</A></I><SUB>1</SUB> by at least one <I><A HREF="r.htm#restart">restart</A></I>.
     <A HREF="../dictentr/import.htm"><B>import</B></A> signals a correctable error of <I><A HREF="t.htm#type">type</A></I> <A HREF="../dictentr/package0.htm"><B>package-error</B></A>
	       if any of the imported symbols has the same name as
	        some distinct symbol already accessible in the package.

<P ID="76">
<A NAME="currentinputbase">
<DT><B>current input base:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="r.htm#radix">radix</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/read-bas.htm"><B>*read-base*</B></A> in that <I><A HREF="e.htm#environment">environment</A></I>, 
  and that is the default <I><A HREF="r.htm#radix">radix</A></I> employed by the <I>Lisp reader</I>
  and its related <I><A HREF="f.htm#function">functions</A></I>.

<P ID="77">
<A NAME="currentlogicalblock">
<DT><B>current logical block:</B><DD> <I>n.</I>&nbsp;  the context of the innermost lexically enclosing use of <A HREF="../dictentr/pprint-l.htm"><B>pprint-logical-block</B></A>.

<P ID="78">
<A NAME="currentoutputbase">
<DT><B>current output base:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="r.htm#radix">radix</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/print-ba.htm"><B>*print-base*</B></A> in that <I><A HREF="e.htm#environment">environment</A></I>, 
  and that is the default <I><A HREF="r.htm#radix">radix</A></I> employed by the <I>Lisp printer</I>
  and its related <I><A HREF="f.htm#function">functions</A></I>.

<P ID="79">
<A NAME="currentpackage">
<DT><B>current package:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="p.htm#package">package</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/package.htm"><B>*package*</B></A> in that <I><A HREF="e.htm#environment">environment</A></I>, 
  and that is the default <I><A HREF="p.htm#package">package</A></I> employed by the <I>Lisp reader</I> 
  and <I>Lisp printer</I>, and their related <I><A HREF="f.htm#function">functions</A></I>.

<P ID="80">

<A NAME="currentpprintdispatchtable">
<DT><B>current pprint dispatch table:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="p.htm#pprintdispatchtable">pprint dispatch table</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/print-pp.htm"><B>*print-pprint-dispatch*</B></A>
  in that <I><A HREF="e.htm#environment">environment</A></I>, and that is the default <I><A HREF="p.htm#pprintdispatchtable">pprint dispatch table</A></I>
  employed by the <I><A HREF="p.htm#prettyprinter">pretty printer</A></I>.

<P ID="81">
<A NAME="currentrandomstate">
<DT><B>current random state:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="r.htm#randomstate">random state</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/random-0.htm"><B>*random-state*</B></A> in that <I><A HREF="e.htm#environment">environment</A></I>, 
  and that is the default <I><A HREF="r.htm#randomstate">random state</A></I> employed by <A HREF="../dictentr/random.htm"><B>random</B></A>.

<P ID="82">
<A NAME="currentreadtable">
<DT><B>current readtable:</B><DD> <I>n.</I>&nbsp;(in a <I><A HREF="d.htm#dynamicenvironment">dynamic environment</A></I>)
  the <I><A HREF="r.htm#readtable">readtable</A></I> that is the <I><A HREF="v.htm#value">value</A></I> of <A HREF="../dictentr/readtabl.htm"><B>*readtable*</B></A> in that <I><A HREF="e.htm#environment">environment</A></I>, 
  and that affects the way in which <I><A HREF="e.htm#expression">expressions</A></I><SUB>2</SUB> are parsed 
  into <I><A HREF="o.htm#object">objects</A></I> by the <I>Lisp reader</I>.

<P ID="83"></DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="b.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/glossary.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="d.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
