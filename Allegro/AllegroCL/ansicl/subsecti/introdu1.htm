<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : introdu1.htm
  representing node       : Introduction to Methods  [ID:NO-542]
                 of class : SubSection  [ID:SC-4]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:22 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>Introduction to Methods</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="SubSection_Introduction_542"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="introdu3.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/genericf.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="agreemen.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/objects.htm">7 Objects</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/genericf.htm">7.6 Generic Functions and Methods</A>

</FONT>
<H3 ID="2">7.6.2   Introduction to Methods</H3>

<I><A HREF="../glossary/m.htm#method">Methods</A></I> define the class-specific or identity-specific behavior
and operations of a <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I>. 

<P ID="3">


A <I><A HREF="../glossary/m.htm#method">method</A></I> <I><A HREF="../glossary/o.htm#object">object</A></I> 

is associated with 

     <I><A HREF="../glossary/c.htm#code">code</A></I> that implements the method's behavior,
     a sequence of <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> 
       that specify when the given <I><A HREF="../glossary/m.htm#method">method</A></I> is applicable,
     a <I><A HREF="../glossary/l.htm#lambdalist">lambda list</A></I>,
 and a sequence of <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> that are used by the method combination
       facility to distinguish among <I><A HREF="../glossary/m.htm#method">methods</A></I>.

<P ID="4">
A method object is not a function and cannot be invoked as a function. 
Various mechanisms in the object system&nbsp;take a method object and invoke its method
function, as is the case when a generic function is invoked.  When this
occurs it is said that the method is invoked or called.

<P ID="5">
A method-defining form contains the <I><A HREF="../glossary/c.htm#code">code</A></I> that is to be run when the
arguments to the generic function cause the method that it defines to
be invoked.  When a method-defining form is evaluated, a method object
is created and one of four actions is taken:

<P ID="6">
<UL>

<P ID="7">
<LI ID="8"> If a <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> of the given name already exists
and if a <I>method object</I> already exists that agrees with the new one on
<I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> and <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I>, the new <I>method object</I> replaces
the old one.  For a definition of one method agreeing with another on
<I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> and <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I>, 
see Section <A HREF="agreemen.htm">7.6.3 Agreement on Parameter Specializers and Qualifiers</A>.

<P ID="9">
<LI ID="10"> If a <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> of the given name already exists
and if there is no <I>method object</I> that agrees with the new one on
<I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> and <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I>, the existing <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I>
<I><A HREF="../glossary/o.htm#object">object</A></I> is modified to contain the new <I><A HREF="../glossary/m.htm#method">method</A></I> <I><A HREF="../glossary/o.htm#object">object</A></I>.

<P ID="11">
<LI ID="12"> If the given <I><A HREF="../glossary/n.htm#name">name</A></I> names an <I><A HREF="../glossary/o.htm#ordinaryfunction">ordinary function</A></I>, a <I><A HREF="../glossary/m.htm#macro">macro</A></I>,
or a <I><A HREF="../glossary/s.htm#specialoperator">special operator</A></I>, an error is signaled.

<P ID="13">
<LI ID="14"> Otherwise a <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> is created with the <I><A HREF="../glossary/m.htm#method">method</A></I>
specified by the <I><A HREF="../glossary/m.htm#methoddefiningform">method-defining form</A></I>.

</UL>

<P ID="15">
If the <I><A HREF="../glossary/l.htm#lambdalist">lambda list</A></I> of a new <I><A HREF="../glossary/m.htm#method">method</A></I> is not
<I><A HREF="../glossary/c.htm#congruent">congruent</A></I> with the <I><A HREF="../glossary/l.htm#lambdalist">lambda list</A></I> of the <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I>,
an error is signaled.  If a <I><A HREF="../glossary/m.htm#methoddefiningoperator">method-defining operator</A></I> that cannot specify
<I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> options creates a new <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I>, 
a <I><A HREF="../glossary/l.htm#lambdalist">lambda list</A></I> for that <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> is derived from the
<I><A HREF="../glossary/l.htm#lambdalist">lambda list</A></I> of the <I><A HREF="../glossary/m.htm#method">method</A></I> in the <I><A HREF="../glossary/m.htm#methoddefiningform">method-defining form</A></I> in such a way
as to be <I><A HREF="../glossary/c.htm#congruent">congruent</A></I> with it.  For a discussion of <B><I>congruence</I></B>,
see Section <A HREF="congruen.htm">7.6.4 Congruent Lambda-lists for all Methods of a Generic Function</A>.

<P ID="16">
Each method has a <I><A HREF="../glossary/s.htm#specializedlambdalist">specialized lambda list</A></I>, which determines
when that method can be applied.  A <I><A HREF="../glossary/s.htm#specializedlambdalist">specialized lambda list</A></I> is like
an <I><A HREF="../glossary/o.htm#ordinarylambdalist">ordinary lambda list</A></I> except that a specialized parameter
may occur instead of the name of a required parameter.  A specialized parameter
is a list <TT>(<I>variable-name</I> <I>parameter-specializer-name</I>)</TT>,
where <I>parameter-specializer-name</I> is one of the following:

<P ID="17">
<UL>

<P ID="18">
<LI ID="19">a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>

<P ID="20">
denotes a <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> which is the <I><A HREF="../glossary/c.htm#class">class</A></I> 
named by that <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="21">



<LI ID="22">a <I><A HREF="../glossary/c.htm#class">class</A></I>

<P ID="23">
denotes a <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> which is the <I><A HREF="../glossary/c.htm#class">class</A></I> itself.


<P ID="24">
<LI ID="25"><TT>(eql <I>form</I>)</TT>

<P ID="26">
denotes a <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> which satisfies the <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>
<TT>(eql <I>object</I>)</TT>, where <I>object</I> is the 
result of evaluating <I>form</I>.  The form <I>form</I> is evaluated in 
the lexical environment in which the method-defining form is evaluated.
Note that <I>form</I> is evaluated only once, at the time the method is
defined, not each time the generic function is called.
</UL>

<P ID="27">
<I><A HREF="../glossary/p.htm#parameterspecializername">Parameter specializer names</A></I> are used in macros intended as the
user-level interface (<A HREF="../dictentr/defmetho.htm"><B>defmethod</B></A>), while <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I>
are used in the functional interface.

<P ID="28">
Only required parameters may be specialized, and there must be a
<I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> for each required parameter.  For notational
simplicity, if some required parameter in a <I><A HREF="../glossary/s.htm#specializedlambdalist">specialized lambda list</A></I> in
a method-defining form is simply a variable name, its 
<I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> defaults to the <I><A HREF="../glossary/c.htm#class">class</A></I> <A HREF="../dictentr/t.htm"><B>t</B></A>.

<P ID="29">
Given a generic function and a set of arguments, an applicable
method is a method for that generic function whose parameter
specializers are satisfied by their corresponding arguments.  The
following definition specifies what it means for a method to be
applicable and for an argument to satisfy a <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I>.

<P ID="30">

Let <I><IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> A<SUB>1</SUB>,  ... , A<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14></I> be the required
arguments to a generic function in order. Let <I><IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> P<SUB>1</SUB>,
 ... , P<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14></I> be the <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> corresponding to
the required parameters of the method <I>M</I> in order.  The method <I>M</I> is
applicable when each <I>A<SUB>i</SUB></I> is of the <I><A HREF="../glossary/t.htm#type">type</A></I> specified by 
the <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> <I>P<SUB>i</SUB></I>.



Because every valid <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I> is 
also a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>, the <I><A HREF="../glossary/f.htm#function">function</A></I> <A HREF="../dictentr/typep.htm"><B>typep</B></A> can be used during method
selection to determine whether an argument satisfies a <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializer</A></I>.  

<P ID="31">
A method all of whose <I><A HREF="../glossary/p.htm#parameterspecializer">parameter specializers</A></I> are 
the <I><A HREF="../glossary/c.htm#class">class</A></I> <A HREF="../dictentr/t.htm"><B>t</B></A> is called a <B><I>default method</I></B>; it is always applicable but
may be shadowed by a more specific method.

<P ID="32">
Methods can have <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I>, which give the method combination
procedure a way to distinguish among methods.  A method that has one
or more <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> is called a <I><A HREF="../glossary/q.htm#qualifiedmethod">qualified method</A></I>.
A method with no <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> is called an <I><A HREF="../glossary/u.htm#unqualifiedmethod">unqualified method</A></I>. 
A <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I> is any <I><A HREF="../glossary/n.htm#nonlist">non-list</A></I>.



The <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> defined by the <I><A HREF="../glossary/s.htm#standardized">standardized</A></I> method combination types 
are <I><A HREF="../glossary/s.htm#symbol">symbols</A></I>.

<P ID="33">
In this specification, the terms "<I><A HREF="../glossary/p.htm#primarymethod">primary method</A></I>" and 
"<I><A HREF="../glossary/a.htm#auxiliarymethod">auxiliary method</A></I>" are used to partition <I><A HREF="../glossary/m.htm#method">methods</A></I>
within a method combination type according to their intended use.  
In standard method combination, <I><A HREF="../glossary/p.htm#primarymethod">primary methods</A></I> are 
<I><A HREF="../glossary/u.htm#unqualifiedmethod">unqualified methods</A></I> 
and <I><A HREF="../glossary/a.htm#auxiliarymethod">auxiliary methods</A></I> are methods with a single <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I> 
that is one of <TT>:around</TT>, <TT>:before</TT>, or <TT>:after</TT>.
<I><A HREF="../glossary/m.htm#method">Methods</A></I> with these <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> are called <I><A HREF="../glossary/a.htm#aroundmethod">around methods</A></I>,
<I><A HREF="../glossary/b.htm#beforemethod">before methods</A></I>, and <I><A HREF="../glossary/a.htm#aftermethod">after methods</A></I>, respectively.
When a method combination type is defined using the short form of

<A HREF="../dictentr/define-m.htm"><B>define-method-combination</B></A>, <I><A HREF="../glossary/p.htm#primarymethod">primary methods</A></I> are 
methods qualified with the name of the type of method combination, 
and auxiliary methods have the <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I> <TT>:around</TT>.
Thus the terms "<I><A HREF="../glossary/p.htm#primarymethod">primary method</A></I>" and "<I><A HREF="../glossary/a.htm#auxiliarymethod">auxiliary method</A></I>"
have only a relative definition within a given method combination type.

<P ID="34">


<P ID="35">
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="introdu3.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/genericf.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="agreemen.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
