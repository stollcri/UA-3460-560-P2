<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : built_in.htm
  representing node       : Built_in Method Combination Types  [ID:NO-554]
                 of class : SubSubSection  [ID:SC-5]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:20 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>Built-in Method Combination Types</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="SubSubSectio_Built_in_Met_554"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="declarat.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../subsecti/methodse.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="../subsecti/inherit1.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/objects.htm">7 Objects</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/genericf.htm">7.6 Generic Functions and Methods</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../subsecti/methodse.htm">7.6.6 Method Selection and Combination</A>

</FONT>
<H3 ID="2">7.6.6.4   Built-in Method Combination Types</H3>

The object system&nbsp;provides a set of built-in method combination types.  To
specify that a generic function is to use one of these method
combination types, the name of the method combination type is given as
the argument to the <TT>:method-combination</TT> option to 
<A HREF="../dictentr/defgener.htm"><B>defgeneric</B></A> or to the <TT>:method-combination</TT> option to any of the
other operators that specify generic function options.

<P ID="3">
The names of the built-in  method combination types are listed in the next figure.











<P ID="4">
<P ID="5">
<TABLE WIDTH="100%" BORDER=1 CELLSPACING=0 CELLPADDING=5>
<CAPTION ALIGN=BOTTOM>Built-in Method Combination Types</CAPTION>

  <tr>
    <td>+</td>
    <td>append</td>
    <td>max</td>
    <td>nconc</td>
    <td>progn</td>
  </tr>
  <tr>
    <td>and</td>
    <td>list</td>
    <td>min</td>
    <td>or</td>
    <td>standard</td>
  </tr>
</TABLE>


<P ID="6">
The semantics of the <B>standard</B> built-in method combination type is
described in Section <A HREF="standard.htm">7.6.6.2 Standard Method Combination</A>.  The other
built-in method combination types are called simple built-in method
combination types.

<P ID="7">
The simple built-in method combination types act as though they were
defined by the short form of <A HREF="../dictentr/define-m.htm"><B>define-method-combination</B></A>.  
They recognize two roles for <I><A HREF="../glossary/m.htm#method">methods</A></I>:

<P ID="8">
<UL>

<P ID="9">
<LI ID="10"> An <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I> has the keyword symbol 
<TT>:around</TT> as its sole <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I>.  The meaning of 
<TT>:around</TT> <I><A HREF="../glossary/m.htm#method">methods</A></I> is the same as in standard method combination.
Use of the functions <A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A> and <A HREF="../dictentr/next-met.htm"><B>next-method-p</B></A>
is supported in <I><A HREF="../glossary/a.htm#aroundmethod">around methods</A></I>.

<P ID="11">
<LI ID="12"> A primary method has the name of the method combination
type as its sole <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I>.  For example, the built-in method
combination type <TT>and</TT> recognizes methods whose sole <I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I> is
<TT>and</TT>; these are primary methods. Use of the functions 
<A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A> and <A HREF="../dictentr/next-met.htm"><B>next-method-p</B></A> is not supported 
in <I><A HREF="../glossary/p.htm#primarymethod">primary methods</A></I>.

</UL>

<P ID="13">
The semantics of the simple built-in method combination types is as
follows:

<P ID="14">
<UL>
<LI ID="15">                                                    
If there are any <I><A HREF="../glossary/a.htm#aroundmethod">around methods</A></I>, the most specific <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I>
is called.   It supplies the value or values of the <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I>. 

<P ID="16">
<LI ID="17"> Inside the body of an <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I>, the function
<A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A> can be used to call the <I><A HREF="../glossary/n.htm#nextmethod">next method</A></I>.



The <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> <A HREF="../dictentr/no-next-.htm"><B>no-next-method</B></A> is invoked if 
<A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A> is used and there is no applicable method to call.
The <I><A HREF="../glossary/f.htm#function">function</A></I> <A HREF="../dictentr/next-met.htm"><B>next-method-p</B></A> may be used to determine whether a
<I><A HREF="../glossary/n.htm#nextmethod">next method</A></I> exists. When the <I><A HREF="../glossary/n.htm#nextmethod">next method</A></I> returns, 
the <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I> can execute more code,
perhaps based on the returned value or values.

<P ID="18">
<LI ID="19"> If an <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I> invokes <A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A>,
the next most specific <I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I> is
called, if one is applicable.  If there are no <I><A HREF="../glossary/a.htm#aroundmethod">around methods</A></I>
or if <A HREF="../dictentr/call-nex.htm"><B>call-next-method</B></A> is called by the least specific
<I><A HREF="../glossary/a.htm#aroundmethod">around method</A></I>, a Lisp form derived from the name of the built-in
method combination type and from the list of applicable primary
methods is evaluated to produce the value of the generic function.
Suppose the name of the method combination type is <I>operator</I>













and the call to the generic function is of the form

<P ID="20">
<P ID="21"><I>(<NOBR><I>generic-function</I></NOBR>&nbsp;a<SUB>1</SUB> ...  a<SUB>n</SUB>)</I>

<P ID="22">
<LI ID="23"> Let <I>M<SUB>1</SUB>, ... ,M<SUB>k</SUB></I> be the applicable primary methods
in order; then the derived Lisp form is

<P ID="24">
<I></I>(<NOBR><I>operator</I></NOBR>&nbsp;<IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> M<SUB>1</SUB>
&nbsp;a<SUB>1</SUB> ...  a<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14> ... <IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14>
M<SUB>k</SUB>&nbsp;a<SUB>1</SUB> ...  a<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14>)<I></I>

<P ID="25">
<LI ID="26"> If the expression <I><IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> M<SUB>i</SUB> &nbsp;a<SUB>1</SUB> ...  
a<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14></I> is
evaluated, the method <I>M<SUB>i</SUB></I> will be applied to the arguments
<I>a<SUB>1</SUB> ...  a<SUB>n</SUB></I>.  
For example,

if <I>operator</I> is <TT>or</TT>,
the expression <I><IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> M<SUB>i</SUB> &nbsp;a<SUB>1</SUB> ...  
a<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14></I> is
evaluated only if <I><IMG SRC="../images/angle_l.gif" BORDER=0 WIDTH=7 HEIGHT=14> M<SUB>j</SUB> &nbsp;a<SUB>1</SUB> ...  
a<SUB>n</SUB><IMG SRC="../images/angle_r.gif" BORDER=0 WIDTH=7 HEIGHT=14></I>,
<I>1 &lt;=  j&lt;i</I>, returned <TT>nil</TT>.

<P ID="27">
<LI ID="28"> The default order for the primary methods is 
<TT>:most-specific-first</TT>.  However, the order can be reversed by supplying
<TT>:most-specific-last</TT> as the second argument to the <TT>:method-combination</TT> option.
</UL>

<P ID="29">
The simple built-in method combination types require exactly one
<I><A HREF="../glossary/q.htm#qualifier">qualifier</A></I> per method.  An error is signaled if there are applicable
methods with no <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> or with <I><A HREF="../glossary/q.htm#qualifier">qualifiers</A></I> that are not supported
by the method combination type. An error is signaled if there are
applicable <I><A HREF="../glossary/a.htm#aroundmethod">around methods</A></I> and no applicable primary
methods.



<P ID="30">


<P ID="31">
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="declarat.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../subsecti/methodse.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="../subsecti/inherit1.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
