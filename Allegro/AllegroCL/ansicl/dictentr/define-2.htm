<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : define_2.htm
  representing node       : define_compiler_macro  [ID:NO-291]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:55:16 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>define-compiler-macro</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_define_compi_291"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="compiler.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="defmacro.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/evaluati.htm">3 Evaluation and Compilation</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio21.htm">3.8 Dictionary Evaluation and Compilation</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">3.8.9  define-compiler-macro</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Macro</I></FONT></TD>
</TR></TABLE>
<DL>


<P ID="3">


<P ID="4">
<DT><B>Syntax:</B><DD>

<B>define-compiler-macro</B>
<I>name lambda-list [[{<I>declaration</I>}* $|$ <I>documentation</I>]] {<I>form</I>}*</I><BR>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>name</I>
<P ID="5">
<DT><B>Arguments and Values:</B><DD>

<I>name</I> - a <I><A HREF="../glossary/f.htm#functionname">function name</A></I>.

<P ID="6">
<I>lambda-list</I> - a <I><A HREF="../glossary/m.htm#macrolambdalist">macro lambda list</A></I>.

<P ID="7">
<I>declaration</I> - a <A HREF="declare.htm"><B>declare</B></A> <I><A HREF="../glossary/e.htm#expression">expression</A></I>; not evaluated.

<P ID="8">
<I>documentation</I> - a <I><A HREF="../glossary/s.htm#string">string</A></I>; not evaluated.

<P ID="9">
<I>form</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="10">
<DT><B>Description:</B><DD>


<P ID="11">
This is the normal mechanism for defining a <I><A HREF="../glossary/c.htm#compilermacrofunction">compiler macro function</A></I>.
Its manner of definition is the same as for <A HREF="defmacro.htm"><B>defmacro</B></A>; the only
differences are:

<P ID="12">
<UL>
<LI ID="13"> The <I>name</I> can be a <I><A HREF="../glossary/f.htm#functionname">function name</A></I> naming
 any <I><A HREF="../glossary/f.htm#function">function</A></I> or <I><A HREF="../glossary/m.htm#macro">macro</A></I>.

<P ID="14">
<LI ID="15"> The expander function is installed as a <I><A HREF="../glossary/c.htm#compilermacrofunction">compiler macro function</A></I>
 for the <I>name</I>, rather than as a <I><A HREF="../glossary/m.htm#macrofunction">macro function</A></I>.

<P ID="16">
<LI ID="17"> The <A HREF="../subsecti/macrolam.htm"><B>&amp;whole</B></A> argument is bound to the form argument that 
 is passed to the <I><A HREF="../glossary/c.htm#compilermacrofunction">compiler macro function</A></I>.  The remaining lambda-list 
 parameters are specified as if this form contained the function name in the
 <I><A HREF="../glossary/c.htm#car">car</A></I> and the actual arguments in the <I><A HREF="../glossary/c.htm#cdr">cdr</A></I>, but if the <I><A HREF="../glossary/c.htm#car">car</A></I> 
 of the actual form is the symbol <A HREF="funcall.htm"><B>funcall</B></A>, then the destructuring of 
 the arguments is actually performed using its <I><A HREF="../glossary/c.htm#cddr">cddr</A></I> instead.

<P ID="18">
<LI ID="19">
 <I>Documentation</I> is attached as a <I><A HREF="../glossary/d.htm#documentationstring">documentation string</A></I> 
    to <I>name</I> (as kind <B>compiler-macro</B>)
and to the <I><A HREF="../glossary/c.htm#compilermacrofunction">compiler macro function</A></I>.


<P ID="20">
<LI ID="21"> Unlike an ordinary <I><A HREF="../glossary/m.htm#macro">macro</A></I>, a <I><A HREF="../glossary/c.htm#compilermacro">compiler macro</A></I>
 can decline to provide an expansion merely by returning a form that is
 the <I><A HREF="../glossary/s.htm#same">same</A></I> as the original (which can be obtained by using
 <A HREF="../subsecti/macrolam.htm"><B>&amp;whole</B></A>).
</UL> 

<P ID="22">
<DT><B>Examples:</B><DD>

<PRE ID="23">
 (defun square (x) (expt x 2)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SQUARE
 (define-compiler-macro square (&whole form arg)
   (if (atom arg)
       `(expt ,arg 2)
       (case (car arg)
         (square (if (= (length arg) 2)
                     `(expt ,(nth 1 arg) 4)
                     form))
         (expt   (if (= (length arg) 3)
                     (if (numberp (nth 2 arg))
                         `(expt ,(nth 1 arg) ,(* 2 (nth 2 arg)))
                         `(expt ,(nth 1 arg) (* 2 ,(nth 2 arg))))
                     form))
         (otherwise `(expt ,arg 2))))) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SQUARE
 (square (square 3)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 81
 (macroexpand '(square x)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (SQUARE X), <I><A HREF="../glossary/f.htm#false">false</A></I>
 (funcall (compiler-macro-function 'square) '(square x) nil)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (EXPT X 2)
 (funcall (compiler-macro-function 'square) '(square (square x)) nil)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (EXPT X 4)
 (funcall (compiler-macro-function 'square) '(funcall #'square x) nil)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (EXPT X 2)

 (defun distance-positional (x1 y1 x2 y2)
   (sqrt (+ (expt (- x2 x1) 2) (expt (- y2 y1) 2))))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  DISTANCE-POSITIONAL
 (defun distance (&key (x1 0) (y1 0) (x2 x1) (y2 y1))
   (distance-positional x1 y1 x2 y2))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  DISTANCE
 (define-compiler-macro distance (&whole form
                                  &rest key-value-pairs
                                  &key (x1 0  x1-p)
                                       (y1 0  y1-p)
                                       (x2 x1 x2-p)
                                       (y2 y1 y2-p)
                                  &allow-other-keys
                                  &environment env)
   (flet ((key (n) (nth (* n 2) key-value-pairs))
          (arg (n) (nth (1+ (* n 2)) key-value-pairs))
          (simplep (x)
            (let ((expanded-x (macroexpand x env)))
              (or (constantp expanded-x env)
                  (symbolp expanded-x)))))
     (let ((n (/ (length key-value-pairs) 2)))
       (multiple-value-bind (x1s y1s x2s y2s others)
           (loop for (key) on key-value-pairs by #'cddr
                 count (eq key ':x1) into x1s
                 count (eq key ':y1) into y1s
                 count (eq key ':x2) into x2s
                 count (eq key ':y1) into y2s
                 count (not (member key '(:x1 :x2 :y1 :y2)))
                   into others
                 finally (return (values x1s y1s x2s y2s others)))
         (cond ((and (= n 4)
                     (eq (key 0) :x1)
                     (eq (key 1) :y1)
                     (eq (key 2) :x2)
                     (eq (key 3) :y2))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (if x1-p (and (= x1s 1) (simplep x1)) t)
                     (if y1-p (and (= y1s 1) (simplep y1)) t)
                     (if x2-p (and (= x2s 1) (simplep x2)) t)
                     (if y2-p (and (= y2s 1) (simplep y2)) t)
                     (zerop others))
                `(distance-positional ,x1 ,y1 ,x2 ,y2))
               ((and (&lt; x1s 2) (&lt; y1s 2) (&lt; x2s 2) (&lt; y2s 2)
                     (zerop others))
                (let ((temps (loop repeat n collect (gensym))))
                  `(let ,(loop for i below n
                               collect (list (nth i temps) (arg i)))
                     (distance
                       ,@(loop for i below n
                               append (list (key i) (nth i temps)))))))
               (t form))))))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  DISTANCE
 (dolist (form
           '((distance :x1 (setq x 7) :x2 (decf x) :y1 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (decf x) :x2 (decf x) :y2 (decf x))
             (distance :x1 (setq x 7) :y1 (incf x))
             (distance :x1 (setq x 7) :y1 (incf x) :x1 (incf x))
             (distance :x1 a1 :y1 b1 :x2 a2 :y2 b2)
             (distance :x1 a1 :x2 a2 :y1 b1 :y2 b2)
             (distance :x1 a1 :y1 b1 :z1 c1 :x2 a2 :y2 b2 :z2 c2)))
   (print (funcall (compiler-macro-function 'distance) form nil)))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(LET ((#:G6558 (SETQ X 7))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>      (#:G6559 (DECF X))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>      (#:G6560 (DECF X))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>      (#:G6561 (DECF X)))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>  (DISTANCE :X1 #:G6558 :X2 #:G6559 :Y1 #:G6560 :Y2 #:G6561)) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(DISTANCE-POSITIONAL (SETQ X 7) (DECF X) (DECF X) (DECF X)) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(LET ((#:G6567 (SETQ X 7))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>      (#:G6568 (INCF X)))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>  (DISTANCE :X1 #:G6567 :Y1 #:G6568)) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(DISTANCE :X1 (SETQ X 7) :Y1 (INCF X) :X1 (INCF X)) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(DISTANCE-POSITIONAL A1 B1 A2 B2) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(DISTANCE-POSITIONAL A1 B1 A2 B2) 
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(DISTANCE :X1 A1 :Y1 B1 :Z1 C1 :X2 A2 :Y2 B2 :Z2 C2) 
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL
</PRE>

<P ID="24">
<DT><B>See Also:</B><DD>

<A HREF="compiler.htm"><B>compiler-macro-function</B></A>,
<A HREF="defmacro.htm"><B>defmacro</B></A>,
<A HREF="document.htm"><B>documentation</B></A>,
Section <A HREF="../subsecti/syntacti.htm">3.4.11 Syntactic Interaction of Documentation Strings and Declarations</A>

<P ID="25">
<DT><B>Notes:</B><DD>

The consequences of writing a <I><A HREF="../glossary/c.htm#compilermacro">compiler macro</A></I> definition for a function
in the <TT>common-lisp</TT> <I><A HREF="../glossary/p.htm#package">package</A></I> are undefined; it is quite possible that in some
<I><A HREF="../glossary/i.htm#implementation">implementations</A></I> such an attempt would override an equivalent or equally
important definition.  In general, it is recommended that a programmer only
write <I><A HREF="../glossary/c.htm#compilermacro">compiler macro</A></I> definitions for <I><A HREF="../glossary/f.htm#function">functions</A></I> he or she personally 
maintains--writing a <I><A HREF="../glossary/c.htm#compilermacro">compiler macro</A></I> definition for a function maintained
elsewhere is normally considered a violation of traditional rules of modularity
and data abstraction.

<P ID="26">


<P ID="27">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="compiler.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="defmacro.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
