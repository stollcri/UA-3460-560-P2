<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : make_loa.htm
  representing node       : make_load_form  [ID:NO-577]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:15 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>make-load-form</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_make_load_fo_577"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="make-in0.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio17.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="make-lo0.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/objects.htm">7 Objects</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio17.htm">7.7 Dictionary of Objects</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">7.7.21  make-load-form</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Standard Generic Function</I></FONT></TD>
</TR></TABLE>
<DL>




<P ID="3">
<DT><B>Syntax:</B><DD>

<B>make-load-form</B>
<I>object <TT>&amp;optional</TT> environment</I>
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>
<I>creation-form</I>[, <I>initialization-form</I>]

<P ID="4">
<DT><B>Method Signatures:</B><DD>

<B>make-load-form</B>
<I>(<I>object</I> <A HREF="standar2.htm"><B>standard-object</B></A>)  <TT>&amp;optional</TT> environment</I>
<P ID="5">

<B>make-load-form</B>
<I>(<I>object</I> <A HREF="structur.htm"><B>structure-object</B></A>) <TT>&amp;optional</TT> environment</I>
<P ID="6">

<B>make-load-form</B>
<I>(<I>object</I> <A HREF="conditio.htm"><B>condition</B></A>)        <TT>&amp;optional</TT> environment</I>
<P ID="7">

<B>make-load-form</B>
<I>(<I>object</I> <A HREF="class.htm"><B>class</B></A>)            <TT>&amp;optional</TT> environment</I>
<P ID="8">
<DT><B>Arguments and Values:</B><DD>

<I>object</I> - an <I><A HREF="../glossary/o.htm#object">object</A></I>.

<P ID="9">

<I>environment</I> - an <I><A HREF="../glossary/e.htm#environmentobject">environment object</A></I>.

<P ID="10">
<I>creation-form</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="11">
<I>initialization-form</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="12">
<DT><B>Description:</B><DD>

The <I><A HREF="../glossary/g.htm#genericfunction">generic function</A></I> <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> creates and returns 
one or two <I><A HREF="../glossary/f.htm#form">forms</A></I>,
     a <I>creation-form</I>
 and an <I>initialization-form</I>,
that enable <A HREF="load.htm"><B>load</B></A> to construct an <I><A HREF="../glossary/o.htm#object">object</A></I>
equivalent to <I>object</I>.

<I>Environment</I> is an <I><A HREF="../glossary/e.htm#environmentobject">environment object</A></I> 
corresponding to the <I><A HREF="../glossary/l.htm#lexicalenvironment">lexical environment</A></I> 
in which the <I><A HREF="../glossary/f.htm#form">forms</A></I> will be processed.

<P ID="13">
The <I><A HREF="../glossary/f.htm#filecompiler">file compiler</A></I> calls <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> to process certain
<I>classes</I> of <I>literal objects</I>; see Section <A HREF="../subsubse/addition.htm">3.2.4.4 Additional Constraints on Externalizable Objects</A>.

<P ID="14">

<I><A HREF="../glossary/c.htm#conformingprogram">Conforming programs</A></I> may call <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> directly,
providing <I>object</I> is a <I><A HREF="../glossary/g.htm#generalizedinstance">generalized instance</A></I> of



<A HREF="standar2.htm"><B>standard-object</B></A>, <A HREF="structur.htm"><B>structure-object</B></A>, 
or <A HREF="conditio.htm"><B>condition</B></A>.

<P ID="15">
The creation form is a <I><A HREF="../glossary/f.htm#form">form</A></I> that, when evaluated at
<A HREF="load.htm"><B>load</B></A> time, should return an <I><A HREF="../glossary/o.htm#object">object</A></I> that 
is equivalent to <I>object</I>.  The exact meaning of
equivalent depends on the <I><A HREF="../glossary/t.htm#type">type</A></I> of <I><A HREF="../glossary/o.htm#object">object</A></I> 
and is up to the programmer who defines a <I><A HREF="../glossary/m.htm#method">method</A></I> for
<A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>;
see Section <A HREF="../subsecti/literalo.htm">3.2.4 Literal Objects in Compiled Files</A>.



<P ID="16">
The initialization form is a <I><A HREF="../glossary/f.htm#form">form</A></I> that, when evaluated at <A HREF="load.htm"><B>load</B></A> time, 
should perform further initialization of the <I><A HREF="../glossary/o.htm#object">object</A></I>.  
The value returned by the initialization form is ignored.



If <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>
returns only one value, 
the initialization form is <A HREF="nil.htm"><B>nil</B></A>, which has no effect.
If <I>object</I> appears as a constant in the initialization form,
at <A HREF="load.htm"><B>load</B></A> time it will be replaced by the equivalent <I><A HREF="../glossary/o.htm#object">object</A></I> 
constructed by the creation form;
this is how the further initialization gains access to the <I><A HREF="../glossary/o.htm#object">object</A></I>.

<P ID="17">



Both the <I>creation-form</I> and the <I>initialization-form</I> may contain references
to any <I><A HREF="../glossary/e.htm#externalizableobject">externalizable object</A></I>.
However, there must not be any circular dependencies in creation forms.
An example of a circular dependency is when the creation form for the
object <TT>X</TT> contains a reference to the object <TT>Y</TT>,
and the creation form for the object <TT>Y</TT> contains a reference to the object <TT>X</TT>.  



Initialization forms are not subject to any restriction against circular dependencies, 
which is the reason that initialization forms exist; 
see the example of circular data structures below.

<P ID="18">
The creation form for an <I><A HREF="../glossary/o.htm#object">object</A></I> is always <I>evaluated</I> before the
initialization form for that <I><A HREF="../glossary/o.htm#object">object</A></I>.  When either the creation form or
the initialization form references other <I><A HREF="../glossary/o.htm#object">objects</A></I> that have not been
referenced earlier in the <I><A HREF="../glossary/f.htm#file">file</A></I> being <I>compiled</I>, the <I><A HREF="../glossary/c.htm#compiler">compiler</A></I> ensures
that all of the referenced <I><A HREF="../glossary/o.htm#object">objects</A></I> have been created before <I>evaluating</I>
the referencing <I><A HREF="../glossary/f.htm#form">form</A></I>.  When the referenced <I><A HREF="../glossary/o.htm#object">object</A></I> is of a <I><A HREF="../glossary/t.htm#type">type</A></I> which

the <I><A HREF="../glossary/f.htm#filecompiler">file compiler</A></I> processes using <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>,
this involves <I>evaluating</I>
the creation form returned for it.  (This is the reason for the
prohibition against circular references among creation forms).

<P ID="19">
Each initialization form is <I>evaluated</I> as soon as possible after its
associated creation form, as determined by data flow.  If the
initialization form for an <I><A HREF="../glossary/o.htm#object">object</A></I> does not reference any other <I><A HREF="../glossary/o.htm#object">objects</A></I>
not referenced earlier in the <I><A HREF="../glossary/f.htm#file">file</A></I> and processed by 

the <I><A HREF="../glossary/f.htm#filecompiler">file compiler</A></I>
using
<A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>, the initialization form is evaluated immediately after
the creation form.  If a creation or initialization form <I>F</I> does contain
references to such <I><A HREF="../glossary/o.htm#object">objects</A></I>, the creation forms for those other objects
are evaluated before <I>F</I>, and the initialization forms for those other
<I><A HREF="../glossary/o.htm#object">objects</A></I> are also evaluated before <I>F</I> whenever they do not depend on the
<I><A HREF="../glossary/o.htm#object">object</A></I> created or initialized by <I>F</I>.  Where these rules do not uniquely
determine an order of <I><A HREF="../glossary/e.htm#evaluation">evaluation</A></I> between two creation/initialization
forms, the order of <I><A HREF="../glossary/e.htm#evaluation">evaluation</A></I> is unspecified.

<P ID="20">
  While these creation and initialization forms are being evaluated, the
  <I><A HREF="../glossary/o.htm#object">objects</A></I> are possibly in an uninitialized state, 
analogous to the state
  of an <I><A HREF="../glossary/o.htm#object">object</A></I> 
between the time it has been created by <A HREF="allocate.htm"><B>allocate-instance</B></A>
  and it has been processed fully by 
<A HREF="initiali.htm"><B>initialize-instance</B></A>.  Programmers
  writing <I><A HREF="../glossary/m.htm#method">methods</A></I> for 
<A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> must take care in manipulating
  <I><A HREF="../glossary/o.htm#object">objects</A></I> not to depend on 
<I><A HREF="../glossary/s.htm#slot">slots</A></I> that have not yet been initialized.

<P ID="21">
  It is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I>
whether <A HREF="load.htm"><B>load</B></A> calls <A HREF="eval.htm"><B>eval</B></A> on the 
<I><A HREF="../glossary/f.htm#form">forms</A></I> or does some
  other operation that has an equivalent effect.  For example, the
  <I><A HREF="../glossary/f.htm#form">forms</A></I> might be translated into different but equivalent 
<I><A HREF="../glossary/f.htm#form">forms</A></I> and
  then evaluated, they might be compiled and the resulting functions
  called by <A HREF="load.htm"><B>load</B></A>, 
or they might be interpreted by a special-purpose
function different from <A HREF="eval.htm"><B>eval</B></A>.  
All that is required is that the
  effect be equivalent to evaluating the <I><A HREF="../glossary/f.htm#form">forms</A></I>.

<P ID="22">

The <I><A HREF="../glossary/m.htm#method">method</A></I> <I><A HREF="../glossary/s.htm#specialized">specialized</A></I> on <A HREF="class.htm"><B>class</B></A> returns a creation
<I><A HREF="../glossary/f.htm#form">form</A></I> using the <I><A HREF="../glossary/n.htm#name">name</A></I> of the <I><A HREF="../glossary/c.htm#class">class</A></I> if the <I><A HREF="../glossary/c.htm#class">class</A></I> has
a <I><A HREF="../glossary/p.htm#propername">proper name</A></I> in <I>environment</I>, signaling an error of <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="error.htm"><B>error</B></A>
if it does not have a <I><A HREF="../glossary/p.htm#propername">proper name</A></I>.  <I><A HREF="../glossary/e.htm#evaluation">Evaluation</A></I> of the creation
<I><A HREF="../glossary/f.htm#form">form</A></I> uses the <I><A HREF="../glossary/n.htm#name">name</A></I> to find the <I><A HREF="../glossary/c.htm#class">class</A></I> with that
<I><A HREF="../glossary/n.htm#name">name</A></I>, as if by <I>calling</I> <A HREF="find-cla.htm"><B>find-class</B></A>.  If a <I><A HREF="../glossary/c.htm#class">class</A></I>
with that <I><A HREF="../glossary/n.htm#name">name</A></I> has not been defined, then a <I><A HREF="../glossary/c.htm#class">class</A></I> may be
computed in an <I><A HREF="../glossary/i.htm#implementationdefined">implementation-defined</A></I> manner.  If a <I><A HREF="../glossary/c.htm#class">class</A></I>
cannot be returned as the result of <I>evaluating</I> the creation
<I><A HREF="../glossary/f.htm#form">form</A></I>, then an error of <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="error.htm"><B>error</B></A> is signaled.

<P ID="23">

Both <I><A HREF="../glossary/c.htm#conformingimplementation">conforming implementations</A></I> and <I><A HREF="../glossary/c.htm#conformingprogram">conforming programs</A></I> may
further <I><A HREF="../glossary/s.htm#specialize">specialize</A></I> <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>.

<P ID="24">
<DT><B>Examples:</B><DD>

<PRE ID="25">
 (defclass obj ()
    ((x :initarg :x :reader obj-x)
     (y :initarg :y :reader obj-y)
     (dist :accessor obj-dist)))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #&lt;STANDARD-CLASS OBJ 250020030&gt;
 (defmethod shared-initialize :after ((self obj) slot-names &rest keys)
   (declare (ignore slot-names keys))
   (unless (slot-boundp self 'dist)
     (setf (obj-dist self)
           (sqrt (+ (expt (obj-x self) 2) (expt (obj-y self) 2))))))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #&lt;STANDARD-METHOD SHARED-INITIALIZE (:AFTER) (OBJ T) 26266714&gt;
 (defmethod make-load-form ((self obj) &optional environment)
   (declare (ignore environment))
   ;; Note that this definition only works because X and Y do not
   ;; contain information which refers back to the object itself.
   ;; For a more general solution to this problem, see revised example below.
   `(make-instance ',(class-of self)
                   :x ',(obj-x self) :y ',(obj-y self)))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #&lt;STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 26267532&gt;
 (setq obj1 (make-instance 'obj :x 3.0 :y 4.0)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #&lt;OBJ 26274136&gt;
 (obj-dist obj1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 5.0
 (make-load-form obj1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (MAKE-INSTANCE 'OBJ :X '3.0 :Y '4.0)
</PRE>

<P ID="26">
In the above example, an equivalent <I><A HREF="../glossary/i.htm#instance">instance</A></I> of <TT>obj</TT> is
reconstructed by using the values of two of its <I><A HREF="../glossary/s.htm#slot">slots</A></I>.  
The value of the third <I><A HREF="../glossary/s.htm#slot">slot</A></I> is derived from those two values.

<P ID="27">

Another way to write the <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> <I><A HREF="../glossary/m.htm#method">method</A></I>
in that example is to use <A HREF="make-lo0.htm"><B>make-load-form-saving-slots</B></A>.
The code it generates might yield a slightly different result 
from the <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> <I><A HREF="../glossary/m.htm#method">method</A></I> shown above,
but the operational effect will be the same.  For example:

<P ID="28">

<PRE ID="29">
 ;; Redefine method defined above.
 (defmethod make-load-form ((self obj) &optional environment)
    (make-load-form-saving-slots self
                                 :slot-names '(x y)
                                 :environment environment))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #&lt;STANDARD-METHOD MAKE-LOAD-FORM (OBJ) 42755655&gt;
 ;; Try MAKE-LOAD-FORM on object created above.
 (make-load-form obj1)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (ALLOCATE-INSTANCE '#&lt;STANDARD-CLASS OBJ 250020030&gt;),
    (PROGN
      (SETF (SLOT-VALUE '#&lt;OBJ 26274136&gt; 'X) '3.0)
      (SETF (SLOT-VALUE '#&lt;OBJ 26274136&gt; 'Y) '4.0)
      (INITIALIZE-INSTANCE '#&lt;OBJ 26274136&gt;))
</PRE>

<P ID="30">

In the following example, <I><A HREF="../glossary/i.htm#instance">instances</A></I> of <TT>my-frob</TT> are "interned" 
in some way.  An equivalent <I><A HREF="../glossary/i.htm#instance">instance</A></I> is reconstructed by using the 
value of the name slot as a key for searching existing <I><A HREF="../glossary/o.htm#object">objects</A></I>.
In this case the programmer has chosen to create a new <I><A HREF="../glossary/o.htm#object">object</A></I> 
if no existing <I><A HREF="../glossary/o.htm#object">object</A></I> is found; alternatively an error could 
have been signaled in that case.

<P ID="31">

<PRE ID="32">
 (defclass my-frob ()
    ((name :initarg :name :reader my-name)))
 (defmethod make-load-form ((self my-frob) &optional environment)
   (declare (ignore environment))
   `(find-my-frob ',(my-name self) :if-does-not-exist :create))
</PRE>

<P ID="33">

In the following example, the data structure to be dumped is circular, 
because each parent has a list of its children and each child has a reference
back to its parent.  If <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> is called on one   
<I><A HREF="../glossary/o.htm#object">object</A></I> in such a structure,  the creation form creates an equivalent 
<I><A HREF="../glossary/o.htm#object">object</A></I> and fills in the children slot, which forces creation of equivalent
<I><A HREF="../glossary/o.htm#object">objects</A></I> for all of its children, grandchildren, etc.  At this point
none of the parent <I><A HREF="../glossary/s.htm#slot">slots</A></I> have been filled in.  
The initialization form fills in the parent <I><A HREF="../glossary/s.htm#slot">slot</A></I>, which forces creation 
of an equivalent <I><A HREF="../glossary/o.htm#object">object</A></I> for the parent if it was not already created.
Thus the entire tree is recreated at <A HREF="load.htm"><B>load</B></A> time.  
At compile time, <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> is called once for each <I><A HREF="../glossary/o.htm#object">object</A></I> 
in the tree.  
All of the creation forms are evaluated,
in <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> order,
and then all of the initialization forms are evaluated, 
also in <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> order.

<P ID="34">

<PRE ID="35">
 (defclass tree-with-parent () ((parent :accessor tree-parent)
                                (children :initarg :children)))
 (defmethod make-load-form ((x tree-with-parent) &optional environment)
   (declare (ignore environment))
   (values
     ;; creation form
     `(make-instance ',(class-of x) :children ',(slot-value x 'children))
     ;; initialization form
     `(setf (tree-parent ',x) ',(slot-value x 'parent))))
</PRE>

<P ID="36">

In the following example, the data structure to be dumped has no special
properties and an equivalent structure can be reconstructed
simply by reconstructing the <I><A HREF="../glossary/s.htm#slot">slots</A></I>' contents.

<P ID="37">

<PRE ID="38">
 (defstruct my-struct a b c)
 (defmethod make-load-form ((s my-struct) &optional environment)
    (make-load-form-saving-slots s :environment environment))
</PRE>

<P ID="39">
<DT><B>Exceptional Situations:</B><DD>


The <I><A HREF="../glossary/m.htm#method">methods</A></I> <I><A HREF="../glossary/s.htm#specialized">specialized</A></I> on 
     <A HREF="standar2.htm"><B>standard-object</B></A>,
     <A HREF="structur.htm"><B>structure-object</B></A>,
 and <A HREF="conditio.htm"><B>condition</B></A>
all signal an error of <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="error.htm"><B>error</B></A>.

<P ID="40">

It is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> whether <I>calling</I>
<A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> on a <I><A HREF="../glossary/g.htm#generalizedinstance">generalized instance</A></I> of a
<I><A HREF="../glossary/s.htm#systemclass">system class</A></I> signals an error or returns creation and
initialization <I><A HREF="../glossary/f.htm#form">forms</A></I>.

<P ID="41">
<DT><B>See Also:</B><DD>

<A HREF="compile-.htm"><B>compile-file</B></A>, 
<A HREF="make-lo0.htm"><B>make-load-form-saving-slots</B></A>,
Section <A HREF="../subsubse/addition.htm">3.2.4.4 Additional Constraints on Externalizable Objects</A>
Section <A HREF="../section/evaluati.htm">3.1 Evaluation</A>,
Section <A HREF="../section/compilat.htm">3.2 Compilation</A>

<P ID="42">
<DT><B>Notes:</B><DD>

The <I><A HREF="../glossary/f.htm#filecompiler">file compiler</A></I>

calls <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A> in specific circumstances
detailed in Section <A HREF="../subsubse/addition.htm">3.2.4.4 Additional Constraints on Externalizable Objects</A>.


<P ID="43">

Some <I><A HREF="../glossary/i.htm#implementation">implementations</A></I> may provide facilities for defining new
<I>subclasses</I> of <I>classes</I> which are specified as
<I>system classes</I>.  (Some likely candidates include
<A HREF="generic-.htm"><B>generic-function</B></A>, <A HREF="method.htm"><B>method</B></A>, and <A HREF="stream.htm"><B>stream</B></A>).  Such
<I><A HREF="../glossary/i.htm#implementation">implementations</A></I> should document how the <I><A HREF="../glossary/f.htm#filecompiler">file compiler</A></I> processes
<I><A HREF="../glossary/i.htm#instance">instances</A></I> of such <I>classes</I> when encountered as
<I>literal objects</I>, and should document any relevant <I><A HREF="../glossary/m.htm#method">methods</A></I>
for <A HREF="#DictEntry_make_load_fo_577"><B>make-load-form</B></A>.

<P ID="44">


<P ID="45">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="make-in0.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio17.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="make-lo0.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
