<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : eval_whe.htm
  representing node       : eval_when  [ID:NO-287]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:55:17 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>eval-when</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_eval_when_287"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="eval.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="load-tim.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/evaluati.htm">3 Evaluation and Compilation</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio21.htm">3.8 Dictionary Evaluation and Compilation</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">3.8.5  eval-when</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Special Operator</I></FONT></TD>
</TR></TABLE>
<DL>
      

<P ID="3">
<DT><B>Syntax:</B><DD>

<B>eval-when</B>
<I>({<I>situation</I>}*) {<I>form</I>}*</I>
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>{<I>result</I>}*</I>
<P ID="4">
<DT><B>Arguments and Values:</B><DD>


<I>situation</I> - One of the <I><A HREF="../glossary/s.htm#symbol">symbols</A></I> 
		    <TT>:compile-toplevel</TT>,
		    <TT>:load-toplevel</TT>,
		    <TT>:execute</TT>,
		    <A HREF="compile.htm"><B>compile</B></A>,
		    <A HREF="load.htm"><B>load</B></A>, or
		    <A HREF="eval.htm"><B>eval</B></A>.

<P ID="5">
The use of <A HREF="eval.htm"><B>eval</B></A>, <A HREF="compile.htm"><B>compile</B></A>, and <A HREF="load.htm"><B>load</B></A> is deprecated.






<P ID="6">
<I>forms</I> - an <I><A HREF="../glossary/i.htm#implicitprogn">implicit progn</A></I>.

<P ID="7">
<I>results</I> - the <I><A HREF="../glossary/v.htm#value">values</A></I> of the <I><A HREF="../glossary/f.htm#form">forms</A></I> if they are executed,
		  or <A HREF="nil.htm"><B>nil</B></A>&nbsp;if they are not. 

<P ID="8">
<DT><B>Description:</B><DD>




The body of an <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> form is processed as an <I><A HREF="../glossary/i.htm#implicitprogn">implicit progn</A></I>, 
but only in the <I>situations</I> listed.  



<P ID="9">
The use of the <I>situations</I> <TT>:compile-toplevel</TT> (or <TT>compile</TT>) and
<TT>:load-toplevel</TT> (or <TT>load</TT>) controls whether and when <I><A HREF="../glossary/e.htm#evaluation">evaluation</A></I>
occurs when <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> appears as a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I> in
code processed by <A HREF="compile-.htm"><B>compile-file</B></A>.  See Section <A HREF="../subsecti/filecomp.htm">3.2.3 File Compilation</A>.

<P ID="10">
The use of the <I>situation</I> <TT>:execute</TT> (or <TT>eval</TT>) controls whether
evaluation occurs for other <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> <I><A HREF="../glossary/f.htm#form">forms</A></I>; that is, 
those that are not <I><A HREF="../glossary/t.htm#toplevelform">top level forms</A></I>, or those in code processed by
<A HREF="eval.htm"><B>eval</B></A> or <A HREF="compile.htm"><B>compile</B></A>.  If the <TT>:execute</TT> situation is
specified in such a <I><A HREF="../glossary/f.htm#form">form</A></I>, then the body <I>forms</I> are processed as 
an <I><A HREF="../glossary/i.htm#implicitprogn">implicit progn</A></I>; otherwise, the <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I>
returns <A HREF="nil.htm"><B>nil</B></A>.

<P ID="11">


<P ID="12">


<A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> 
normally appears as a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>, but it is meaningful
for it to appear as a <I><A HREF="../glossary/n.htm#nontoplevelform">non-top-level form</A></I>.
However, the compile-time side
effects described in Section <A HREF="../section/compilat.htm">3.2 Compilation</A>
only take place when <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> appears as a  
<I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>.


<P ID="13">
<DT><B>Examples:</B><DD>


One example of the use of <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> is that for the 
compiler to be able to read a file properly when it uses user-defined
<I><A HREF="../glossary/r.htm#readermacro">reader macros</A></I>, it is necessary to write

<P ID="14">
<PRE ID="15">
 (eval-when (:compile-toplevel :load-toplevel :execute)
   (set-macro-character #\$ #'(lambda (stream char)
                                (declare (ignore char))
                                (list 'dollar (read stream))))) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  T
</PRE>
This causes the call to <A HREF="set-macr.htm"><B>set-macro-character</B></A> to be executed
in the compiler's execution environment, thereby modifying its
reader syntax table.

<P ID="16">
<PRE ID="17">
;;;     The EVAL-WHEN in this case is not at toplevel, so only the :EXECUTE
;;;     keyword is considered. At compile time, this has no effect.
;;;     At load time (if the LET is at toplevel), or at execution time
;;;     (if the LET is embedded in some other form which does not execute
;;;     until later) this sets (SYMBOL-FUNCTION 'FOO1) to a function which
;;;     returns 1.
 (let ((x 1))
   (eval-when (:execute :load-toplevel :compile-toplevel)
     (setf (symbol-function 'foo1) #'(lambda () x))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting
;;;     (SYMBOL-FUNCTION 'FOO2) to a function which returns 2.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (let ((x 2))
     (eval-when (:execute :load-toplevel :compile-toplevel)
       (setf (symbol-function 'foo2) #'(lambda () x)))))

;;;     If this expression occurs at the toplevel of a file to be compiled,
;;;     it has BOTH a compile time AND a load-time effect of setting the
;;;     function cell of FOO3 to a function which returns 3.
 (eval-when (:execute :load-toplevel :compile-toplevel)
   (setf (symbol-function 'foo3) #'(lambda () 3)))
 
;;; #4: This always does nothing. It simply returns NIL.
 (eval-when (:compile-toplevel)
   (eval-when (:compile-toplevel) 
     (print 'foo4)))


;;;     If this form occurs at toplevel of a file to be compiled, FOO5 is
;;;     printed at compile time. If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:compile-toplevel) 
   (eval-when (:execute)
     (print 'foo5)))
 
;;;     If this form occurs at toplevel of a file to be compiled, FOO6 is
;;;     printed at compile time.  If this form occurs in a non-top-level
;;;     position, nothing is printed at compile time. Regardless of context,
;;;     nothing is ever printed at load time or execution time.
 (eval-when (:execute :load-toplevel)
   (eval-when (:compile-toplevel)
     (print 'foo6)))
</PRE>

<P ID="18">
<DT><B>See Also:</B><DD>

<A HREF="compile-.htm"><B>compile-file</B></A>, Section <A HREF="../section/compilat.htm">3.2 Compilation</A>

<P ID="19">
<DT><B>Notes:</B><DD>


The following effects are logical consequences of the definition of 
<A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A>:

<P ID="20">
<UL>
<LI ID="21">
Execution of a single <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A>
expression executes the body code at most once.

<P ID="22">
<LI ID="23">
<I><A HREF="../glossary/m.htm#macro">Macros</A></I> intended for use in <I><A HREF="../glossary/t.htm#toplevelform">top level forms</A></I> 
should be written so that side-effects are done by the <I><A HREF="../glossary/f.htm#form">forms</A></I>
in the macro expansion.  The macro-expander itself should not do 
the side-effects.

<P ID="24">
For example:

<P ID="25">
       Wrong:  

<P ID="26">
<PRE ID="27">
 (defmacro foo ()
   (really-foo)
   `(really-foo))
</PRE>

<P ID="28">
      Right:  

<P ID="29">
<PRE ID="30">
 (defmacro foo ()
   `(eval-when (:compile-toplevel :execute :load-toplevel) (really-foo)))
</PRE>

<P ID="31">
Adherence to this convention means that such <I><A HREF="../glossary/m.htm#macro">macros</A></I> behave
intuitively when appearing as <I><A HREF="../glossary/n.htm#nontoplevelform">non-top-level forms</A></I>.

<P ID="32">
<LI ID="33">
Placing a variable binding around an <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> reliably 
captures the binding because the compile-time-too mode cannot occur 
 (<I>i.e.</I>,  introducing a variable binding means that the <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A>
      is not a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>).
For example,

<P ID="34">
<PRE ID="35">
 (let ((x 3))
   (eval-when (:execute :load-toplevel :compile-toplevel) (print x)))
</PRE>

<P ID="36">
prints <TT>3</TT> 
at execution (<I>i.e.</I>,  load) time, and does not print anything at
compile time.  This is important so that expansions of 
<A HREF="defun.htm"><B>defun</B></A> and 
<A HREF="defmacro.htm"><B>defmacro</B></A> 
can be done in terms of <A HREF="#DictEntry_eval_when_287"><B>eval-when</B></A> and can correctly capture
the <I><A HREF="../glossary/l.htm#lexicalenvironment">lexical environment</A></I>.

<P ID="37">
<PRE ID="38">
 (defun bar (x) (defun foo () (+ x 3)))
</PRE>

<P ID="39">
might expand into

<P ID="40">
<PRE ID="41">
 (defun bar (x) 
   (progn (eval-when (:compile-toplevel) 
            (compiler::notice-function-definition 'foo '(x)))
          (eval-when (:execute :load-toplevel)
            (setf (symbol-function 'foo) #'(lambda () (+ x 3))))))
</PRE>

<P ID="42">
which would be treated by the above rules the same as

<P ID="43">
<PRE ID="44">
 (defun bar (x) 
   (setf (symbol-function 'foo) #'(lambda () (+ x 3))))
</PRE>

<P ID="45">
when the definition of <TT>bar</TT> is not a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>.
</UL>

<P ID="46">


<P ID="47">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="eval.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="load-tim.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
