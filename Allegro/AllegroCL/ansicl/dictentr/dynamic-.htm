<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : dynamic_.htm
  representing node       : dynamic_extent  [ID:NO-302]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:55:12 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>dynamic-extent</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_dynamic_exte_302"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="ignoreig.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="type.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/evaluati.htm">3 Evaluation and Compilation</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio21.htm">3.8 Dictionary Evaluation and Compilation</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">3.8.20  dynamic-extent</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Declaration</I></FONT></TD>
</TR></TABLE>
<DL>


<P ID="3">
<DT><B>Syntax:</B><DD>

<TT>(dynamic-extent [[{<I>var</I>}* |
		               (<A HREF="function.htm"><B>function</B></A> <I>fn</I>)<SUP>*</SUP>]])</TT>

<P ID="4">
<DT><B>Arguments:</B><DD>

<I>var</I> - a <I><A HREF="../glossary/v.htm#variable">variable</A></I> <I><A HREF="../glossary/n.htm#name">name</A></I>.

<P ID="5">
<I>fn</I> - a <I><A HREF="../glossary/f.htm#function">function</A></I> <I><A HREF="../glossary/n.htm#name">name</A></I>.

<P ID="6">
<DT><B>Valid Context:</B><DD>

<I><A HREF="../glossary/d.htm#declaration">declaration</A></I>



<P ID="7">
<DT><B>Binding Types Affected:</B><DD>

<I><A HREF="../glossary/v.htm#variable">variable</A></I>, <I><A HREF="../glossary/f.htm#function">function</A></I>

<P ID="8">
<DT><B>Description:</B><DD>



<P ID="9">



In some containing <I><A HREF="../glossary/f.htm#form">form</A></I>, <I>F</I>, this declaration
asserts for each <I>var<SUB>i</SUB></I> (which need not be bound by <I>F</I>),
and for each <I><A HREF="../glossary/v.htm#value">value</A></I> <I>v<SUB>ij</SUB></I> that <I>var<SUB>i</SUB></I> takes on,
and for each <I><A HREF="../glossary/o.htm#object">object</A></I> <I>x<SUB>ijk</SUB></I> that 


is
an <I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible part</A></I> of <I>v<SUB>ij</SUB></I> at any time when


<I>v<SUB>ij</SUB></I>
becomes the value of <I>var<SUB>i</SUB></I>,
that just after the execution of <I>F</I> terminates, 
<I>x<SUB>ijk</SUB></I> is either <I><A HREF="../glossary/i.htm#inaccessible">inaccessible</A></I>
(if <I>F</I> established a <I><A HREF="../glossary/b.htm#binding">binding</A></I> for <I>var<SUB>i</SUB></I>)
or still an <I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible part</A></I> of the current value of 
<I>var<SUB>i</SUB></I> (if <I>F</I> did not establish a <I><A HREF="../glossary/b.htm#binding">binding</A></I> 
for <I>var<SUB>i</SUB></I>).



The same relation holds for each <I>fn<SUB>i</SUB></I>, 
except that the <I><A HREF="../glossary/b.htm#binding">bindings</A></I> are in the <I><A HREF="../glossary/f.htm#function">function</A></I> <I><A HREF="../glossary/n.htm#namespace">namespace</A></I>.


<P ID="10">
The compiler is permitted to use


this information in any way that is appropriate to the <I><A HREF="../glossary/i.htm#implementation">implementation</A></I>
and that does not conflict with the semantics of <I>Common Lisp</I>.

<P ID="11">
<A HREF="#DictEntry_dynamic_exte_302"><B>dynamic-extent</B></A> declarations can be <I><A HREF="../glossary/f.htm#freedeclaration">free declarations</A></I>
or <I><A HREF="../glossary/b.htm#bounddeclaration">bound declarations</A></I>.

<P ID="12">


The <I>vars</I> and <I>fns</I> named in a <A HREF="#DictEntry_dynamic_exte_302"><B>dynamic-extent</B></A> 
declaration must not refer to <I><A HREF="../glossary/s.htm#symbolmacro">symbol macro</A></I> or <I><A HREF="../glossary/m.htm#macro">macro</A></I> bindings.


<P ID="13">
<DT><B>Examples:</B><DD>

Since stack allocation of the initial value entails knowing at the
<I><A HREF="../glossary/o.htm#object">object</A></I>'s creation time that the <I><A HREF="../glossary/o.htm#object">object</A></I> can be 
<I><A HREF="../glossary/s.htm#stackallocated">stack-allocated</A></I>,  it is not generally useful to make a 
<A HREF="#DictEntry_dynamic_exte_302"><B>dynamic-extent</B></A> <I><A HREF="../glossary/d.htm#declaration">declaration</A></I> for <I><A HREF="../glossary/v.htm#variable">variables</A></I>
which have no lexically apparent initial value. 
For example, it is probably useful to write:

<P ID="14">
<PRE ID="15">
 (defun f ()
   (let ((x (list 1 2 3)))
     (declare (dynamic-extent x))
         ...))
</PRE>

<P ID="16">
This would permit those compilers that wish to do so to <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I>
the list held by the local variable <TT>x</TT>.  It is permissible,
but in practice probably not as useful, to write:

<P ID="17">
<PRE ID="18">
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
</PRE>

<P ID="19">
Most compilers would probably not <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I> the <I><A HREF="../glossary/a.htm#argument">argument</A></I>
to <TT>g</TT> in <TT>f</TT> because it would be a modularity violation for the compiler
to assume facts about <TT>g</TT> from within <TT>f</TT>.   Only an implementation that 
was willing to be responsible for recompiling <TT>f</TT> if the definition of <TT>g</TT> 
changed incompatibly could legitimately <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I> the <I><A HREF="../glossary/l.htm#list">list</A></I> 
argument to <TT>g</TT> in <TT>f</TT>.

<P ID="20">
Here is another example:

<P ID="21">
<PRE ID="22">
 (declaim (inline g))
 (defun g (x) (declare (dynamic-extent x)) ...)
 (defun f () (g (list 1 2 3)))
 
 (defun f ()
   (flet ((g (x) (declare (dynamic-extent x)) ...))
     (g (list 1 2 3))))
 
</PRE>
In the previous example, some compilers might determine that optimization was 
possible and others might not.

<P ID="23">
A variant of this is the so-called "stack allocated rest list"
that can be achieved (in implementations supporting the optimization) by:

<P ID="24">
<PRE ID="25">
 (defun f (&rest x)
   (declare (dynamic-extent x))
   ...)
</PRE>

<P ID="26">
Note that although the initial value of <TT>x</TT> is not explicit, the <TT>f</TT>
function is responsible for assembling the list <TT>x</TT> from the passed arguments,
so the <TT>f</TT> function can be optimized by the compiler to construct a 
<I><A HREF="../glossary/s.htm#stackallocated">stack-allocated</A></I> list instead of a heap-allocated list in implementations
that support such.

<P ID="27">
In the following example,

<P ID="28">
<PRE ID="29">
 (let ((x (list 'a1 'b1 'c1))
       (y (cons 'a2 (cons 'b2 (cons 'c2 nil)))))
   (declare (dynamic-extent x y))
   ...)
</PRE>
The <I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible parts</A></I> of <TT>x</TT> are three 
<I>conses</I>,  and the <I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible parts</A></I>
of <TT>y</TT> are three other <I>conses</I>.  
None of the symbols <TT>a1</TT>,  <TT>b1</TT>,  <TT>c1</TT>,  <TT>a2</TT>,
<TT>b2</TT>,  <TT>c2</TT>,  or <A HREF="nil.htm"><B>nil</B></A>&nbsp;is an
<I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible part</A></I> of <TT>x</TT> or <TT>y</TT> because each
is <I><A HREF="../glossary/i.htm#interned">interned</A></I> and hence <I><A HREF="../glossary/a.htm#accessible">accessible</A></I> by the <I><A HREF="../glossary/p.htm#package">package</A></I>
(or <I><A HREF="../glossary/p.htm#package">packages</A></I>) in which it is <I><A HREF="../glossary/i.htm#interned">interned</A></I>.
However, if a freshly allocated <I><A HREF="../glossary/u.htm#uninterned">uninterned</A></I> <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> had
been used, it would have been an <I><A HREF="../glossary/o.htm#otherwiseinaccessiblepart">otherwise inaccessible part</A></I> of
the <I><A HREF="../glossary/l.htm#list">list</A></I> which contained it.

<P ID="30">
<PRE ID="31">
;; In this example, the implementation is permitted to <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I>
;; the list that is bound to X.
 (let ((x (list 1 2 3)))
   (declare (dynamic-extent x))
   (print x)
   :done)
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>(1 2 3)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> :DONE
 
;; In this example, the list to be bound to L can be <I><A HREF="../glossary/s.htm#stackallocated">stack-allocated</A></I>.
 (defun zap (x y z)
   (do ((l (list x y z) (cdr l)))
       ((null l))
     (declare (dynamic-extent l))
     (prin1 (car l)))) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  ZAP
 (zap 1 2 3)
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>123
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL

;; Some implementations might open-code LIST-ALL-PACKAGES in a way
;; that permits using <I>stack allocation</I> of the list to be bound to L.
 (do ((l (list-all-packages) (cdr l)))
     ((null l))
   (declare (dynamic-extent l))
   (let ((name (package-name (car l))))
     (when (string-search "COMMON-LISP" name) (print name))))
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>"COMMON-LISP"
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9>"COMMON-LISP-USER"
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL

;; Some implementations might have the ability to <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I> 
;; rest lists.  A declaration such as the following should be a cue
;; to such implementations that stack-allocation of the rest list
;; would be desirable.
 (defun add (&rest x)
   (declare (dynamic-extent x))
   (apply #'+ x)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  ADD
 (add 1 2 3) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 6

 (defun zap (n m)
   ;; Computes (RANDOM (+ M 1)) at relative speed of roughly O(N).
   ;; It may be slow, but with a good compiler at least it
   ;; doesn't waste much heap storage.  :-}
   (let ((a (make-array n)))
     (declare (dynamic-extent a))
     (dotimes (i n) 
       (declare (dynamic-extent i))
       (setf (aref a i) (random (+ i 1))))
     (aref a m))) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  ZAP
 (&lt; (zap 5 3) 3) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
</PRE>

<P ID="32">
The following are in error, since the value of <TT>x</TT> is used outside of its
<I><A HREF="../glossary/e.htm#extent">extent</A></I>:

<P ID="33">
<PRE ID="34">
 (length (list (let ((x (list 1 2 3)))  ; Invalid
                (declare (dynamic-extent x))
                x)))

 (progn (let ((x (list 1 2 3)))  ; Invalid
          (declare (dynamic-extent x))
          x)
        nil)
</PRE>


<P ID="35">
<DT><B>See Also:</B><DD>

<A HREF="declare.htm"><B>declare</B></A>
<P ID="36">
<DT><B>Notes:</B><DD>

The most common optimization is to <I><A HREF="../glossary/s.htm#stackallocate">stack allocate</A></I> the 
initial value of the <I><A HREF="../glossary/o.htm#object">objects</A></I> named by the <I>vars</I>. 

<P ID="37">
It is permissible for an implementation to simply ignore this declaration.

<P ID="38">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="ignoreig.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio21.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="type.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
