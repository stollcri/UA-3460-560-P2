<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : defstruc.htm
  representing node       : defstruct  [ID:NO-600]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:06 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>defstruct</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_defstruct_600"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="../section/dictio16.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio16.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="copy-str.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/structur.htm">8 Structures</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio16.htm">8.1 Dictionary of Structures</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">8.1.1  defstruct</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Macro</I></FONT></TD>
</TR></TABLE>
<DL>


<P ID="3">
<DT><B>Syntax:</B><DD>

<B>defstruct</B>
<I>name-and-options [documentation] {<I>slot-description</I>}*</I><BR>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>structure-name</I>
<P ID="4">

name-and-options::= structure-name |
			  (structure-name [[<IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>options]])<P ID="5">


options::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>conc-name-option          |<BR>
                 {<I>constructor-option</I>}*    |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>copier-option             |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>include-option            |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>initial-offset-option     |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>named-option	          |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>predicate-option          |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>printer-option            |<BR>
                 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>type-option<P ID="6">


conc-name-option::= <TT>:conc-name</TT>         | 
		   	  (<TT>:conc-name</TT>) |
		   	  (<TT>:conc-name</TT> <I>conc-name</I>)<P ID="7">

constructor-option::= <TT>:constructor</TT>         |<BR>
			    (<TT>:constructor</TT>) |<BR>
			    (<TT>:constructor</TT> <I>constructor-name</I>) |<BR>
			    (<TT>:constructor</TT> 
				   <I>constructor-name</I>
				   <I>constructor-arglist</I>)<P ID="8">

copier-option::= <TT>:copier</TT>         | 
		       (<TT>:copier</TT>) |
		       (<TT>:copier</TT> <I>copier-name</I>)<P ID="9">

predicate-option::= <TT>:predicate</TT>         |
			  (<TT>:predicate</TT>) |
			  (<TT>:predicate</TT> <I>predicate-name</I>)<P ID="10">

include-option::= (<TT>:include</TT> <I>included-structure-name</I>
					     {<I>slot-description</I>}*)<P ID="11">


printer-option::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>print-object-option | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>print-function-option<P ID="12">

print-object-option::= (<TT>:print-object</TT> <I>printer-name</I>) |
			     (<TT>:print-object</TT>)<P ID="13">


print-function-option::= (<TT>:print-function</TT> <I>printer-name</I>) |
			       (<TT>:print-function</TT>)<P ID="14">

type-option::= (<TT>:type</TT> <I>type</I>)<P ID="15">

named-option::= <TT>:named</TT><P ID="16">

initial-offset-option::= (<TT>:initial-offset</TT> <I>initial-offset</I>)<P ID="17">


slot-description::= <I>slot-name</I> | <BR>
			  (<I>slot-name</I>
				 [<I>slot-initform</I>
				       [[<IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>slot-option]]])<P ID="18">

slot-option::= <TT>:type</TT> <I>slot-type</I> | <BR>
		     <TT>:read-only</TT> <I>slot-read-only-p</I><P ID="19">

<P ID="20">
<DT><B>Arguments and Values:</B><DD>

<I>conc-name</I> - a <I><A HREF="../glossary/s.htm#stringdesignator">string designator</A></I>.

<P ID="21">
<I>constructor-arglist</I> - a <I><A HREF="../glossary/b.htm#boalambdalist">boa lambda list</A></I>.

<P ID="22">
<I>constructor-name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="23">
<I>copier-name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="24">
<I>included-structure-name</I> - an already-defined <I><A HREF="../glossary/s.htm#structurename">structure name</A></I>.


Note that a <I><A HREF="../glossary/d.htm#derivedtype">derived type</A></I> is not permissible, 
even if it would expand into a <I><A HREF="../glossary/s.htm#structurename">structure name</A></I>.



<P ID="25">
<I>initial-offset</I> - a non-negative <I><A HREF="../glossary/i.htm#integer">integer</A></I>.

<P ID="26">
<I>predicate-name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="27">

<I>printer-name</I> - a <I><A HREF="../glossary/f.htm#functionname">function name</A></I> or a <I><A HREF="../glossary/l.htm#lambdaexpression">lambda expression</A></I>.


<P ID="28">

<I>slot-name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="29">
<I>slot-initform</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="30">
<I>slot-read-only-p</I> - a <I><A HREF="../glossary/g.htm#generalizedboolean">generalized boolean</A></I>.

<P ID="31">
<I>structure-name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="32">
<I>type</I> - one of the <I><A HREF="../glossary/t.htm#typespecifier">type specifiers</A></I>
		    <A HREF="list.htm"><B>list</B></A>,
		    <A HREF="vector0.htm"><B>vector</B></A>,
	         or <TT>(vector <I>size</I>)</TT>,
		 or some other <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> defined 
		    by the <I><A HREF="../glossary/i.htm#implementation">implementation</A></I> to be appropriate.

<P ID="33">

<I>documentation</I> - a <I><A HREF="../glossary/s.htm#string">string</A></I>; not evaluated.

<P ID="34">
<DT><B>Description:</B><DD>

<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> defines a structured <I><A HREF="../glossary/t.htm#type">type</A></I>, named <I>structure-type</I>,
with named slots as specified by the <I>slot-options</I>.

<P ID="35">

<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> defines <I><A HREF="../glossary/r.htm#reader">readers</A></I> for the slots and
arranges for <A HREF="document.htm"><B>setf</B></A> to work properly on such
<I><A HREF="../glossary/r.htm#reader">reader</A></I> functions.
Also, unless overridden, it
     defines a predicate named <TT><I>name</I>-p</TT>,
     defines a constructor function named <TT>make-<I>constructor-name</I></TT>,
 and defines a copier function named <TT>copy-<I>constructor-name</I></TT>.



All names of automatically created functions might automatically
be declared <A HREF="inlineno.htm"><B>inline</B></A> (at the discretion of the <I><A HREF="../glossary/i.htm#implementation">implementation</A></I>).

<P ID="36">

If <I>documentation</I> is supplied, it is attached to <I>structure-name</I>
as a <I><A HREF="../glossary/d.htm#documentationstring">documentation string</A></I> of kind <B>structure</B>,

and unless <TT>:type</TT> is used, the <I>documentation</I> is also attached 
to <I>structure-name</I> as a <I><A HREF="../glossary/d.htm#documentationstring">documentation string</A></I> of kind
<A HREF="type.htm"><B>type</B></A> and as a <I><A HREF="../glossary/d.htm#documentationstring">documentation string</A></I> to the <I><A HREF="../glossary/c.htm#class">class</A></I> <I><A HREF="../glossary/o.htm#object">object</A></I> 
for the <I><A HREF="../glossary/c.htm#class">class</A></I> named <I>structure-name</I>.


<P ID="37">

<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> defines a constructor function that is used to
create instances of the structure created by <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>.
The default name is <TT>make-<I>structure-name</I></TT>.
A different name can be supplied
by giving the name as the argument to the <I>constructor</I> option.
<A HREF="nil.htm"><B>nil</B></A>&nbsp;indicates that no constructor function will be created.

<P ID="38">

After a new structure type has been defined, instances of that type
normally can be created by using the constructor function for the
type.
A call to a constructor function is of the following form:

<P ID="39">
(<TT>constructor-function-name</TT><BR>
&nbsp;<TT>slot-keyword-1 form-1</TT><BR>
&nbsp;<TT>slot-keyword-2 form-2</TT><BR>
&nbsp;<I> ... </I>)

<P ID="40">

The arguments to the constructor function are all keyword arguments.  Each
slot keyword argument must  be 
a keyword whose name corresponds to the name of a structure slot.  
All the <I>keywords</I> and <I>forms</I>
are evaluated.  

If a slot is not initialized in this way, 
it is initialized by evaluating <I>slot-initform</I> in the slot description

at the time the constructor function is called.





If no <I>slot-initform</I> is supplied, 
the consequences are undefined if an attempt is later made to read the slot's value
before a value is explicitly assigned.


<P ID="41">

Each <I>slot-initform</I> supplied for a <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> component,
when used by the constructor function for an otherwise unsupplied
component, is re-evaluated on every call to the
constructor function.  

The <I>slot-initform</I> is not evaluated 
        unless it is needed in the creation of a particular structure
        instance.  If it is never needed, there can be no type-mismatch
        error, even if the <I><A HREF="../glossary/t.htm#type">type</A></I> 
of the slot is specified; no warning
        should be issued in this case.


For example, in the following sequence, only the last call is an error.

<P ID="42">
<PRE ID="43">
 (defstruct person (name 007 :type string)) 
 (make-person :name "James")
 (make-person)
</PRE>

<P ID="44">
It is as if the <I>slot-initforms</I> were 
used as <I><A HREF="../glossary/i.htm#initializationform">initialization forms</A></I> for the <I><A HREF="../glossary/k.htm#keywordparameter">keyword parameters</A></I> 
of the constructor function.

<P ID="45">

The <I><A HREF="../glossary/s.htm#symbol">symbols</A></I> which name the slots must not be used by the 
<I><A HREF="../glossary/i.htm#implementation">implementation</A></I> as the <I><A HREF="../glossary/n.htm#name">names</A></I> for the <I><A HREF="../glossary/l.htm#lambdavariable">lambda variables</A></I>
in the constructor function, since one or more of those <I><A HREF="../glossary/s.htm#symbol">symbols</A></I>
might have been proclaimed <A HREF="special.htm"><B>special</B></A> or might be defined as
the name of a <I><A HREF="../glossary/c.htm#constantvariable">constant variable</A></I>.
The slot default init forms are evaluated 
in the <I><A HREF="../glossary/l.htm#lexicalenvironment">lexical environment</A></I> in which the <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> form itself appears and
in the <I><A HREF="../glossary/d.htm#dynamicenvironment">dynamic environment</A></I> in which the call to the constructor function appears.


<P ID="46">
For example, if the form <TT>(gensym)</TT> were used as an initialization form,
either in the constructor-function call or as the default initialization form
in <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>, then every call to the constructor function would call
<A HREF="gensym.htm"><B>gensym</B></A> once to generate a new <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="47">


Each <I>slot-description</I> in <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> can specify zero or more
<I>slot-options</I>.  

A <I>slot-option</I> consists of a pair of a keyword and a value
(which is not a form to be evaluated, but the value itself).  For example:

<P ID="48">
<PRE ID="49">
 (defstruct ship
   (x-position 0.0 :type short-float)
   (y-position 0.0 :type short-float)
   (x-velocity 0.0 :type short-float)
   (y-velocity 0.0 :type short-float)
   (mass *default-ship-mass* :type short-float :read-only t))
</PRE>
This specifies that each slot always contains a <I><A HREF="../glossary/s.htm#shortfloat">short float</A></I>,
and that the last slot cannot be altered once a ship is constructed.

<P ID="50">
  

The available slot-options are:
<UL>

<LI ID="51"><TT><TT>:type</TT> <I>type</I></TT> 

<P ID="52">
This specifies that the contents of the
slot is always of type <I>type</I>.  This is entirely
analogous to the declaration of a variable or function; it
effectively declares the result type of the <I><A HREF="../glossary/r.htm#reader">reader</A></I> function.  



It is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> whether the <I><A HREF="../glossary/t.htm#type">type</A></I> is checked 
    when initializing a slot
 or when assigning to it.
<I>Type</I> is not evaluated; it must be a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>.

<P ID="53">

<LI ID="54"><TT><TT>:read-only</TT> <I>x</I></TT>

<P ID="55">
When <I>x</I> is <I><A HREF="../glossary/t.htm#true">true</A></I>,
this specifies that this slot cannot be
altered; it will always contain the value supplied at construction time.
<A HREF="document.htm"><B>setf</B></A> will not accept the <I><A HREF="../glossary/r.htm#reader">reader</A></I> function for this slot.
If <I>x</I> is <I><A HREF="../glossary/f.htm#false">false</A></I>, this slot-option has no effect.
<I>X</I> is not evaluated.

<P ID="56">

When this option is <I><A HREF="../glossary/f.htm#false">false</A></I> or unsupplied,
it is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> whether the ability to <I><A HREF="../glossary/w.htm#write">write</A></I>
the slot is implemented by a <I><A HREF="../glossary/s.htm#setffunction">setf function</A></I> or a <I><A HREF="../glossary/s.htm#setfexpander">setf expander</A></I>.


</UL>

<P ID="57">

The following keyword options are available for use with <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>.  
A <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> option can be either a keyword or a <I><A HREF="../glossary/l.htm#list">list</A></I>
of a keyword and arguments for that keyword; 

specifying the keyword by itself is equivalent to specifying a list consisting of
the keyword and no arguments.
The syntax for <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> options differs from the pair syntax 
used for slot-options.  No part of any of these options is evaluated.
<UL>

<P ID="58">

<LI ID="59"><TT>:conc-name</TT>

<P ID="60">
This provides for automatic prefixing of names of <I><A HREF="../glossary/r.htm#reader">reader</A></I> (or <I><A HREF="../glossary/a.htm#access">access</A></I>) functions.
The default behavior is to begin the names of all the <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions of
a structure with the name of the structure followed by a hyphen.

<P ID="61">

<TT>:conc-name</TT> supplies an alternate
prefix to be used.  If a hyphen is to be used as a separator,
it must be supplied as part of the prefix.
If <TT>:conc-name</TT> is <A HREF="nil.htm"><B>nil</B></A>&nbsp;or no argument is supplied, 
then no prefix is used;
then the names of the <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions
are the same as the slot names.
If a <I><A HREF="../glossary/n.htm#nonnil">non-nil</A></I> prefix is given,
the name of the <I><A HREF="../glossary/r.htm#reader">reader</A></I> <I><A HREF="../glossary/f.htm#function">function</A></I> for each slot is constructed by
concatenating that prefix and the name of the slot, and interning the resulting
<I><A HREF="../glossary/s.htm#symbol">symbol</A></I> in the <I><A HREF="../glossary/p.htm#package">package</A></I> that is current at the time the 
<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> form is expanded.

<P ID="62">

Note that no matter what is supplied for <TT>:conc-name</TT>,
slot keywords that match the slot names with no prefix attached are used
with a constructor function.
The <I><A HREF="../glossary/r.htm#reader">reader</A></I> function name is used
in conjunction with <A HREF="document.htm"><B>setf</B></A>.  Here is an example:

<P ID="63">
<PRE ID="64">
 (defstruct (door (:conc-name dr-)) knob-color width material) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  DOOR
 (setq my-door (make-door :knob-color 'red :width 5.0)) 
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(DOOR :KNOB-COLOR RED :WIDTH 5.0 :MATERIAL NIL)
 (dr-width my-door) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 5.0
 (setf (dr-width my-door) 43.7) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 43.7
 (dr-width my-door) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 43.7
</PRE>

<P ID="65">
Whether or not the <TT>:conc-name</TT> option is explicitly supplied, 
the following rule governs name conflicts of generated <I><A HREF="../glossary/r.htm#reader">reader</A></I>
(or <I><A HREF="../glossary/a.htm#accessor">accessor</A></I>) names:
For any <I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I> <I>S<SUB>1</SUB></I> 
having a <I><A HREF="../glossary/r.htm#reader">reader</A></I> function named <I>R</I> for a slot named <I>X<SUB>1</SUB></I>
that is inherited by another <I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I> <I>S<SUB>2</SUB></I> 
that would have a <I><A HREF="../glossary/r.htm#reader">reader</A></I> function with the same name <I>R</I> for a slot named <I>X<SUB>2</SUB></I>,
no definition for <I>R</I> is generated by the definition of <I>S<SUB>2</SUB></I>;
instead, the definition of <I>R</I> is inherited from the definition of <I>S<SUB>1</SUB></I>.
(In such a case, if <I>X<SUB>1</SUB></I> and <I>X<SUB>2</SUB></I> are different slots,
the <I><A HREF="../glossary/i.htm#implementation">implementation</A></I> might signal a style warning.)

<P ID="66">
<LI ID="67"><TT>:constructor</TT>

<P ID="68">

This option takes zero, one, or two arguments.
If at least one argument is supplied and the first argument is not <A HREF="nil.htm"><B>nil</B></A>, then
that argument is a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> which specifies the name of the 
constructor function.  If the argument is not supplied (or if the option itself is not
supplied), the name of the constructor is produced by concatenating the
string <TT>"MAKE-"</TT> and the name of the structure, interning the name
in whatever <I><A HREF="../glossary/p.htm#package">package</A></I> is current at the time <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>
is expanded.  If the argument is provided and is <A HREF="nil.htm"><B>nil</B></A>,
no constructor function is defined.


<P ID="69">


If <TT>:constructor</TT> is given as
<TT>(:constructor <I>name</I> <I>arglist</I>)</TT>, 
then instead of making a keyword
driven constructor function, <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> 
defines a "positional" constructor function,
taking arguments whose meaning is determined by the argument's position
and possibly by keywords.
<I>Arglist</I> is used to describe what the arguments to the
constructor will be. In the simplest case something like
<TT>(:constructor make-foo (a b c))</TT> defines <TT>make-foo</TT> to be
a three-argument 
constructor function whose arguments are used to initialize the
slots named <TT>a</TT>, <TT>b</TT>, and <TT>c</TT>.

<P ID="70">

Because a constructor of this type operates "By Order of Arguments,"
it is sometimes known as a "boa constructor."

<P ID="71">
For information on how the <I>arglist</I> for a "boa constructor" is
processed, see Section <A HREF="../subsecti/boalambd.htm">3.4.6 Boa Lambda Lists</A>.

<P ID="72">

It is permissible to use the
<TT>:constructor</TT> option more than once, so that you can define several
different constructor functions, each taking different parameters.

<P ID="73">

<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> creates the default-named keyword constructor function
only if no explicit <TT>:constructor</TT> options are specified, or if the
<TT>:constructor</TT> option is specified without a <I>name</I> argument.

<P ID="74">
<TT>(:constructor nil)</TT> is meaningful only when there are no other
<TT>:constructor</TT> options specified.  It prevents <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>
from generating any constructors at all.

<P ID="75">
Otherwise, <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> creates a constructor function corresponding
to each supplied <TT>:constructor</TT> option.  It is permissible to specify
multiple keyword constructor functions as well as multiple 
"boa constructors".



<P ID="76">
<LI ID="77"><TT>:copier</TT>

<P ID="78">

This option takes one argument, a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>,
which specifies the name of the copier
function.  If the argument is not provided or if the option itself is not
provided, the name of the copier is produced by concatenating the
string <TT>"COPY-"</TT> and the name of the structure, interning the name
in whatever <I><A HREF="../glossary/p.htm#package">package</A></I> is current at the time <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>
is expanded.
If the argument is provided and is <A HREF="nil.htm"><B>nil</B></A>, no copier function is defined.

<P ID="79">




The automatically defined copier function is a function of
one <I><A HREF="../glossary/a.htm#argument">argument</A></I>,

which must be of the structure type being defined.

The copier function creates a <I><A HREF="../glossary/f.htm#fresh">fresh</A></I> 
structure that has the same <I><A HREF="../glossary/t.htm#type">type</A></I> as its <I><A HREF="../glossary/a.htm#argument">argument</A></I>,
and that has the <I><A HREF="../glossary/s.htm#same">same</A></I> component values as the original 
structure; that is, the component values are not copied recursively.

If the <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> <TT>:type</TT> option was not used,
the following equivalence applies:

<P ID="80">
<PRE ID="81">
 (<I>copier-name</I> x) = (copy-structure (the <I>structure-name</I> x))
</PRE>



<P ID="82">
<LI ID="83"><TT>:include</TT>

<P ID="84">

This option is used for building a new structure definition as
an extension of another structure definition.  For example:

<P ID="85">
<PRE ID="86">
 (defstruct person name age sex)
</PRE>
To make a new structure to represent an astronaut
that has the
attributes of name, age, and sex, and <I><A HREF="../glossary/f.htm#function">functions</A></I>
that operate on <TT>person</TT> structures, <TT>astronaut</TT> is defined
with <TT>:include</TT> as follows:

<P ID="87">

<PRE ID="88">
 (defstruct (astronaut (:include person)
                       (:conc-name astro-))
    helmet-size
    (favorite-beverage 'tang))
</PRE>

<P ID="89">

<TT>:include</TT> causes the structure being defined
to have the same slots as the included structure.
This is done in such a way
that the <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions for the included
structure also work on the structure being defined.
In this example, an
<TT>astronaut</TT> therefore has five slots: the three defined in
<TT>person</TT> and the two defined in <TT>astronaut</TT>
itself.  The <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions defined by the <TT>person</TT> structure
can be applied to instances of the <TT>astronaut</TT> structure, and they
work correctly.
Moreover, <TT>astronaut</TT> has its own <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions for
components defined by the <TT>person</TT> structure.
The following examples illustrate the 
use of <TT>astronaut</TT> structures:

<P ID="90">

<PRE ID="91">
 (setq x (make-astronaut :name 'buzz
                         :age 45.
                         :sex t
                         :helmet-size 17.5))
 (person-name x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BUZZ
 (astro-name x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BUZZ
 (astro-favorite-beverage x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  TANG
</PRE>

<PRE ID="92">
 (reduce #'+ astros :key #'person-age) ; obtains the total of the ages 
                                       ; of the possibly empty
                                       ; sequence of astros
</PRE>

The difference between the <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions <TT>person-name</TT> and <TT>astro-name</TT>
is that <TT>person-name</TT> can be correctly applied to any <TT>person</TT>,
including an <TT>astronaut</TT>, while <TT>astro-name</TT> can be correctly
applied only to an <TT>astronaut</TT>.  An implementation might 
check for incorrect use of <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions.

<P ID="93">

At most one <TT>:include</TT> can be supplied in a single <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>.
The argument to <TT>:include</TT> is required and must be the
name of some previously defined structure.  If the structure being
defined has no <TT>:type</TT> option, then the included structure must
also have had no <TT>:type</TT> option supplied for it.
If the structure being defined has a <TT>:type</TT> option,
then the included structure must have been declared with a <TT>:type</TT>
option specifying the same representation <I><A HREF="../glossary/t.htm#type">type</A></I>.

<P ID="94">

If no <TT>:type</TT> option is involved, then
the structure name of the including structure definition
becomes the name of a <I><A HREF="../glossary/d.htm#datatype">data type</A></I>, and therefore
a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> recognizable by <A HREF="typep.htm"><B>typep</B></A>; it becomes
a <I><A HREF="../glossary/s.htm#subtype">subtype</A></I> of the included structure.  
In the above example,
<TT>astronaut</TT> is a <I><A HREF="../glossary/s.htm#subtype">subtype</A></I> of <TT>person</TT>; hence

<P ID="95">
<PRE ID="96">
 (typep (make-astronaut) 'person) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
</PRE>
indicating that all operations on persons also
work on astronauts.

<P ID="97">

The structure using <TT>:include</TT> can specify default values or
slot-options for the included slots different from those the included
structure specifies, by giving the <TT>:include</TT> option as:

<P ID="98">
<PRE ID="99">
 (:include <I>included-structure-name</I> {<I>slot-description</I>}*)
</PRE>
Each <I>slot-description</I> must have a <I>slot-name</I> 


that is the same
as that of some slot in the included structure.
If a <I>slot-description</I> has no <I>slot-initform</I>,
then in the new structure the slot has no initial value.
Otherwise its initial value form is replaced by
the <I>slot-initform</I> in the <I>slot-description</I>.
A normally writable slot can be made read-only.
If a slot is read-only in the included structure, then it
must also be so in the including structure.
If a <I><A HREF="../glossary/t.htm#type">type</A></I> is supplied for a slot, it must be 


a <I><A HREF="../glossary/s.htm#subtype">subtype</A></I> of

the
<I><A HREF="../glossary/t.htm#type">type</A></I> specified in the included structure.

<P ID="100">

For example, if the
default age for an astronaut is <TT>45</TT>, then 

<P ID="101">
<PRE ID="102">
 (defstruct (astronaut (:include person (age 45)))
    helmet-size
    (favorite-beverage 'tang))
</PRE>

<P ID="103">
If <TT>:include</TT> is used with the <TT>:type</TT>
option, then the effect is first to skip over as many representation
elements as needed to represent the included structure, then to
skip over any additional elements supplied by the <TT>:initial-offset</TT>
option, and then to begin allocation of elements from that point.
For example:

<P ID="104">
<PRE ID="105">
 (defstruct (binop (:type list) :named (:initial-offset 2))
   (operator '? :type symbol)   
   operand-1
   operand-2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP
 (defstruct (annotated-binop (:type list)
                             (:initial-offset 3)
                             (:include binop))
  commutative associative identity) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  ANNOTATED-BINOP
 (make-annotated-binop :operator '*
                       :operand-1 'x
                       :operand-2 5
                       :commutative t
                       :associative t
                       :identity 1)
   <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (NIL NIL BINOP * X 5 NIL NIL NIL T T 1)
</PRE>
The first two <A HREF="nil.htm"><B>nil</B></A>&nbsp;elements stem from the <TT>:initial-offset</TT> of <TT>2</TT>
in the definition of <TT>binop</TT>.  The next four elements contain the
structure name and three slots for <TT>binop</TT>.  The next three <A HREF="nil.htm"><B>nil</B></A>&nbsp;elements
stem from the <TT>:initial-offset</TT> of <TT>3</TT> in the definition of
<TT>annotated-binop</TT>.  The last three list elements contain the additional
slots for an <TT>annotated-binop</TT>.

<P ID="106">
<LI ID="107"><TT>:initial-offset</TT>

<P ID="108">

<TT>:initial-offset</TT> instructs <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> to skip over a certain
number of slots before it starts allocating the slots described in the
body.  This option's argument is the number of slots <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> 
should skip.  <TT>:initial-offset</TT> can be used only if <TT>:type</TT> is also supplied.

<P ID="109">

<TT>:initial-offset</TT> allows 
slots to be allocated beginning at a representational
element other than the first.  For example, the form

<P ID="110">
<PRE ID="111">
 (defstruct (binop (:type list) (:initial-offset 2))
   (operator '? :type symbol)
   operand-1
   operand-2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP
</PRE>
would result in the following behavior for <TT>make-binop</TT>:

<P ID="112">
<PRE ID="113">
 (make-binop :operator '+ :operand-1 'x :operand-2 5)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (NIL NIL + X 5)
 (make-binop :operand-2 4 :operator '*)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (NIL NIL * NIL 4)
</PRE>
The selector functions
<TT>binop-operator</TT>, <TT>binop-operand-1</TT>,
and <TT>binop-operand-2</TT> would be essentially equivalent to <A HREF="firstsec.htm"><B>third</B></A>,
<A HREF="firstsec.htm"><B>fourth</B></A>, and <A HREF="firstsec.htm"><B>fifth</B></A>, respectively.
Similarly, the form

<P ID="114">
<PRE ID="115">
 (defstruct (binop (:type list) :named (:initial-offset 2))
   (operator '? :type symbol)
   operand-1
   operand-2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP
</PRE>
would result in the following behavior for <TT>make-binop</TT>:

<P ID="116">
<PRE ID="117">
 (make-binop :operator '+ :operand-1 'x :operand-2 5) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (NIL NIL BINOP + X 5)
 (make-binop :operand-2 4 :operator '*) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (NIL NIL BINOP * NIL 4)
</PRE>

<P ID="118">
The first two <A HREF="nil.htm"><B>nil</B></A>&nbsp;elements stem from the <TT>:initial-offset</TT> of <TT>2</TT>
in the definition of <TT>binop</TT>.  The next four elements contain the
structure name and three slots for <TT>binop</TT>.  

<P ID="119">
<LI ID="120"><TT>:named</TT>

<P ID="121">

<TT>:named</TT> specifies that the structure is named.
If no <TT>:type</TT> is supplied,
then the structure is always named.

<P ID="122">

For example:

<P ID="123">
<PRE ID="124">
 (defstruct (binop (:type list))
   (operator '? :type symbol)
   operand-1
   operand-2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP
</PRE>
This defines a constructor function <TT>make-binop</TT> and three
selector functions, namely <TT>binop-operator</TT>, <TT>binop-operand-1</TT>,
and <TT>binop-operand-2</TT>.  (It does not, however, define a predicate
<TT>binop-p</TT>, for reasons explained below.)

<P ID="125">

The effect of <TT>make-binop</TT> is simply to construct a list of length three:

<P ID="126">
<PRE ID="127">
 (make-binop :operator '+ :operand-1 'x :operand-2 5) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (+ X 5)  
 (make-binop :operand-2 4 :operator '*) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (* NIL 4)
</PRE>
It is just like the function <TT>list</TT> except that it takes
keyword arguments and performs slot defaulting appropriate to the <TT>binop</TT>
conceptual data type.  Similarly, the selector functions
<TT>binop-operator</TT>, <TT>binop-operand-1</TT>,
and <TT>binop-operand-2</TT> are essentially equivalent to <A HREF="carcdrca.htm"><B>car</B></A>,
<A HREF="carcdrca.htm"><B>cadr</B></A>, and <A HREF="carcdrca.htm"><B>caddr</B></A>, respectively.  They might not be
completely equivalent because,
for example, an implementation would be justified in adding error-checking
code to ensure that the argument to each selector function is a length-3
list.

<P ID="128">

<TT>binop</TT> is a conceptual data type in that it is not made a part of
the <I>Common Lisp</I>&nbsp;type system.  <A HREF="typep.htm"><B>typep</B></A> does not recognize <TT>binop</TT> as
a <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>, and <A HREF="type-of.htm"><B>type-of</B></A> returns <TT>list</TT> when
given a <TT>binop</TT> structure.  There is no way to distinguish a data
structure constructed by <TT>make-binop</TT> from any other <I><A HREF="../glossary/l.htm#list">list</A></I> that 
happens to have the correct structure.

<P ID="129">

There is not any way to recover the structure name <TT>binop</TT> from
a structure created by <TT>make-binop</TT>.  This can only be done
if the structure is named.
A named structure has the property that, given an instance of the
structure, the structure name (that names the type) can be reliably
recovered.  For structures defined
with no <TT>:type</TT> option, the structure name actually becomes part
of the <I>Common Lisp</I>&nbsp;data-type system.  <A HREF="type-of.htm"><B>type-of</B></A>,
when applied to such a structure, returns the structure name
as the <I><A HREF="../glossary/t.htm#type">type</A></I> of the <I><A HREF="../glossary/o.htm#object">object</A></I>;
<A HREF="typep.htm"><B>typep</B></A> recognizes
the structure name as a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>.

<P ID="130">
For structures defined with a <TT>:type</TT> option, <A HREF="type-of.htm"><B>type-of</B></A> 
returns a <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> such as <TT>list</TT> or <TT>(vector t)</TT>,
depending on the type supplied to the <TT>:type</TT> option.
The structure name does not become a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>.
However,
if the <TT>:named</TT> option is also supplied, then the first component
of the structure (as created by a <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> constructor function)
always contains the structure name.  This allows the structure name
to be recovered from an instance of the structure and allows a reasonable
predicate for the conceptual type to be defined:
the automatically defined
<I>name-p</I> predicate for the structure operates by first
checking that its argument is of the proper type (<A HREF="list.htm"><B>list</B></A>, 
<TT>(vector t)</TT>,
or whatever) and then checking whether the first component contains
the appropriate type name.

<P ID="131">
Consider the <TT>binop</TT> example shown above, modified only to
include the <TT>:named</TT> option:

<P ID="132">
<PRE ID="133">
 (defstruct (binop (:type list) :named)
   (operator '? :type symbol)
   operand-1
   operand-2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP
</PRE>
As before, this defines a constructor function <TT>make-binop</TT> and three
selector functions <TT>binop-operator</TT>, <TT>binop-operand-1</TT>,
and <TT>binop-operand-2</TT>.  It also defines a predicate <TT>binop-p</TT>.
The effect of <TT>make-binop</TT> is now to construct a list of length four:

<P ID="134">
<PRE ID="135">
 (make-binop :operator '+ :operand-1 'x :operand-2 5) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (BINOP + X 5)
 (make-binop :operand-2 4 :operator '*) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (BINOP * NIL 4)
</PRE>
The structure has the same layout as before except that the structure name
<TT>binop</TT> is included as the first list element.
The selector functions
<TT>binop-operator</TT>, <TT>binop-operand-1</TT>,
and <TT>binop-operand-2</TT> are essentially equivalent to <A HREF="carcdrca.htm"><B>cadr</B></A>,
<A HREF="carcdrca.htm"><B>caddr</B></A>, and <A HREF="carcdrca.htm"><B>cadddr</B></A>, respectively.
The predicate <TT>binop-p</TT> is more or less equivalent to this
definition:

<P ID="136">
<PRE ID="137">
 (defun binop-p (x)
   (and (consp x) (eq (car x) 'binop))) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  BINOP-P
</PRE>
The name <TT>binop</TT> is still not a valid <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> recognizable
to <A HREF="typep.htm"><B>typep</B></A>, but at least there is a way of distinguishing <TT>binop</TT>
structures from other similarly defined structures.

<P ID="138">
<LI ID="139"><TT>:predicate</TT>

<P ID="140">

This option takes one argument, which specifies the name of the type predicate.
If the argument is not supplied or if the option itself is not
supplied, the name of the predicate is made by concatenating the
name of the structure to the string <TT>"-P"</TT>, interning the name
in whatever <I><A HREF="../glossary/p.htm#package">package</A></I> is current at the time <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A>
is expanded.
If the argument is provided and is <A HREF="nil.htm"><B>nil</B></A>, no predicate is defined.
A predicate can be defined only if the structure is named;
if <TT>:type</TT> is supplied and <TT>:named</TT> is not supplied,
then <TT>:predicate</TT> must either be unsupplied or have the value <A HREF="nil.htm"><B>nil</B></A>.

<P ID="141">

<LI ID="142"><TT>:print-function</TT>, <TT>:print-object</TT>

<P ID="143">
The <TT>:print-function</TT> and <TT>:print-object</TT> 

options
specify that a <A HREF="print-ob.htm"><B>print-object</B></A>
<I><A HREF="../glossary/m.htm#method">method</A></I> for <I><A HREF="../glossary/s.htm#structure">structures</A></I> of type <I>structure-name</I> should be generated.
These options are not synonyms, but do perform a similar service;
the choice of which option (<TT>:print-function</TT> or <TT>:print-object</TT>) is used 
affects how the function named <I>printer-name</I> is called.
Only one of these options may be used, and

these options may be used only if <TT>:type</TT> is not supplied.

<P ID="144">
If the <TT>:print-function</TT> option is used, 
then when a structure of type <I>structure-name</I> is to be printed,
the designated printer function is called on three <I><A HREF="../glossary/a.htm#argument">arguments</A></I>:

<P ID="145">
<UL> 

<P ID="146">
<LI ID="147">-- the structure to be printed
	      (a <I><A HREF="../glossary/g.htm#generalizedinstance">generalized instance</A></I> of <I>structure-name</I>).

<P ID="148">
<LI ID="149">-- a <I><A HREF="../glossary/s.htm#stream">stream</A></I> to print to.

<P ID="150">
<LI ID="151">-- an <I><A HREF="../glossary/i.htm#integer">integer</A></I> indicating the current depth.
	      The magnitude of this integer may vary between <I><A HREF="../glossary/i.htm#implementation">implementations</A></I>;
	      however, it can reliably be compared against <A HREF="print-le.htm"><B>*print-level*</B></A>
	      to determine whether depth abbreviation is appropriate.

</UL>

<P ID="152">
Specifying <TT>(:print-function <I>printer-name</I>)</TT>
is approximately equivalent to specifying:

<P ID="153">
<PRE ID="154">
 (defmethod print-object ((object <I>structure-name</I>) stream)
   (funcall (function <I>printer-name</I>) object stream &lt;&lt;current-print-depth&gt;&gt;))
</PRE>

<P ID="155">
where the &lt;&lt;current-print-depth&gt;&gt; represents the printer's belief of
how deep it is currently printing.  It is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I>
whether &lt;&lt;current-print-depth&gt;&gt; is always 0 and <I>*print-level*</I>,
if <I><A HREF="../glossary/n.htm#nonnil">non-nil</A></I>, is re-bound to successively smaller values as printing
descends recursively, or whether <I>current-print-depth</I> varies in 
value as printing descends recursively and <I>*print-level*</I> remains
constant during the same traversal.

<P ID="156">
If the <TT>:print-object</TT> option is used, then
when a structure of type <I>structure-name</I> is to be printed,
the designated printer function is called on two arguments:

<P ID="157">
<UL>

<P ID="158">
<LI ID="159">-- the structure to be printed.

<P ID="160">
<LI ID="161">-- the stream to print to.

</UL>

<P ID="162">
Specifying <TT>(:print-object <I>printer-name</I>)</TT> is equivalent to specifying:

<P ID="163">
<PRE ID="164">
 (defmethod print-object ((object <I>structure-name</I>) stream)
   (funcall (function <I>printer-name</I>) object stream))
</PRE>

<P ID="165">



    If no <TT>:type</TT> option is supplied,
and if either a <TT>:print-function</TT> or a <TT>:print-object</TT> option is supplied,
and if no <I>printer-name</I> is supplied,
then a <A HREF="print-ob.htm"><B>print-object</B></A> <I><A HREF="../glossary/m.htm#method">method</A></I> <I><A HREF="../glossary/s.htm#specialized">specialized</A></I> for <I>structure-name</I>
is generated that calls a function that implements the default printing behavior for
structures using <TT>#S</TT> notation; see Section <A HREF="../subsubse/printin0.htm">22.1.3.12 Printing Structures</A>.

<P ID="166">
If neither a <TT>:print-function</TT> 
       nor a <TT>:print-object</TT> option 
is supplied,
then <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> does not generate a <A HREF="print-ob.htm"><B>print-object</B></A> <I><A HREF="../glossary/m.htm#method">method</A></I>
<I><A HREF="../glossary/s.htm#specialized">specialized</A></I> for <I>structure-name</I> and some default behavior is inherited
either from a structure named in an <TT>:include</TT> option 
    or from the default behavior for printing structures;
see the <I><A HREF="../glossary/f.htm#function">function</A></I> <A HREF="print-ob.htm"><B>print-object</B></A> and Section <A HREF="../subsubse/printin0.htm">22.1.3.12 Printing Structures</A>.



<P ID="167">









When <A HREF="print-ci.htm"><B>*print-circle*</B></A> is <I><A HREF="../glossary/t.htm#true">true</A></I>,
a user-defined print function can print <I><A HREF="../glossary/o.htm#object">objects</A></I> 
to the supplied <I><A HREF="../glossary/s.htm#stream">stream</A></I> using  
    <A HREF="writepri.htm"><B>write</B></A>,
    <A HREF="writepri.htm"><B>prin1</B></A>,
    <A HREF="writepri.htm"><B>princ</B></A>, 
 or <A HREF="format.htm"><B>format</B></A>
and expect circularities to be detected and printed using the <TT>#<I>n</I>#</TT> syntax.
This applies to <I><A HREF="../glossary/m.htm#method">methods</A></I> on <A HREF="print-ob.htm"><B>print-object</B></A> in addition to
<TT>:print-function</TT> options.
If a user-defined print function prints to a <I><A HREF="../glossary/s.htm#stream">stream</A></I> other than the one
that was supplied, then circularity detection starts over for that <I><A HREF="../glossary/s.htm#stream">stream</A></I>. 
See the <I><A HREF="../glossary/v.htm#variable">variable</A></I> <A HREF="print-ci.htm"><B>*print-circle*</B></A>.


<P ID="168">


<P ID="169">
<LI ID="170"><TT>:type</TT>

<P ID="171">

<TT>:type</TT> explicitly specifies the representation to be used for
the structure.  Its argument must be one of these <I><A HREF="../glossary/t.htm#type">types</A></I>:

<P ID="172">
<UL>

<LI ID="173"><A HREF="vector0.htm"><B>vector</B></A>

<P ID="174">
This produces the same result as specifying <TT>(vector t)</TT>.
The structure is represented
as a general <I><A HREF="../glossary/v.htm#vector">vector</A></I>, storing components as vector elements.
The first component is vector 
element 1 if the structure is <TT>:named</TT>, and element 0 otherwise.

<P ID="175">

<LI ID="176"><TT>(vector <I>element-type</I>)</TT>

<P ID="177">
The structure is represented as a (possibly specialized) <I><A HREF="../glossary/v.htm#vector">vector</A></I>, storing
components as vector elements.  Every component must be of a <I><A HREF="../glossary/t.htm#type">type</A></I> 
that can be stored in a <I><A HREF="../glossary/v.htm#vector">vector</A></I> of the <I><A HREF="../glossary/t.htm#type">type</A></I> specified.  
The first component is vector
element 1 if the structure is <TT>:named</TT>, and element 0 otherwise.
The structure can be <TT>:named</TT> only if the <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="symbol.htm"><B>symbol</B></A> 
is a <I><A HREF="../glossary/s.htm#subtype">subtype</A></I> of the supplied <I>element-type</I>.

<P ID="178">
<LI ID="179"><A HREF="list.htm"><B>list</B></A>

<P ID="180">
The structure is represented as a <I><A HREF="../glossary/l.htm#list">list</A></I>.
The first component is the <I><A HREF="../glossary/c.htm#cadr">cadr</A></I> if the structure is <TT>:named</TT>,
and the <I><A HREF="../glossary/c.htm#car">car</A></I> if it is not <TT>:named</TT>.
</UL>                           

<P ID="181">

Specifying this option has the effect of forcing
a specific representation and of forcing the components to be
stored in the order specified in <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> 
in corresponding successive elements of the specified representation.
It also prevents the structure name from becoming a valid
<I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I> recognizable by <A HREF="typep.htm"><B>typep</B></A>.

<P ID="182">

For example:

<P ID="183">
<PRE ID="184">
 (defstruct (quux (:type list) :named) x y)
</PRE>

<P ID="185">
should make a constructor that builds a <I><A HREF="../glossary/l.htm#list">list</A></I> exactly like the one
that <A HREF="list.htm"><B>list</B></A> produces, 
with <TT>quux</TT> as its <I><A HREF="../glossary/c.htm#car">car</A></I>.


<P ID="186">
If this type is defined:

<P ID="187">
<PRE ID="188">
 (deftype quux () '(satisfies quux-p))
</PRE>
then this form

<P ID="189">
<PRE ID="190">
 (typep (make-quux) 'quux)
</PRE>
should return precisely what this one does

<P ID="191">
<PRE ID="192">
 (typep (list 'quux nil nil) 'quux)
</PRE>


<P ID="193">

If <TT>:type</TT> is not supplied,

the structure is represented as an <I><A HREF="../glossary/o.htm#object">object</A></I> of <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="structur.htm"><B>structure-object</B></A>.

<P ID="194">

<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> without a <TT>:type</TT> option defines a <I><A HREF="../glossary/c.htm#class">class</A></I> with
the structure name as its name. The <I><A HREF="../glossary/m.htm#metaclass">metaclass</A></I> of structure
<I><A HREF="../glossary/i.htm#instance">instances</A></I> is <A HREF="structu0.htm"><B>structure-class</B></A>.  

</UL>

<P ID="195">

The consequences of redefining a <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> structure are undefined.


<P ID="196">
In the case where no <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> options have been supplied, 
the following functions are automatically defined to operate 
on instances of the new structure:

<P ID="197">
<UL>
<LI ID="198"><B>Predicate</B>

<P ID="199">
A predicate with the name <TT><I>structure-name</I>-p</TT> is defined to
test membership in the structure type.  The predicate 
<TT>(<I>structure-name</I>-p <I>object</I>)</TT> is <I><A HREF="../glossary/t.htm#true">true</A></I> if an <I>object</I> 
is of this <I><A HREF="../glossary/t.htm#type">type</A></I>; otherwise it is <I><A HREF="../glossary/f.htm#false">false</A></I>.  <A HREF="typep.htm"><B>typep</B></A> can also
be used with the name of the new <I><A HREF="../glossary/t.htm#type">type</A></I> to test whether an 
<I><A HREF="../glossary/o.htm#object">object</A></I>
belongs to the <I><A HREF="../glossary/t.htm#type">type</A></I>. 
Such a function call has the form 
<NOBR><TT>(typep <I>object</I> '<I>structure-name</I>)</TT></NOBR>.

<P ID="200">
<LI ID="201"><B>Component reader functions</B>

<P ID="202">
<I><A HREF="../glossary/r.htm#reader">Reader</A></I> functions are defined to <I><A HREF="../glossary/r.htm#read">read</A></I> the components of the
structure.  For each slot name, there is a corresponding
<I><A HREF="../glossary/r.htm#reader">reader</A></I> function with the name <TT><I>structure-name</I>-<I>slot-name</I></TT>.
This function <I><A HREF="../glossary/r.htm#read">reads</A></I> the contents of that slot.  
Each <I><A HREF="../glossary/r.htm#reader">reader</A></I> function takes one argument, which is
an instance of the structure type.  
<A HREF="document.htm"><B>setf</B></A> can be used with any of these <I><A HREF="../glossary/r.htm#reader">reader</A></I> functions
to alter the slot contents.

<P ID="203">
<LI ID="204"><B>Constructor function</B>

<P ID="205">
A constructor function with the name <TT>make-<I>structure-name</I></TT>
is defined.  This function creates and returns new 
instances of the structure type.

<P ID="206">
<LI ID="207"><B>Copier function</B>

<P ID="208">
A copier function with the name <TT>copy-<I>structure-name</I></TT> is defined.
The copier function takes an object of the structure type and creates a
new object of the same  type that is a copy of the first.  The copier
function creates a new structure with the same component entries

as the original.  Corresponding components of the two structure instances
are <A HREF="eql.htm"><B>eql</B></A>.
</UL>

<P ID="209">


If a <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I> appears as a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>,
the <I><A HREF="../glossary/c.htm#compiler">compiler</A></I> must make the <I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I> name recognized
as a valid <I><A HREF="../glossary/t.htm#type">type</A></I> name in subsequent declarations (as for <A HREF="deftype.htm"><B>deftype</B></A>)
and make the structure slot readers known to <A HREF="document.htm"><B>setf</B></A>.  In addition, the
<I><A HREF="../glossary/c.htm#compiler">compiler</A></I> must save enough information about the <I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I>
so that further <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> definitions can use <TT>:include</TT> in a subsequent
<A HREF="deftype.htm"><B>deftype</B></A> in the same <I><A HREF="../glossary/f.htm#file">file</A></I> to refer to the <I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I> name.
The functions which <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> generates are not defined 
in the compile time environment, although the <I><A HREF="../glossary/c.htm#compiler">compiler</A></I> may save enough
information about the functions to code subsequent calls inline.
The <TT>#S</TT> <I><A HREF="../glossary/r.htm#readermacro">reader macro</A></I> might or might not recognize the newly defined 
<I><A HREF="../glossary/s.htm#structure">structure</A></I> <I><A HREF="../glossary/t.htm#type">type</A></I> name at compile time.  


<P ID="210">
<DT><B>Examples:</B><DD>


An example of a structure definition follows:

<P ID="211">
<PRE ID="212">
 (defstruct ship
   x-position
   y-position
   x-velocity
   y-velocity
   mass)
</PRE>
This declares that every <TT>ship</TT> is an <I><A HREF="../glossary/o.htm#object">object</A></I> 
with five named components.
The evaluation of this form does the following:

<P ID="213">

<UL>
<LI ID="214">1.
It defines <TT>ship-x-position</TT> to be a function
of one argument, a ship, that returns the <TT>x-position</TT>
of the ship; <TT>ship-y-position</TT>
and the other components are given similar function definitions.
These functions are called the <I><A HREF="../glossary/a.htm#access">access</A></I> functions, as they
are used to <I><A HREF="../glossary/a.htm#access">access</A></I> elements of the structure.

<P ID="215">

<LI ID="216">2.
<TT>ship</TT> becomes the name of a <I><A HREF="../glossary/t.htm#type">type</A></I> of which instances
of ships are elements.  <TT>ship</TT> becomes acceptable to <A HREF="typep.htm"><B>typep</B></A>,
for example; <TT>(typep x 'ship)</TT> is <I><A HREF="../glossary/t.htm#true">true</A></I> if <TT>x</TT> is a ship
and false if <TT>x</TT> is any <I><A HREF="../glossary/o.htm#object">object</A></I> other than a ship.



<P ID="217">

<LI ID="218">3.
A function named <TT>ship-p</TT> of 
one argument is defined; it is a predicate
that is <I><A HREF="../glossary/t.htm#true">true</A></I> if its argument is a ship and is <I><A HREF="../glossary/f.htm#false">false</A></I> otherwise.

<P ID="219">

<LI ID="220">4.
A function called <TT>make-ship</TT> is defined that, when invoked,
creates a data structure with five components, suitable for use with
the <I><A HREF="../glossary/a.htm#access">access</A></I> functions.  Thus executing

<P ID="221">
<PRE ID="222">
 (setq ship2 (make-ship))
</PRE>
sets <TT>ship2</TT> to a newly created <TT>ship</TT> <I><A HREF="../glossary/o.htm#object">object</A></I>.
One can supply the initial values of any desired component in the call
to <TT>make-ship</TT> by using keyword arguments in this way:

<P ID="223">
<PRE ID="224">
 (setq ship2 (make-ship :mass *default-ship-mass*
                        :x-position 0
                        :y-position 0))
</PRE>
This constructs a new ship and initializes three of its components.
This function is called the "constructor function"
because it constructs a new structure.

<P ID="225">

<LI ID="226">5.
A function called <TT>copy-ship</TT> of one argument
is defined that, when given a <TT>ship</TT> <I><A HREF="../glossary/o.htm#object">object</A></I>,
creates a new <TT>ship</TT> <I><A HREF="../glossary/o.htm#object">object</A></I> that is a copy of the given one.
This function is called the "copier function."
</UL>

<P ID="227">

<A HREF="document.htm"><B>setf</B></A> can be used to alter the components of a <TT>ship</TT>:

<P ID="228">
<PRE ID="229">
 (setf (ship-x-position ship2) 100)
</PRE>
This alters the <TT>x-position</TT> of <TT>ship2</TT> to be <TT>100</TT>.
This works because <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> behaves as if
it generates an appropriate <A HREF="defsetf.htm"><B>defsetf</B></A>
for each <I><A HREF="../glossary/a.htm#access">access</A></I> function.

<P ID="230">
<PRE ID="231">
;;;
;;; Example 1
;;; define town structure type
;;; area, watertowers, firetrucks, population, elevation are its components
;;;
 (defstruct town
             area
             watertowers
             (firetrucks 1 :type fixnum)    ;an initialized slot
             population 
             (elevation 5128 :read-only t)) ;a slot that can't be changed
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  TOWN
;create a town instance
 (setq town1 (make-town :area 0 :watertowers 0)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(TOWN...)
;town's predicate recognizes the new instance
 (town-p town1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
;new town's area is as specified by make-town
 (town-area town1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 0
;new town's elevation has initial value
 (town-elevation town1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 5128
;setf recognizes reader function
 (setf (town-population town1) 99) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 99
 (town-population town1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 99
;copier function makes a copy of town1
 (setq town2 (copy-town town1)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(TOWN...)
 (= (town-population town1) (town-population town2))  <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
;since elevation is a read-only slot, its value can be set only
;when the structure is created
 (setq town3 (make-town :area 0 :watertowers 3 :elevation 1200))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(TOWN...)
;;;
;;; Example 2
;;; define clown structure type
;;; this structure uses a nonstandard prefix
;;;
 (defstruct (clown (:conc-name bozo-))
             (nose-color 'red)         
             frizzy-hair-p polkadots) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  CLOWN
 (setq funny-clown (make-clown)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(CLOWN)
;use non-default reader name
 (bozo-nose-color funny-clown) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  RED        
 (defstruct (klown (:constructor make-up-klown) ;similar def using other
             (:copier clone-klown)              ;customizing keywords
             (:predicate is-a-bozo-p))
             nose-color frizzy-hair-p polkadots) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  klown
;custom constructor now exists
 (fboundp 'make-up-klown) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
;;;
;;; Example 3
;;; define a vehicle structure type
;;; then define a truck structure type that includes 
;;; the vehicle structure
;;;
 (defstruct vehicle name year (diesel t :read-only t)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  VEHICLE
 (defstruct (truck (:include vehicle (year 79)))
             load-limit                          
             (axles 6)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  TRUCK
 (setq x (make-truck :name 'mac :diesel t :load-limit 17))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(TRUCK...)
;vehicle readers work on trucks
 (vehicle-name x)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  MAC
;default taken from :include clause 
 (vehicle-year x)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 79 
 (defstruct (pickup (:include truck))     ;pickup type includes truck
             camper long-bed four-wheel-drive) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  PICKUP
 (setq x (make-pickup :name 'king :long-bed t)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #S(PICKUP...)
;:include default inherited
 (pickup-year x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 79
;;;
;;; Example 4
;;; use of BOA constructors
;;;
 (defstruct (dfs-boa                      ;BOA constructors
               (:constructor make-dfs-boa (a b c)) 
               (:constructor create-dfs-boa
                 (a &optional b (c 'cc) &rest d &aux e (f 'ff))))
             a b c d e f) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  DFS-BOA
;a, b, and c set by position, and the rest are uninitialized
 (setq x (make-dfs-boa 1 2 3)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #(DFS-BOA...)
 (dfs-boa-a x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 1
;a and b set, c and f defaulted
 (setq x (create-dfs-boa 1 2)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #(DFS-BOA...)
 (dfs-boa-b x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 2
 (eq (dfs-boa-c x) 'cc) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I><A HREF="../glossary/t.htm#true">true</A></I>
;a, b, and c set, and the rest are collected into d
 (setq x (create-dfs-boa 1 2 3 4 5 6)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> #(DFS-BOA...)
 (dfs-boa-d x) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (4 5 6)
</PRE>

<P ID="232">
<DT><B>Exceptional Situations:</B><DD>



If any two slot names (whether present directly or inherited by the <TT>:include</TT> option)
are the <I><A HREF="../glossary/s.htm#same">same</A></I> under <A HREF="stringst.htm"><B>string=</B></A>,
<A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> should signal an error of <I><A HREF="../glossary/t.htm#type">type</A></I> <A HREF="program-.htm"><B>program-error</B></A>.


<P ID="233">

The consequences are undefined if the <I>included-structure-name</I> 
does not name a <I>structure type</I>.


<P ID="234">
<DT><B>See Also:</B><DD>

<A HREF="document.htm"><B>documentation</B></A>,
<A HREF="print-ob.htm"><B>print-object</B></A>,
<A HREF="document.htm"><B>setf</B></A>,
<A HREF="subtypep.htm"><B>subtypep</B></A>,
<A HREF="type-of.htm"><B>type-of</B></A>,
<A HREF="typep.htm"><B>typep</B></A>,
Section <A HREF="../section/compilat.htm">3.2 Compilation</A>

<P ID="235">
<DT><B>Notes:</B><DD>


The <I>printer-name</I> should observe the values of
such printer-control variables as <A HREF="print-es.htm"><B>*print-escape*</B></A>.

<P ID="236">
The restriction against issuing a warning for type mismatches between
a <I>slot-initform</I> and the corresponding slot's <TT>:type</TT> option is
necessary because a <I>slot-initform</I> must be specified in order to
specify slot options; in some cases, no suitable default may exist.

<P ID="237">
The mechanism by which <A HREF="#DictEntry_defstruct_600"><B>defstruct</B></A> arranges for slot accessors to
be usable with <A HREF="document.htm"><B>setf</B></A> is <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I>; 
for example, it may use <I><A HREF="../glossary/s.htm#setffunction">setf functions</A></I>, <I><A HREF="../glossary/s.htm#setfexpander">setf expanders</A></I>, or
some other <I><A HREF="../glossary/i.htm#implementationdependent">implementation-dependent</A></I> mechanism known to that
<I><A HREF="../glossary/i.htm#implementation">implementation</A></I>'s <I><A HREF="../glossary/c.htm#code">code</A></I> for <A HREF="document.htm"><B>setf</B></A>.

<P ID="238">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="../section/dictio16.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio16.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="copy-str.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
