<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : loop.htm
  representing node       : loop  [ID:NO-517]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:28 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>loop</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_loop_517"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="dolist.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio18.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="loop-fin.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/iteratio.htm">6 Iteration</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio18.htm">6.2 Dictionary of Iteration</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">6.2.4  loop</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Macro</I></FONT></TD>
</TR></TABLE>
<DL>


<P ID="3">


<P ID="4">
<DT><B>Syntax:</B><DD>

The "simple" <A HREF="#DictEntry_loop_517"><B>loop</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I>:

<P ID="5">
<B>loop</B>
<I>{<I>compound-form</I>}*</I>
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>{<I>result</I>}*</I>
<P ID="6">
The "extended" <A HREF="#DictEntry_loop_517"><B>loop</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I>:

<P ID="7">
<B>loop</B>
<I>[<IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>name-clause]
			{<I>variable-clause</I>}*
		        {<I>main-clause</I>}*</I>
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>{<I>result</I>}*</I>
<P ID="8">

name-clause::= <TT>named</TT> <I>name</I><P ID="9">

variable-clause::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>with-clause | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>initial-final | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-clause<P ID="10">

with-clause::= <TT>with</TT> <I>var1</I> [<I>type-spec</I>] [<I>=</I> <I>form1</I>]
 <TT>{</TT><TT>and</TT> <I>var2</I> [<I>type-spec</I>] 
		            [<I>=</I> <I>form2</I>]<TT>}</TT><SUP>*</SUP><P ID="11">

main-clause::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>unconditional    |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>accumulation     |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>conditional      |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>termination-test |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>initial-final<P ID="12">

initial-final::= <TT>initially</TT> {<I>compound-form</I>}<SUP>+</SUP> |  <TT>finally</TT> {<I>compound-form</I>}<SUP>+</SUP><P ID="13">

unconditional::= <TT>{</TT><TT>do</TT> | <TT>doing</TT><TT>}</TT> {<I>compound-form</I>}<SUP>+</SUP> |
 <TT>return</TT> <TT>{</TT><I>form</I> | <TT>it</TT><TT>}</TT><P ID="14">

accumulation::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>list-accumulation | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>numeric-accumulation<P ID="15">

list-accumulation::= <TT>{</TT><TT>collect</TT> | <TT>collecting</TT> |
	<TT>append</TT>  | <TT>appending</TT>  |
	<TT>nconc</TT> | <TT>nconcing</TT><TT>}</TT> <TT>{</TT><I>form</I> | <TT>it</TT><TT>}</TT> <BR>
 [<TT>into</TT> <I>simple-var</I>]<P ID="16">

numeric-accumulation::= <TT>{</TT><TT>count</TT>    | <TT>counting</TT>   |
	<TT>sum</TT>      | <TT>summing</TT>    | <BR>
 &nbsp;<TT>maximize</TT> | <TT>maximizing</TT> |
        <TT>minimize</TT> | <TT>minimizing</TT><TT>}</TT> <TT>{</TT><I>form</I> | <TT>it</TT><TT>}</TT> <BR>
 [<TT>into</TT> <I>simple-var</I>] [<I>type-spec</I>]<P ID="17">

conditional::= <TT>{</TT><TT>if</TT> | <TT>when</TT> | <TT>unless</TT><TT>}</TT> <I>form</I>
         <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>selectable-clause <TT>{</TT><TT>and</TT> <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>selectable-clause<TT>}</TT><SUP>*</SUP> <BR>
 [<TT>else</TT>
         <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>selectable-clause <TT>{</TT><TT>and</TT> <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>selectable-clause<TT>}</TT><SUP>*</SUP>] <BR>
 [<TT>end</TT>]<P ID="18">

selectable-clause::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>unconditional | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>accumulation | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>conditional<P ID="19">

termination-test::= <TT>while</TT>   <I>form</I>  | 
 <TT>until</TT>   <I>form</I>  |
 <TT>repeat</TT>  <I>form</I>  |
 <TT>always</TT>  <I>form</I>  |
 <TT>never</TT>   <I>form</I>  |
 <TT>thereis</TT> <I>form</I><P ID="20">

for-as-clause::= <TT>{</TT><TT>for</TT> | <TT>as</TT><TT>}</TT> <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-subclause
 <TT>{</TT><TT>and</TT> <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-subclause<TT>}</TT><SUP>*</SUP><P ID="21">

for-as-subclause::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-arithmetic  |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-in-list     |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-on-list     |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-equals-then |<BR>
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-across      |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-hash        |
 <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-package<P ID="22">

for-as-arithmetic::= <I>var</I> [<I>type-spec</I>]
			   <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>for-as-arithmetic-subclause<P ID="23">

for-as-arithmetic-subclause::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>arithmetic-up | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>arithmetic-downto | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>arithmetic-downfrom<P ID="24">

arithmetic-up::= [[<TT>{</TT><TT>from</TT> | <TT>upfrom</TT><TT>}</TT> <I>form1</I>               | 
 &nbsp;&nbsp;<TT>{</TT><TT>to</TT> | <TT>upto</TT> | <TT>below</TT><TT>}</TT> <I>form2</I> | 
 &nbsp;&nbsp;<TT>by</TT> <I>form3</I>]]<SUP>+</SUP><P ID="25">

arithmetic-downto::= [[<cl_one><TT>{</TT><TT>from</TT> <I>form1</I><TT>}</TT></cl_one> 				| 
 &nbsp;&nbsp;<cl_one><TT>{</TT><TT>{</TT><TT>downto</TT> | <TT>above</TT><TT>}</TT> <I>form2</I><TT>}</TT></cl_one> | 
 &nbsp;&nbsp;<TT>by</TT> <I>form3</I>]]<P ID="26">

arithmetic-downfrom::= [[<cl_one><TT>{</TT><TT>downfrom</TT> <I>form1</I><TT>}</TT></cl_one> 			 | 
 &nbsp;&nbsp;<TT>{</TT><TT>to</TT> | <TT>downto</TT> | <TT>above</TT><TT>}</TT> <I>form2</I> | 
 &nbsp;&nbsp;<TT>by</TT> <I>form3</I>]]<P ID="27">

for-as-in-list::= <I>var</I> [<I>type-spec</I>]
 <TT>in</TT> <I>form1</I> [<TT>by</TT> <I>step-fun</I>]<P ID="28">

for-as-on-list::= <I>var</I> [<I>type-spec</I>]
 <TT>on</TT> <I>form1</I> [<TT>by</TT> <I>step-fun</I>]<P ID="29">

for-as-equals-then::= <I>var</I> [<I>type-spec</I>]
 <I>=</I> <I>form1</I> [<TT>then</TT> <I>form2</I>]<P ID="30">

for-as-across::= <I>var</I> [<I>type-spec</I>]
 <TT>across</TT> <I>vector</I><P ID="31">

for-as-hash::= <I>var</I> [<I>type-spec</I>]
 <TT>being</TT> <TT>{</TT><TT>each</TT> | <TT>the</TT><TT>}</TT> <BR>
 {<TT>{</TT><TT>hash-key</TT> | <TT>hash-keys</TT><TT>}</TT>
        <TT>{</TT><TT>in</TT> | <TT>of</TT><TT>}</TT> <I>hash-table</I> <BR>
 &nbsp;[<TT>using</TT> (<TT>hash-value</TT> <I>other-var</I>)] | <BR>
 &nbsp;<TT>{</TT><TT>hash-value</TT> | <TT>hash-values</TT><TT>}</TT>
        <TT>{</TT><TT>in</TT> | <TT>of</TT><TT>}</TT> <I>hash-table</I> <BR>
 &nbsp;[<TT>using</TT> (<TT>hash-key</TT> <I>other-var</I>)]}<P ID="32">

for-as-package::= <I>var</I> [<I>type-spec</I>]
 <TT>being</TT> <TT>{</TT><TT>each</TT> | <TT>the</TT><TT>}</TT> 	        <BR>
 {<TT>symbol</TT> | <TT>symbols</TT>		               |<BR>
 &nbsp;<TT>present-symbol</TT> | <TT>present-symbols</TT>           |<BR>
 &nbsp;<TT>external-symbol</TT> | <TT>external-symbols</TT>}  <BR>
 [<TT>{</TT><TT>in</TT> | <TT>of</TT><TT>}</TT> <I>package</I>]<P ID="33">

type-spec::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>simple-type-spec | <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>destructured-type-spec<P ID="34">

simple-type-spec::= <A HREF="fixnum.htm"><B>fixnum</B></A> | <A HREF="float.htm"><B>float</B></A> | <A HREF="t.htm"><B>t</B></A> | <A HREF="nil.htm"><B>nil</B></A><P ID="35">

destructured-type-spec::= <TT>of-type</TT> <I>d-type-spec</I><P ID="36">

d-type-spec::= <I>type-specifier</I> | <TT>(<I>d-type-spec</I> . <I>d-type-spec</I>)</TT><P ID="37">

var::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec<P ID="38">

var1::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec<P ID="39">

var2::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec<P ID="40">

other-var::= <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec<P ID="41">

d-var-spec::= <I>simple-var</I> | 
		    <A HREF="nil.htm"><B>nil</B></A>&nbsp;|
		    (<IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec <TT>.</TT> <IMG SRC="../images/downarr.gif" BORDER=0 WIDTH=13 HEIGHT=11>d-var-spec)<P ID="42">

<P ID="43">
<DT><B>Arguments and Values:</B><DD>

<I>compound-form</I> - a <I><A HREF="../glossary/c.htm#compoundform">compound form</A></I>.

<P ID="44">
<I>name</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I>.

<P ID="45">



<I>simple-var</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> (a <I><A HREF="../glossary/v.htm#variable">variable</A></I> name).

<P ID="46">
<I>form</I>, <I>form1</I>, <I>form2</I>, <I>form3</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="47">

<I>step-fun</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I> that evaluates to a <I><A HREF="../glossary/f.htm#function">function</A></I> of one <I><A HREF="../glossary/a.htm#argument">argument</A></I>.


<P ID="48">
<I>vector</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I> that evaluates to a <I><A HREF="../glossary/v.htm#vector">vector</A></I>.

<P ID="49">
<I>hash-table</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I> that evaluates to a <I><A HREF="../glossary/h.htm#hashtable">hash table</A></I>.

<P ID="50">
<I>package</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I> that evaluates to a <I><A HREF="../glossary/p.htm#packagedesignator">package designator</A></I>.

<P ID="51">
<I>type-specifier</I> - a <I><A HREF="../glossary/t.htm#typespecifier">type specifier</A></I>.
  This might be either an <I><A HREF="../glossary/a.htm#atomictypespecifier">atomic type specifier</A></I> or a <I><A HREF="../glossary/c.htm#compoundtypespecifier">compound type specifier</A></I>,
  which introduces some additional complications to proper parsing in the face of 
  destructuring; for further information, see Section <A HREF="../subsubse/destruct.htm">6.1.1.7 Destructuring</A>.

<P ID="52">
<I>result</I> - an <I><A HREF="../glossary/o.htm#object">object</A></I>.

<P ID="53">


<P ID="54">
<DT><B>Description:</B><DD>


For details, see Section <A HREF="../section/theloopf.htm">6.1 The LOOP Facility</A>.

<P ID="55">
<DT><B>Examples:</B><DD>

<PRE ID="56">
;; An example of the simple form of LOOP.
 (defun sqrt-advisor ()
   (loop (format t "~&Number: ")
         (let ((n (parse-integer (read-line) :junk-allowed t)))
           (when (not n) (return))
           (format t "~&The square root of ~D is ~D.~%" n (sqrt n)))))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SQRT-ADVISOR
 (sqrt-advisor)
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>5[Return]</U>
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> The square root of 5 is 2.236068.
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>4[Return]</U>
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> The square root of 4 is 2.
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>done[Return]</U>
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL

;; An example of the extended form of LOOP.
 (defun square-advisor ()
   (loop as n = (progn (format t "~&Number: ")

                       (parse-integer (read-line) :junk-allowed t))
         while n
         do (format t "~&The square of ~D is ~D.~%" n (* n n))))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SQUARE-ADVISOR
 (square-advisor)
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>4[Return]</U>
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> The square of 4 is 16.
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>23[Return]</U>
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> The square of 23 is 529.
<IMG SRC="../images/triangle.gif" BORDER=0 WIDTH=10 HEIGHT=9> Number: <U>done[Return]</U>
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL

;; Another example of the extended form of LOOP.
 (loop for n from 1 to 10
       when (oddp n)
         collect n)
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (1 3 5 7 9)
</PRE>

<P ID="57">
<DT><B>See Also:</B><DD>

<A HREF="dodo.htm"><B>do</B></A>, <A HREF="dolist.htm"><B>dolist</B></A>, <A HREF="dotimes.htm"><B>dotimes</B></A>, 
<A HREF="return.htm"><B>return</B></A>, <A HREF="go.htm"><B>go</B></A>, <A HREF="throw.htm"><B>throw</B></A>,
Section <A HREF="../subsubse/destruct.htm">6.1.1.7 Destructuring</A>

<P ID="58">
<DT><B>Notes:</B><DD>




Except that <A HREF="loop-fin.htm"><B>loop-finish</B></A> cannot be used within a simple <A HREF="#DictEntry_loop_517"><B>loop</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I>,
a simple <A HREF="#DictEntry_loop_517"><B>loop</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I> is related to an extended <A HREF="#DictEntry_loop_517"><B>loop</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I> 
in the following way:

<P ID="59">
<PRE ID="60">
 (loop {<I>compound-form</I>}*) ==(loop do {<I>compound-form</I>}*)
</PRE>

<P ID="61">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="dolist.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio18.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="loop-fin.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
