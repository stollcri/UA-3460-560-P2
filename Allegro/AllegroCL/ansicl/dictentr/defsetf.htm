<!doctype HTML public "-//W3O//DTD W3 HTML 3.2//EN">
<HTML>
<HEAD>

<!-- 
  Document                : defsetf.htm
  representing node       : defsetf  [ID:NO-447]
                 of class : DictEntry  [ID:SC-9]
  Generated by SchemaText : 1.52
  From HSDL source        : ansi cl
  At                      : 09:54:38 23.07.98

  About SchemaText        : http://www.schema.de
-->

<META NAME="GENERATOR" CONTENT="SchemaText 1.40f">
<META NAME="AUTHOR" CONTENT="Franz Inc.">
<META NAME="DATE" CONTENT="23.07.98">
<META NAME="TIME" CONTENT="09:51:09">
<META NAME="VERSION" CONTENT="520">

<TITLE>defsetf</TITLE>
</HEAD>

<BODY BGCOLOR="#FFFFFF">

<table border="0" width="100%" cellpadding="1" cellspacing="0">
  <tr>
    <td bgcolor="#00FFFF"><table border="0" cellpadding="5" cellspacing="3">
      <tr>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/contents.htm"><b>ToC</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/introduction.htm"><b>DocOverview</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/cgide.htm"><b>CGDoc</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/release-notes.htm"><b>RelNotes</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/index.htm"><b>Index</b></a></td>
        <td align="left" bgcolor="#00FFFF"><a href="../../doc/permuted-index.htm"><b>PermutedIndex</b></a></td>
      </tr>
    </table>
    </td>
    <td align="right"><b>Allegro CL</b>
    </td>
  </tr>
</table>

<A NAME="DictEntry_defsetf_447"></A>
<FONT FACE="ARIAL,GENEVA,HELVETICA">
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="define-0.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio19.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="define-s.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>
<TABLE WIDTH="90%"><TR>
<TD WIDTH=5%>&nbsp;</TD>
<TD WIDTH=95%>
<FONT SIZE=-2>
<A HREF="../ansicl.htm"> ANSI Common Lisp</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../chapter/dataandc.htm">5 Data and Control Flow</A>&nbsp;&nbsp;<IMG SRC="../images/a-rgh6b.gif" BORDER=0 WIDTH=6 HEIGHT=6>&nbsp;<A HREF="../section/dictio19.htm">5.3 Dictionary of Data and Control Flow</A>

</FONT>
<P ID="2">
<TABLE BORDER=0 WIDTH="100%">
<TR>
<TD><FONT SIZE="+2">5.3.61  defsetf</FONT></TD>
<TD ALIGN=RIGHT><FONT SIZE="+1"><I>Macro</I></FONT></TD>
</TR></TABLE>
<DL>


<P ID="3">


<P ID="4">
<DT><B>Syntax:</B><DD>

The "short form":

<P ID="5">
<B>defsetf</B>
<I>access-fn update-fn [documentation]</I><BR>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>access-fn</I>
<P ID="6">
The "long form":

<P ID="7">
<B>defsetf</B>
<I>access-fn lambda-list ({<I>store-variable</I>}*)
                          [[{<I>declaration</I>}* <I>|</I> <I>documentation</I>]] {<I>form</I>}*</I><BR>&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> <I>access-fn</I>
<P ID="8">
<DT><B>Arguments and Values:</B><DD>


<I>access-fn</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> which names a <I><A HREF="../glossary/f.htm#function">function</A></I> or a <I><A HREF="../glossary/m.htm#macro">macro</A></I>.

<P ID="9">
<I>update-fn</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> naming a <I><A HREF="../glossary/f.htm#function">function</A></I> or <I><A HREF="../glossary/m.htm#macro">macro</A></I>.

<P ID="10">
<I>lambda-list</I> - a <I><A HREF="../glossary/d.htm#defsetflambdalist">defsetf lambda list</A></I>.

<P ID="11">
<I>store-variable</I> - a <I><A HREF="../glossary/s.htm#symbol">symbol</A></I> (a <I><A HREF="../glossary/v.htm#variable">variable</A></I> <I><A HREF="../glossary/n.htm#name">name</A></I>).

<P ID="12">
<I>declaration</I> - a <A HREF="declare.htm"><B>declare</B></A> <I><A HREF="../glossary/e.htm#expression">expression</A></I>; not evaluated.

<P ID="13">
<I>documentation</I> - a <I><A HREF="../glossary/s.htm#string">string</A></I>; not evaluated.

<P ID="14">
<I>form</I> - a <I><A HREF="../glossary/f.htm#form">form</A></I>.

<P ID="15">
<DT><B>Description:</B><DD>


<A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> defines how to 
<A HREF="setfpset.htm"><B>setf</B></A> a <I><A HREF="../glossary/p.htm#place">place</A></I>
of the form <TT>(<I>access-fn</I> ...)</TT> for relatively simple cases.
(See <A HREF="define-s.htm"><B>define-setf-expander</B></A> for more general access to this facility.)

It must be the case that the <I><A HREF="../glossary/f.htm#function">function</A></I> or <I><A HREF="../glossary/m.htm#macro">macro</A></I> named by <I>access-fn</I> 
evaluates all of its arguments.


<P ID="16">

<A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> may take one of two forms, called the "short form" and the "long form,"
which are distinguished by the <I><A HREF="../glossary/t.htm#type">type</A></I> of the second <I><A HREF="../glossary/a.htm#argument">argument</A></I>.

<P ID="17">
When the short form is used, 

<I>update-fn</I> must name 
a <I><A HREF="../glossary/f.htm#function">function</A></I> (or <I><A HREF="../glossary/m.htm#macro">macro</A></I>) that takes one more argument
than <I>access-fn</I> takes.  When <A HREF="setfpset.htm"><B>setf</B></A> is given a <I><A HREF="../glossary/p.htm#place">place</A></I>
that is a call on <I>access-fn</I>, it expands into
a call on <I>update-fn</I> that is given all the arguments to
<I>access-fn</I> and also, as its last argument, the new value
(which must be returned by <I>update-fn</I> as its value).

<P ID="18">

The long form <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> 


resembles <A HREF="defmacro.htm"><B>defmacro</B></A>.

The <I>lambda-list</I> describes the arguments of <I>access-fn</I>. 
The <I>store-variables</I> describe the
value 

or values 

to be stored into the <I><A HREF="../glossary/p.htm#place">place</A></I>.
The <I>body</I> must
compute the expansion of a <A HREF="setfpset.htm"><B>setf</B></A> of a call on <I>access-fn</I>.




The expansion function is defined in the same <I><A HREF="../glossary/l.htm#lexicalenvironment">lexical environment</A></I>
in which the <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I> appears.


<P ID="19">

During the evaluation of the
<I>forms</I>, the variables in the <I>lambda-list</I> and the

<I>store-variables</I>
are bound to names of temporary variables,
generated as if by <A HREF="gensym.htm"><B>gensym</B></A>

or <A HREF="gentemp.htm"><B>gentemp</B></A>,
that will be bound by the
expansion of <A HREF="setfpset.htm"><B>setf</B></A> 
to the values of those <I><A HREF="../glossary/s.htm#subform">subforms</A></I>.  This binding
permits the
<I>forms</I> to be written without regard for order-of-evaluation
issues.  <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> arranges for the temporary variables to be
optimized out of the final result in cases where that is possible.  

<P ID="20">

The body code in <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> is implicitly enclosed in a 
<I><A HREF="../glossary/b.htm#block">block</A></I> whose name is 

<I>access-fn</I>


<P ID="21">

<A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> 
ensures that <I><A HREF="../glossary/s.htm#subform">subforms</A></I> 
of the <I><A HREF="../glossary/p.htm#place">place</A></I> are evaluated exactly once.

<P ID="22">
<I>Documentation</I> is attached to <I>access-fn</I> as a <I><A HREF="../glossary/d.htm#documentationstring">documentation string</A></I>
of kind <A HREF="setfpset.htm"><B>setf</B></A>.

<P ID="23">


If a <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> <I><A HREF="../glossary/f.htm#form">form</A></I> appears as a <I><A HREF="../glossary/t.htm#toplevelform">top level form</A></I>,
the <I><A HREF="../glossary/c.htm#compiler">compiler</A></I> must make the <I><A HREF="../glossary/s.htm#setfexpander">setf expander</A></I> available so that
it may be used to expand calls to <A HREF="setfpset.htm"><B>setf</B></A> later on in the <I><A HREF="../glossary/f.htm#file">file</A></I>.
Users must ensure that the <I>forms</I>, if any, can be evaluated
at compile time if the <I>access-fn</I> is used in a <I><A HREF="../glossary/p.htm#place">place</A></I>
later in the same <I><A HREF="../glossary/f.htm#file">file</A></I>.
The <I><A HREF="../glossary/c.htm#compiler">compiler</A></I> must make these <I><A HREF="../glossary/s.htm#setfexpander">setf expanders</A></I> available to 
compile-time calls to <A HREF="get-setf.htm"><B>get-setf-expansion</B></A> when its <I>environment</I> 
argument is a value received as the <I><A HREF="../glossary/e.htm#environmentparameter">environment parameter</A></I> of a <I><A HREF="../glossary/m.htm#macro">macro</A></I>.


<P ID="24">
<DT><B>Examples:</B><DD>

The effect of

<P ID="25">
<PRE ID="26">
 (defsetf symbol-value set)
</PRE>
is built into the <I>Common Lisp</I>&nbsp;system.
This causes the form <TT>(setf (symbol-value foo) fu)</TT>
to expand into <TT>(set foo fu)</TT>.

<P ID="27">

Note that

<P ID="28">
<PRE ID="29">
 (defsetf car rplaca)
</PRE>
would be incorrect because <A HREF="rplacarp.htm"><B>rplaca</B></A> does not return its last argument.

<P ID="30">
<PRE ID="31">
 (defun middleguy (x) (nth (truncate (1- (list-length x)) 2) x)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  MIDDLEGUY
 (defun set-middleguy (x v)
    (unless (null x)
      (rplaca (nthcdr (truncate (1- (list-length x)) 2) x) v))
    v) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SET-MIDDLEGUY
 (defsetf middleguy set-middleguy) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  MIDDLEGUY
 (setq a (list 'a 'b 'c 'd)
       b (list 'x)
       c (list 1 2 3 (list 4 5 6) 7 8 9)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (1 2 3 (4 5 6) 7 8 9)
 (setf (middleguy a) 3) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 3
 (setf (middleguy b) 7) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 7
 (setf (middleguy (middleguy c)) 'middleguy-symbol) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  MIDDLEGUY-SYMBOL
 a <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (A 3 C D)
 b <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (7)
 c <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (1 2 3 (4 MIDDLEGUY-SYMBOL 6) 7 8 9)
</PRE>

<P ID="32">

An example of the use of the long form of <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A>:

<P ID="33">
<PRE ID="34">
 (defsetf subseq (sequence start &optional end) (new-sequence)
   `(progn (replace ,sequence ,new-sequence
                    :start1 ,start :end1 ,end)
           ,new-sequence)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SUBSEQ
</PRE>

<P ID="35">
<PRE ID="36">
 (defvar *xy* (make-array '(10 10)))
 (defun xy (&key ((x x) 0) ((y y) 0)) (aref *xy* x y)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  XY
 (defun set-xy (new-value &key ((x x) 0) ((y y) 0))
   (setf (aref *xy* x y) new-value)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  SET-XY
 (defsetf xy (&key ((x x) 0) ((y y) 0)) (store)
   `(set-xy ,store 'x ,x 'y ,y)) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  XY
 (get-setf-expansion '(xy a b))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> (#:t0 #:t1),
   (a b),
   (#:store),
   ((lambda (&key ((x #:x)) ((y #:y))) 
      (set-xy #:store 'x #:x 'y #:y))
    #:t0 #:t1),
   (xy #:t0 #:t1)
 (xy 'x 1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9>  NIL
 (setf (xy 'x 1) 1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 1
 (xy 'x 1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 1
 (let ((a 'x) (b 'y))
   (setf (xy a 1 b 2) 3)
   (setf (xy b 5 a 9) 14))
<IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 14
 (xy 'y 0 'x 1) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 1
 (xy 'x 1 'y 2) <IMG SRC="../images/rightarr.gif" BORDER=0 WIDTH=14 HEIGHT=9> 3
</PRE>

<P ID="37">
<DT><B>See Also:</B><DD>

<A HREF="document.htm"><B>documentation</B></A>,
<A HREF="setfpset.htm"><B>setf</B></A>,

<A HREF="define-s.htm"><B>define-setf-expander</B></A>,
<A HREF="get-setf.htm"><B>get-setf-expansion</B></A>,

Section <A HREF="../section/generali.htm">5.1 Generalized Reference</A>,
Section <A HREF="../subsecti/syntacti.htm">3.4.11 Syntactic Interaction of Documentation Strings and Declarations</A>

<P ID="38">
<DT><B>Notes:</B><DD>


<I>forms</I> must include provision
for returning the correct value (the value 
 
or values 
 
of <I>store-variable</I>).  
This is
handled by <I>forms</I> rather than by <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> because
in many cases this value can be returned at no extra cost, by calling a
function that simultaneously stores into the <I><A HREF="../glossary/p.htm#place">place</A></I> and 
returns the correct value.

<P ID="39">
A <A HREF="setfpset.htm"><B>setf</B></A> of a call on <I>access-fn</I> also evaluates
all of <I>access-fn</I>'s arguments; it cannot treat any of them specially.
This means that <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A> 
cannot be used to describe how to store into
a <I><A HREF="../glossary/g.htm#generalizedreference">generalized reference</A></I> to a byte, such as <TT>(ldb field reference)</TT>.

<A HREF="define-s.htm"><B>define-setf-expander</B></A>

is used to handle situations that 
do not fit the restrictions imposed by <A HREF="#DictEntry_defsetf_447"><B>defsetf</B></A>
and gives the user additional control.

<P ID="40">


<P ID="41">
<DT><B>Allegro CL Implementation Details:</B><DD>
 None.</DL>
</TD></TR></TABLE>
<HR NOSHADE>
<A HREF="../ansicl.htm" TARGET="_self"><IMG SRC="../images/a-top12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Home"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>

<A HREF="define-0.htm"><IMG SRC="../images/a-lft12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Previous"></A> 
<A HREF="../section/dictio19.htm" TARGET="_self"><IMG SRC="../images/a-up12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Up"></A> 
<A HREF="define-s.htm"><IMG SRC="../images/a-rgh12b.gif" BORDER=0 WIDTH=12 HEIGHT=12 ALT="Next"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/tableofc.htm" TARGET="_self"><IMG SRC="../images/toc.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Table of Contents"></A><IMG SRC="../images/void16.gif" BORDER=0 WIDTH=16 HEIGHT=16>
<A HREF="../meta/index.htm" TARGET="_self"><IMG SRC="../images/i16.gif" BORDER=0 WIDTH=16 HEIGHT=16 ALT="Index"></A>
<HR NOSHADE>

<SMALL><I><B>&#169; Franz Inc. 1998-2009</b> - File last updated 7-21-2009</I></SMALL>
</FONT>

</BODY>
</HTML>
